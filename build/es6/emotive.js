const concatWithSpaces = (values) => values.join(" ");
const concatWithCommas = (values) => values.join(", ");
function addParams(...params) {
    return params
        .map(value => {
        if (Array.isArray(value)) {
            return "(" + mulParams(...value) + ")";
        }
        return value;
    })
        .join(" + ");
}
function mulParams(...params) {
    return params
        .map(value => {
        if (Array.isArray(value)) {
            return "(" + addParams(...value) + ")";
        }
        return value;
    })
        .join(" * ");
}
const buildDatatype = (unit, nums) => nums.map(num => num + (num ? unit : "")).join(" ");
const buildMethod = (name, params) => {
    return ("(" +
        concatWithCommas(params.map(param => {
            if (Array.isArray(param)) {
                return concatWithSpaces(param.filter(subParam => {
                    return !Array.isArray(subParam);
                }));
            }
            return param;
        })) +
        ")");
};
const buildProperty = (values) => {
    return concatWithSpaces(values.map(value => {
        if (Array.isArray(value)) {
            return concatWithCommas(value.map(subValue => {
                if (Array.isArray(subValue)) {
                    return concatWithSpaces(subValue.filter(subSubValue => {
                        return !Array.isArray(subSubValue);
                    }));
                }
                return subValue;
            }));
        }
        return value;
    }));
};
export const Keyword = {
    _ABOVE: "above",
    _ABSOLUTE: "absolute",
    _ACTIVE: "active",
    _ACTIVEBORDER: "ActiveBorder",
    _ACTIVECAPTION: "ActiveCaption",
    _ADD: "add",
    _AFTER: "after",
    _ALIAS: "alias",
    _ALICEBLUE: "aliceblue",
    _ALL: "all",
    _ALLOW_END: "allow-end",
    _ALL_PETITE_CAPS: "all-petite-caps",
    _ALL_SCROLL: "all-scroll",
    _ALL_SMALL_CAPS: "all-small-caps",
    _ALPHA: "alpha",
    _ALPHABETIC: "alphabetic",
    _ALTERNATE: "alternate",
    _ALTERNATE_REVERSE: "alternate-reverse",
    _ALWAYS: "always",
    _AMP: "amp;",
    _AND: "and",
    _ANGLE: "angle",
    _ANNOTATION: "@annotation",
    _ANTIQUEWHITE: "antiquewhite",
    _APPWORKSPACE: "AppWorkspace",
    _AQUA: "aqua",
    _AQUAMARINE: "aquamarine",
    _AT: "at",
    _AUTO: "auto",
    _AUTO_FILL: "auto-fill",
    _AUTO_FIT: "auto-fit",
    _AUTO_FLOW: "auto-flow",
    _AVAILABLE: "available",
    _AVOID: "avoid",
    _AVOID_COLUMN: "avoid-column",
    _AVOID_PAGE: "avoid-page",
    _AVOID_REGION: "avoid-region",
    _AZURE: "azure",
    _BACKGROUND: "Background",
    _BACKWARDS: "backwards",
    _BALANCE: "balance",
    _BALANCE_ALL: "balance-all",
    _BASELINE: "baseline",
    _BEFORE: "before",
    _BEHIND: "behind",
    _BEIGE: "beige",
    _BELOW: "below",
    _BIDI_OVERRIDE: "bidi-override",
    _BISQUE: "bisque",
    _BLACK: "black",
    _BLANCHEDALMOND: "blanchedalmond",
    _BLANK: "blank",
    _BLINK: "blink",
    _BLOCK: "block",
    _BLOCK_AXIS: "block-axis",
    _BLOCK_END: "block-end",
    _BLOCK_START: "block-start",
    _BLUE: "blue",
    _BLUEVIOLET: "blueviolet",
    _BOLD: "bold",
    _BOLDER: "bolder",
    _BORDER: "border",
    _BORDER_BOX: "border-box",
    _BOTH: "both",
    _BOTTOM: "bottom",
    _BOTTOM_CENTER: "@bottom-center",
    _BOTTOM_LEFT: "@bottom-left",
    _BOTTOM_LEFT_CORNER: "@bottom-left-corner",
    _BOTTOM_RIGHT: "@bottom-right",
    _BOTTOM_RIGHT_CORNER: "@bottom-right-corner",
    _BOX_DECORATION: "box-decoration",
    _BREAK_ALL: "break-all",
    _BREAK_WORD: "break-word",
    _BROWN: "brown",
    _BT: "bt",
    _BURLYWOOD: "burlywood",
    _BUTTON: "button",
    _BUTTONFACE: "ButtonFace",
    _BUTTONHIGHLIGHT: "ButtonHighlight",
    _BUTTONSHADOW: "ButtonShadow",
    _BUTTONTEXT: "ButtonText",
    _BUTTON_ARROW_DOWN: "button-arrow-down",
    _BUTTON_ARROW_NEXT: "button-arrow-next",
    _BUTTON_ARROW_PREVIOUS: "button-arrow-previous",
    _BUTTON_ARROW_UP: "button-arrow-up",
    _BUTTON_BEVEL: "button-bevel",
    _BUTTON_FOCUS: "button-focus",
    _CADETBLUE: "cadetblue",
    _CAPITALIZE: "capitalize",
    _CAPTION: "caption",
    _CAPTIONTEXT: "CaptionText",
    _CARET: "caret",
    _CELL: "cell",
    _CENTER: "center",
    _CENTER_LEFT: "center-left",
    _CENTER_RIGHT: "center-right",
    _CHAINED: "chained",
    _CHARACTER_VARIANT: "@character-variant",
    _CHARTREUSE: "chartreuse",
    _CHECKBOX: "checkbox",
    _CHECKBOX_CONTAINER: "checkbox-container",
    _CHECKBOX_LABEL: "checkbox-label",
    _CHECKMENUITEM: "checkmenuitem",
    _CHOCOLATE: "chocolate",
    _CIRCLE: "circle",
    _CLEAR: "clear",
    _CLIP: "clip",
    _CLONE: "clone",
    _CLOSEST_CORNER: "closest-corner",
    _CLOSEST_SIDE: "closest-side",
    _CLOSE_QUOTE: "close-quote",
    _CM: "cm",
    _COLLAPSE: "collapse",
    _COLOR: "color",
    _COLOR_BURN: "color-burn",
    _COLOR_DODGE: "color-dodge",
    _COLUMN: "column",
    _COLUMN_REVERSE: "column-reverse",
    _COL_RESIZE: "col-resize",
    _COMMON_LIGATURES: "common-ligatures",
    _CONDENSED: "condensed",
    _CONTAIN: "contain",
    _CONTENT: "content",
    _CONTENTS: "contents",
    _CONTENT_BOX: "content-box",
    _CONTEXTUAL: "contextual",
    _CONTEXT_MENU: "context-menu",
    _COPY: "copy",
    _CORAL: "coral",
    _CORNFLOWERBLUE: "cornflowerblue",
    _CORNSILK: "cornsilk",
    _COVER: "cover",
    _CRIMSON: "crimson",
    _CRISP_EDGES: "crisp-edges",
    _CROSSHAIR: "crosshair",
    _CURRENTCOLOR: "currentcolor",
    _CURSIVE: "cursive",
    _CYAN: "cyan",
    _DARKBLUE: "darkblue",
    _DARKCYAN: "darkcyan",
    _DARKEN: "darken",
    _DARKGOLDENROD: "darkgoldenrod",
    _DARKGRAY: "darkgray",
    _DARKGREEN: "darkgreen",
    _DARKGREY: "darkgrey",
    _DARKKHAKI: "darkkhaki",
    _DARKMAGENTA: "darkmagenta",
    _DARKOLIVEGREEN: "darkolivegreen",
    _DARKORANGE: "darkorange",
    _DARKORCHID: "darkorchid",
    _DARKRED: "darkred",
    _DARKSALMON: "darksalmon",
    _DARKSEAGREEN: "darkseagreen",
    _DARKSLATEBLUE: "darkslateblue",
    _DARKSLATEGRAY: "darkslategray",
    _DARKSLATEGREY: "darkslategrey",
    _DARKTURQUOISE: "darkturquoise",
    _DARKVIOLET: "darkviolet",
    _DASHED: "dashed",
    _DECLARATION_LIST: "{\n  <declaration-list>\n}",
    _DEEPPINK: "deeppink",
    _DEEPSKYBLUE: "deepskyblue",
    _DEFAULT: "default",
    _DEFAULT_BUTTON: "default-button",
    _DEG: "deg",
    _DENSE: "dense",
    _DESTINATION_ATOP: "destination-atop",
    _DESTINATION_IN: "destination-in",
    _DESTINATION_OUT: "destination-out",
    _DESTINATION_OVER: "destination-over",
    _DIAGONAL_FRACTIONS: "diagonal-fractions",
    _DIFFERENCE: "difference",
    _DIGITS: "digits",
    _DIMGRAY: "dimgray",
    _DIMGREY: "dimgrey",
    _DISABLED: "disabled",
    _DISCRETIONARY_LIGATURES: "discretionary-ligatures",
    _DODGERBLUE: "dodgerblue",
    _DOT: "dot",
    _DOTTED: "dotted",
    _DOUBLE: "double",
    _DOUBLE_CIRCLE: "double-circle",
    _DRAG: "drag",
    _DUALBUTTON: "dualbutton",
    _EACH_LINE: "each-line",
    _EASE: "ease",
    _EASE_IN: "ease-in",
    _EASE_IN_OUT: "ease-in-out",
    _EASE_OUT: "ease-out",
    _ECONOMY: "economy",
    _EDGES: "edges",
    _ELEMENT: "element",
    _ELLIPSE: "ellipse",
    _ELLIPSIS: "ellipsis",
    _EM: "em",
    _EMBED: "embed",
    _ENABLED: "enabled",
    _END: "end",
    _EVEN: "even",
    _EVENODD: "evenodd",
    _EW_RESIZE: "ew-resize",
    _EX: "ex",
    _EXACT: "exact",
    _EXCLUDE: "exclude",
    _EXCLUSION: "exclusion",
    _EXPANDED: "expanded",
    _EXTRA_CONDENSED: "extra-condensed",
    _EXTRA_EXPANDED: "extra-expanded",
    _E_RESIZE: "e-resize",
    _FALSE: "false",
    _FANTASY: "fantasy",
    _FARTHEST_CORNER: "farthest-corner",
    _FARTHEST_SIDE: "farthest-side",
    _FAR_LEFT: "far-left",
    _FAR_RIGHT: "far-right",
    _FEATURE_VALUE_DECLARATION_LIST: "{\n  <feature-value-declaration-list>\n}",
    _FILL: "fill",
    _FILLED: "filled",
    _FILL_AVAILABLE: "fill-available",
    _FILL_BOX: "fill-box",
    _FILL_OPACITY: "fill-opacity",
    _FIREBRICK: "firebrick",
    _FIRST: "first",
    _FIRST_LETTER: "first-letter",
    _FIT_CONTENT: "fit-content",
    _FIXED: "fixed",
    _FLAT: "flat",
    _FLEX: "flex",
    _FLEX_END: "flex-end",
    _FLEX_START: "flex-start",
    _FLIP: "flip",
    _FLORALWHITE: "floralwhite",
    _FLOW: "flow",
    _FLOW_ROOT: "flow-root",
    _FORCE_END: "force-end",
    _FORESTGREEN: "forestgreen",
    _FORWARDS: "forwards",
    _FREQUENCY: "frequency",
    _FROM: "from",
    _FROM_IMAGE: "from-image",
    _FUCHSIA: "fuchsia",
    _FULL_WIDTH: "full-width",
    _GAINSBORO: "gainsboro",
    _GEOMETRICPRECISION: "geometricPrecision",
    _GHOSTWHITE: "ghostwhite",
    _GOLD: "gold",
    _GOLDENROD: "goldenrod",
    _GRAB: "grab",
    _GRABBING: "grabbing",
    _GRAD: "grad",
    _GRAY: "gray",
    _GRAYTEXT: "GrayText",
    _GREEN: "green",
    _GREENYELLOW: "greenyellow",
    _GREY: "grey",
    _GRID: "grid",
    _GRIPPERS: "grippers",
    _GROOVE: "groove",
    _GROUPBOX: "groupbox",
    _HANGING: "hanging",
    _HARD_LIGHT: "hard-light",
    _HELP: "help",
    _HIDDEN: "hidden",
    _HIDE: "hide",
    _HIGHLIGHT: "Highlight",
    _HIGHLIGHTTEXT: "HighlightText",
    _HISTORICAL_FORMS: "historical-forms",
    _HISTORICAL_LIGATURES: "historical-ligatures",
    _HONEYDEW: "honeydew",
    _HORIZONTAL: "horizontal",
    _HORIZONTAL_TB: "horizontal-tb",
    _HOTPINK: "hotpink",
    _HUE: "hue",
    _HZ: "Hz",
    _I: "i",
    _ICON: "icon",
    _IDEOGRAPHIC: "ideographic",
    _IDEOGRAPH_ALPHA: "ideograph-alpha",
    _IDEOGRAPH_NUMERIC: "ideograph-numeric",
    _IDEOGRAPH_PARENTHESIS: "ideograph-parenthesis",
    _IDEOGRAPH_SPACE: "ideograph-space",
    _IGNORE: "ignore",
    _IN: "in",
    _INACTIVE: "inactive",
    _INACTIVEBORDER: "InactiveBorder",
    _INACTIVECAPTION: "InactiveCaption",
    _INACTIVECAPTIONTEXT: "InactiveCaptionText",
    _INDIANRED: "indianred",
    _INDIGO: "indigo",
    _INFINITE: "infinite",
    _INFOBACKGROUND: "InfoBackground",
    _INFOTEXT: "InfoText",
    _INHERIT: "inherit",
    _INITIAL: "initial",
    _INLINE: "inline",
    _INLINE_AXIS: "inline-axis",
    _INLINE_BLOCK: "inline-block",
    _INLINE_END: "inline-end",
    _INLINE_FLEX: "inline-flex",
    _INLINE_GRID: "inline-grid",
    _INLINE_LIST_ITEM: "inline-list-item",
    _INLINE_START: "inline-start",
    _INLINE_TABLE: "inline-table",
    _INNER_SPIN_BUTTON: "inner-spin-button",
    _INSET: "inset",
    _INSIDE: "inside",
    _INTEGER: "integer",
    _INTERSECT: "intersect",
    _INTER_CHARACTER: "inter-character",
    _INTER_WORD: "inter-word",
    _INVERT: "invert",
    _ISOLATE: "isolate",
    _ISOLATE_OVERRIDE: "isolate-override",
    _ITALIC: "italic",
    _IVORY: "ivory",
    _JIS04: "jis04",
    _JIS78: "jis78",
    _JIS83: "jis83",
    _JIS90: "jis90",
    _JUSTIFY: "justify",
    _KEEP_ALL: "keep-all",
    _KHAKI: "khaki",
    _KHZ: "kHz",
    _LARGE: "large",
    _LARGER: "larger",
    _LAST: "last",
    _LAVENDER: "lavender",
    _LAVENDERBLUSH: "lavenderblush",
    _LAWNGREEN: "lawngreen",
    _LAYOUT: "layout",
    _LEADING_SPACES: "leading-spaces",
    _LEFT: "left",
    _LEFTWARDS: "leftwards",
    _LEFT_BOTTOM: "@left-bottom",
    _LEFT_MIDDLE: "@left-middle",
    _LEFT_SIDE: "left-side",
    _LEFT_TOP: "@left-top",
    _LEGACY: "legacy",
    _LEMONCHIFFON: "lemonchiffon",
    _LENGTH: "length",
    _LIGHTBLUE: "lightblue",
    _LIGHTCORAL: "lightcoral",
    _LIGHTCYAN: "lightcyan",
    _LIGHTEN: "lighten",
    _LIGHTER: "lighter",
    _LIGHTGOLDENRODYELLOW: "lightgoldenrodyellow",
    _LIGHTGRAY: "lightgray",
    _LIGHTGREEN: "lightgreen",
    _LIGHTGREY: "lightgrey",
    _LIGHTPINK: "lightpink",
    _LIGHTSALMON: "lightsalmon",
    _LIGHTSEAGREEN: "lightseagreen",
    _LIGHTSKYBLUE: "lightskyblue",
    _LIGHTSLATEGRAY: "lightslategray",
    _LIGHTSLATEGREY: "lightslategrey",
    _LIGHTSTEELBLUE: "lightsteelblue",
    _LIGHTYELLOW: "lightyellow",
    _LIME: "lime",
    _LIMEGREEN: "limegreen",
    _LINEAR: "linear",
    _LINEN: "linen",
    _LINE_THROUGH: "line-through",
    _LINING_NUMS: "lining-nums",
    _LISTBOX: "listbox",
    _LISTITEM: "listitem",
    _LIST_ITEM: "list-item",
    _LOCAL: "local",
    _LOOSE: "loose",
    _LOWERCASE: "lowercase",
    _LR: "lr",
    _LTR: "ltr",
    _LUMINANCE: "luminance",
    _LUMINOSITY: "luminosity",
    _MAGENTA: "magenta",
    _MANDATORY: "mandatory",
    _MANIPULATION: "manipulation",
    _MANUAL: "manual",
    _MARGIN_BOX: "margin-box",
    _MARKERS: "markers",
    _MAROON: "maroon",
    _MATCH_PARENT: "match-parent",
    _MATCH_SOURCE: "match-source",
    _MAXIMUM: "maximum",
    _MAX_CONTENT: "max-content",
    _MEDIA_CONTROLS_BACKGROUND: "media-controls-background",
    _MEDIA_CONTROLS_FULLSCREEN_BACKGROUND: "media-controls-fullscreen-background",
    _MEDIA_CURRENT_TIME_DISPLAY: "media-current-time-display",
    _MEDIA_ENTER_FULLSCREEN_BUTTON: "media-enter-fullscreen-button",
    _MEDIA_EXIT_FULLSCREEN_BUTTON: "media-exit-fullscreen-button",
    _MEDIA_FULLSCREEN_BUTTON: "media-fullscreen-button",
    _MEDIA_MUTE_BUTTON: "media-mute-button",
    _MEDIA_OVERLAY_PLAY_BUTTON: "media-overlay-play-button",
    _MEDIA_PLAY_BUTTON: "media-play-button",
    _MEDIA_SEEK_BACK_BUTTON: "media-seek-back-button",
    _MEDIA_SEEK_FORWARD_BUTTON: "media-seek-forward-button",
    _MEDIA_SLIDER: "media-slider",
    _MEDIA_SLIDERTHUMB: "media-sliderthumb",
    _MEDIA_TIME_REMAINING_DISPLAY: "media-time-remaining-display",
    _MEDIA_TOGGLE_CLOSED_CAPTIONS_BUTTON: "media-toggle-closed-captions-button",
    _MEDIA_VOLUME_SLIDER: "media-volume-slider",
    _MEDIA_VOLUME_SLIDERTHUMB: "media-volume-sliderthumb",
    _MEDIA_VOLUME_SLIDER_CONTAINER: "media-volume-slider-container",
    _MEDIUM: "medium",
    _MEDIUMAQUAMARINE: "mediumaquamarine",
    _MEDIUMBLUE: "mediumblue",
    _MEDIUMORCHID: "mediumorchid",
    _MEDIUMPURPLE: "mediumpurple",
    _MEDIUMSEAGREEN: "mediumseagreen",
    _MEDIUMSLATEBLUE: "mediumslateblue",
    _MEDIUMSPRINGGREEN: "mediumspringgreen",
    _MEDIUMTURQUOISE: "mediumturquoise",
    _MEDIUMVIOLETRED: "mediumvioletred",
    _MENU: "menu",
    _MENUARROW: "menuarrow",
    _MENUBAR: "menubar",
    _MENUCHECKBOX: "menucheckbox",
    _MENUIMAGE: "menuimage",
    _MENUITEM: "menuitem",
    _MENUITEMTEXT: "menuitemtext",
    _MENULIST: "menulist",
    _MENULIST_BUTTON: "menulist-button",
    _MENULIST_TEXT: "menulist-text",
    _MENULIST_TEXTFIELD: "menulist-textfield",
    _MENUPOPUP: "menupopup",
    _MENURADIO: "menuradio",
    _MENUSEPARATOR: "menuseparator",
    _MENUTEXT: "MenuText",
    _MESSAGE_BOX: "message-box",
    _METER: "meter",
    _METERBAR: "meterbar",
    _METERCHUNK: "meterchunk",
    _MIDDLE: "middle",
    _MIDNIGHTBLUE: "midnightblue",
    _MINTCREAM: "mintcream",
    _MIN_CONTENT: "min-content",
    _MISTYROSE: "mistyrose",
    _MIXED: "mixed",
    _MM: "mm",
    _MOCCASIN: "moccasin",
    _MONOSPACE: "monospace",
    _MOVE: "move",
    _MOZ_MAC_UNIFIED_TOOLBAR: "-moz-mac-unified-toolbar",
    _MOZ_WINDOW_BUTTON_BOX: "-moz-window-button-box",
    _MOZ_WINDOW_BUTTON_BOX_MAXIMIZED: "-moz-window-button-box-maximized",
    _MOZ_WINDOW_BUTTON_CLOSE: "-moz-window-button-close",
    _MOZ_WINDOW_BUTTON_MAXIMIZE: "-moz-window-button-maximize",
    _MOZ_WINDOW_BUTTON_MINIMIZE: "-moz-window-button-minimize",
    _MOZ_WINDOW_BUTTON_RESTORE: "-moz-window-button-restore",
    _MOZ_WINDOW_FRAME_BOTTOM: "-moz-window-frame-bottom",
    _MOZ_WINDOW_FRAME_LEFT: "-moz-window-frame-left",
    _MOZ_WINDOW_FRAME_RIGHT: "-moz-window-frame-right",
    _MOZ_WINDOW_TITLEBAR: "-moz-window-titlebar",
    _MOZ_WINDOW_TITLEBAR_MAXIMIZED: "-moz-window-titlebar-maximized",
    _MOZ_WIN_BORDERLESS_GLASS: "-moz-win-borderless-glass",
    _MOZ_WIN_BROWSERTABBAR_TOOLBOX: "-moz-win-browsertabbar-toolbox",
    _MOZ_WIN_COMMUNICATIONSTEXT: "-moz-win-communicationstext",
    _MOZ_WIN_COMMUNICATIONS_TOOLBOX: "-moz-win-communications-toolbox",
    _MOZ_WIN_EXCLUDE_GLASS: "-moz-win-exclude-glass",
    _MOZ_WIN_GLASS: "-moz-win-glass",
    _MOZ_WIN_MEDIATEXT: "-moz-win-mediatext",
    _MOZ_WIN_MEDIA_TOOLBOX: "-moz-win-media-toolbox",
    _MS: "ms",
    _MS_AUTOHIDING_SCROLLBAR: "-ms-autohiding-scrollbar",
    _MULTIPLE: "multiple",
    _MULTIPLY: "multiply",
    _NAVAJOWHITE: "navajowhite",
    _NAVY: "navy",
    _NESW_RESIZE: "nesw-resize",
    _NE_RESIZE: "ne-resize",
    _NONE: "none",
    _NONZERO: "nonzero",
    _NORMAL: "normal",
    _NOT: "not",
    _NOT_ALLOWED: "not-allowed",
    _NOWRAP: "nowrap",
    _NO_CLIP: "no-clip",
    _NO_CLOSE_QUOTE: "no-close-quote",
    _NO_COMMON_LIGATURES: "no-common-ligatures",
    _NO_CONTEXTUAL: "no-contextual",
    _NO_DISCRETIONARY_LIGATURES: "no-discretionary-ligatures",
    _NO_DRAG: "no-drag",
    _NO_DROP: "no-drop",
    _NO_HISTORICAL_LIGATURES: "no-historical-ligatures",
    _NO_LIMIT: "no-limit",
    _NO_OPEN_QUOTE: "no-open-quote",
    _NO_REPEAT: "no-repeat",
    _NS_RESIZE: "ns-resize",
    _NUMBER: "number",
    _NWSE_RESIZE: "nwse-resize",
    _NW_RESIZE: "nw-resize",
    _N_RESIZE: "n-resize",
    _OBJECTS: "objects",
    _OBLIQUE: "oblique",
    _ODD: "odd",
    _OFF: "off",
    _OLDLACE: "oldlace",
    _OLDSTYLE_NUMS: "oldstyle-nums",
    _OLIVE: "olive",
    _OLIVEDRAB: "olivedrab",
    _ON: "on",
    _ONLY: "only",
    _OPEN: "open",
    _OPEN_QUOTE: "open-quote",
    _OPTIMIZELEGIBILITY: "optimizeLegibility",
    _OPTIMIZESPEED: "optimizeSpeed",
    _OR: "or",
    _ORANGE: "orange",
    _ORANGERED: "orangered",
    _ORCHID: "orchid",
    _ORDINAL: "ordinal",
    _ORNAMENTS: "@ornaments",
    _OUTSET: "outset",
    _OUTSIDE: "outside",
    _OVER: "over",
    _OVERLAY: "overlay",
    _OVERLINE: "overline",
    _PADDING: "padding",
    _PADDING_BOX: "padding-box",
    _PAGE: "page",
    _PAINT: "paint",
    _PAINTED: "painted",
    _PALEGOLDENROD: "palegoldenrod",
    _PALEGREEN: "palegreen",
    _PALETURQUOISE: "paleturquoise",
    _PALEVIOLETRED: "palevioletred",
    _PAN_DOWN: "pan-down",
    _PAN_LEFT: "pan-left",
    _PAN_RIGHT: "pan-right",
    _PAN_UP: "pan-up",
    _PAN_X: "pan-x",
    _PAN_Y: "pan-y",
    _PAPAYAWHIP: "papayawhip",
    _PAUSED: "paused",
    _PC: "pc",
    _PEACHPUFF: "peachpuff",
    _PERU: "peru",
    _PETITE_CAPS: "petite-caps",
    _PINCH_ZOOM: "pinch-zoom",
    _PINK: "pink",
    _PIXELATED: "pixelated",
    _PLAINTEXT: "plaintext",
    _PLUM: "plum",
    _POINTER: "pointer",
    _POWDERBLUE: "powderblue",
    _PRE: "pre",
    _PRESERVE_3D: "preserve-3d",
    _PRE_LINE: "pre-line",
    _PRE_WRAP: "pre-wrap",
    _PROGRESS: "progress",
    _PROGRESSBAR: "progressbar",
    _PROGRESSBAR_VERTICAL: "progressbar-vertical",
    _PROGRESSCHUNK: "progresschunk",
    _PROGRESSCHUNK_VERTICAL: "progresschunk-vertical",
    _PROGRESS_BAR: "progress-bar",
    _PROGRESS_BAR_VALUE: "progress-bar-value",
    _PROPORTIONAL_NUMS: "proportional-nums",
    _PROPORTIONAL_WIDTH: "proportional-width",
    _PROXIMITY: "proximity",
    _PT: "pt",
    _PURPLE: "purple",
    _PUSH_BUTTON: "push-button",
    _PX: "px",
    _Q: "q",
    _RAD: "rad",
    _RADIO: "radio",
    _RADIOMENUITEM: "radiomenuitem",
    _RADIO_CONTAINER: "radio-container",
    _RADIO_LABEL: "radio-label",
    _RAILED: "railed",
    _RANGE: "range",
    _RANGE_THUMB: "range-thumb",
    _READ_ONLY: "read-only",
    _READ_WRITE: "read-write",
    _READ_WRITE_PLAINTEXT_ONLY: "read-write-plaintext-only",
    _REBECCAPURPLE: "rebeccapurple",
    _RECTO: "recto",
    _RED: "red",
    _REGION: "region",
    _RELATIVE: "relative",
    _REM: "rem",
    _REPEAT: "repeat",
    _REPEAT_X: "repeat-x",
    _REPEAT_Y: "repeat-y",
    _RESET: "reset",
    _RESIZER: "resizer",
    _RESIZERPANEL: "resizerpanel",
    _REVERSE: "reverse",
    _REVERT: "revert",
    _RIDGE: "ridge",
    _RIGHT: "right",
    _RIGHTWARDS: "rightwards",
    _RIGHT_BOTTOM: "@right-bottom",
    _RIGHT_MIDDLE: "@right-middle",
    _RIGHT_SIDE: "right-side",
    _RIGHT_TOP: "@right-top",
    _RL: "rl",
    _ROSYBROWN: "rosybrown",
    _ROUND: "round",
    _ROW: "row",
    _ROW_RESIZE: "row-resize",
    _ROW_REVERSE: "row-reverse",
    _ROYALBLUE: "royalblue",
    _RTL: "rtl",
    _RUBY: "ruby",
    _RUBY_BASE: "ruby-base",
    _RUBY_BASE_CONTAINER: "ruby-base-container",
    _RUBY_TEXT: "ruby-text",
    _RUBY_TEXT_CONTAINER: "ruby-text-container",
    _RUNNING: "running",
    _RUN_IN: "run-in",
    _S: "s",
    _SADDLEBROWN: "saddlebrown",
    _SAFE: "safe",
    _SALMON: "salmon",
    _SANDYBROWN: "sandybrown",
    _SANS_SERIF: "sans-serif",
    _SATURATION: "saturation",
    _SCALETHUMBEND: "scalethumbend",
    _SCALETHUMBSTART: "scalethumbstart",
    _SCALETHUMBTICK: "scalethumbtick",
    _SCALETHUMB_HORIZONTAL: "scalethumb-horizontal",
    _SCALETHUMB_VERTICAL: "scalethumb-vertical",
    _SCALE_DOWN: "scale-down",
    _SCALE_HORIZONTAL: "scale-horizontal",
    _SCALE_VERTICAL: "scale-vertical",
    _SCREEN: "screen",
    _SCROLL: "scroll",
    _SCROLLBAR: "scrollbar",
    _SCROLLBARBUTTON_DOWN: "scrollbarbutton-down",
    _SCROLLBARBUTTON_LEFT: "scrollbarbutton-left",
    _SCROLLBARBUTTON_RIGHT: "scrollbarbutton-right",
    _SCROLLBARBUTTON_UP: "scrollbarbutton-up",
    _SCROLLBARTHUMB_HORIZONTAL: "scrollbarthumb-horizontal",
    _SCROLLBARTHUMB_VERTICAL: "scrollbarthumb-vertical",
    _SCROLLBARTRACK_HORIZONTAL: "scrollbartrack-horizontal",
    _SCROLLBARTRACK_VERTICAL: "scrollbartrack-vertical",
    _SCROLL_POSITION: "scroll-position",
    _SEAGREEN: "seagreen",
    _SEARCHFIELD: "searchfield",
    _SEARCHFIELD_CANCEL_BUTTON: "searchfield-cancel-button",
    _SEARCHFIELD_DECORATION: "searchfield-decoration",
    _SEARCHFIELD_RESULTS_BUTTON: "searchfield-results-button",
    _SEARCHFIELD_RESULTS_DECORATION: "searchfield-results-decoration",
    _SEASHELL: "seashell",
    _SELECT_AFTER: "select-after",
    _SELECT_ALL: "select-all",
    _SELECT_BEFORE: "select-before",
    _SELECT_MENU: "select-menu",
    _SELECT_SAME: "select-same",
    _SELF_END: "self-end",
    _SELF_START: "self-start",
    _SEMI_CONDENSED: "semi-condensed",
    _SEMI_EXPANDED: "semi-expanded",
    _SEPARATE: "separate",
    _SEPARATOR: "separator",
    _SERIF: "serif",
    _SESAME: "sesame",
    _SE_RESIZE: "se-resize",
    _SHEET: "sheet",
    _SHOW: "show",
    _SIDEWAYS: "sideways",
    _SIDEWAYS_LR: "sideways-lr",
    _SIDEWAYS_RL: "sideways-rl",
    _SIENNA: "sienna",
    _SILVER: "silver",
    _SIMPLIFIED: "simplified",
    _SINGLE: "single",
    _SIZE: "size",
    _SKYBLUE: "skyblue",
    _SLASHED_ZERO: "slashed-zero",
    _SLATEBLUE: "slateblue",
    _SLATEGRAY: "slategray",
    _SLATEGREY: "slategrey",
    _SLICE: "slice",
    _SLIDERTHUMB_HORIZONTAL: "sliderthumb-horizontal",
    _SLIDERTHUMB_VERTICAL: "sliderthumb-vertical",
    _SLIDER_HORIZONTAL: "slider-horizontal",
    _SLIDER_VERTICAL: "slider-vertical",
    _SMALL: "small",
    _SMALLER: "smaller",
    _SMALL_CAPS: "small-caps",
    _SMALL_CAPTION: "small-caption",
    _SMOOTH: "smooth",
    _SNAP: "snap",
    _SNOW: "snow",
    _SOFT_LIGHT: "soft-light",
    _SOLID: "solid",
    _SOURCE_ATOP: "source-atop",
    _SOURCE_IN: "source-in",
    _SOURCE_OUT: "source-out",
    _SOURCE_OVER: "source-over",
    _SPACE: "space",
    _SPACES: "spaces",
    _SPACE_AROUND: "space-around",
    _SPACE_BETWEEN: "space-between",
    _SPACE_EVENLY: "space-evenly",
    _SPAN: "span",
    _SPINNER: "spinner",
    _SPINNER_DOWNBUTTON: "spinner-downbutton",
    _SPINNER_TEXTFIELD: "spinner-textfield",
    _SPINNER_UPBUTTON: "spinner-upbutton",
    _SPLITTER: "splitter",
    _SPRINGGREEN: "springgreen",
    _SQUARE_BUTTON: "square-button",
    _STACKED_FRACTIONS: "stacked-fractions",
    _START: "start",
    _STATIC: "static",
    _STATUSBAR: "statusbar",
    _STATUSBARPANEL: "statusbarpanel",
    _STATUS_BAR: "status-bar",
    _STEELBLUE: "steelblue",
    _STEP_END: "step-end",
    _STEP_START: "step-start",
    _STICKY: "sticky",
    _STRETCH: "stretch",
    _STRETCH_TO_FIT: "stretch-to-fit",
    _STRICT: "strict",
    _STRING: "string",
    _STROKE: "stroke",
    _STROKE_BOX: "stroke-box",
    _STROKE_OPACITY: "stroke-opacity",
    _STYLE: "style",
    _STYLESET: "@styleset",
    _STYLISTIC: "@stylistic",
    _SUB: "sub",
    _SUBTRACT: "subtract",
    _SUPER: "super",
    _SWASH: "@swash",
    _SW_RESIZE: "sw-resize",
    _S_RESIZE: "s-resize",
    _TAB: "tab",
    _TABLE: "table",
    _TABLE_CAPTION: "table-caption",
    _TABLE_CELL: "table-cell",
    _TABLE_COLUMN: "table-column",
    _TABLE_COLUMN_GROUP: "table-column-group",
    _TABLE_FOOTER_GROUP: "table-footer-group",
    _TABLE_HEADER_GROUP: "table-header-group",
    _TABLE_ROW: "table-row",
    _TABLE_ROW_GROUP: "table-row-group",
    _TABPANEL: "tabpanel",
    _TABPANELS: "tabpanels",
    _TABULAR_NUMS: "tabular-nums",
    _TAB_SCROLL_ARROW_BACK: "tab-scroll-arrow-back",
    _TAB_SCROLL_ARROW_FORWARD: "tab-scroll-arrow-forward",
    _TAN: "tan",
    _TB: "tb",
    _TEAL: "teal",
    _TEXT: "text",
    _TEXTAREA: "textarea",
    _TEXTFIELD: "textfield",
    _TEXTFIELD_MULTILINE: "textfield-multiline",
    _TEXT_BOTTOM: "text-bottom",
    _TEXT_TOP: "text-top",
    _THICK: "thick",
    _THIN: "thin",
    _THISTLE: "thistle",
    _THREEDDARKSHADOW: "ThreeDDarkShadow",
    _THREEDFACE: "ThreeDFace",
    _THREEDHIGHLIGHT: "ThreeDHighlight",
    _THREEDLIGHTSHADOW: "ThreeDLightShadow",
    _THREEDSHADOW: "ThreeDShadow",
    _TIME: "time",
    _TITLING_CAPS: "titling-caps",
    _TO: "to",
    _TOMATO: "tomato",
    _TOOLBAR: "toolbar",
    _TOOLBARBUTTON: "toolbarbutton",
    _TOOLBARBUTTON_DROPDOWN: "toolbarbutton-dropdown",
    _TOOLBARGRIPPER: "toolbargripper",
    _TOOLBOX: "toolbox",
    _TOOLTIP: "tooltip",
    _TOP: "top",
    _TOP_CENTER: "@top-center",
    _TOP_LEFT: "@top-left",
    _TOP_LEFT_CORNER: "@top-left-corner",
    _TOP_RIGHT: "@top-right",
    _TOP_RIGHT_CORNER: "@top-right-corner",
    _TOUCH: "touch",
    _TRADITIONAL: "traditional",
    _TRAILING_SPACES: "trailing-spaces",
    _TRANSPARENT: "transparent",
    _TREEHEADER: "treeheader",
    _TREEHEADERCELL: "treeheadercell",
    _TREEHEADERSORTARROW: "treeheadersortarrow",
    _TREEITEM: "treeitem",
    _TREELINE: "treeline",
    _TREETWISTY: "treetwisty",
    _TREETWISTYOPEN: "treetwistyopen",
    _TREEVIEW: "treeview",
    _TRIANGLE: "triangle",
    _TRUE: "true",
    _TURQUOISE: "turquoise",
    _ULTRA_CONDENSED: "ultra-condensed",
    _ULTRA_EXPANDED: "ultra-expanded",
    _UNDER: "under",
    _UNDERLINE: "underline",
    _UNICASE: "unicase",
    _UNSAFE: "unsafe",
    _UNSET: "unset",
    _UPPERCASE: "uppercase",
    _UPRIGHT: "upright",
    _URL: "url",
    _VERSO: "verso",
    _VERTICAL: "vertical",
    _VERTICAL_LR: "vertical-lr",
    _VERTICAL_RL: "vertical-rl",
    _VERTICAL_TEXT: "vertical-text",
    _VERTICAL_TO_HORIZONTAL: "vertical-to-horizontal",
    _VH: "vh",
    _VIEW_BOX: "view-box",
    _VIOLET: "violet",
    _VISIBLE: "visible",
    _VISIBLEFILL: "visibleFill",
    _VISIBLEPAINTED: "visiblePainted",
    _VISIBLESTROKE: "visibleStroke",
    _VMAX: "vmax",
    _VMIN: "vmin",
    _VW: "vw",
    _WAIT: "wait",
    _WAVY: "wavy",
    _WEIGHT: "weight",
    _WHEAT: "wheat",
    _WHITE: "white",
    _WHITESMOKE: "whitesmoke",
    _WINDOW: "Window",
    _WINDOWFRAME: "WindowFrame",
    _WINDOWTEXT: "WindowText",
    _WRAP: "wrap",
    _WRAP_REVERSE: "wrap-reverse",
    _WRITE_ONLY: "write-only",
    _W_RESIZE: "w-resize",
    _X: "x",
    _XOR: "xor",
    _XX_LARGE: "xx-large",
    _XX_SMALL: "xx-small",
    _X_END: "x-end",
    _X_LARGE: "x-large",
    _X_SMALL: "x-small",
    _X_START: "x-start",
    _Y: "y",
    _YELLOW: "yellow",
    _YELLOWGREEN: "yellowgreen",
    _Y_END: "y-end",
    _Y_START: "y-start",
    _Z: "z",
    _ZOOM: "zoom",
    _ZOOM_IN: "zoom-in",
    _ZOOM_OUT: "zoom-out"
};
export const Property = {
    MOZ_APPEARANCE: "-moz-appearance",
    MOZ_BINDING: "-moz-binding",
    MOZ_BORDER_BOTTOM_COLORS: "-moz-border-bottom-colors",
    MOZ_BORDER_LEFT_COLORS: "-moz-border-left-colors",
    MOZ_BORDER_RIGHT_COLORS: "-moz-border-right-colors",
    MOZ_BORDER_TOP_COLORS: "-moz-border-top-colors",
    MOZ_CONTEXT_PROPERTIES: "-moz-context-properties",
    MOZ_FLOAT_EDGE: "-moz-float-edge",
    MOZ_FORCE_BROKEN_IMAGE_ICON: "-moz-force-broken-image-icon",
    MOZ_IMAGE_REGION: "-moz-image-region",
    MOZ_ORIENT: "-moz-orient",
    MOZ_OUTLINE_RADIUS: "-moz-outline-radius",
    MOZ_OUTLINE_RADIUS_BOTTOMLEFT: "-moz-outline-radius-bottomleft",
    MOZ_OUTLINE_RADIUS_BOTTOMRIGHT: "-moz-outline-radius-bottomright",
    MOZ_OUTLINE_RADIUS_TOPLEFT: "-moz-outline-radius-topleft",
    MOZ_OUTLINE_RADIUS_TOPRIGHT: "-moz-outline-radius-topright",
    MOZ_STACK_SIZING: "-moz-stack-sizing",
    MOZ_TEXT_BLINK: "-moz-text-blink",
    MOZ_USER_FOCUS: "-moz-user-focus",
    MOZ_USER_INPUT: "-moz-user-input",
    MOZ_USER_MODIFY: "-moz-user-modify",
    MOZ_WINDOW_DRAGGING: "-moz-window-dragging",
    MOZ_WINDOW_SHADOW: "-moz-window-shadow",
    MS_ACCELERATOR: "-ms-accelerator",
    MS_BLOCK_PROGRESSION: "-ms-block-progression",
    MS_CONTENT_ZOOM_CHAINING: "-ms-content-zoom-chaining",
    MS_CONTENT_ZOOM_LIMIT: "-ms-content-zoom-limit",
    MS_CONTENT_ZOOM_LIMIT_MAX: "-ms-content-zoom-limit-max",
    MS_CONTENT_ZOOM_LIMIT_MIN: "-ms-content-zoom-limit-min",
    MS_CONTENT_ZOOM_SNAP: "-ms-content-zoom-snap",
    MS_CONTENT_ZOOM_SNAP_POINTS: "-ms-content-zoom-snap-points",
    MS_CONTENT_ZOOM_SNAP_TYPE: "-ms-content-zoom-snap-type",
    MS_CONTENT_ZOOMING: "-ms-content-zooming",
    MS_FILTER: "-ms-filter",
    MS_FLOW_FROM: "-ms-flow-from",
    MS_FLOW_INTO: "-ms-flow-into",
    MS_HIGH_CONTRAST_ADJUST: "-ms-high-contrast-adjust",
    MS_HYPHENATE_LIMIT_CHARS: "-ms-hyphenate-limit-chars",
    MS_HYPHENATE_LIMIT_LINES: "-ms-hyphenate-limit-lines",
    MS_HYPHENATE_LIMIT_ZONE: "-ms-hyphenate-limit-zone",
    MS_IME_ALIGN: "-ms-ime-align",
    MS_OVERFLOW_STYLE: "-ms-overflow-style",
    MS_SCROLL_CHAINING: "-ms-scroll-chaining",
    MS_SCROLL_LIMIT: "-ms-scroll-limit",
    MS_SCROLL_LIMIT_X_MAX: "-ms-scroll-limit-x-max",
    MS_SCROLL_LIMIT_X_MIN: "-ms-scroll-limit-x-min",
    MS_SCROLL_LIMIT_Y_MAX: "-ms-scroll-limit-y-max",
    MS_SCROLL_LIMIT_Y_MIN: "-ms-scroll-limit-y-min",
    MS_SCROLL_RAILS: "-ms-scroll-rails",
    MS_SCROLL_SNAP_POINTS_X: "-ms-scroll-snap-points-x",
    MS_SCROLL_SNAP_POINTS_Y: "-ms-scroll-snap-points-y",
    MS_SCROLL_SNAP_TYPE: "-ms-scroll-snap-type",
    MS_SCROLL_SNAP_X: "-ms-scroll-snap-x",
    MS_SCROLL_SNAP_Y: "-ms-scroll-snap-y",
    MS_SCROLL_TRANSLATION: "-ms-scroll-translation",
    MS_SCROLLBAR_3DLIGHT_COLOR: "-ms-scrollbar-3dlight-color",
    MS_SCROLLBAR_ARROW_COLOR: "-ms-scrollbar-arrow-color",
    MS_SCROLLBAR_BASE_COLOR: "-ms-scrollbar-base-color",
    MS_SCROLLBAR_DARKSHADOW_COLOR: "-ms-scrollbar-darkshadow-color",
    MS_SCROLLBAR_FACE_COLOR: "-ms-scrollbar-face-color",
    MS_SCROLLBAR_HIGHLIGHT_COLOR: "-ms-scrollbar-highlight-color",
    MS_SCROLLBAR_SHADOW_COLOR: "-ms-scrollbar-shadow-color",
    MS_SCROLLBAR_TRACK_COLOR: "-ms-scrollbar-track-color",
    MS_TEXT_AUTOSPACE: "-ms-text-autospace",
    MS_TOUCH_SELECT: "-ms-touch-select",
    MS_USER_SELECT: "-ms-user-select",
    MS_WRAP_FLOW: "-ms-wrap-flow",
    MS_WRAP_MARGIN: "-ms-wrap-margin",
    MS_WRAP_THROUGH: "-ms-wrap-through",
    WEBKIT_APPEARANCE: "-webkit-appearance",
    WEBKIT_BORDER_BEFORE: "-webkit-border-before",
    WEBKIT_BORDER_BEFORE_COLOR: "-webkit-border-before-color",
    WEBKIT_BORDER_BEFORE_STYLE: "-webkit-border-before-style",
    WEBKIT_BORDER_BEFORE_WIDTH: "-webkit-border-before-width",
    WEBKIT_BOX_REFLECT: "-webkit-box-reflect",
    WEBKIT_MASK: "-webkit-mask",
    WEBKIT_MASK_ATTACHMENT: "-webkit-mask-attachment",
    WEBKIT_MASK_CLIP: "-webkit-mask-clip",
    WEBKIT_MASK_COMPOSITE: "-webkit-mask-composite",
    WEBKIT_MASK_IMAGE: "-webkit-mask-image",
    WEBKIT_MASK_ORIGIN: "-webkit-mask-origin",
    WEBKIT_MASK_POSITION: "-webkit-mask-position",
    WEBKIT_MASK_POSITION_X: "-webkit-mask-position-x",
    WEBKIT_MASK_POSITION_Y: "-webkit-mask-position-y",
    WEBKIT_MASK_REPEAT: "-webkit-mask-repeat",
    WEBKIT_MASK_REPEAT_X: "-webkit-mask-repeat-x",
    WEBKIT_MASK_REPEAT_Y: "-webkit-mask-repeat-y",
    WEBKIT_MASK_SIZE: "-webkit-mask-size",
    WEBKIT_OVERFLOW_SCROLLING: "-webkit-overflow-scrolling",
    WEBKIT_TAP_HIGHLIGHT_COLOR: "-webkit-tap-highlight-color",
    WEBKIT_TEXT_FILL_COLOR: "-webkit-text-fill-color",
    WEBKIT_TEXT_STROKE: "-webkit-text-stroke",
    WEBKIT_TEXT_STROKE_COLOR: "-webkit-text-stroke-color",
    WEBKIT_TEXT_STROKE_WIDTH: "-webkit-text-stroke-width",
    WEBKIT_TOUCH_CALLOUT: "-webkit-touch-callout",
    WEBKIT_USER_MODIFY: "-webkit-user-modify",
    ALIGN_CONTENT: "align-content",
    ALIGN_ITEMS: "align-items",
    ALIGN_SELF: "align-self",
    ALL: "all",
    ANIMATION: "animation",
    ANIMATION_DELAY: "animation-delay",
    ANIMATION_DIRECTION: "animation-direction",
    ANIMATION_DURATION: "animation-duration",
    ANIMATION_FILL_MODE: "animation-fill-mode",
    ANIMATION_ITERATION_COUNT: "animation-iteration-count",
    ANIMATION_NAME: "animation-name",
    ANIMATION_PLAY_STATE: "animation-play-state",
    ANIMATION_TIMING_FUNCTION: "animation-timing-function",
    APPEARANCE: "appearance",
    AZIMUTH: "azimuth",
    BACKDROP_FILTER: "backdrop-filter",
    BACKFACE_VISIBILITY: "backface-visibility",
    BACKGROUND: "background",
    BACKGROUND_ATTACHMENT: "background-attachment",
    BACKGROUND_BLEND_MODE: "background-blend-mode",
    BACKGROUND_CLIP: "background-clip",
    BACKGROUND_COLOR: "background-color",
    BACKGROUND_IMAGE: "background-image",
    BACKGROUND_ORIGIN: "background-origin",
    BACKGROUND_POSITION: "background-position",
    BACKGROUND_POSITION_X: "background-position-x",
    BACKGROUND_POSITION_Y: "background-position-y",
    BACKGROUND_REPEAT: "background-repeat",
    BACKGROUND_SIZE: "background-size",
    BLOCK_OVERFLOW: "block-overflow",
    BLOCK_SIZE: "block-size",
    BORDER: "border",
    BORDER_BLOCK_END: "border-block-end",
    BORDER_BLOCK_END_COLOR: "border-block-end-color",
    BORDER_BLOCK_END_STYLE: "border-block-end-style",
    BORDER_BLOCK_END_WIDTH: "border-block-end-width",
    BORDER_BLOCK_START: "border-block-start",
    BORDER_BLOCK_START_COLOR: "border-block-start-color",
    BORDER_BLOCK_START_STYLE: "border-block-start-style",
    BORDER_BLOCK_START_WIDTH: "border-block-start-width",
    BORDER_BOTTOM: "border-bottom",
    BORDER_BOTTOM_COLOR: "border-bottom-color",
    BORDER_BOTTOM_LEFT_RADIUS: "border-bottom-left-radius",
    BORDER_BOTTOM_RIGHT_RADIUS: "border-bottom-right-radius",
    BORDER_BOTTOM_STYLE: "border-bottom-style",
    BORDER_BOTTOM_WIDTH: "border-bottom-width",
    BORDER_COLLAPSE: "border-collapse",
    BORDER_COLOR: "border-color",
    BORDER_IMAGE: "border-image",
    BORDER_IMAGE_OUTSET: "border-image-outset",
    BORDER_IMAGE_REPEAT: "border-image-repeat",
    BORDER_IMAGE_SLICE: "border-image-slice",
    BORDER_IMAGE_SOURCE: "border-image-source",
    BORDER_IMAGE_WIDTH: "border-image-width",
    BORDER_INLINE_END: "border-inline-end",
    BORDER_INLINE_END_COLOR: "border-inline-end-color",
    BORDER_INLINE_END_STYLE: "border-inline-end-style",
    BORDER_INLINE_END_WIDTH: "border-inline-end-width",
    BORDER_INLINE_START: "border-inline-start",
    BORDER_INLINE_START_COLOR: "border-inline-start-color",
    BORDER_INLINE_START_STYLE: "border-inline-start-style",
    BORDER_INLINE_START_WIDTH: "border-inline-start-width",
    BORDER_LEFT: "border-left",
    BORDER_LEFT_COLOR: "border-left-color",
    BORDER_LEFT_STYLE: "border-left-style",
    BORDER_LEFT_WIDTH: "border-left-width",
    BORDER_RADIUS: "border-radius",
    BORDER_RIGHT: "border-right",
    BORDER_RIGHT_COLOR: "border-right-color",
    BORDER_RIGHT_STYLE: "border-right-style",
    BORDER_RIGHT_WIDTH: "border-right-width",
    BORDER_SPACING: "border-spacing",
    BORDER_STYLE: "border-style",
    BORDER_TOP: "border-top",
    BORDER_TOP_COLOR: "border-top-color",
    BORDER_TOP_LEFT_RADIUS: "border-top-left-radius",
    BORDER_TOP_RIGHT_RADIUS: "border-top-right-radius",
    BORDER_TOP_STYLE: "border-top-style",
    BORDER_TOP_WIDTH: "border-top-width",
    BORDER_WIDTH: "border-width",
    BOTTOM: "bottom",
    BOX_ALIGN: "box-align",
    BOX_DECORATION_BREAK: "box-decoration-break",
    BOX_DIRECTION: "box-direction",
    BOX_FLEX: "box-flex",
    BOX_FLEX_GROUP: "box-flex-group",
    BOX_LINES: "box-lines",
    BOX_ORDINAL_GROUP: "box-ordinal-group",
    BOX_ORIENT: "box-orient",
    BOX_PACK: "box-pack",
    BOX_SHADOW: "box-shadow",
    BOX_SIZING: "box-sizing",
    BREAK_AFTER: "break-after",
    BREAK_BEFORE: "break-before",
    BREAK_INSIDE: "break-inside",
    CAPTION_SIDE: "caption-side",
    CARET_COLOR: "caret-color",
    CLEAR: "clear",
    CLIP: "clip",
    CLIP_PATH: "clip-path",
    COLOR: "color",
    COLOR_ADJUST: "color-adjust",
    COLUMN_COUNT: "column-count",
    COLUMN_FILL: "column-fill",
    COLUMN_GAP: "column-gap",
    COLUMN_RULE: "column-rule",
    COLUMN_RULE_COLOR: "column-rule-color",
    COLUMN_RULE_STYLE: "column-rule-style",
    COLUMN_RULE_WIDTH: "column-rule-width",
    COLUMN_SPAN: "column-span",
    COLUMN_WIDTH: "column-width",
    COLUMNS: "columns",
    CONTAIN: "contain",
    CONTENT: "content",
    COUNTER_INCREMENT: "counter-increment",
    COUNTER_RESET: "counter-reset",
    CURSOR: "cursor",
    DIRECTION: "direction",
    DISPLAY: "display",
    EMPTY_CELLS: "empty-cells",
    FILTER: "filter",
    FLEX: "flex",
    FLEX_BASIS: "flex-basis",
    FLEX_DIRECTION: "flex-direction",
    FLEX_FLOW: "flex-flow",
    FLEX_GROW: "flex-grow",
    FLEX_SHRINK: "flex-shrink",
    FLEX_WRAP: "flex-wrap",
    FLOAT: "float",
    FONT: "font",
    FONT_FAMILY: "font-family",
    FONT_FEATURE_SETTINGS: "font-feature-settings",
    FONT_KERNING: "font-kerning",
    FONT_LANGUAGE_OVERRIDE: "font-language-override",
    FONT_OPTICAL_SIZING: "font-optical-sizing",
    FONT_SIZE: "font-size",
    FONT_SIZE_ADJUST: "font-size-adjust",
    FONT_STRETCH: "font-stretch",
    FONT_STYLE: "font-style",
    FONT_SYNTHESIS: "font-synthesis",
    FONT_VARIANT: "font-variant",
    FONT_VARIANT_ALTERNATES: "font-variant-alternates",
    FONT_VARIANT_CAPS: "font-variant-caps",
    FONT_VARIANT_EAST_ASIAN: "font-variant-east-asian",
    FONT_VARIANT_LIGATURES: "font-variant-ligatures",
    FONT_VARIANT_NUMERIC: "font-variant-numeric",
    FONT_VARIANT_POSITION: "font-variant-position",
    FONT_VARIATION_SETTINGS: "font-variation-settings",
    FONT_WEIGHT: "font-weight",
    GAP: "gap",
    GRID: "grid",
    GRID_AREA: "grid-area",
    GRID_AUTO_COLUMNS: "grid-auto-columns",
    GRID_AUTO_FLOW: "grid-auto-flow",
    GRID_AUTO_ROWS: "grid-auto-rows",
    GRID_COLUMN: "grid-column",
    GRID_COLUMN_END: "grid-column-end",
    GRID_COLUMN_GAP: "grid-column-gap",
    GRID_COLUMN_START: "grid-column-start",
    GRID_GAP: "grid-gap",
    GRID_ROW: "grid-row",
    GRID_ROW_END: "grid-row-end",
    GRID_ROW_GAP: "grid-row-gap",
    GRID_ROW_START: "grid-row-start",
    GRID_TEMPLATE: "grid-template",
    GRID_TEMPLATE_AREAS: "grid-template-areas",
    GRID_TEMPLATE_COLUMNS: "grid-template-columns",
    GRID_TEMPLATE_ROWS: "grid-template-rows",
    HANGING_PUNCTUATION: "hanging-punctuation",
    HEIGHT: "height",
    HYPHENS: "hyphens",
    IMAGE_ORIENTATION: "image-orientation",
    IMAGE_RENDERING: "image-rendering",
    IMAGE_RESOLUTION: "image-resolution",
    IME_MODE: "ime-mode",
    INITIAL_LETTER: "initial-letter",
    INITIAL_LETTER_ALIGN: "initial-letter-align",
    INLINE_SIZE: "inline-size",
    INSET_BLOCK_END: "inset-block-end",
    INSET_BLOCK_START: "inset-block-start",
    INSET_INLINE_END: "inset-inline-end",
    INSET_INLINE_START: "inset-inline-start",
    ISOLATION: "isolation",
    JUSTIFY_CONTENT: "justify-content",
    JUSTIFY_ITEMS: "justify-items",
    JUSTIFY_SELF: "justify-self",
    LEFT: "left",
    LETTER_SPACING: "letter-spacing",
    LINE_BREAK: "line-break",
    LINE_CLAMP: "line-clamp",
    LINE_HEIGHT: "line-height",
    LIST_STYLE: "list-style",
    LIST_STYLE_IMAGE: "list-style-image",
    LIST_STYLE_POSITION: "list-style-position",
    LIST_STYLE_TYPE: "list-style-type",
    MARGIN: "margin",
    MARGIN_BLOCK_END: "margin-block-end",
    MARGIN_BLOCK_START: "margin-block-start",
    MARGIN_BOTTOM: "margin-bottom",
    MARGIN_INLINE_END: "margin-inline-end",
    MARGIN_INLINE_START: "margin-inline-start",
    MARGIN_LEFT: "margin-left",
    MARGIN_RIGHT: "margin-right",
    MARGIN_TOP: "margin-top",
    MASK: "mask",
    MASK_BORDER: "mask-border",
    MASK_BORDER_MODE: "mask-border-mode",
    MASK_BORDER_OUTSET: "mask-border-outset",
    MASK_BORDER_REPEAT: "mask-border-repeat",
    MASK_BORDER_SLICE: "mask-border-slice",
    MASK_BORDER_SOURCE: "mask-border-source",
    MASK_BORDER_WIDTH: "mask-border-width",
    MASK_CLIP: "mask-clip",
    MASK_COMPOSITE: "mask-composite",
    MASK_IMAGE: "mask-image",
    MASK_MODE: "mask-mode",
    MASK_ORIGIN: "mask-origin",
    MASK_POSITION: "mask-position",
    MASK_REPEAT: "mask-repeat",
    MASK_SIZE: "mask-size",
    MASK_TYPE: "mask-type",
    MAX_BLOCK_SIZE: "max-block-size",
    MAX_HEIGHT: "max-height",
    MAX_INLINE_SIZE: "max-inline-size",
    MAX_LINES: "max-lines",
    MAX_WIDTH: "max-width",
    MIN_BLOCK_SIZE: "min-block-size",
    MIN_HEIGHT: "min-height",
    MIN_INLINE_SIZE: "min-inline-size",
    MIN_WIDTH: "min-width",
    MIX_BLEND_MODE: "mix-blend-mode",
    MOTION: "motion",
    MOTION_OFFSET: "motion-offset",
    MOTION_PATH: "motion-path",
    MOTION_ROTATION: "motion-rotation",
    OBJECT_FIT: "object-fit",
    OBJECT_POSITION: "object-position",
    OFFSET_POSITION: "offset-position",
    OPACITY: "opacity",
    ORDER: "order",
    ORPHANS: "orphans",
    OUTLINE: "outline",
    OUTLINE_COLOR: "outline-color",
    OUTLINE_OFFSET: "outline-offset",
    OUTLINE_STYLE: "outline-style",
    OUTLINE_WIDTH: "outline-width",
    OVERFLOW: "overflow",
    OVERFLOW_ANCHOR: "overflow-anchor",
    OVERFLOW_BLOCK: "overflow-block",
    OVERFLOW_CLIP_BOX: "overflow-clip-box",
    OVERFLOW_INLINE: "overflow-inline",
    OVERFLOW_WRAP: "overflow-wrap",
    OVERFLOW_X: "overflow-x",
    OVERFLOW_Y: "overflow-y",
    OVERSCROLL_BEHAVIOR: "overscroll-behavior",
    OVERSCROLL_BEHAVIOR_X: "overscroll-behavior-x",
    OVERSCROLL_BEHAVIOR_Y: "overscroll-behavior-y",
    PADDING: "padding",
    PADDING_BLOCK_END: "padding-block-end",
    PADDING_BLOCK_START: "padding-block-start",
    PADDING_BOTTOM: "padding-bottom",
    PADDING_INLINE_END: "padding-inline-end",
    PADDING_INLINE_START: "padding-inline-start",
    PADDING_LEFT: "padding-left",
    PADDING_RIGHT: "padding-right",
    PADDING_TOP: "padding-top",
    PAGE_BREAK_AFTER: "page-break-after",
    PAGE_BREAK_BEFORE: "page-break-before",
    PAGE_BREAK_INSIDE: "page-break-inside",
    PAINT_ORDER: "paint-order",
    PERSPECTIVE: "perspective",
    PERSPECTIVE_ORIGIN: "perspective-origin",
    PLACE_CONTENT: "place-content",
    PLACE_ITEMS: "place-items",
    POINTER_EVENTS: "pointer-events",
    POSITION: "position",
    QUOTES: "quotes",
    RESIZE: "resize",
    RIGHT: "right",
    ROTATE: "rotate",
    ROW_GAP: "row-gap",
    RUBY_ALIGN: "ruby-align",
    RUBY_MERGE: "ruby-merge",
    RUBY_POSITION: "ruby-position",
    SCALE: "scale",
    SCROLL_BEHAVIOR: "scroll-behavior",
    SCROLL_SNAP_COORDINATE: "scroll-snap-coordinate",
    SCROLL_SNAP_DESTINATION: "scroll-snap-destination",
    SCROLL_SNAP_POINTS_X: "scroll-snap-points-x",
    SCROLL_SNAP_POINTS_Y: "scroll-snap-points-y",
    SCROLL_SNAP_TYPE: "scroll-snap-type",
    SCROLL_SNAP_TYPE_X: "scroll-snap-type-x",
    SCROLL_SNAP_TYPE_Y: "scroll-snap-type-y",
    SHAPE_IMAGE_THRESHOLD: "shape-image-threshold",
    SHAPE_MARGIN: "shape-margin",
    SHAPE_OUTSIDE: "shape-outside",
    TAB_SIZE: "tab-size",
    TABLE_LAYOUT: "table-layout",
    TEXT_ALIGN: "text-align",
    TEXT_ALIGN_LAST: "text-align-last",
    TEXT_COMBINE_UPRIGHT: "text-combine-upright",
    TEXT_DECORATION: "text-decoration",
    TEXT_DECORATION_COLOR: "text-decoration-color",
    TEXT_DECORATION_LINE: "text-decoration-line",
    TEXT_DECORATION_SKIP: "text-decoration-skip",
    TEXT_DECORATION_SKIP_INK: "text-decoration-skip-ink",
    TEXT_DECORATION_STYLE: "text-decoration-style",
    TEXT_EMPHASIS: "text-emphasis",
    TEXT_EMPHASIS_COLOR: "text-emphasis-color",
    TEXT_EMPHASIS_POSITION: "text-emphasis-position",
    TEXT_EMPHASIS_STYLE: "text-emphasis-style",
    TEXT_INDENT: "text-indent",
    TEXT_JUSTIFY: "text-justify",
    TEXT_ORIENTATION: "text-orientation",
    TEXT_OVERFLOW: "text-overflow",
    TEXT_RENDERING: "text-rendering",
    TEXT_SHADOW: "text-shadow",
    TEXT_SIZE_ADJUST: "text-size-adjust",
    TEXT_TRANSFORM: "text-transform",
    TEXT_UNDERLINE_POSITION: "text-underline-position",
    TOP: "top",
    TOUCH_ACTION: "touch-action",
    TRANSFORM: "transform",
    TRANSFORM_BOX: "transform-box",
    TRANSFORM_ORIGIN: "transform-origin",
    TRANSFORM_STYLE: "transform-style",
    TRANSITION: "transition",
    TRANSITION_DELAY: "transition-delay",
    TRANSITION_DURATION: "transition-duration",
    TRANSITION_PROPERTY: "transition-property",
    TRANSITION_TIMING_FUNCTION: "transition-timing-function",
    TRANSLATE: "translate",
    UNICODE_BIDI: "unicode-bidi",
    USER_SELECT: "user-select",
    VERTICAL_ALIGN: "vertical-align",
    VISIBILITY: "visibility",
    WHITE_SPACE: "white-space",
    WIDOWS: "widows",
    WIDTH: "width",
    WILL_CHANGE: "will-change",
    WORD_BREAK: "word-break",
    WORD_SPACING: "word-spacing",
    WORD_WRAP: "word-wrap",
    WRITING_MODE: "writing-mode",
    Z_INDEX: "z-index",
    ZOOM: "zoom"
};
export const Color = {
    ALICEBLUE: "aliceblue",
    ANTIQUEWHITE: "antiquewhite",
    AQUA: "aqua",
    AQUAMARINE: "aquamarine",
    AZURE: "azure",
    BEIGE: "beige",
    BISQUE: "bisque",
    BLACK: "black",
    BLANCHEDALMOND: "blanchedalmond",
    BLUE: "blue",
    BLUEVIOLET: "blueviolet",
    BROWN: "brown",
    BURLYWOOD: "burlywood",
    CADETBLUE: "cadetblue",
    CHARTREUSE: "chartreuse",
    CHOCOLATE: "chocolate",
    CORAL: "coral",
    CORNFLOWERBLUE: "cornflowerblue",
    CORNSILK: "cornsilk",
    CRIMSON: "crimson",
    CYAN: "cyan",
    DARKBLUE: "darkblue",
    DARKCYAN: "darkcyan",
    DARKGOLDENROD: "darkgoldenrod",
    DARKGRAY: "darkgray",
    DARKGREEN: "darkgreen",
    DARKGREY: "darkgrey",
    DARKKHAKI: "darkkhaki",
    DARKMAGENTA: "darkmagenta",
    DARKOLIVEGREEN: "darkolivegreen",
    DARKORANGE: "darkorange",
    DARKORCHID: "darkorchid",
    DARKRED: "darkred",
    DARKSALMON: "darksalmon",
    DARKSEAGREEN: "darkseagreen",
    DARKSLATEBLUE: "darkslateblue",
    DARKSLATEGRAY: "darkslategray",
    DARKSLATEGREY: "darkslategrey",
    DARKTURQUOISE: "darkturquoise",
    DARKVIOLET: "darkviolet",
    DEEPPINK: "deeppink",
    DEEPSKYBLUE: "deepskyblue",
    DIMGRAY: "dimgray",
    DIMGREY: "dimgrey",
    DODGERBLUE: "dodgerblue",
    FIREBRICK: "firebrick",
    FLORALWHITE: "floralwhite",
    FORESTGREEN: "forestgreen",
    FUCHSIA: "fuchsia",
    GAINSBORO: "gainsboro",
    GHOSTWHITE: "ghostwhite",
    GOLD: "gold",
    GOLDENROD: "goldenrod",
    GRAY: "gray",
    GREEN: "green",
    GREENYELLOW: "greenyellow",
    GREY: "grey",
    HONEYDEW: "honeydew",
    HOTPINK: "hotpink",
    INDIANRED: "indianred",
    INDIGO: "indigo",
    IVORY: "ivory",
    KHAKI: "khaki",
    LAVENDER: "lavender",
    LAVENDERBLUSH: "lavenderblush",
    LAWNGREEN: "lawngreen",
    LEMONCHIFFON: "lemonchiffon",
    LIGHTBLUE: "lightblue",
    LIGHTCORAL: "lightcoral",
    LIGHTCYAN: "lightcyan",
    LIGHTGOLDENRODYELLOW: "lightgoldenrodyellow",
    LIGHTGRAY: "lightgray",
    LIGHTGREEN: "lightgreen",
    LIGHTGREY: "lightgrey",
    LIGHTPINK: "lightpink",
    LIGHTSALMON: "lightsalmon",
    LIGHTSEAGREEN: "lightseagreen",
    LIGHTSKYBLUE: "lightskyblue",
    LIGHTSLATEGRAY: "lightslategray",
    LIGHTSLATEGREY: "lightslategrey",
    LIGHTSTEELBLUE: "lightsteelblue",
    LIGHTYELLOW: "lightyellow",
    LIME: "lime",
    LIMEGREEN: "limegreen",
    LINEN: "linen",
    MAGENTA: "magenta",
    MAROON: "maroon",
    MEDIUMAQUAMARINE: "mediumaquamarine",
    MEDIUMBLUE: "mediumblue",
    MEDIUMORCHID: "mediumorchid",
    MEDIUMPURPLE: "mediumpurple",
    MEDIUMSEAGREEN: "mediumseagreen",
    MEDIUMSLATEBLUE: "mediumslateblue",
    MEDIUMSPRINGGREEN: "mediumspringgreen",
    MEDIUMTURQUOISE: "mediumturquoise",
    MEDIUMVIOLETRED: "mediumvioletred",
    MIDNIGHTBLUE: "midnightblue",
    MINTCREAM: "mintcream",
    MISTYROSE: "mistyrose",
    MOCCASIN: "moccasin",
    NAVAJOWHITE: "navajowhite",
    NAVY: "navy",
    OLDLACE: "oldlace",
    OLIVE: "olive",
    OLIVEDRAB: "olivedrab",
    ORANGE: "orange",
    ORANGERED: "orangered",
    ORCHID: "orchid",
    PALEGOLDENROD: "palegoldenrod",
    PALEGREEN: "palegreen",
    PALETURQUOISE: "paleturquoise",
    PALEVIOLETRED: "palevioletred",
    PAPAYAWHIP: "papayawhip",
    PEACHPUFF: "peachpuff",
    PERU: "peru",
    PINK: "pink",
    PLUM: "plum",
    POWDERBLUE: "powderblue",
    PURPLE: "purple",
    REBECCAPURPLE: "rebeccapurple",
    RED: "red",
    ROSYBROWN: "rosybrown",
    ROYALBLUE: "royalblue",
    SADDLEBROWN: "saddlebrown",
    SALMON: "salmon",
    SANDYBROWN: "sandybrown",
    SEAGREEN: "seagreen",
    SEASHELL: "seashell",
    SIENNA: "sienna",
    SILVER: "silver",
    SKYBLUE: "skyblue",
    SLATEBLUE: "slateblue",
    SLATEGRAY: "slategray",
    SLATEGREY: "slategrey",
    SNOW: "snow",
    SPRINGGREEN: "springgreen",
    STEELBLUE: "steelblue",
    TAN: "tan",
    TEAL: "teal",
    THISTLE: "thistle",
    TOMATO: "tomato",
    TRANSPARENT: "transparent",
    TURQUOISE: "turquoise",
    VIOLET: "violet",
    WHEAT: "wheat",
    WHITE: "white",
    WHITESMOKE: "whitesmoke",
    YELLOW: "yellow",
    YELLOWGREEN: "yellowgreen"
};
export const Unit = {
    HZ: "Hz",
    Q: "Q",
    CAP: "cap",
    CH: "ch",
    CM: "cm",
    DEG: "deg",
    DPCM: "dpcm",
    DPI: "dpi",
    DPPX: "dppx",
    EM: "em",
    EX: "ex",
    FR: "fr",
    GRAD: "grad",
    IC: "ic",
    IN: "in",
    KHZ: "kHz",
    LH: "lh",
    MM: "mm",
    MS: "ms",
    PC: "pc",
    PERCENTAGE: "%",
    PT: "pt",
    PX: "px",
    RAD: "rad",
    REM: "rem",
    RLH: "rlh",
    S: "s",
    TURN: "turn",
    VB: "vb",
    VH: "vh",
    VI: "vi",
    VMAX: "vmax",
    VMIN: "vmin",
    VW: "vw",
    X: "x"
};
export const Angle = {
    deg: (...params) => {
        return buildDatatype("deg", params);
    },
    grad: (...params) => {
        return buildDatatype("grad", params);
    },
    rad: (...params) => {
        return buildDatatype("rad", params);
    },
    turn: (...params) => {
        return buildDatatype("turn", params);
    }
};
export const Frequency = {
    Hz: (...params) => {
        return buildDatatype("Hz", params);
    },
    kHz: (...params) => {
        return buildDatatype("kHz", params);
    }
};
export const Length = {
    Q: (...params) => {
        return buildDatatype("Q", params);
    },
    X: (...params) => {
        return buildDatatype("%", params);
    },
    cap: (...params) => {
        return buildDatatype("cap", params);
    },
    ch: (...params) => {
        return buildDatatype("ch", params);
    },
    cm: (...params) => {
        return buildDatatype("cm", params);
    },
    em: (...params) => {
        return buildDatatype("em", params);
    },
    ex: (...params) => {
        return buildDatatype("ex", params);
    },
    fr: (...params) => {
        return buildDatatype("fr", params);
    },
    ic: (...params) => {
        return buildDatatype("ic", params);
    },
    in: (...params) => {
        return buildDatatype("in", params);
    },
    lh: (...params) => {
        return buildDatatype("lh", params);
    },
    mm: (...params) => {
        return buildDatatype("mm", params);
    },
    pc: (...params) => {
        return buildDatatype("pc", params);
    },
    pt: (...params) => {
        return buildDatatype("pt", params);
    },
    px: (...params) => {
        return buildDatatype("px", params);
    },
    rem: (...params) => {
        return buildDatatype("rem", params);
    },
    rlh: (...params) => {
        return buildDatatype("rlh", params);
    },
    vb: (...params) => {
        return buildDatatype("vb", params);
    },
    vh: (...params) => {
        return buildDatatype("vh", params);
    },
    vi: (...params) => {
        return buildDatatype("vi", params);
    },
    vmax: (...params) => {
        return buildDatatype("vmax", params);
    },
    vmin: (...params) => {
        return buildDatatype("vmin", params);
    },
    vw: (...params) => {
        return buildDatatype("vw", params);
    }
};
export const Resolution = {
    dpcm: (...params) => {
        return buildDatatype("dpcm", params);
    },
    dpi: (...params) => {
        return buildDatatype("dpi", params);
    },
    dppx: (...params) => {
        return buildDatatype("dppx", params);
    },
    x: (...params) => {
        return buildDatatype("x", params);
    }
};
export const Time = {
    ms: (...params) => {
        return buildDatatype("ms", params);
    },
    s: (...params) => {
        return buildDatatype("s", params);
    }
};
const _snapInterval = (...params) => {
    return buildMethod("snapInterval", params);
};
const _snapList = (...params) => {
    return buildMethod("snapList", params);
};
const _stylistic = (...params) => {
    return buildMethod("stylistic", params);
};
const _styleset = (...params) => {
    return buildMethod("styleset", params);
};
const _characterVariant = (...params) => {
    return buildMethod("character-variant", params);
};
const _swash = (...params) => {
    return buildMethod("swash", params);
};
const _ornaments = (...params) => {
    return buildMethod("ornaments", params);
};
const _annotation = (...params) => {
    return buildMethod("annotation", params);
};
const _repeat = (...params) => {
    return buildMethod("repeat", params);
};
const _attr = (...params) => {
    return buildMethod("attr", params);
};
const _blur = (...params) => {
    return buildMethod("blur", params);
};
const _brightness = (...params) => {
    return buildMethod("brightness", params);
};
const _circle = (...params) => {
    return buildMethod("circle", params);
};
const _contrast = (...params) => {
    return buildMethod("contrast", params);
};
const _symbols = (...params) => {
    return buildMethod("symbols", params);
};
const _crossFade = (...params) => {
    return buildMethod("cross-fade", params);
};
const _cubicBezier = (...params) => {
    return buildMethod("cubic-bezier", params);
};
const _dropShadow = (...params) => {
    return buildMethod("drop-shadow", params);
};
const _element = (...params) => {
    return buildMethod("element", params);
};
const _ellipse = (...params) => {
    return buildMethod("ellipse", params);
};
const _fitContent = (...params) => {
    return buildMethod("fit-content", params);
};
const _minmax = (...params) => {
    return buildMethod("minmax", params);
};
const _frames = (...params) => {
    return buildMethod("frames", params);
};
const _grayscale = (...params) => {
    return buildMethod("grayscale", params);
};
const _hsl = (...params) => {
    return buildMethod("hsl", params);
};
const _hsla = (...params) => {
    return buildMethod("hsla", params);
};
const _hueRotate = (...params) => {
    return buildMethod("hue-rotate", params);
};
const _image = (...params) => {
    return buildMethod("image", params);
};
const _imageSet = (...params) => {
    return buildMethod("image-set", params);
};
const _inset = (...params) => {
    return buildMethod("inset", params);
};
const _invert = (...params) => {
    return buildMethod("invert", params);
};
const _leader = (...params) => {
    return buildMethod("leader", params);
};
const _linearGradient = (...params) => {
    return buildMethod("linear-gradient", params);
};
const _matrix = (...params) => {
    return buildMethod("matrix", params);
};
const _matrix3d = (...params) => {
    return buildMethod("matrix3d", params);
};
const _opacity = (...params) => {
    return buildMethod("opacity", params);
};
const _perspective = (...params) => {
    return buildMethod("perspective", params);
};
const _polygon = (...params) => {
    return buildMethod("polygon", params);
};
const _radialGradient = (...params) => {
    return buildMethod("radial-gradient", params);
};
const _repeatingLinearGradient = (...params) => {
    return buildMethod("repeating-linear-gradient", params);
};
const _repeatingRadialGradient = (...params) => {
    return buildMethod("repeating-radial-gradient", params);
};
const _rgb = (...params) => {
    return buildMethod("rgb", params);
};
const _rgba = (...params) => {
    return buildMethod("rgba", params);
};
const _rotate = (...params) => {
    return buildMethod("rotate", params);
};
const _rotate3d = (...params) => {
    return buildMethod("rotate3d", params);
};
const _rotateX = (...params) => {
    return buildMethod("rotateX", params);
};
const _rotateY = (...params) => {
    return buildMethod("rotateY", params);
};
const _rotateZ = (...params) => {
    return buildMethod("rotateZ", params);
};
const _saturate = (...params) => {
    return buildMethod("saturate", params);
};
const _scale = (...params) => {
    return buildMethod("scale", params);
};
const _scale3d = (...params) => {
    return buildMethod("scale3d", params);
};
const _scaleX = (...params) => {
    return buildMethod("scaleX", params);
};
const _scaleY = (...params) => {
    return buildMethod("scaleY", params);
};
const _scaleZ = (...params) => {
    return buildMethod("scaleZ", params);
};
const _skew = (...params) => {
    return buildMethod("skew", params);
};
const _skewX = (...params) => {
    return buildMethod("skewX", params);
};
const _skewY = (...params) => {
    return buildMethod("skewY", params);
};
const _sepia = (...params) => {
    return buildMethod("sepia", params);
};
const _rect = (...params) => {
    return buildMethod("rect", params);
};
const _steps = (...params) => {
    return buildMethod("steps", params);
};
const _targetCounter = (...params) => {
    return buildMethod("target-counter", params);
};
const _targetCounters = (...params) => {
    return buildMethod("target-counters", params);
};
const _targetText = (...params) => {
    return buildMethod("target-text", params);
};
const _translate = (...params) => {
    return buildMethod("translate", params);
};
const _translate3d = (...params) => {
    return buildMethod("translate3d", params);
};
const _translateX = (...params) => {
    return buildMethod("translateX", params);
};
const _translateY = (...params) => {
    return buildMethod("translateY", params);
};
const _translateZ = (...params) => {
    return buildMethod("translateZ", params);
};
const _var = (...params) => {
    return buildMethod("var", params);
};
const _addParams = (...params) => {
    return params
        .map(value => {
        if (Array.isArray(value)) {
            return "(" + _mulParams(...value) + ")";
        }
        return value;
    })
        .join(" + ");
};
const _mulParams = (...params) => {
    return params
        .map(value => {
        if (Array.isArray(value)) {
            return "(" + _addParams(...value) + ")";
        }
        return value;
    })
        .join(" * ");
};
const _calc = (...params) => {
    return "calc(" + _addParams(...params) + ")";
};
const _hex = (code) => {
    return code[0] === "#" ? code : "#" + code;
};
const _hexa = (code, alpha) => {
    return _hex(code) + ((alpha - 1) * 255).toString(16);
};
export const Method = {
    annotation: _annotation,
    attr: _attr,
    blur: _blur,
    brightness: _brightness,
    calc: _calc,
    characterVariant: _characterVariant,
    circle: _circle,
    contrast: _contrast,
    crossFade: _crossFade,
    cubicBezier: _cubicBezier,
    dropShadow: _dropShadow,
    element: _element,
    ellipse: _ellipse,
    fitContent: _fitContent,
    frames: _frames,
    grayscale: _grayscale,
    hex: _hex,
    hexa: _hexa,
    hsl: _hsl,
    hsla: _hsla,
    hueRotate: _hueRotate,
    image: _image,
    imageSet: _imageSet,
    inset: _inset,
    invert: _invert,
    leader: _leader,
    linearGradient: _linearGradient,
    matrix: _matrix,
    matrix3d: _matrix3d,
    minmax: _minmax,
    opacity: _opacity,
    ornaments: _ornaments,
    perspective: _perspective,
    polygon: _polygon,
    radialGradient: _radialGradient,
    rect: _rect,
    repeat: _repeat,
    repeatingLinearGradient: _repeatingLinearGradient,
    repeatingRadialGradient: _repeatingRadialGradient,
    rgb: _rgb,
    rgba: _rgba,
    rotate: _rotate,
    rotate3d: _rotate3d,
    rotateX: _rotateX,
    rotateY: _rotateY,
    rotateZ: _rotateZ,
    saturate: _saturate,
    scale: _scale,
    scale3d: _scale3d,
    scaleX: _scaleX,
    scaleY: _scaleY,
    scaleZ: _scaleZ,
    sepia: _sepia,
    skew: _skew,
    skewX: _skewX,
    skewY: _skewY,
    snapInterval: _snapInterval,
    snapList: _snapList,
    steps: _steps,
    styleset: _styleset,
    stylistic: _stylistic,
    swash: _swash,
    symbols: _symbols,
    targetCounter: _targetCounter,
    targetCounters: _targetCounters,
    targetText: _targetText,
    translate: _translate,
    translate3d: _translate3d,
    translateX: _translateX,
    translateY: _translateY,
    translateZ: _translateZ,
    var: _var
};
const _sheet = (...properties) => {
    let sheet = {};
    for (let property of properties) {
        Object.assign(sheet, property);
    }
    return sheet;
};
const _MsAccelerator = {
    set: (...params) => ({ msAccelerator: buildProperty(params) }),
    FALSE: this.set("false"),
    TRUE: this.set("true")
};
const _MsBlockProgression = {
    set: (...params) => ({ msBlockProgression: buildProperty(params) }),
    TB: this.set("tb"),
    RL: this.set("rl"),
    BT: this.set("bt"),
    LR: this.set("lr")
};
const _MsContentZoomChaining = {
    set: (...params) => ({ msContentZoomChaining: buildProperty(params) }),
    NONE: this.set("none"),
    CHAINED: this.set("chained")
};
const _MsContentZooming = {
    set: (...params) => ({ msContentZooming: buildProperty(params) }),
    NONE: this.set("none"),
    ZOOM: this.set("zoom")
};
const _MsContentZoomLimit = {
    set: (...params) => ({ msContentZoomLimit: buildProperty(params) }),
    X: (...nums) => this.set(Length.X(...nums))
};
const _MsContentZoomLimitMax = {
    set: (...params) => ({ msContentZoomLimitMax: buildProperty(params) }),
    X: (...nums) => this.set(Length.X(...nums))
};
const _MsContentZoomLimitMin = {
    set: (...params) => ({ msContentZoomLimitMin: buildProperty(params) }),
    X: (...nums) => this.set(Length.X(...nums))
};
const _MsContentZoomSnap = {
    set: (...params) => ({ msContentZoomSnap: buildProperty(params) }),
    NONE: this.set("none"),
    PROXIMITY: this.set("proximity"),
    MANDATORY: this.set("mandatory"),
    snapInterval: (...params) => this.set(Method.snapInterval(...params)),
    snapList: (...params) => this.set(Method.snapList(...params))
};
const _MsContentZoomSnapPoints = {
    set: (...params) => ({ msContentZoomSnapPoints: buildProperty(params) }),
    snapInterval: (...params) => this.set(Method.snapInterval(...params)),
    snapList: (...params) => this.set(Method.snapList(...params))
};
const _MsContentZoomSnapType = {
    set: (...params) => ({ msContentZoomSnapType: buildProperty(params) }),
    NONE: this.set("none"),
    PROXIMITY: this.set("proximity"),
    MANDATORY: this.set("mandatory")
};
const _MsFilter = { set: (...params) => ({ msFilter: buildProperty(params) }) };
const _MsFlowFrom = {
    set: (...params) => ({ msFlowFrom: buildProperty(params) }),
    NONE: this.set("none")
};
const _MsFlowInto = {
    set: (...params) => ({ msFlowInto: buildProperty(params) }),
    NONE: this.set("none")
};
const _MsHighContrastAdjust = {
    set: (...params) => ({ msHighContrastAdjust: buildProperty(params) }),
    AUTO: this.set("auto"),
    NONE: this.set("none")
};
const _MsHyphenateLimitChars = {
    set: (...params) => ({ msHyphenateLimitChars: buildProperty(params) }),
    AUTO: this.set("auto")
};
const _MsHyphenateLimitLines = {
    set: (...params) => ({ msHyphenateLimitLines: buildProperty(params) }),
    NO_LIMIT: this.set("no-limit")
};
const _MsHyphenateLimitZone = {
    set: (...params) => ({ msHyphenateLimitZone: buildProperty(params) }),
    X: (...nums) => this.set(Length.X(...nums)),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums))
};
const _MsImeAlign = {
    set: (...params) => ({ msImeAlign: buildProperty(params) }),
    AUTO: this.set("auto"),
    AFTER: this.set("after")
};
const _MsOverflowStyle = {
    set: (...params) => ({ msOverflowStyle: buildProperty(params) }),
    AUTO: this.set("auto"),
    NONE: this.set("none"),
    SCROLLBAR: this.set("scrollbar"),
    MS_AUTOHIDING_SCROLLBAR: this.set("-ms-autohiding-scrollbar")
};
const _MsScrollbar3dlightColor = {
    set: (...params) => ({ msScrollbar3dlightColor: buildProperty(params) }),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ msScrollbar3dlightColor: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText")
};
const _MsScrollbarArrowColor = {
    set: (...params) => ({ msScrollbarArrowColor: buildProperty(params) }),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ msScrollbarArrowColor: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText")
};
const _MsScrollbarBaseColor = {
    set: (...params) => ({ msScrollbarBaseColor: buildProperty(params) }),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ msScrollbarBaseColor: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText")
};
const _MsScrollbarDarkshadowColor = {
    set: (...params) => ({ msScrollbarDarkshadowColor: buildProperty(params) }),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ msScrollbarDarkshadowColor: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText")
};
const _MsScrollbarFaceColor = {
    set: (...params) => ({ msScrollbarFaceColor: buildProperty(params) }),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ msScrollbarFaceColor: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText")
};
const _MsScrollbarHighlightColor = {
    set: (...params) => ({ msScrollbarHighlightColor: buildProperty(params) }),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ msScrollbarHighlightColor: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText")
};
const _MsScrollbarShadowColor = {
    set: (...params) => ({ msScrollbarShadowColor: buildProperty(params) }),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ msScrollbarShadowColor: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText")
};
const _MsScrollbarTrackColor = {
    set: (...params) => ({ msScrollbarTrackColor: buildProperty(params) }),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ msScrollbarTrackColor: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText")
};
const _MsScrollChaining = {
    set: (...params) => ({ msScrollChaining: buildProperty(params) }),
    CHAINED: this.set("chained"),
    NONE: this.set("none")
};
const _MsScrollLimit = {
    set: (...params) => ({ msScrollLimit: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    AUTO: this.set("auto")
};
const _MsScrollLimitXMax = {
    set: (...params) => ({ msScrollLimitXMax: buildProperty(params) }),
    AUTO: this.set("auto"),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums))
};
const _MsScrollLimitXMin = {
    set: (...params) => ({ msScrollLimitXMin: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums))
};
const _MsScrollLimitYMax = {
    set: (...params) => ({ msScrollLimitYMax: buildProperty(params) }),
    AUTO: this.set("auto"),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums))
};
const _MsScrollLimitYMin = {
    set: (...params) => ({ msScrollLimitYMin: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums))
};
const _MsScrollRails = {
    set: (...params) => ({ msScrollRails: buildProperty(params) }),
    NONE: this.set("none"),
    RAILED: this.set("railed")
};
const _MsScrollSnapPointsX = {
    set: (...params) => ({ msScrollSnapPointsX: buildProperty(params) }),
    snapInterval: (...params) => this.set(Method.snapInterval(...params)),
    snapList: (...params) => this.set(Method.snapList(...params))
};
const _MsScrollSnapPointsY = {
    set: (...params) => ({ msScrollSnapPointsY: buildProperty(params) }),
    snapInterval: (...params) => this.set(Method.snapInterval(...params)),
    snapList: (...params) => this.set(Method.snapList(...params))
};
const _MsScrollSnapType = {
    set: (...params) => ({ msScrollSnapType: buildProperty(params) }),
    NONE: this.set("none"),
    PROXIMITY: this.set("proximity"),
    MANDATORY: this.set("mandatory")
};
const _MsScrollSnapX = {
    set: (...params) => ({ msScrollSnapX: buildProperty(params) }),
    NONE: this.set("none"),
    PROXIMITY: this.set("proximity"),
    MANDATORY: this.set("mandatory"),
    snapInterval: (...params) => this.set(Method.snapInterval(...params)),
    snapList: (...params) => this.set(Method.snapList(...params))
};
const _MsScrollSnapY = {
    set: (...params) => ({ msScrollSnapY: buildProperty(params) }),
    NONE: this.set("none"),
    PROXIMITY: this.set("proximity"),
    MANDATORY: this.set("mandatory"),
    snapInterval: (...params) => this.set(Method.snapInterval(...params)),
    snapList: (...params) => this.set(Method.snapList(...params))
};
const _MsScrollTranslation = {
    set: (...params) => ({ msScrollTranslation: buildProperty(params) }),
    NONE: this.set("none"),
    VERTICAL_TO_HORIZONTAL: this.set("vertical-to-horizontal")
};
const _MsTextAutospace = {
    set: (...params) => ({ msTextAutospace: buildProperty(params) }),
    NONE: this.set("none"),
    IDEOGRAPH_ALPHA: this.set("ideograph-alpha"),
    IDEOGRAPH_NUMERIC: this.set("ideograph-numeric"),
    IDEOGRAPH_PARENTHESIS: this.set("ideograph-parenthesis"),
    IDEOGRAPH_SPACE: this.set("ideograph-space")
};
const _MsTouchSelect = {
    set: (...params) => ({ msTouchSelect: buildProperty(params) }),
    GRIPPERS: this.set("grippers"),
    NONE: this.set("none")
};
const _MsUserSelect = {
    set: (...params) => ({ msUserSelect: buildProperty(params) }),
    NONE: this.set("none"),
    ELEMENT: this.set("element"),
    TEXT: this.set("text")
};
const _MsWrapFlow = {
    set: (...params) => ({ msWrapFlow: buildProperty(params) }),
    AUTO: this.set("auto"),
    BOTH: this.set("both"),
    START: this.set("start"),
    END: this.set("end"),
    MAXIMUM: this.set("maximum"),
    CLEAR: this.set("clear")
};
const _MsWrapMargin = {
    set: (...params) => ({ msWrapMargin: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums))
};
const _MsWrapThrough = {
    set: (...params) => ({ msWrapThrough: buildProperty(params) }),
    WRAP: this.set("wrap"),
    NONE: this.set("none")
};
const _MozAppearance = {
    set: (...params) => ({ mozAppearance: buildProperty(params) }),
    NONE: this.set("none"),
    BUTTON: this.set("button"),
    BUTTON_ARROW_DOWN: this.set("button-arrow-down"),
    BUTTON_ARROW_NEXT: this.set("button-arrow-next"),
    BUTTON_ARROW_PREVIOUS: this.set("button-arrow-previous"),
    BUTTON_ARROW_UP: this.set("button-arrow-up"),
    BUTTON_BEVEL: this.set("button-bevel"),
    BUTTON_FOCUS: this.set("button-focus"),
    CARET: this.set("caret"),
    CHECKBOX: this.set("checkbox"),
    CHECKBOX_CONTAINER: this.set("checkbox-container"),
    CHECKBOX_LABEL: this.set("checkbox-label"),
    CHECKMENUITEM: this.set("checkmenuitem"),
    DUALBUTTON: this.set("dualbutton"),
    GROUPBOX: this.set("groupbox"),
    LISTBOX: this.set("listbox"),
    LISTITEM: this.set("listitem"),
    MENUARROW: this.set("menuarrow"),
    MENUBAR: this.set("menubar"),
    MENUCHECKBOX: this.set("menucheckbox"),
    MENUIMAGE: this.set("menuimage"),
    MENUITEM: this.set("menuitem"),
    MENUITEMTEXT: this.set("menuitemtext"),
    MENULIST: this.set("menulist"),
    MENULIST_BUTTON: this.set("menulist-button"),
    MENULIST_TEXT: this.set("menulist-text"),
    MENULIST_TEXTFIELD: this.set("menulist-textfield"),
    MENUPOPUP: this.set("menupopup"),
    MENURADIO: this.set("menuradio"),
    MENUSEPARATOR: this.set("menuseparator"),
    METERBAR: this.set("meterbar"),
    METERCHUNK: this.set("meterchunk"),
    PROGRESSBAR: this.set("progressbar"),
    PROGRESSBAR_VERTICAL: this.set("progressbar-vertical"),
    PROGRESSCHUNK: this.set("progresschunk"),
    PROGRESSCHUNK_VERTICAL: this.set("progresschunk-vertical"),
    RADIO: this.set("radio"),
    RADIO_CONTAINER: this.set("radio-container"),
    RADIO_LABEL: this.set("radio-label"),
    RADIOMENUITEM: this.set("radiomenuitem"),
    RANGE: this.set("range"),
    RANGE_THUMB: this.set("range-thumb"),
    RESIZER: this.set("resizer"),
    RESIZERPANEL: this.set("resizerpanel"),
    SCALE_HORIZONTAL: this.set("scale-horizontal"),
    SCALETHUMBEND: this.set("scalethumbend"),
    SCALETHUMB_HORIZONTAL: this.set("scalethumb-horizontal"),
    SCALETHUMBSTART: this.set("scalethumbstart"),
    SCALETHUMBTICK: this.set("scalethumbtick"),
    SCALETHUMB_VERTICAL: this.set("scalethumb-vertical"),
    SCALE_VERTICAL: this.set("scale-vertical"),
    SCROLLBARBUTTON_DOWN: this.set("scrollbarbutton-down"),
    SCROLLBARBUTTON_LEFT: this.set("scrollbarbutton-left"),
    SCROLLBARBUTTON_RIGHT: this.set("scrollbarbutton-right"),
    SCROLLBARBUTTON_UP: this.set("scrollbarbutton-up"),
    SCROLLBARTHUMB_HORIZONTAL: this.set("scrollbarthumb-horizontal"),
    SCROLLBARTHUMB_VERTICAL: this.set("scrollbarthumb-vertical"),
    SCROLLBARTRACK_HORIZONTAL: this.set("scrollbartrack-horizontal"),
    SCROLLBARTRACK_VERTICAL: this.set("scrollbartrack-vertical"),
    SEARCHFIELD: this.set("searchfield"),
    SEPARATOR: this.set("separator"),
    SHEET: this.set("sheet"),
    SPINNER: this.set("spinner"),
    SPINNER_DOWNBUTTON: this.set("spinner-downbutton"),
    SPINNER_TEXTFIELD: this.set("spinner-textfield"),
    SPINNER_UPBUTTON: this.set("spinner-upbutton"),
    SPLITTER: this.set("splitter"),
    STATUSBAR: this.set("statusbar"),
    STATUSBARPANEL: this.set("statusbarpanel"),
    TAB: this.set("tab"),
    TABPANEL: this.set("tabpanel"),
    TABPANELS: this.set("tabpanels"),
    TAB_SCROLL_ARROW_BACK: this.set("tab-scroll-arrow-back"),
    TAB_SCROLL_ARROW_FORWARD: this.set("tab-scroll-arrow-forward"),
    TEXTFIELD: this.set("textfield"),
    TEXTFIELD_MULTILINE: this.set("textfield-multiline"),
    TOOLBAR: this.set("toolbar"),
    TOOLBARBUTTON: this.set("toolbarbutton"),
    TOOLBARBUTTON_DROPDOWN: this.set("toolbarbutton-dropdown"),
    TOOLBARGRIPPER: this.set("toolbargripper"),
    TOOLBOX: this.set("toolbox"),
    TOOLTIP: this.set("tooltip"),
    TREEHEADER: this.set("treeheader"),
    TREEHEADERCELL: this.set("treeheadercell"),
    TREEHEADERSORTARROW: this.set("treeheadersortarrow"),
    TREEITEM: this.set("treeitem"),
    TREELINE: this.set("treeline"),
    TREETWISTY: this.set("treetwisty"),
    TREETWISTYOPEN: this.set("treetwistyopen"),
    TREEVIEW: this.set("treeview"),
    MOZ_MAC_UNIFIED_TOOLBAR: this.set("-moz-mac-unified-toolbar"),
    MOZ_WIN_BORDERLESS_GLASS: this.set("-moz-win-borderless-glass"),
    MOZ_WIN_BROWSERTABBAR_TOOLBOX: this.set("-moz-win-browsertabbar-toolbox"),
    MOZ_WIN_COMMUNICATIONSTEXT: this.set("-moz-win-communicationstext"),
    MOZ_WIN_COMMUNICATIONS_TOOLBOX: this.set("-moz-win-communications-toolbox"),
    MOZ_WIN_EXCLUDE_GLASS: this.set("-moz-win-exclude-glass"),
    MOZ_WIN_GLASS: this.set("-moz-win-glass"),
    MOZ_WIN_MEDIATEXT: this.set("-moz-win-mediatext"),
    MOZ_WIN_MEDIA_TOOLBOX: this.set("-moz-win-media-toolbox"),
    MOZ_WINDOW_BUTTON_BOX: this.set("-moz-window-button-box"),
    MOZ_WINDOW_BUTTON_BOX_MAXIMIZED: this.set("-moz-window-button-box-maximized"),
    MOZ_WINDOW_BUTTON_CLOSE: this.set("-moz-window-button-close"),
    MOZ_WINDOW_BUTTON_MAXIMIZE: this.set("-moz-window-button-maximize"),
    MOZ_WINDOW_BUTTON_MINIMIZE: this.set("-moz-window-button-minimize"),
    MOZ_WINDOW_BUTTON_RESTORE: this.set("-moz-window-button-restore"),
    MOZ_WINDOW_FRAME_BOTTOM: this.set("-moz-window-frame-bottom"),
    MOZ_WINDOW_FRAME_LEFT: this.set("-moz-window-frame-left"),
    MOZ_WINDOW_FRAME_RIGHT: this.set("-moz-window-frame-right"),
    MOZ_WINDOW_TITLEBAR: this.set("-moz-window-titlebar"),
    MOZ_WINDOW_TITLEBAR_MAXIMIZED: this.set("-moz-window-titlebar-maximized")
};
const _MozBinding = {
    set: (...params) => ({ mozBinding: buildProperty(params) }),
    NONE: this.set("none")
};
const _MozBorderBottomColors = {
    set: (...params) => ({ mozBorderBottomColors: buildProperty(params) }),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ mozBorderBottomColors: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText"),
    NONE: this.set("none")
};
const _MozBorderLeftColors = {
    set: (...params) => ({ mozBorderLeftColors: buildProperty(params) }),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ mozBorderLeftColors: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText"),
    NONE: this.set("none")
};
const _MozBorderRightColors = {
    set: (...params) => ({ mozBorderRightColors: buildProperty(params) }),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ mozBorderRightColors: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText"),
    NONE: this.set("none")
};
const _MozBorderTopColors = {
    set: (...params) => ({ mozBorderTopColors: buildProperty(params) }),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ mozBorderTopColors: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText"),
    NONE: this.set("none")
};
const _MozContextProperties = {
    set: (...params) => ({ mozContextProperties: buildProperty(params) }),
    NONE: this.set("none"),
    FILL: this.set("fill"),
    FILL_OPACITY: this.set("fill-opacity"),
    STROKE: this.set("stroke"),
    STROKE_OPACITY: this.set("stroke-opacity")
};
const _MozFloatEdge = {
    set: (...params) => ({ mozFloatEdge: buildProperty(params) }),
    BORDER_BOX: this.set("border-box"),
    CONTENT_BOX: this.set("content-box"),
    MARGIN_BOX: this.set("margin-box"),
    PADDING_BOX: this.set("padding-box")
};
const _MozForceBrokenImageIcon = {
    set: (...params) => ({ mozForceBrokenImageIcon: buildProperty(params) })
};
const _MozImageRegion = {
    set: (...params) => ({ mozImageRegion: buildProperty(params) }),
    rect: (...params) => this.set(Method.rect(...params)),
    AUTO: this.set("auto")
};
const _MozOrient = {
    set: (...params) => ({ mozOrient: buildProperty(params) }),
    INLINE: this.set("inline"),
    BLOCK: this.set("block"),
    HORIZONTAL: this.set("horizontal"),
    VERTICAL: this.set("vertical")
};
const _MozOutlineRadius = {
    set: (...params) => ({ mozOutlineRadius: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _MozOutlineRadiusBottomleft = {
    set: (...params) => ({ mozOutlineRadiusBottomleft: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _MozOutlineRadiusBottomright = {
    set: (...params) => ({ mozOutlineRadiusBottomright: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _MozOutlineRadiusTopleft = {
    set: (...params) => ({ mozOutlineRadiusTopleft: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _MozOutlineRadiusTopright = {
    set: (...params) => ({ mozOutlineRadiusTopright: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _MozStackSizing = {
    set: (...params) => ({ mozStackSizing: buildProperty(params) }),
    IGNORE: this.set("ignore"),
    STRETCH_TO_FIT: this.set("stretch-to-fit")
};
const _MozTextBlink = {
    set: (...params) => ({ mozTextBlink: buildProperty(params) }),
    NONE: this.set("none"),
    BLINK: this.set("blink")
};
const _MozUserFocus = {
    set: (...params) => ({ mozUserFocus: buildProperty(params) }),
    IGNORE: this.set("ignore"),
    NORMAL: this.set("normal"),
    SELECT_AFTER: this.set("select-after"),
    SELECT_BEFORE: this.set("select-before"),
    SELECT_MENU: this.set("select-menu"),
    SELECT_SAME: this.set("select-same"),
    SELECT_ALL: this.set("select-all"),
    NONE: this.set("none")
};
const _MozUserInput = {
    set: (...params) => ({ mozUserInput: buildProperty(params) }),
    AUTO: this.set("auto"),
    NONE: this.set("none"),
    ENABLED: this.set("enabled"),
    DISABLED: this.set("disabled")
};
const _MozUserModify = {
    set: (...params) => ({ mozUserModify: buildProperty(params) }),
    READ_ONLY: this.set("read-only"),
    READ_WRITE: this.set("read-write"),
    WRITE_ONLY: this.set("write-only")
};
const _MozWindowDragging = {
    set: (...params) => ({ mozWindowDragging: buildProperty(params) }),
    DRAG: this.set("drag"),
    NO_DRAG: this.set("no-drag")
};
const _MozWindowShadow = {
    set: (...params) => ({ mozWindowShadow: buildProperty(params) }),
    DEFAULT: this.set("default"),
    MENU: this.set("menu"),
    TOOLTIP: this.set("tooltip"),
    SHEET: this.set("sheet"),
    NONE: this.set("none")
};
const _WebkitAppearance = {
    set: (...params) => ({ webkitAppearance: buildProperty(params) }),
    NONE: this.set("none"),
    BUTTON: this.set("button"),
    BUTTON_BEVEL: this.set("button-bevel"),
    CARET: this.set("caret"),
    CHECKBOX: this.set("checkbox"),
    DEFAULT_BUTTON: this.set("default-button"),
    INNER_SPIN_BUTTON: this.set("inner-spin-button"),
    LISTBOX: this.set("listbox"),
    LISTITEM: this.set("listitem"),
    MEDIA_CONTROLS_BACKGROUND: this.set("media-controls-background"),
    MEDIA_CONTROLS_FULLSCREEN_BACKGROUND: this.set("media-controls-fullscreen-background"),
    MEDIA_CURRENT_TIME_DISPLAY: this.set("media-current-time-display"),
    MEDIA_ENTER_FULLSCREEN_BUTTON: this.set("media-enter-fullscreen-button"),
    MEDIA_EXIT_FULLSCREEN_BUTTON: this.set("media-exit-fullscreen-button"),
    MEDIA_FULLSCREEN_BUTTON: this.set("media-fullscreen-button"),
    MEDIA_MUTE_BUTTON: this.set("media-mute-button"),
    MEDIA_OVERLAY_PLAY_BUTTON: this.set("media-overlay-play-button"),
    MEDIA_PLAY_BUTTON: this.set("media-play-button"),
    MEDIA_SEEK_BACK_BUTTON: this.set("media-seek-back-button"),
    MEDIA_SEEK_FORWARD_BUTTON: this.set("media-seek-forward-button"),
    MEDIA_SLIDER: this.set("media-slider"),
    MEDIA_SLIDERTHUMB: this.set("media-sliderthumb"),
    MEDIA_TIME_REMAINING_DISPLAY: this.set("media-time-remaining-display"),
    MEDIA_TOGGLE_CLOSED_CAPTIONS_BUTTON: this.set("media-toggle-closed-captions-button"),
    MEDIA_VOLUME_SLIDER: this.set("media-volume-slider"),
    MEDIA_VOLUME_SLIDER_CONTAINER: this.set("media-volume-slider-container"),
    MEDIA_VOLUME_SLIDERTHUMB: this.set("media-volume-sliderthumb"),
    MENULIST: this.set("menulist"),
    MENULIST_BUTTON: this.set("menulist-button"),
    MENULIST_TEXT: this.set("menulist-text"),
    MENULIST_TEXTFIELD: this.set("menulist-textfield"),
    METER: this.set("meter"),
    PROGRESS_BAR: this.set("progress-bar"),
    PROGRESS_BAR_VALUE: this.set("progress-bar-value"),
    PUSH_BUTTON: this.set("push-button"),
    RADIO: this.set("radio"),
    SEARCHFIELD: this.set("searchfield"),
    SEARCHFIELD_CANCEL_BUTTON: this.set("searchfield-cancel-button"),
    SEARCHFIELD_DECORATION: this.set("searchfield-decoration"),
    SEARCHFIELD_RESULTS_BUTTON: this.set("searchfield-results-button"),
    SEARCHFIELD_RESULTS_DECORATION: this.set("searchfield-results-decoration"),
    SLIDER_HORIZONTAL: this.set("slider-horizontal"),
    SLIDER_VERTICAL: this.set("slider-vertical"),
    SLIDERTHUMB_HORIZONTAL: this.set("sliderthumb-horizontal"),
    SLIDERTHUMB_VERTICAL: this.set("sliderthumb-vertical"),
    SQUARE_BUTTON: this.set("square-button"),
    TEXTAREA: this.set("textarea"),
    TEXTFIELD: this.set("textfield")
};
const _WebkitBorderBefore = {
    set: (...params) => ({ webkitBorderBefore: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    THIN: this.set("thin"),
    MEDIUM: this.set("medium"),
    THICK: this.set("thick"),
    NONE: this.set("none"),
    HIDDEN: this.set("hidden"),
    DOTTED: this.set("dotted"),
    DASHED: this.set("dashed"),
    SOLID: this.set("solid"),
    DOUBLE: this.set("double"),
    GROOVE: this.set("groove"),
    RIDGE: this.set("ridge"),
    INSET: this.set("inset"),
    OUTSET: this.set("outset")
};
const _WebkitBorderBeforeColor = {
    set: (...params) => ({ webkitBorderBeforeColor: buildProperty(params) })
};
const _WebkitBorderBeforeStyle = {
    set: (...params) => ({ webkitBorderBeforeStyle: buildProperty(params) }),
    NONE: this.set("none"),
    HIDDEN: this.set("hidden"),
    DOTTED: this.set("dotted"),
    DASHED: this.set("dashed"),
    SOLID: this.set("solid"),
    DOUBLE: this.set("double"),
    GROOVE: this.set("groove"),
    RIDGE: this.set("ridge"),
    INSET: this.set("inset"),
    OUTSET: this.set("outset")
};
const _WebkitBorderBeforeWidth = {
    set: (...params) => ({ webkitBorderBeforeWidth: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    THIN: this.set("thin"),
    MEDIUM: this.set("medium"),
    THICK: this.set("thick")
};
const _WebkitBoxReflect = {
    set: (...params) => ({ webkitBoxReflect: buildProperty(params) }),
    ABOVE: this.set("above"),
    BELOW: this.set("below"),
    RIGHT: this.set("right"),
    LEFT: this.set("left"),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    image: (...params) => this.set(Method.image(...params)),
    imageSet: (...params) => this.set(Method.imageSet(...params)),
    element: (...params) => this.set(Method.element(...params)),
    crossFade: (...params) => this.set(Method.crossFade(...params)),
    linearGradient: (...params) => this.set(Method.linearGradient(...params)),
    repeatingLinearGradient: (...params) => this.set(Method.repeatingLinearGradient(...params)),
    radialGradient: (...params) => this.set(Method.radialGradient(...params)),
    repeatingRadialGradient: (...params) => this.set(Method.repeatingRadialGradient(...params))
};
const _WebkitMask = {
    set: (...params) => ({ webkitMask: buildProperty(params) }),
    NONE: this.set("none"),
    image: (...params) => this.set(Method.image(...params)),
    imageSet: (...params) => this.set(Method.imageSet(...params)),
    element: (...params) => this.set(Method.element(...params)),
    crossFade: (...params) => this.set(Method.crossFade(...params)),
    linearGradient: (...params) => this.set(Method.linearGradient(...params)),
    repeatingLinearGradient: (...params) => this.set(Method.repeatingLinearGradient(...params)),
    radialGradient: (...params) => this.set(Method.radialGradient(...params)),
    repeatingRadialGradient: (...params) => this.set(Method.repeatingRadialGradient(...params)),
    AUTO: this.set("auto"),
    COVER: this.set("cover"),
    CONTAIN: this.set("contain"),
    REPEAT_X: this.set("repeat-x"),
    REPEAT_Y: this.set("repeat-y"),
    REPEAT: this.set("repeat"),
    SPACE: this.set("space"),
    ROUND: this.set("round"),
    NO_REPEAT: this.set("no-repeat"),
    BORDER_BOX: this.set("border-box"),
    PADDING_BOX: this.set("padding-box"),
    CONTENT_BOX: this.set("content-box"),
    BORDER: this.set("border"),
    PADDING: this.set("padding"),
    CONTENT: this.set("content"),
    TEXT: this.set("text")
};
const _WebkitMaskAttachment = {
    set: (...params) => ({ webkitMaskAttachment: buildProperty(params) }),
    SCROLL: this.set("scroll"),
    FIXED: this.set("fixed"),
    LOCAL: this.set("local")
};
const _WebkitMaskClip = {
    set: (...params) => ({ webkitMaskClip: buildProperty(params) }),
    BORDER_BOX: this.set("border-box"),
    PADDING_BOX: this.set("padding-box"),
    CONTENT_BOX: this.set("content-box"),
    BORDER: this.set("border"),
    PADDING: this.set("padding"),
    CONTENT: this.set("content"),
    TEXT: this.set("text")
};
const _WebkitMaskComposite = {
    set: (...params) => ({ webkitMaskComposite: buildProperty(params) }),
    CLEAR: this.set("clear"),
    COPY: this.set("copy"),
    SOURCE_OVER: this.set("source-over"),
    SOURCE_IN: this.set("source-in"),
    SOURCE_OUT: this.set("source-out"),
    SOURCE_ATOP: this.set("source-atop"),
    DESTINATION_OVER: this.set("destination-over"),
    DESTINATION_IN: this.set("destination-in"),
    DESTINATION_OUT: this.set("destination-out"),
    DESTINATION_ATOP: this.set("destination-atop"),
    XOR: this.set("xor")
};
const _WebkitMaskImage = {
    set: (...params) => ({ webkitMaskImage: buildProperty(params) }),
    NONE: this.set("none"),
    image: (...params) => this.set(Method.image(...params)),
    imageSet: (...params) => this.set(Method.imageSet(...params)),
    element: (...params) => this.set(Method.element(...params)),
    crossFade: (...params) => this.set(Method.crossFade(...params)),
    linearGradient: (...params) => this.set(Method.linearGradient(...params)),
    repeatingLinearGradient: (...params) => this.set(Method.repeatingLinearGradient(...params)),
    radialGradient: (...params) => this.set(Method.radialGradient(...params)),
    repeatingRadialGradient: (...params) => this.set(Method.repeatingRadialGradient(...params))
};
const _WebkitMaskOrigin = {
    set: (...params) => ({ webkitMaskOrigin: buildProperty(params) }),
    BORDER_BOX: this.set("border-box"),
    PADDING_BOX: this.set("padding-box"),
    CONTENT_BOX: this.set("content-box"),
    BORDER: this.set("border"),
    PADDING: this.set("padding"),
    CONTENT: this.set("content")
};
const _WebkitMaskPosition = {
    set: (...params) => ({ webkitMaskPosition: buildProperty(params) }),
    LEFT: this.set("left"),
    CENTER: this.set("center"),
    RIGHT: this.set("right"),
    TOP: this.set("top"),
    BOTTOM: this.set("bottom"),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _WebkitMaskPositionX = {
    set: (...params) => ({ webkitMaskPositionX: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    LEFT: this.set("left"),
    CENTER: this.set("center"),
    RIGHT: this.set("right")
};
const _WebkitMaskPositionY = {
    set: (...params) => ({ webkitMaskPositionY: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    TOP: this.set("top"),
    CENTER: this.set("center"),
    BOTTOM: this.set("bottom")
};
const _WebkitMaskRepeat = {
    set: (...params) => ({ webkitMaskRepeat: buildProperty(params) }),
    REPEAT_X: this.set("repeat-x"),
    REPEAT_Y: this.set("repeat-y"),
    REPEAT: this.set("repeat"),
    SPACE: this.set("space"),
    ROUND: this.set("round"),
    NO_REPEAT: this.set("no-repeat")
};
const _WebkitMaskRepeatX = {
    set: (...params) => ({ webkitMaskRepeatX: buildProperty(params) }),
    REPEAT: this.set("repeat"),
    NO_REPEAT: this.set("no-repeat"),
    SPACE: this.set("space"),
    ROUND: this.set("round")
};
const _WebkitMaskRepeatY = {
    set: (...params) => ({ webkitMaskRepeatY: buildProperty(params) }),
    REPEAT: this.set("repeat"),
    NO_REPEAT: this.set("no-repeat"),
    SPACE: this.set("space"),
    ROUND: this.set("round")
};
const _WebkitMaskSize = {
    set: (...params) => ({ webkitMaskSize: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    AUTO: this.set("auto"),
    COVER: this.set("cover"),
    CONTAIN: this.set("contain")
};
const _WebkitOverflowScrolling = {
    set: (...params) => ({ webkitOverflowScrolling: buildProperty(params) }),
    AUTO: this.set("auto"),
    TOUCH: this.set("touch")
};
const _WebkitTapHighlightColor = {
    set: (...params) => ({ webkitTapHighlightColor: buildProperty(params) }),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ webkitTapHighlightColor: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText")
};
const _WebkitTextFillColor = {
    set: (...params) => ({ webkitTextFillColor: buildProperty(params) }),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ webkitTextFillColor: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText")
};
const _WebkitTextStroke = {
    set: (...params) => ({ webkitTextStroke: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ webkitTextStroke: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText")
};
const _WebkitTextStrokeColor = {
    set: (...params) => ({ webkitTextStrokeColor: buildProperty(params) }),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ webkitTextStrokeColor: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText")
};
const _WebkitTextStrokeWidth = {
    set: (...params) => ({ webkitTextStrokeWidth: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums))
};
const _WebkitTouchCallout = {
    set: (...params) => ({ webkitTouchCallout: buildProperty(params) }),
    DEFAULT: this.set("default"),
    NONE: this.set("none")
};
const _WebkitUserModify = {
    set: (...params) => ({ webkitUserModify: buildProperty(params) }),
    READ_ONLY: this.set("read-only"),
    READ_WRITE: this.set("read-write"),
    READ_WRITE_PLAINTEXT_ONLY: this.set("read-write-plaintext-only")
};
const _AlignContent = {
    set: (...params) => ({ alignContent: buildProperty(params) }),
    NORMAL: this.set("normal"),
    FIRST: this.set("first"),
    LAST: this.set("last"),
    BASELINE: this.set("baseline"),
    SPACE_BETWEEN: this.set("space-between"),
    SPACE_AROUND: this.set("space-around"),
    SPACE_EVENLY: this.set("space-evenly"),
    STRETCH: this.set("stretch"),
    UNSAFE: this.set("unsafe"),
    SAFE: this.set("safe"),
    CENTER: this.set("center"),
    START: this.set("start"),
    END: this.set("end"),
    FLEX_START: this.set("flex-start"),
    FLEX_END: this.set("flex-end")
};
const _AlignItems = {
    set: (...params) => ({ alignItems: buildProperty(params) }),
    NORMAL: this.set("normal"),
    STRETCH: this.set("stretch"),
    FIRST: this.set("first"),
    LAST: this.set("last"),
    BASELINE: this.set("baseline"),
    UNSAFE: this.set("unsafe"),
    SAFE: this.set("safe"),
    CENTER: this.set("center"),
    START: this.set("start"),
    END: this.set("end"),
    SELF_START: this.set("self-start"),
    SELF_END: this.set("self-end"),
    FLEX_START: this.set("flex-start"),
    FLEX_END: this.set("flex-end")
};
const _AlignSelf = {
    set: (...params) => ({ alignSelf: buildProperty(params) }),
    AUTO: this.set("auto"),
    NORMAL: this.set("normal"),
    STRETCH: this.set("stretch"),
    FIRST: this.set("first"),
    LAST: this.set("last"),
    BASELINE: this.set("baseline"),
    UNSAFE: this.set("unsafe"),
    SAFE: this.set("safe"),
    CENTER: this.set("center"),
    START: this.set("start"),
    END: this.set("end"),
    SELF_START: this.set("self-start"),
    SELF_END: this.set("self-end"),
    FLEX_START: this.set("flex-start"),
    FLEX_END: this.set("flex-end")
};
const _All = {
    set: (...params) => ({ all: buildProperty(params) }),
    INITIAL: this.set("initial"),
    INHERIT: this.set("inherit"),
    UNSET: this.set("unset"),
    REVERT: this.set("revert")
};
const _Animation = {
    set: (...params) => ({ animation: buildProperty(params) }),
    s: (...nums) => this.set(Time.s(...nums)),
    ms: (...nums) => this.set(Time.ms(...nums)),
    LINEAR: this.set("linear"),
    EASE: this.set("ease"),
    EASE_IN: this.set("ease-in"),
    EASE_OUT: this.set("ease-out"),
    EASE_IN_OUT: this.set("ease-in-out"),
    cubicBezier: (...params) => this.set(Method.cubicBezier(...params)),
    STEP_START: this.set("step-start"),
    STEP_END: this.set("step-end"),
    steps: (...params) => this.set(Method.steps(...params)),
    frames: (...params) => this.set(Method.frames(...params)),
    INFINITE: this.set("infinite"),
    NORMAL: this.set("normal"),
    REVERSE: this.set("reverse"),
    ALTERNATE: this.set("alternate"),
    ALTERNATE_REVERSE: this.set("alternate-reverse"),
    NONE: this.set("none"),
    FORWARDS: this.set("forwards"),
    BACKWARDS: this.set("backwards"),
    BOTH: this.set("both"),
    RUNNING: this.set("running"),
    PAUSED: this.set("paused")
};
const _AnimationDelay = {
    set: (...params) => ({ animationDelay: buildProperty(params) }),
    s: (...nums) => this.set(Time.s(...nums)),
    ms: (...nums) => this.set(Time.ms(...nums))
};
const _AnimationDirection = {
    set: (...params) => ({ animationDirection: buildProperty(params) }),
    NORMAL: this.set("normal"),
    REVERSE: this.set("reverse"),
    ALTERNATE: this.set("alternate"),
    ALTERNATE_REVERSE: this.set("alternate-reverse")
};
const _AnimationDuration = {
    set: (...params) => ({ animationDuration: buildProperty(params) }),
    s: (...nums) => this.set(Time.s(...nums)),
    ms: (...nums) => this.set(Time.ms(...nums))
};
const _AnimationFillMode = {
    set: (...params) => ({ animationFillMode: buildProperty(params) }),
    NONE: this.set("none"),
    FORWARDS: this.set("forwards"),
    BACKWARDS: this.set("backwards"),
    BOTH: this.set("both")
};
const _AnimationIterationCount = {
    set: (...params) => ({ animationIterationCount: buildProperty(params) }),
    INFINITE: this.set("infinite")
};
const _AnimationName = {
    set: (...params) => ({ animationName: buildProperty(params) }),
    NONE: this.set("none")
};
const _AnimationPlayState = {
    set: (...params) => ({ animationPlayState: buildProperty(params) }),
    RUNNING: this.set("running"),
    PAUSED: this.set("paused")
};
const _AnimationTimingFunction = {
    set: (...params) => ({ animationTimingFunction: buildProperty(params) }),
    LINEAR: this.set("linear"),
    EASE: this.set("ease"),
    EASE_IN: this.set("ease-in"),
    EASE_OUT: this.set("ease-out"),
    EASE_IN_OUT: this.set("ease-in-out"),
    cubicBezier: (...params) => this.set(Method.cubicBezier(...params)),
    STEP_START: this.set("step-start"),
    STEP_END: this.set("step-end"),
    steps: (...params) => this.set(Method.steps(...params)),
    frames: (...params) => this.set(Method.frames(...params))
};
const _Appearance = {
    set: (...params) => ({ appearance: buildProperty(params) }),
    AUTO: this.set("auto"),
    NONE: this.set("none")
};
const _Azimuth = {
    set: (...params) => ({ azimuth: buildProperty(params) }),
    deg: (...nums) => this.set(Angle.deg(...nums)),
    rad: (...nums) => this.set(Angle.rad(...nums)),
    grad: (...nums) => this.set(Angle.grad(...nums)),
    turn: (...nums) => this.set(Angle.turn(...nums)),
    LEFT_SIDE: this.set("left-side"),
    FAR_LEFT: this.set("far-left"),
    LEFT: this.set("left"),
    CENTER_LEFT: this.set("center-left"),
    CENTER: this.set("center"),
    CENTER_RIGHT: this.set("center-right"),
    RIGHT: this.set("right"),
    FAR_RIGHT: this.set("far-right"),
    RIGHT_SIDE: this.set("right-side"),
    BEHIND: this.set("behind"),
    LEFTWARDS: this.set("leftwards"),
    RIGHTWARDS: this.set("rightwards")
};
const _BackdropFilter = {
    set: (...params) => ({ backdropFilter: buildProperty(params) }),
    NONE: this.set("none"),
    blur: (...params) => this.set(Method.blur(...params)),
    brightness: (...params) => this.set(Method.brightness(...params)),
    contrast: (...params) => this.set(Method.contrast(...params)),
    dropShadow: (...params) => this.set(Method.dropShadow(...params)),
    grayscale: (...params) => this.set(Method.grayscale(...params)),
    hueRotate: (...params) => this.set(Method.hueRotate(...params)),
    invert: (...params) => this.set(Method.invert(...params)),
    opacity: (...params) => this.set(Method.opacity(...params)),
    saturate: (...params) => this.set(Method.saturate(...params)),
    sepia: (...params) => this.set(Method.sepia(...params))
};
const _BackfaceVisibility = {
    set: (...params) => ({ backfaceVisibility: buildProperty(params) }),
    VISIBLE: this.set("visible"),
    HIDDEN: this.set("hidden")
};
const _Background = {
    set: (...params) => ({ background: buildProperty(params) }),
    NONE: this.set("none"),
    image: (...params) => this.set(Method.image(...params)),
    imageSet: (...params) => this.set(Method.imageSet(...params)),
    element: (...params) => this.set(Method.element(...params)),
    crossFade: (...params) => this.set(Method.crossFade(...params)),
    linearGradient: (...params) => this.set(Method.linearGradient(...params)),
    repeatingLinearGradient: (...params) => this.set(Method.repeatingLinearGradient(...params)),
    radialGradient: (...params) => this.set(Method.radialGradient(...params)),
    repeatingRadialGradient: (...params) => this.set(Method.repeatingRadialGradient(...params)),
    LEFT: this.set("left"),
    CENTER: this.set("center"),
    RIGHT: this.set("right"),
    TOP: this.set("top"),
    BOTTOM: this.set("bottom"),
    AUTO: this.set("auto"),
    COVER: this.set("cover"),
    CONTAIN: this.set("contain"),
    REPEAT_X: this.set("repeat-x"),
    REPEAT_Y: this.set("repeat-y"),
    REPEAT: this.set("repeat"),
    SPACE: this.set("space"),
    ROUND: this.set("round"),
    NO_REPEAT: this.set("no-repeat"),
    SCROLL: this.set("scroll"),
    FIXED: this.set("fixed"),
    LOCAL: this.set("local"),
    BORDER_BOX: this.set("border-box"),
    PADDING_BOX: this.set("padding-box"),
    CONTENT_BOX: this.set("content-box")
};
const _BackgroundAttachment = {
    set: (...params) => ({ backgroundAttachment: buildProperty(params) }),
    SCROLL: this.set("scroll"),
    FIXED: this.set("fixed"),
    LOCAL: this.set("local")
};
const _BackgroundBlendMode = {
    set: (...params) => ({ backgroundBlendMode: buildProperty(params) }),
    NORMAL: this.set("normal"),
    MULTIPLY: this.set("multiply"),
    SCREEN: this.set("screen"),
    OVERLAY: this.set("overlay"),
    DARKEN: this.set("darken"),
    LIGHTEN: this.set("lighten"),
    COLOR_DODGE: this.set("color-dodge"),
    COLOR_BURN: this.set("color-burn"),
    HARD_LIGHT: this.set("hard-light"),
    SOFT_LIGHT: this.set("soft-light"),
    DIFFERENCE: this.set("difference"),
    EXCLUSION: this.set("exclusion"),
    HUE: this.set("hue"),
    SATURATION: this.set("saturation"),
    COLOR: this.set("color"),
    LUMINOSITY: this.set("luminosity")
};
const _BackgroundClip = {
    set: (...params) => ({ backgroundClip: buildProperty(params) }),
    BORDER_BOX: this.set("border-box"),
    PADDING_BOX: this.set("padding-box"),
    CONTENT_BOX: this.set("content-box")
};
const _BackgroundColor = {
    set: (...params) => ({ backgroundColor: buildProperty(params) }),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ backgroundColor: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText")
};
const _BackgroundImage = {
    set: (...params) => ({ backgroundImage: buildProperty(params) }),
    NONE: this.set("none"),
    image: (...params) => this.set(Method.image(...params)),
    imageSet: (...params) => this.set(Method.imageSet(...params)),
    element: (...params) => this.set(Method.element(...params)),
    crossFade: (...params) => this.set(Method.crossFade(...params)),
    linearGradient: (...params) => this.set(Method.linearGradient(...params)),
    repeatingLinearGradient: (...params) => this.set(Method.repeatingLinearGradient(...params)),
    radialGradient: (...params) => this.set(Method.radialGradient(...params)),
    repeatingRadialGradient: (...params) => this.set(Method.repeatingRadialGradient(...params))
};
const _BackgroundOrigin = {
    set: (...params) => ({ backgroundOrigin: buildProperty(params) }),
    BORDER_BOX: this.set("border-box"),
    PADDING_BOX: this.set("padding-box"),
    CONTENT_BOX: this.set("content-box")
};
const _BackgroundPosition = {
    set: (...params) => ({ backgroundPosition: buildProperty(params) }),
    LEFT: this.set("left"),
    CENTER: this.set("center"),
    RIGHT: this.set("right"),
    TOP: this.set("top"),
    BOTTOM: this.set("bottom"),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _BackgroundPositionX = {
    set: (...params) => ({ backgroundPositionX: buildProperty(params) }),
    CENTER: this.set("center"),
    LEFT: this.set("left"),
    RIGHT: this.set("right"),
    X_START: this.set("x-start"),
    X_END: this.set("x-end"),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _BackgroundPositionY = {
    set: (...params) => ({ backgroundPositionY: buildProperty(params) }),
    CENTER: this.set("center"),
    TOP: this.set("top"),
    BOTTOM: this.set("bottom"),
    Y_START: this.set("y-start"),
    Y_END: this.set("y-end"),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _BackgroundRepeat = {
    set: (...params) => ({ backgroundRepeat: buildProperty(params) }),
    REPEAT_X: this.set("repeat-x"),
    REPEAT_Y: this.set("repeat-y"),
    REPEAT: this.set("repeat"),
    SPACE: this.set("space"),
    ROUND: this.set("round"),
    NO_REPEAT: this.set("no-repeat")
};
const _BackgroundSize = {
    set: (...params) => ({ backgroundSize: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    AUTO: this.set("auto"),
    COVER: this.set("cover"),
    CONTAIN: this.set("contain")
};
const _BlockOverflow = {
    set: (...params) => ({ blockOverflow: buildProperty(params) }),
    CLIP: this.set("clip"),
    ELLIPSIS: this.set("ellipsis")
};
const _BlockSize = {
    set: (...params) => ({ blockSize: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    BORDER_BOX: this.set("border-box"),
    CONTENT_BOX: this.set("content-box"),
    AVAILABLE: this.set("available"),
    MIN_CONTENT: this.set("min-content"),
    MAX_CONTENT: this.set("max-content"),
    FIT_CONTENT: this.set("fit-content"),
    AUTO: this.set("auto")
};
const _Border = {
    set: (...params) => ({ border: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    THIN: this.set("thin"),
    MEDIUM: this.set("medium"),
    THICK: this.set("thick"),
    NONE: this.set("none"),
    HIDDEN: this.set("hidden"),
    DOTTED: this.set("dotted"),
    DASHED: this.set("dashed"),
    SOLID: this.set("solid"),
    DOUBLE: this.set("double"),
    GROOVE: this.set("groove"),
    RIDGE: this.set("ridge"),
    INSET: this.set("inset"),
    OUTSET: this.set("outset"),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ border: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText")
};
const _BorderBlockEnd = {
    set: (...params) => ({ borderBlockEnd: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    THIN: this.set("thin"),
    MEDIUM: this.set("medium"),
    THICK: this.set("thick"),
    NONE: this.set("none"),
    HIDDEN: this.set("hidden"),
    DOTTED: this.set("dotted"),
    DASHED: this.set("dashed"),
    SOLID: this.set("solid"),
    DOUBLE: this.set("double"),
    GROOVE: this.set("groove"),
    RIDGE: this.set("ridge"),
    INSET: this.set("inset"),
    OUTSET: this.set("outset")
};
const _BorderBlockEndColor = { set: (...params) => ({ borderBlockEndColor: buildProperty(params) }) };
const _BorderBlockEndStyle = {
    set: (...params) => ({ borderBlockEndStyle: buildProperty(params) }),
    NONE: this.set("none"),
    HIDDEN: this.set("hidden"),
    DOTTED: this.set("dotted"),
    DASHED: this.set("dashed"),
    SOLID: this.set("solid"),
    DOUBLE: this.set("double"),
    GROOVE: this.set("groove"),
    RIDGE: this.set("ridge"),
    INSET: this.set("inset"),
    OUTSET: this.set("outset")
};
const _BorderBlockEndWidth = {
    set: (...params) => ({ borderBlockEndWidth: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    THIN: this.set("thin"),
    MEDIUM: this.set("medium"),
    THICK: this.set("thick")
};
const _BorderBlockStart = {
    set: (...params) => ({ borderBlockStart: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    THIN: this.set("thin"),
    MEDIUM: this.set("medium"),
    THICK: this.set("thick"),
    NONE: this.set("none"),
    HIDDEN: this.set("hidden"),
    DOTTED: this.set("dotted"),
    DASHED: this.set("dashed"),
    SOLID: this.set("solid"),
    DOUBLE: this.set("double"),
    GROOVE: this.set("groove"),
    RIDGE: this.set("ridge"),
    INSET: this.set("inset"),
    OUTSET: this.set("outset")
};
const _BorderBlockStartColor = {
    set: (...params) => ({ borderBlockStartColor: buildProperty(params) })
};
const _BorderBlockStartStyle = {
    set: (...params) => ({ borderBlockStartStyle: buildProperty(params) }),
    NONE: this.set("none"),
    HIDDEN: this.set("hidden"),
    DOTTED: this.set("dotted"),
    DASHED: this.set("dashed"),
    SOLID: this.set("solid"),
    DOUBLE: this.set("double"),
    GROOVE: this.set("groove"),
    RIDGE: this.set("ridge"),
    INSET: this.set("inset"),
    OUTSET: this.set("outset")
};
const _BorderBlockStartWidth = {
    set: (...params) => ({ borderBlockStartWidth: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    THIN: this.set("thin"),
    MEDIUM: this.set("medium"),
    THICK: this.set("thick")
};
const _BorderBottom = {
    set: (...params) => ({ borderBottom: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    THIN: this.set("thin"),
    MEDIUM: this.set("medium"),
    THICK: this.set("thick"),
    NONE: this.set("none"),
    HIDDEN: this.set("hidden"),
    DOTTED: this.set("dotted"),
    DASHED: this.set("dashed"),
    SOLID: this.set("solid"),
    DOUBLE: this.set("double"),
    GROOVE: this.set("groove"),
    RIDGE: this.set("ridge"),
    INSET: this.set("inset"),
    OUTSET: this.set("outset"),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ borderBottom: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText")
};
const _BorderBottomColor = {
    set: (...params) => ({ borderBottomColor: buildProperty(params) }),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ borderBottomColor: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText")
};
const _BorderBottomLeftRadius = {
    set: (...params) => ({ borderBottomLeftRadius: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _BorderBottomRightRadius = {
    set: (...params) => ({ borderBottomRightRadius: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _BorderBottomStyle = {
    set: (...params) => ({ borderBottomStyle: buildProperty(params) }),
    NONE: this.set("none"),
    HIDDEN: this.set("hidden"),
    DOTTED: this.set("dotted"),
    DASHED: this.set("dashed"),
    SOLID: this.set("solid"),
    DOUBLE: this.set("double"),
    GROOVE: this.set("groove"),
    RIDGE: this.set("ridge"),
    INSET: this.set("inset"),
    OUTSET: this.set("outset")
};
const _BorderBottomWidth = {
    set: (...params) => ({ borderBottomWidth: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    THIN: this.set("thin"),
    MEDIUM: this.set("medium"),
    THICK: this.set("thick")
};
const _BorderCollapse = {
    set: (...params) => ({ borderCollapse: buildProperty(params) }),
    COLLAPSE: this.set("collapse"),
    SEPARATE: this.set("separate")
};
const _BorderColor = {
    set: (...params) => ({ borderColor: buildProperty(params) }),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ borderColor: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText")
};
const _BorderImage = {
    set: (...params) => ({ borderImage: buildProperty(params) }),
    NONE: this.set("none"),
    image: (...params) => this.set(Method.image(...params)),
    imageSet: (...params) => this.set(Method.imageSet(...params)),
    element: (...params) => this.set(Method.element(...params)),
    crossFade: (...params) => this.set(Method.crossFade(...params)),
    linearGradient: (...params) => this.set(Method.linearGradient(...params)),
    repeatingLinearGradient: (...params) => this.set(Method.repeatingLinearGradient(...params)),
    radialGradient: (...params) => this.set(Method.radialGradient(...params)),
    repeatingRadialGradient: (...params) => this.set(Method.repeatingRadialGradient(...params)),
    X: (...nums) => this.set(Length.X(...nums)),
    FILL: this.set("fill"),
    AUTO: this.set("auto"),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    STRETCH: this.set("stretch"),
    REPEAT: this.set("repeat"),
    ROUND: this.set("round"),
    SPACE: this.set("space")
};
const _BorderImageOutset = {
    set: (...params) => ({ borderImageOutset: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums))
};
const _BorderImageRepeat = {
    set: (...params) => ({ borderImageRepeat: buildProperty(params) }),
    STRETCH: this.set("stretch"),
    REPEAT: this.set("repeat"),
    ROUND: this.set("round"),
    SPACE: this.set("space")
};
const _BorderImageSlice = {
    set: (...params) => ({ borderImageSlice: buildProperty(params) }),
    X: (...nums) => this.set(Length.X(...nums)),
    FILL: this.set("fill")
};
const _BorderImageSource = {
    set: (...params) => ({ borderImageSource: buildProperty(params) }),
    NONE: this.set("none"),
    image: (...params) => this.set(Method.image(...params)),
    imageSet: (...params) => this.set(Method.imageSet(...params)),
    element: (...params) => this.set(Method.element(...params)),
    crossFade: (...params) => this.set(Method.crossFade(...params)),
    linearGradient: (...params) => this.set(Method.linearGradient(...params)),
    repeatingLinearGradient: (...params) => this.set(Method.repeatingLinearGradient(...params)),
    radialGradient: (...params) => this.set(Method.radialGradient(...params)),
    repeatingRadialGradient: (...params) => this.set(Method.repeatingRadialGradient(...params))
};
const _BorderImageWidth = {
    set: (...params) => ({ borderImageWidth: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    AUTO: this.set("auto")
};
const _BorderInlineEnd = {
    set: (...params) => ({ borderInlineEnd: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    THIN: this.set("thin"),
    MEDIUM: this.set("medium"),
    THICK: this.set("thick"),
    NONE: this.set("none"),
    HIDDEN: this.set("hidden"),
    DOTTED: this.set("dotted"),
    DASHED: this.set("dashed"),
    SOLID: this.set("solid"),
    DOUBLE: this.set("double"),
    GROOVE: this.set("groove"),
    RIDGE: this.set("ridge"),
    INSET: this.set("inset"),
    OUTSET: this.set("outset")
};
const _BorderInlineEndColor = { set: (...params) => ({ borderInlineEndColor: buildProperty(params) }) };
const _BorderInlineEndStyle = {
    set: (...params) => ({ borderInlineEndStyle: buildProperty(params) }),
    NONE: this.set("none"),
    HIDDEN: this.set("hidden"),
    DOTTED: this.set("dotted"),
    DASHED: this.set("dashed"),
    SOLID: this.set("solid"),
    DOUBLE: this.set("double"),
    GROOVE: this.set("groove"),
    RIDGE: this.set("ridge"),
    INSET: this.set("inset"),
    OUTSET: this.set("outset")
};
const _BorderInlineEndWidth = {
    set: (...params) => ({ borderInlineEndWidth: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    THIN: this.set("thin"),
    MEDIUM: this.set("medium"),
    THICK: this.set("thick")
};
const _BorderInlineStart = {
    set: (...params) => ({ borderInlineStart: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    THIN: this.set("thin"),
    MEDIUM: this.set("medium"),
    THICK: this.set("thick"),
    NONE: this.set("none"),
    HIDDEN: this.set("hidden"),
    DOTTED: this.set("dotted"),
    DASHED: this.set("dashed"),
    SOLID: this.set("solid"),
    DOUBLE: this.set("double"),
    GROOVE: this.set("groove"),
    RIDGE: this.set("ridge"),
    INSET: this.set("inset"),
    OUTSET: this.set("outset")
};
const _BorderInlineStartColor = {
    set: (...params) => ({ borderInlineStartColor: buildProperty(params) })
};
const _BorderInlineStartStyle = {
    set: (...params) => ({ borderInlineStartStyle: buildProperty(params) }),
    NONE: this.set("none"),
    HIDDEN: this.set("hidden"),
    DOTTED: this.set("dotted"),
    DASHED: this.set("dashed"),
    SOLID: this.set("solid"),
    DOUBLE: this.set("double"),
    GROOVE: this.set("groove"),
    RIDGE: this.set("ridge"),
    INSET: this.set("inset"),
    OUTSET: this.set("outset")
};
const _BorderInlineStartWidth = {
    set: (...params) => ({ borderInlineStartWidth: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    THIN: this.set("thin"),
    MEDIUM: this.set("medium"),
    THICK: this.set("thick")
};
const _BorderLeft = {
    set: (...params) => ({ borderLeft: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    THIN: this.set("thin"),
    MEDIUM: this.set("medium"),
    THICK: this.set("thick"),
    NONE: this.set("none"),
    HIDDEN: this.set("hidden"),
    DOTTED: this.set("dotted"),
    DASHED: this.set("dashed"),
    SOLID: this.set("solid"),
    DOUBLE: this.set("double"),
    GROOVE: this.set("groove"),
    RIDGE: this.set("ridge"),
    INSET: this.set("inset"),
    OUTSET: this.set("outset"),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ borderLeft: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText")
};
const _BorderLeftColor = {
    set: (...params) => ({ borderLeftColor: buildProperty(params) }),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ borderLeftColor: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText")
};
const _BorderLeftStyle = {
    set: (...params) => ({ borderLeftStyle: buildProperty(params) }),
    NONE: this.set("none"),
    HIDDEN: this.set("hidden"),
    DOTTED: this.set("dotted"),
    DASHED: this.set("dashed"),
    SOLID: this.set("solid"),
    DOUBLE: this.set("double"),
    GROOVE: this.set("groove"),
    RIDGE: this.set("ridge"),
    INSET: this.set("inset"),
    OUTSET: this.set("outset")
};
const _BorderLeftWidth = {
    set: (...params) => ({ borderLeftWidth: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    THIN: this.set("thin"),
    MEDIUM: this.set("medium"),
    THICK: this.set("thick")
};
const _BorderRadius = {
    set: (...params) => ({ borderRadius: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _BorderRight = {
    set: (...params) => ({ borderRight: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    THIN: this.set("thin"),
    MEDIUM: this.set("medium"),
    THICK: this.set("thick"),
    NONE: this.set("none"),
    HIDDEN: this.set("hidden"),
    DOTTED: this.set("dotted"),
    DASHED: this.set("dashed"),
    SOLID: this.set("solid"),
    DOUBLE: this.set("double"),
    GROOVE: this.set("groove"),
    RIDGE: this.set("ridge"),
    INSET: this.set("inset"),
    OUTSET: this.set("outset"),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ borderRight: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText")
};
const _BorderRightColor = {
    set: (...params) => ({ borderRightColor: buildProperty(params) }),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ borderRightColor: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText")
};
const _BorderRightStyle = {
    set: (...params) => ({ borderRightStyle: buildProperty(params) }),
    NONE: this.set("none"),
    HIDDEN: this.set("hidden"),
    DOTTED: this.set("dotted"),
    DASHED: this.set("dashed"),
    SOLID: this.set("solid"),
    DOUBLE: this.set("double"),
    GROOVE: this.set("groove"),
    RIDGE: this.set("ridge"),
    INSET: this.set("inset"),
    OUTSET: this.set("outset")
};
const _BorderRightWidth = {
    set: (...params) => ({ borderRightWidth: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    THIN: this.set("thin"),
    MEDIUM: this.set("medium"),
    THICK: this.set("thick")
};
const _BorderSpacing = {
    set: (...params) => ({ borderSpacing: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums))
};
const _BorderStyle = {
    set: (...params) => ({ borderStyle: buildProperty(params) }),
    NONE: this.set("none"),
    HIDDEN: this.set("hidden"),
    DOTTED: this.set("dotted"),
    DASHED: this.set("dashed"),
    SOLID: this.set("solid"),
    DOUBLE: this.set("double"),
    GROOVE: this.set("groove"),
    RIDGE: this.set("ridge"),
    INSET: this.set("inset"),
    OUTSET: this.set("outset")
};
const _BorderTop = {
    set: (...params) => ({ borderTop: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    THIN: this.set("thin"),
    MEDIUM: this.set("medium"),
    THICK: this.set("thick"),
    NONE: this.set("none"),
    HIDDEN: this.set("hidden"),
    DOTTED: this.set("dotted"),
    DASHED: this.set("dashed"),
    SOLID: this.set("solid"),
    DOUBLE: this.set("double"),
    GROOVE: this.set("groove"),
    RIDGE: this.set("ridge"),
    INSET: this.set("inset"),
    OUTSET: this.set("outset"),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ borderTop: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText")
};
const _BorderTopColor = {
    set: (...params) => ({ borderTopColor: buildProperty(params) }),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ borderTopColor: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText")
};
const _BorderTopLeftRadius = {
    set: (...params) => ({ borderTopLeftRadius: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _BorderTopRightRadius = {
    set: (...params) => ({ borderTopRightRadius: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _BorderTopStyle = {
    set: (...params) => ({ borderTopStyle: buildProperty(params) }),
    NONE: this.set("none"),
    HIDDEN: this.set("hidden"),
    DOTTED: this.set("dotted"),
    DASHED: this.set("dashed"),
    SOLID: this.set("solid"),
    DOUBLE: this.set("double"),
    GROOVE: this.set("groove"),
    RIDGE: this.set("ridge"),
    INSET: this.set("inset"),
    OUTSET: this.set("outset")
};
const _BorderTopWidth = {
    set: (...params) => ({ borderTopWidth: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    THIN: this.set("thin"),
    MEDIUM: this.set("medium"),
    THICK: this.set("thick")
};
const _BorderWidth = {
    set: (...params) => ({ borderWidth: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    THIN: this.set("thin"),
    MEDIUM: this.set("medium"),
    THICK: this.set("thick")
};
const _Bottom = {
    set: (...params) => ({ bottom: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    AUTO: this.set("auto")
};
const _BoxAlign = {
    set: (...params) => ({ boxAlign: buildProperty(params) }),
    START: this.set("start"),
    CENTER: this.set("center"),
    END: this.set("end"),
    BASELINE: this.set("baseline"),
    STRETCH: this.set("stretch")
};
const _BoxDecorationBreak = {
    set: (...params) => ({ boxDecorationBreak: buildProperty(params) }),
    SLICE: this.set("slice"),
    CLONE: this.set("clone")
};
const _BoxDirection = {
    set: (...params) => ({ boxDirection: buildProperty(params) }),
    NORMAL: this.set("normal"),
    REVERSE: this.set("reverse"),
    INHERIT: this.set("inherit")
};
const _BoxFlex = { set: (...params) => ({ boxFlex: buildProperty(params) }) };
const _BoxFlexGroup = { set: (...params) => ({ boxFlexGroup: buildProperty(params) }) };
const _BoxLines = {
    set: (...params) => ({ boxLines: buildProperty(params) }),
    SINGLE: this.set("single"),
    MULTIPLE: this.set("multiple")
};
const _BoxOrdinalGroup = { set: (...params) => ({ boxOrdinalGroup: buildProperty(params) }) };
const _BoxOrient = {
    set: (...params) => ({ boxOrient: buildProperty(params) }),
    HORIZONTAL: this.set("horizontal"),
    VERTICAL: this.set("vertical"),
    INLINE_AXIS: this.set("inline-axis"),
    BLOCK_AXIS: this.set("block-axis"),
    INHERIT: this.set("inherit")
};
const _BoxPack = {
    set: (...params) => ({ boxPack: buildProperty(params) }),
    START: this.set("start"),
    CENTER: this.set("center"),
    END: this.set("end"),
    JUSTIFY: this.set("justify")
};
const _BoxShadow = {
    set: (...params) => ({ boxShadow: buildProperty(params) }),
    NONE: this.set("none"),
    INSET: this.set("inset"),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ boxShadow: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText")
};
const _BoxSizing = {
    set: (...params) => ({ boxSizing: buildProperty(params) }),
    CONTENT_BOX: this.set("content-box"),
    BORDER_BOX: this.set("border-box")
};
const _BreakAfter = {
    set: (...params) => ({ breakAfter: buildProperty(params) }),
    AUTO: this.set("auto"),
    AVOID: this.set("avoid"),
    AVOID_PAGE: this.set("avoid-page"),
    PAGE: this.set("page"),
    LEFT: this.set("left"),
    RIGHT: this.set("right"),
    RECTO: this.set("recto"),
    VERSO: this.set("verso"),
    AVOID_COLUMN: this.set("avoid-column"),
    COLUMN: this.set("column"),
    AVOID_REGION: this.set("avoid-region"),
    REGION: this.set("region")
};
const _BreakBefore = {
    set: (...params) => ({ breakBefore: buildProperty(params) }),
    AUTO: this.set("auto"),
    AVOID: this.set("avoid"),
    AVOID_PAGE: this.set("avoid-page"),
    PAGE: this.set("page"),
    LEFT: this.set("left"),
    RIGHT: this.set("right"),
    RECTO: this.set("recto"),
    VERSO: this.set("verso"),
    AVOID_COLUMN: this.set("avoid-column"),
    COLUMN: this.set("column"),
    AVOID_REGION: this.set("avoid-region"),
    REGION: this.set("region")
};
const _BreakInside = {
    set: (...params) => ({ breakInside: buildProperty(params) }),
    AUTO: this.set("auto"),
    AVOID: this.set("avoid"),
    AVOID_PAGE: this.set("avoid-page"),
    AVOID_COLUMN: this.set("avoid-column"),
    AVOID_REGION: this.set("avoid-region")
};
const _CaptionSide = {
    set: (...params) => ({ captionSide: buildProperty(params) }),
    TOP: this.set("top"),
    BOTTOM: this.set("bottom"),
    BLOCK_START: this.set("block-start"),
    BLOCK_END: this.set("block-end"),
    INLINE_START: this.set("inline-start"),
    INLINE_END: this.set("inline-end")
};
const _CaretColor = {
    set: (...params) => ({ caretColor: buildProperty(params) }),
    AUTO: this.set("auto"),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ caretColor: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText")
};
const _Clear = {
    set: (...params) => ({ clear: buildProperty(params) }),
    NONE: this.set("none"),
    LEFT: this.set("left"),
    RIGHT: this.set("right"),
    BOTH: this.set("both"),
    INLINE_START: this.set("inline-start"),
    INLINE_END: this.set("inline-end")
};
const _Clip = {
    set: (...params) => ({ clip: buildProperty(params) }),
    rect: (...params) => this.set(Method.rect(...params)),
    AUTO: this.set("auto")
};
const _ClipPath = {
    set: (...params) => ({ clipPath: buildProperty(params) }),
    inset: (...params) => this.set(Method.inset(...params)),
    circle: (...params) => this.set(Method.circle(...params)),
    ellipse: (...params) => this.set(Method.ellipse(...params)),
    polygon: (...params) => this.set(Method.polygon(...params)),
    BORDER_BOX: this.set("border-box"),
    PADDING_BOX: this.set("padding-box"),
    CONTENT_BOX: this.set("content-box"),
    MARGIN_BOX: this.set("margin-box"),
    FILL_BOX: this.set("fill-box"),
    STROKE_BOX: this.set("stroke-box"),
    VIEW_BOX: this.set("view-box"),
    NONE: this.set("none")
};
const _Color = {
    set: (...params) => ({ color: buildProperty(params) }),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ color: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText")
};
const _ColorAdjust = {
    set: (...params) => ({ colorAdjust: buildProperty(params) }),
    ECONOMY: this.set("economy"),
    EXACT: this.set("exact")
};
const _ColumnCount = {
    set: (...params) => ({ columnCount: buildProperty(params) }),
    AUTO: this.set("auto")
};
const _ColumnFill = {
    set: (...params) => ({ columnFill: buildProperty(params) }),
    AUTO: this.set("auto"),
    BALANCE: this.set("balance"),
    BALANCE_ALL: this.set("balance-all")
};
const _ColumnGap = {
    set: (...params) => ({ columnGap: buildProperty(params) }),
    NORMAL: this.set("normal"),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _ColumnRule = {
    set: (...params) => ({ columnRule: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    THIN: this.set("thin"),
    MEDIUM: this.set("medium"),
    THICK: this.set("thick"),
    NONE: this.set("none"),
    HIDDEN: this.set("hidden"),
    DOTTED: this.set("dotted"),
    DASHED: this.set("dashed"),
    SOLID: this.set("solid"),
    DOUBLE: this.set("double"),
    GROOVE: this.set("groove"),
    RIDGE: this.set("ridge"),
    INSET: this.set("inset"),
    OUTSET: this.set("outset"),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ columnRule: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText")
};
const _ColumnRuleColor = {
    set: (...params) => ({ columnRuleColor: buildProperty(params) }),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ columnRuleColor: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText")
};
const _ColumnRuleStyle = {
    set: (...params) => ({ columnRuleStyle: buildProperty(params) }),
    NONE: this.set("none"),
    HIDDEN: this.set("hidden"),
    DOTTED: this.set("dotted"),
    DASHED: this.set("dashed"),
    SOLID: this.set("solid"),
    DOUBLE: this.set("double"),
    GROOVE: this.set("groove"),
    RIDGE: this.set("ridge"),
    INSET: this.set("inset"),
    OUTSET: this.set("outset")
};
const _ColumnRuleWidth = {
    set: (...params) => ({ columnRuleWidth: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    THIN: this.set("thin"),
    MEDIUM: this.set("medium"),
    THICK: this.set("thick")
};
const _ColumnSpan = {
    set: (...params) => ({ columnSpan: buildProperty(params) }),
    NONE: this.set("none"),
    ALL: this.set("all")
};
const _ColumnWidth = {
    set: (...params) => ({ columnWidth: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    AUTO: this.set("auto")
};
const _Columns = {
    set: (...params) => ({ columns: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    AUTO: this.set("auto")
};
const _Contain = {
    set: (...params) => ({ contain: buildProperty(params) }),
    NONE: this.set("none"),
    STRICT: this.set("strict"),
    CONTENT: this.set("content"),
    SIZE: this.set("size"),
    LAYOUT: this.set("layout"),
    STYLE: this.set("style"),
    PAINT: this.set("paint")
};
const _Content = {
    set: (...params) => ({ content: buildProperty(params) }),
    NORMAL: this.set("normal"),
    NONE: this.set("none"),
    image: (...params) => this.set(Method.image(...params)),
    imageSet: (...params) => this.set(Method.imageSet(...params)),
    element: (...params) => this.set(Method.element(...params)),
    crossFade: (...params) => this.set(Method.crossFade(...params)),
    linearGradient: (...params) => this.set(Method.linearGradient(...params)),
    repeatingLinearGradient: (...params) => this.set(Method.repeatingLinearGradient(...params)),
    radialGradient: (...params) => this.set(Method.radialGradient(...params)),
    repeatingRadialGradient: (...params) => this.set(Method.repeatingRadialGradient(...params)),
    CONTENTS: this.set("contents"),
    OPEN_QUOTE: this.set("open-quote"),
    CLOSE_QUOTE: this.set("close-quote"),
    NO_OPEN_QUOTE: this.set("no-open-quote"),
    NO_CLOSE_QUOTE: this.set("no-close-quote"),
    targetCounter: (...params) => this.set(Method.targetCounter(...params)),
    targetCounters: (...params) => this.set(Method.targetCounters(...params)),
    targetText: (...params) => this.set(Method.targetText(...params)),
    leader: (...params) => this.set(Method.leader(...params))
};
const _CounterIncrement = {
    set: (...params) => ({ counterIncrement: buildProperty(params) }),
    NONE: this.set("none")
};
const _CounterReset = {
    set: (...params) => ({ counterReset: buildProperty(params) }),
    NONE: this.set("none")
};
const _Cursor = {
    set: (...params) => ({ cursor: buildProperty(params) }),
    AUTO: this.set("auto"),
    DEFAULT: this.set("default"),
    NONE: this.set("none"),
    CONTEXT_MENU: this.set("context-menu"),
    HELP: this.set("help"),
    POINTER: this.set("pointer"),
    PROGRESS: this.set("progress"),
    WAIT: this.set("wait"),
    CELL: this.set("cell"),
    CROSSHAIR: this.set("crosshair"),
    TEXT: this.set("text"),
    VERTICAL_TEXT: this.set("vertical-text"),
    ALIAS: this.set("alias"),
    COPY: this.set("copy"),
    MOVE: this.set("move"),
    NO_DROP: this.set("no-drop"),
    NOT_ALLOWED: this.set("not-allowed"),
    E_RESIZE: this.set("e-resize"),
    N_RESIZE: this.set("n-resize"),
    NE_RESIZE: this.set("ne-resize"),
    NW_RESIZE: this.set("nw-resize"),
    S_RESIZE: this.set("s-resize"),
    SE_RESIZE: this.set("se-resize"),
    SW_RESIZE: this.set("sw-resize"),
    W_RESIZE: this.set("w-resize"),
    EW_RESIZE: this.set("ew-resize"),
    NS_RESIZE: this.set("ns-resize"),
    NESW_RESIZE: this.set("nesw-resize"),
    NWSE_RESIZE: this.set("nwse-resize"),
    COL_RESIZE: this.set("col-resize"),
    ROW_RESIZE: this.set("row-resize"),
    ALL_SCROLL: this.set("all-scroll"),
    ZOOM_IN: this.set("zoom-in"),
    ZOOM_OUT: this.set("zoom-out"),
    GRAB: this.set("grab"),
    GRABBING: this.set("grabbing")
};
const _Direction = {
    set: (...params) => ({ direction: buildProperty(params) }),
    LTR: this.set("ltr"),
    RTL: this.set("rtl")
};
const _Display = {
    set: (...params) => ({ display: buildProperty(params) }),
    BLOCK: this.set("block"),
    INLINE: this.set("inline"),
    RUN_IN: this.set("run-in"),
    FLOW: this.set("flow"),
    FLOW_ROOT: this.set("flow-root"),
    TABLE: this.set("table"),
    FLEX: this.set("flex"),
    GRID: this.set("grid"),
    RUBY: this.set("ruby"),
    LIST_ITEM: this.set("list-item"),
    TABLE_ROW_GROUP: this.set("table-row-group"),
    TABLE_HEADER_GROUP: this.set("table-header-group"),
    TABLE_FOOTER_GROUP: this.set("table-footer-group"),
    TABLE_ROW: this.set("table-row"),
    TABLE_CELL: this.set("table-cell"),
    TABLE_COLUMN_GROUP: this.set("table-column-group"),
    TABLE_COLUMN: this.set("table-column"),
    TABLE_CAPTION: this.set("table-caption"),
    RUBY_BASE: this.set("ruby-base"),
    RUBY_TEXT: this.set("ruby-text"),
    RUBY_BASE_CONTAINER: this.set("ruby-base-container"),
    RUBY_TEXT_CONTAINER: this.set("ruby-text-container"),
    CONTENTS: this.set("contents"),
    NONE: this.set("none"),
    INLINE_BLOCK: this.set("inline-block"),
    INLINE_LIST_ITEM: this.set("inline-list-item"),
    INLINE_TABLE: this.set("inline-table"),
    INLINE_FLEX: this.set("inline-flex"),
    INLINE_GRID: this.set("inline-grid")
};
const _EmptyCells = {
    set: (...params) => ({ emptyCells: buildProperty(params) }),
    SHOW: this.set("show"),
    HIDE: this.set("hide")
};
const _Filter = {
    set: (...params) => ({ filter: buildProperty(params) }),
    NONE: this.set("none"),
    blur: (...params) => this.set(Method.blur(...params)),
    brightness: (...params) => this.set(Method.brightness(...params)),
    contrast: (...params) => this.set(Method.contrast(...params)),
    dropShadow: (...params) => this.set(Method.dropShadow(...params)),
    grayscale: (...params) => this.set(Method.grayscale(...params)),
    hueRotate: (...params) => this.set(Method.hueRotate(...params)),
    invert: (...params) => this.set(Method.invert(...params)),
    opacity: (...params) => this.set(Method.opacity(...params)),
    saturate: (...params) => this.set(Method.saturate(...params)),
    sepia: (...params) => this.set(Method.sepia(...params))
};
const _Flex = {
    set: (...params) => ({ flex: buildProperty(params) }),
    NONE: this.set("none"),
    CONTENT: this.set("content"),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    BORDER_BOX: this.set("border-box"),
    CONTENT_BOX: this.set("content-box"),
    AVAILABLE: this.set("available"),
    MIN_CONTENT: this.set("min-content"),
    MAX_CONTENT: this.set("max-content"),
    FIT_CONTENT: this.set("fit-content"),
    AUTO: this.set("auto")
};
const _FlexBasis = {
    set: (...params) => ({ flexBasis: buildProperty(params) }),
    CONTENT: this.set("content"),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    BORDER_BOX: this.set("border-box"),
    CONTENT_BOX: this.set("content-box"),
    AVAILABLE: this.set("available"),
    MIN_CONTENT: this.set("min-content"),
    MAX_CONTENT: this.set("max-content"),
    FIT_CONTENT: this.set("fit-content"),
    AUTO: this.set("auto")
};
const _FlexDirection = {
    set: (...params) => ({ flexDirection: buildProperty(params) }),
    ROW: this.set("row"),
    ROW_REVERSE: this.set("row-reverse"),
    COLUMN: this.set("column"),
    COLUMN_REVERSE: this.set("column-reverse")
};
const _FlexFlow = {
    set: (...params) => ({ flexFlow: buildProperty(params) }),
    ROW: this.set("row"),
    ROW_REVERSE: this.set("row-reverse"),
    COLUMN: this.set("column"),
    COLUMN_REVERSE: this.set("column-reverse"),
    NOWRAP: this.set("nowrap"),
    WRAP: this.set("wrap"),
    WRAP_REVERSE: this.set("wrap-reverse")
};
const _FlexGrow = { set: (...params) => ({ flexGrow: buildProperty(params) }) };
const _FlexShrink = { set: (...params) => ({ flexShrink: buildProperty(params) }) };
const _FlexWrap = {
    set: (...params) => ({ flexWrap: buildProperty(params) }),
    NOWRAP: this.set("nowrap"),
    WRAP: this.set("wrap"),
    WRAP_REVERSE: this.set("wrap-reverse")
};
const _Float = {
    set: (...params) => ({ float: buildProperty(params) }),
    LEFT: this.set("left"),
    RIGHT: this.set("right"),
    NONE: this.set("none"),
    INLINE_START: this.set("inline-start"),
    INLINE_END: this.set("inline-end")
};
const _Font = {
    set: (...params) => ({ font: buildProperty(params) }),
    NORMAL: this.set("normal"),
    ITALIC: this.set("italic"),
    OBLIQUE: this.set("oblique"),
    deg: (...nums) => this.set(Angle.deg(...nums)),
    rad: (...nums) => this.set(Angle.rad(...nums)),
    grad: (...nums) => this.set(Angle.grad(...nums)),
    turn: (...nums) => this.set(Angle.turn(...nums)),
    SMALL_CAPS: this.set("small-caps"),
    BOLD: this.set("bold"),
    BOLDER: this.set("bolder"),
    LIGHTER: this.set("lighter"),
    ULTRA_CONDENSED: this.set("ultra-condensed"),
    EXTRA_CONDENSED: this.set("extra-condensed"),
    CONDENSED: this.set("condensed"),
    SEMI_CONDENSED: this.set("semi-condensed"),
    SEMI_EXPANDED: this.set("semi-expanded"),
    EXPANDED: this.set("expanded"),
    EXTRA_EXPANDED: this.set("extra-expanded"),
    ULTRA_EXPANDED: this.set("ultra-expanded"),
    X: (...nums) => this.set(Length.X(...nums)),
    XX_SMALL: this.set("xx-small"),
    X_SMALL: this.set("x-small"),
    SMALL: this.set("small"),
    MEDIUM: this.set("medium"),
    LARGE: this.set("large"),
    X_LARGE: this.set("x-large"),
    XX_LARGE: this.set("xx-large"),
    LARGER: this.set("larger"),
    SMALLER: this.set("smaller"),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    SERIF: this.set("serif"),
    SANS_SERIF: this.set("sans-serif"),
    CURSIVE: this.set("cursive"),
    FANTASY: this.set("fantasy"),
    MONOSPACE: this.set("monospace"),
    CAPTION: this.set("caption"),
    ICON: this.set("icon"),
    MENU: this.set("menu"),
    MESSAGE_BOX: this.set("message-box"),
    SMALL_CAPTION: this.set("small-caption"),
    STATUS_BAR: this.set("status-bar")
};
const _FontFamily = {
    set: (...params) => ({ fontFamily: buildProperty(params) }),
    SERIF: this.set("serif"),
    SANS_SERIF: this.set("sans-serif"),
    CURSIVE: this.set("cursive"),
    FANTASY: this.set("fantasy"),
    MONOSPACE: this.set("monospace")
};
const _FontFeatureSettings = {
    set: (...params) => ({ fontFeatureSettings: buildProperty(params) }),
    NORMAL: this.set("normal"),
    ON: this.set("on"),
    OFF: this.set("off")
};
const _FontKerning = {
    set: (...params) => ({ fontKerning: buildProperty(params) }),
    AUTO: this.set("auto"),
    NORMAL: this.set("normal"),
    NONE: this.set("none")
};
const _FontLanguageOverride = {
    set: (...params) => ({ fontLanguageOverride: buildProperty(params) }),
    NORMAL: this.set("normal")
};
const _FontOpticalSizing = {
    set: (...params) => ({ fontOpticalSizing: buildProperty(params) }),
    AUTO: this.set("auto"),
    NONE: this.set("none")
};
const _FontVariationSettings = {
    set: (...params) => ({ fontVariationSettings: buildProperty(params) }),
    NORMAL: this.set("normal")
};
const _FontSize = {
    set: (...params) => ({ fontSize: buildProperty(params) }),
    XX_SMALL: this.set("xx-small"),
    X_SMALL: this.set("x-small"),
    SMALL: this.set("small"),
    MEDIUM: this.set("medium"),
    LARGE: this.set("large"),
    X_LARGE: this.set("x-large"),
    XX_LARGE: this.set("xx-large"),
    LARGER: this.set("larger"),
    SMALLER: this.set("smaller"),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _FontSizeAdjust = {
    set: (...params) => ({ fontSizeAdjust: buildProperty(params) }),
    NONE: this.set("none")
};
const _FontStretch = {
    set: (...params) => ({ fontStretch: buildProperty(params) }),
    NORMAL: this.set("normal"),
    ULTRA_CONDENSED: this.set("ultra-condensed"),
    EXTRA_CONDENSED: this.set("extra-condensed"),
    CONDENSED: this.set("condensed"),
    SEMI_CONDENSED: this.set("semi-condensed"),
    SEMI_EXPANDED: this.set("semi-expanded"),
    EXPANDED: this.set("expanded"),
    EXTRA_EXPANDED: this.set("extra-expanded"),
    ULTRA_EXPANDED: this.set("ultra-expanded"),
    X: (...nums) => this.set(Length.X(...nums))
};
const _FontStyle = {
    set: (...params) => ({ fontStyle: buildProperty(params) }),
    NORMAL: this.set("normal"),
    ITALIC: this.set("italic"),
    OBLIQUE: this.set("oblique"),
    deg: (...nums) => this.set(Angle.deg(...nums)),
    rad: (...nums) => this.set(Angle.rad(...nums)),
    grad: (...nums) => this.set(Angle.grad(...nums)),
    turn: (...nums) => this.set(Angle.turn(...nums))
};
const _FontSynthesis = {
    set: (...params) => ({ fontSynthesis: buildProperty(params) }),
    NONE: this.set("none"),
    WEIGHT: this.set("weight"),
    STYLE: this.set("style")
};
const _FontVariant = {
    set: (...params) => ({ fontVariant: buildProperty(params) }),
    NORMAL: this.set("normal"),
    NONE: this.set("none"),
    COMMON_LIGATURES: this.set("common-ligatures"),
    NO_COMMON_LIGATURES: this.set("no-common-ligatures"),
    DISCRETIONARY_LIGATURES: this.set("discretionary-ligatures"),
    NO_DISCRETIONARY_LIGATURES: this.set("no-discretionary-ligatures"),
    HISTORICAL_LIGATURES: this.set("historical-ligatures"),
    NO_HISTORICAL_LIGATURES: this.set("no-historical-ligatures"),
    CONTEXTUAL: this.set("contextual"),
    NO_CONTEXTUAL: this.set("no-contextual"),
    stylistic: (...params) => this.set(Method.stylistic(...params)),
    HISTORICAL_FORMS: this.set("historical-forms"),
    styleset: (...params) => this.set(Method.styleset(...params)),
    characterVariant: (...params) => this.set(Method.characterVariant(...params)),
    swash: (...params) => this.set(Method.swash(...params)),
    ornaments: (...params) => this.set(Method.ornaments(...params)),
    annotation: (...params) => this.set(Method.annotation(...params)),
    SMALL_CAPS: this.set("small-caps"),
    ALL_SMALL_CAPS: this.set("all-small-caps"),
    PETITE_CAPS: this.set("petite-caps"),
    ALL_PETITE_CAPS: this.set("all-petite-caps"),
    UNICASE: this.set("unicase"),
    TITLING_CAPS: this.set("titling-caps"),
    LINING_NUMS: this.set("lining-nums"),
    OLDSTYLE_NUMS: this.set("oldstyle-nums"),
    PROPORTIONAL_NUMS: this.set("proportional-nums"),
    TABULAR_NUMS: this.set("tabular-nums"),
    DIAGONAL_FRACTIONS: this.set("diagonal-fractions"),
    STACKED_FRACTIONS: this.set("stacked-fractions"),
    ORDINAL: this.set("ordinal"),
    SLASHED_ZERO: this.set("slashed-zero"),
    JIS78: this.set("jis78"),
    JIS83: this.set("jis83"),
    JIS90: this.set("jis90"),
    JIS04: this.set("jis04"),
    SIMPLIFIED: this.set("simplified"),
    TRADITIONAL: this.set("traditional"),
    FULL_WIDTH: this.set("full-width"),
    PROPORTIONAL_WIDTH: this.set("proportional-width"),
    RUBY: this.set("ruby")
};
const _FontVariantAlternates = {
    set: (...params) => ({ fontVariantAlternates: buildProperty(params) }),
    NORMAL: this.set("normal"),
    stylistic: (...params) => this.set(Method.stylistic(...params)),
    HISTORICAL_FORMS: this.set("historical-forms"),
    styleset: (...params) => this.set(Method.styleset(...params)),
    characterVariant: (...params) => this.set(Method.characterVariant(...params)),
    swash: (...params) => this.set(Method.swash(...params)),
    ornaments: (...params) => this.set(Method.ornaments(...params)),
    annotation: (...params) => this.set(Method.annotation(...params))
};
const _FontVariantCaps = {
    set: (...params) => ({ fontVariantCaps: buildProperty(params) }),
    NORMAL: this.set("normal"),
    SMALL_CAPS: this.set("small-caps"),
    ALL_SMALL_CAPS: this.set("all-small-caps"),
    PETITE_CAPS: this.set("petite-caps"),
    ALL_PETITE_CAPS: this.set("all-petite-caps"),
    UNICASE: this.set("unicase"),
    TITLING_CAPS: this.set("titling-caps")
};
const _FontVariantEastAsian = {
    set: (...params) => ({ fontVariantEastAsian: buildProperty(params) }),
    NORMAL: this.set("normal"),
    JIS78: this.set("jis78"),
    JIS83: this.set("jis83"),
    JIS90: this.set("jis90"),
    JIS04: this.set("jis04"),
    SIMPLIFIED: this.set("simplified"),
    TRADITIONAL: this.set("traditional"),
    FULL_WIDTH: this.set("full-width"),
    PROPORTIONAL_WIDTH: this.set("proportional-width"),
    RUBY: this.set("ruby")
};
const _FontVariantLigatures = {
    set: (...params) => ({ fontVariantLigatures: buildProperty(params) }),
    NORMAL: this.set("normal"),
    NONE: this.set("none"),
    COMMON_LIGATURES: this.set("common-ligatures"),
    NO_COMMON_LIGATURES: this.set("no-common-ligatures"),
    DISCRETIONARY_LIGATURES: this.set("discretionary-ligatures"),
    NO_DISCRETIONARY_LIGATURES: this.set("no-discretionary-ligatures"),
    HISTORICAL_LIGATURES: this.set("historical-ligatures"),
    NO_HISTORICAL_LIGATURES: this.set("no-historical-ligatures"),
    CONTEXTUAL: this.set("contextual"),
    NO_CONTEXTUAL: this.set("no-contextual")
};
const _FontVariantNumeric = {
    set: (...params) => ({ fontVariantNumeric: buildProperty(params) }),
    NORMAL: this.set("normal"),
    LINING_NUMS: this.set("lining-nums"),
    OLDSTYLE_NUMS: this.set("oldstyle-nums"),
    PROPORTIONAL_NUMS: this.set("proportional-nums"),
    TABULAR_NUMS: this.set("tabular-nums"),
    DIAGONAL_FRACTIONS: this.set("diagonal-fractions"),
    STACKED_FRACTIONS: this.set("stacked-fractions"),
    ORDINAL: this.set("ordinal"),
    SLASHED_ZERO: this.set("slashed-zero")
};
const _FontVariantPosition = {
    set: (...params) => ({ fontVariantPosition: buildProperty(params) }),
    NORMAL: this.set("normal"),
    SUB: this.set("sub"),
    SUPER: this.set("super")
};
const _FontWeight = {
    set: (...params) => ({ fontWeight: buildProperty(params) }),
    NORMAL: this.set("normal"),
    BOLD: this.set("bold"),
    BOLDER: this.set("bolder"),
    LIGHTER: this.set("lighter")
};
const _Gap = {
    set: (...params) => ({ gap: buildProperty(params) }),
    NORMAL: this.set("normal"),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _Grid = {
    set: (...params) => ({ grid: buildProperty(params) }),
    NONE: this.set("none"),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    MIN_CONTENT: this.set("min-content"),
    MAX_CONTENT: this.set("max-content"),
    AUTO: this.set("auto"),
    minmax: (...params) => this.set(Method.minmax(...params)),
    fitContent: (...params) => this.set(Method.fitContent(...params)),
    repeat: (...params) => this.set(Method.repeat(...params)),
    AUTO_FLOW: this.set("auto-flow"),
    DENSE: this.set("dense")
};
const _GridArea = {
    set: (...params) => ({ gridArea: buildProperty(params) }),
    AUTO: this.set("auto"),
    SPAN: this.set("span")
};
const _GridAutoColumns = {
    set: (...params) => ({ gridAutoColumns: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    MIN_CONTENT: this.set("min-content"),
    MAX_CONTENT: this.set("max-content"),
    AUTO: this.set("auto"),
    minmax: (...params) => this.set(Method.minmax(...params)),
    fitContent: (...params) => this.set(Method.fitContent(...params))
};
const _GridAutoFlow = {
    set: (...params) => ({ gridAutoFlow: buildProperty(params) }),
    ROW: this.set("row"),
    COLUMN: this.set("column"),
    DENSE: this.set("dense")
};
const _GridAutoRows = {
    set: (...params) => ({ gridAutoRows: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    MIN_CONTENT: this.set("min-content"),
    MAX_CONTENT: this.set("max-content"),
    AUTO: this.set("auto"),
    minmax: (...params) => this.set(Method.minmax(...params)),
    fitContent: (...params) => this.set(Method.fitContent(...params))
};
const _GridColumn = {
    set: (...params) => ({ gridColumn: buildProperty(params) }),
    AUTO: this.set("auto"),
    SPAN: this.set("span")
};
const _GridColumnEnd = {
    set: (...params) => ({ gridColumnEnd: buildProperty(params) }),
    AUTO: this.set("auto"),
    SPAN: this.set("span")
};
const _GridColumnGap = {
    set: (...params) => ({ gridColumnGap: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _GridColumnStart = {
    set: (...params) => ({ gridColumnStart: buildProperty(params) }),
    AUTO: this.set("auto"),
    SPAN: this.set("span")
};
const _GridGap = {
    set: (...params) => ({ gridGap: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _GridRow = {
    set: (...params) => ({ gridRow: buildProperty(params) }),
    AUTO: this.set("auto"),
    SPAN: this.set("span")
};
const _GridRowEnd = {
    set: (...params) => ({ gridRowEnd: buildProperty(params) }),
    AUTO: this.set("auto"),
    SPAN: this.set("span")
};
const _GridRowGap = {
    set: (...params) => ({ gridRowGap: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _GridRowStart = {
    set: (...params) => ({ gridRowStart: buildProperty(params) }),
    AUTO: this.set("auto"),
    SPAN: this.set("span")
};
const _GridTemplate = {
    set: (...params) => ({ gridTemplate: buildProperty(params) }),
    NONE: this.set("none"),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    MIN_CONTENT: this.set("min-content"),
    MAX_CONTENT: this.set("max-content"),
    AUTO: this.set("auto"),
    minmax: (...params) => this.set(Method.minmax(...params)),
    fitContent: (...params) => this.set(Method.fitContent(...params)),
    repeat: (...params) => this.set(Method.repeat(...params))
};
const _GridTemplateAreas = {
    set: (...params) => ({ gridTemplateAreas: buildProperty(params) }),
    NONE: this.set("none")
};
const _GridTemplateColumns = {
    set: (...params) => ({ gridTemplateColumns: buildProperty(params) }),
    NONE: this.set("none"),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    MIN_CONTENT: this.set("min-content"),
    MAX_CONTENT: this.set("max-content"),
    AUTO: this.set("auto"),
    minmax: (...params) => this.set(Method.minmax(...params)),
    fitContent: (...params) => this.set(Method.fitContent(...params)),
    repeat: (...params) => this.set(Method.repeat(...params))
};
const _GridTemplateRows = {
    set: (...params) => ({ gridTemplateRows: buildProperty(params) }),
    NONE: this.set("none"),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    MIN_CONTENT: this.set("min-content"),
    MAX_CONTENT: this.set("max-content"),
    AUTO: this.set("auto"),
    minmax: (...params) => this.set(Method.minmax(...params)),
    fitContent: (...params) => this.set(Method.fitContent(...params)),
    repeat: (...params) => this.set(Method.repeat(...params))
};
const _HangingPunctuation = {
    set: (...params) => ({ hangingPunctuation: buildProperty(params) }),
    NONE: this.set("none"),
    FIRST: this.set("first"),
    FORCE_END: this.set("force-end"),
    ALLOW_END: this.set("allow-end"),
    LAST: this.set("last")
};
const _Height = {
    set: (...params) => ({ height: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    BORDER_BOX: this.set("border-box"),
    CONTENT_BOX: this.set("content-box"),
    AVAILABLE: this.set("available"),
    MIN_CONTENT: this.set("min-content"),
    MAX_CONTENT: this.set("max-content"),
    FIT_CONTENT: this.set("fit-content"),
    AUTO: this.set("auto")
};
const _Hyphens = {
    set: (...params) => ({ hyphens: buildProperty(params) }),
    NONE: this.set("none"),
    MANUAL: this.set("manual"),
    AUTO: this.set("auto")
};
const _ImageOrientation = {
    set: (...params) => ({ imageOrientation: buildProperty(params) }),
    FROM_IMAGE: this.set("from-image"),
    deg: (...nums) => this.set(Angle.deg(...nums)),
    rad: (...nums) => this.set(Angle.rad(...nums)),
    grad: (...nums) => this.set(Angle.grad(...nums)),
    turn: (...nums) => this.set(Angle.turn(...nums)),
    FLIP: this.set("flip")
};
const _ImageRendering = {
    set: (...params) => ({ imageRendering: buildProperty(params) }),
    AUTO: this.set("auto"),
    CRISP_EDGES: this.set("crisp-edges"),
    PIXELATED: this.set("pixelated")
};
const _ImageResolution = {
    set: (...params) => ({ imageResolution: buildProperty(params) }),
    FROM_IMAGE: this.set("from-image"),
    dpi: (...nums) => this.set(Resolution.dpi(...nums)),
    dpcm: (...nums) => this.set(Resolution.dpcm(...nums)),
    dppx: (...nums) => this.set(Resolution.dppx(...nums)),
    x: (...nums) => this.set(Resolution.x(...nums)),
    SNAP: this.set("snap")
};
const _ImeMode = {
    set: (...params) => ({ imeMode: buildProperty(params) }),
    AUTO: this.set("auto"),
    NORMAL: this.set("normal"),
    ACTIVE: this.set("active"),
    INACTIVE: this.set("inactive"),
    DISABLED: this.set("disabled")
};
const _InitialLetter = {
    set: (...params) => ({ initialLetter: buildProperty(params) }),
    NORMAL: this.set("normal")
};
const _InitialLetterAlign = {
    set: (...params) => ({ initialLetterAlign: buildProperty(params) }),
    AUTO: this.set("auto"),
    ALPHABETIC: this.set("alphabetic"),
    HANGING: this.set("hanging"),
    IDEOGRAPHIC: this.set("ideographic")
};
const _InlineSize = {
    set: (...params) => ({ inlineSize: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    BORDER_BOX: this.set("border-box"),
    CONTENT_BOX: this.set("content-box"),
    AVAILABLE: this.set("available"),
    MIN_CONTENT: this.set("min-content"),
    MAX_CONTENT: this.set("max-content"),
    FIT_CONTENT: this.set("fit-content"),
    AUTO: this.set("auto")
};
const _InsetBlockEnd = {
    set: (...params) => ({ insetBlockEnd: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    AUTO: this.set("auto")
};
const _InsetBlockStart = {
    set: (...params) => ({ insetBlockStart: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    AUTO: this.set("auto")
};
const _InsetInlineEnd = {
    set: (...params) => ({ insetInlineEnd: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    AUTO: this.set("auto")
};
const _InsetInlineStart = {
    set: (...params) => ({ insetInlineStart: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    AUTO: this.set("auto")
};
const _Isolation = {
    set: (...params) => ({ isolation: buildProperty(params) }),
    AUTO: this.set("auto"),
    ISOLATE: this.set("isolate")
};
const _JustifyContent = {
    set: (...params) => ({ justifyContent: buildProperty(params) }),
    NORMAL: this.set("normal"),
    SPACE_BETWEEN: this.set("space-between"),
    SPACE_AROUND: this.set("space-around"),
    SPACE_EVENLY: this.set("space-evenly"),
    STRETCH: this.set("stretch"),
    UNSAFE: this.set("unsafe"),
    SAFE: this.set("safe"),
    CENTER: this.set("center"),
    START: this.set("start"),
    END: this.set("end"),
    FLEX_START: this.set("flex-start"),
    FLEX_END: this.set("flex-end"),
    LEFT: this.set("left"),
    RIGHT: this.set("right")
};
const _JustifyItems = {
    set: (...params) => ({ justifyItems: buildProperty(params) }),
    NORMAL: this.set("normal"),
    STRETCH: this.set("stretch"),
    FIRST: this.set("first"),
    LAST: this.set("last"),
    BASELINE: this.set("baseline"),
    UNSAFE: this.set("unsafe"),
    SAFE: this.set("safe"),
    CENTER: this.set("center"),
    START: this.set("start"),
    END: this.set("end"),
    SELF_START: this.set("self-start"),
    SELF_END: this.set("self-end"),
    FLEX_START: this.set("flex-start"),
    FLEX_END: this.set("flex-end"),
    LEFT: this.set("left"),
    RIGHT: this.set("right"),
    LEGACY: this.set("legacy")
};
const _JustifySelf = {
    set: (...params) => ({ justifySelf: buildProperty(params) }),
    AUTO: this.set("auto"),
    NORMAL: this.set("normal"),
    STRETCH: this.set("stretch"),
    FIRST: this.set("first"),
    LAST: this.set("last"),
    BASELINE: this.set("baseline"),
    UNSAFE: this.set("unsafe"),
    SAFE: this.set("safe"),
    CENTER: this.set("center"),
    START: this.set("start"),
    END: this.set("end"),
    SELF_START: this.set("self-start"),
    SELF_END: this.set("self-end"),
    FLEX_START: this.set("flex-start"),
    FLEX_END: this.set("flex-end"),
    LEFT: this.set("left"),
    RIGHT: this.set("right")
};
const _Left = {
    set: (...params) => ({ left: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    AUTO: this.set("auto")
};
const _LetterSpacing = {
    set: (...params) => ({ letterSpacing: buildProperty(params) }),
    NORMAL: this.set("normal"),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums))
};
const _LineBreak = {
    set: (...params) => ({ lineBreak: buildProperty(params) }),
    AUTO: this.set("auto"),
    LOOSE: this.set("loose"),
    NORMAL: this.set("normal"),
    STRICT: this.set("strict")
};
const _LineClamp = {
    set: (...params) => ({ lineClamp: buildProperty(params) }),
    NONE: this.set("none")
};
const _LineHeight = {
    set: (...params) => ({ lineHeight: buildProperty(params) }),
    NORMAL: this.set("normal"),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _ListStyle = {
    set: (...params) => ({ listStyle: buildProperty(params) }),
    symbols: (...params) => this.set(Method.symbols(...params)),
    NONE: this.set("none"),
    INSIDE: this.set("inside"),
    OUTSIDE: this.set("outside")
};
const _ListStyleImage = {
    set: (...params) => ({ listStyleImage: buildProperty(params) }),
    NONE: this.set("none")
};
const _ListStylePosition = {
    set: (...params) => ({ listStylePosition: buildProperty(params) }),
    INSIDE: this.set("inside"),
    OUTSIDE: this.set("outside")
};
const _ListStyleType = {
    set: (...params) => ({ listStyleType: buildProperty(params) }),
    symbols: (...params) => this.set(Method.symbols(...params)),
    NONE: this.set("none")
};
const _Margin = {
    set: (...params) => ({ margin: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    AUTO: this.set("auto")
};
const _MarginBlockEnd = {
    set: (...params) => ({ marginBlockEnd: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    AUTO: this.set("auto")
};
const _MarginBlockStart = {
    set: (...params) => ({ marginBlockStart: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    AUTO: this.set("auto")
};
const _MarginBottom = {
    set: (...params) => ({ marginBottom: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    AUTO: this.set("auto")
};
const _MarginInlineEnd = {
    set: (...params) => ({ marginInlineEnd: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    AUTO: this.set("auto")
};
const _MarginInlineStart = {
    set: (...params) => ({ marginInlineStart: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    AUTO: this.set("auto")
};
const _MarginLeft = {
    set: (...params) => ({ marginLeft: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    AUTO: this.set("auto")
};
const _MarginRight = {
    set: (...params) => ({ marginRight: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    AUTO: this.set("auto")
};
const _MarginTop = {
    set: (...params) => ({ marginTop: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    AUTO: this.set("auto")
};
const _Mask = {
    set: (...params) => ({ mask: buildProperty(params) }),
    NONE: this.set("none"),
    image: (...params) => this.set(Method.image(...params)),
    imageSet: (...params) => this.set(Method.imageSet(...params)),
    element: (...params) => this.set(Method.element(...params)),
    crossFade: (...params) => this.set(Method.crossFade(...params)),
    linearGradient: (...params) => this.set(Method.linearGradient(...params)),
    repeatingLinearGradient: (...params) => this.set(Method.repeatingLinearGradient(...params)),
    radialGradient: (...params) => this.set(Method.radialGradient(...params)),
    repeatingRadialGradient: (...params) => this.set(Method.repeatingRadialGradient(...params)),
    AUTO: this.set("auto"),
    COVER: this.set("cover"),
    CONTAIN: this.set("contain"),
    REPEAT_X: this.set("repeat-x"),
    REPEAT_Y: this.set("repeat-y"),
    REPEAT: this.set("repeat"),
    SPACE: this.set("space"),
    ROUND: this.set("round"),
    NO_REPEAT: this.set("no-repeat"),
    BORDER_BOX: this.set("border-box"),
    PADDING_BOX: this.set("padding-box"),
    CONTENT_BOX: this.set("content-box"),
    MARGIN_BOX: this.set("margin-box"),
    FILL_BOX: this.set("fill-box"),
    STROKE_BOX: this.set("stroke-box"),
    VIEW_BOX: this.set("view-box"),
    NO_CLIP: this.set("no-clip"),
    ADD: this.set("add"),
    SUBTRACT: this.set("subtract"),
    INTERSECT: this.set("intersect"),
    EXCLUDE: this.set("exclude"),
    ALPHA: this.set("alpha"),
    LUMINANCE: this.set("luminance"),
    MATCH_SOURCE: this.set("match-source")
};
const _MaskBorder = {
    set: (...params) => ({ maskBorder: buildProperty(params) }),
    NONE: this.set("none"),
    image: (...params) => this.set(Method.image(...params)),
    imageSet: (...params) => this.set(Method.imageSet(...params)),
    element: (...params) => this.set(Method.element(...params)),
    crossFade: (...params) => this.set(Method.crossFade(...params)),
    linearGradient: (...params) => this.set(Method.linearGradient(...params)),
    repeatingLinearGradient: (...params) => this.set(Method.repeatingLinearGradient(...params)),
    radialGradient: (...params) => this.set(Method.radialGradient(...params)),
    repeatingRadialGradient: (...params) => this.set(Method.repeatingRadialGradient(...params)),
    X: (...nums) => this.set(Length.X(...nums)),
    FILL: this.set("fill"),
    AUTO: this.set("auto"),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    STRETCH: this.set("stretch"),
    REPEAT: this.set("repeat"),
    ROUND: this.set("round"),
    SPACE: this.set("space"),
    LUMINANCE: this.set("luminance"),
    ALPHA: this.set("alpha")
};
const _MaskBorderMode = {
    set: (...params) => ({ maskBorderMode: buildProperty(params) }),
    LUMINANCE: this.set("luminance"),
    ALPHA: this.set("alpha")
};
const _MaskBorderOutset = {
    set: (...params) => ({ maskBorderOutset: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums))
};
const _MaskBorderRepeat = {
    set: (...params) => ({ maskBorderRepeat: buildProperty(params) }),
    STRETCH: this.set("stretch"),
    REPEAT: this.set("repeat"),
    ROUND: this.set("round"),
    SPACE: this.set("space")
};
const _MaskBorderSlice = {
    set: (...params) => ({ maskBorderSlice: buildProperty(params) }),
    X: (...nums) => this.set(Length.X(...nums)),
    FILL: this.set("fill")
};
const _MaskBorderSource = {
    set: (...params) => ({ maskBorderSource: buildProperty(params) }),
    NONE: this.set("none"),
    image: (...params) => this.set(Method.image(...params)),
    imageSet: (...params) => this.set(Method.imageSet(...params)),
    element: (...params) => this.set(Method.element(...params)),
    crossFade: (...params) => this.set(Method.crossFade(...params)),
    linearGradient: (...params) => this.set(Method.linearGradient(...params)),
    repeatingLinearGradient: (...params) => this.set(Method.repeatingLinearGradient(...params)),
    radialGradient: (...params) => this.set(Method.radialGradient(...params)),
    repeatingRadialGradient: (...params) => this.set(Method.repeatingRadialGradient(...params))
};
const _MaskBorderWidth = {
    set: (...params) => ({ maskBorderWidth: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    AUTO: this.set("auto")
};
const _MaskClip = {
    set: (...params) => ({ maskClip: buildProperty(params) }),
    BORDER_BOX: this.set("border-box"),
    PADDING_BOX: this.set("padding-box"),
    CONTENT_BOX: this.set("content-box"),
    MARGIN_BOX: this.set("margin-box"),
    FILL_BOX: this.set("fill-box"),
    STROKE_BOX: this.set("stroke-box"),
    VIEW_BOX: this.set("view-box"),
    NO_CLIP: this.set("no-clip")
};
const _MaskComposite = {
    set: (...params) => ({ maskComposite: buildProperty(params) }),
    ADD: this.set("add"),
    SUBTRACT: this.set("subtract"),
    INTERSECT: this.set("intersect"),
    EXCLUDE: this.set("exclude")
};
const _MaskImage = {
    set: (...params) => ({ maskImage: buildProperty(params) }),
    NONE: this.set("none"),
    image: (...params) => this.set(Method.image(...params)),
    imageSet: (...params) => this.set(Method.imageSet(...params)),
    element: (...params) => this.set(Method.element(...params)),
    crossFade: (...params) => this.set(Method.crossFade(...params)),
    linearGradient: (...params) => this.set(Method.linearGradient(...params)),
    repeatingLinearGradient: (...params) => this.set(Method.repeatingLinearGradient(...params)),
    radialGradient: (...params) => this.set(Method.radialGradient(...params)),
    repeatingRadialGradient: (...params) => this.set(Method.repeatingRadialGradient(...params))
};
const _MaskMode = {
    set: (...params) => ({ maskMode: buildProperty(params) }),
    ALPHA: this.set("alpha"),
    LUMINANCE: this.set("luminance"),
    MATCH_SOURCE: this.set("match-source")
};
const _MaskOrigin = {
    set: (...params) => ({ maskOrigin: buildProperty(params) }),
    BORDER_BOX: this.set("border-box"),
    PADDING_BOX: this.set("padding-box"),
    CONTENT_BOX: this.set("content-box"),
    MARGIN_BOX: this.set("margin-box"),
    FILL_BOX: this.set("fill-box"),
    STROKE_BOX: this.set("stroke-box"),
    VIEW_BOX: this.set("view-box")
};
const _MaskPosition = {
    set: (...params) => ({ maskPosition: buildProperty(params) }),
    LEFT: this.set("left"),
    CENTER: this.set("center"),
    RIGHT: this.set("right"),
    TOP: this.set("top"),
    BOTTOM: this.set("bottom"),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _MaskRepeat = {
    set: (...params) => ({ maskRepeat: buildProperty(params) }),
    REPEAT_X: this.set("repeat-x"),
    REPEAT_Y: this.set("repeat-y"),
    REPEAT: this.set("repeat"),
    SPACE: this.set("space"),
    ROUND: this.set("round"),
    NO_REPEAT: this.set("no-repeat")
};
const _MaskSize = {
    set: (...params) => ({ maskSize: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    AUTO: this.set("auto"),
    COVER: this.set("cover"),
    CONTAIN: this.set("contain")
};
const _MaskType = {
    set: (...params) => ({ maskType: buildProperty(params) }),
    LUMINANCE: this.set("luminance"),
    ALPHA: this.set("alpha")
};
const _MaxBlockSize = {
    set: (...params) => ({ maxBlockSize: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    NONE: this.set("none"),
    MAX_CONTENT: this.set("max-content"),
    MIN_CONTENT: this.set("min-content"),
    FIT_CONTENT: this.set("fit-content"),
    FILL_AVAILABLE: this.set("fill-available")
};
const _MaxHeight = {
    set: (...params) => ({ maxHeight: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    NONE: this.set("none"),
    MAX_CONTENT: this.set("max-content"),
    MIN_CONTENT: this.set("min-content"),
    FIT_CONTENT: this.set("fit-content"),
    FILL_AVAILABLE: this.set("fill-available")
};
const _MaxInlineSize = {
    set: (...params) => ({ maxInlineSize: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    NONE: this.set("none"),
    MAX_CONTENT: this.set("max-content"),
    MIN_CONTENT: this.set("min-content"),
    FIT_CONTENT: this.set("fit-content"),
    FILL_AVAILABLE: this.set("fill-available")
};
const _MaxLines = { set: (...params) => ({ maxLines: buildProperty(params) }), NONE: this.set("none") };
const _MaxWidth = {
    set: (...params) => ({ maxWidth: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    NONE: this.set("none"),
    MAX_CONTENT: this.set("max-content"),
    MIN_CONTENT: this.set("min-content"),
    FIT_CONTENT: this.set("fit-content"),
    FILL_AVAILABLE: this.set("fill-available")
};
const _MinBlockSize = {
    set: (...params) => ({ minBlockSize: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    AUTO: this.set("auto"),
    MAX_CONTENT: this.set("max-content"),
    MIN_CONTENT: this.set("min-content"),
    FIT_CONTENT: this.set("fit-content"),
    FILL_AVAILABLE: this.set("fill-available")
};
const _MinHeight = {
    set: (...params) => ({ minHeight: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    AUTO: this.set("auto"),
    MAX_CONTENT: this.set("max-content"),
    MIN_CONTENT: this.set("min-content"),
    FIT_CONTENT: this.set("fit-content"),
    FILL_AVAILABLE: this.set("fill-available")
};
const _MinInlineSize = {
    set: (...params) => ({ minInlineSize: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    AUTO: this.set("auto"),
    MAX_CONTENT: this.set("max-content"),
    MIN_CONTENT: this.set("min-content"),
    FIT_CONTENT: this.set("fit-content"),
    FILL_AVAILABLE: this.set("fill-available")
};
const _MinWidth = {
    set: (...params) => ({ minWidth: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    AUTO: this.set("auto"),
    MAX_CONTENT: this.set("max-content"),
    MIN_CONTENT: this.set("min-content"),
    FIT_CONTENT: this.set("fit-content"),
    FILL_AVAILABLE: this.set("fill-available")
};
const _MixBlendMode = {
    set: (...params) => ({ mixBlendMode: buildProperty(params) }),
    NORMAL: this.set("normal"),
    MULTIPLY: this.set("multiply"),
    SCREEN: this.set("screen"),
    OVERLAY: this.set("overlay"),
    DARKEN: this.set("darken"),
    LIGHTEN: this.set("lighten"),
    COLOR_DODGE: this.set("color-dodge"),
    COLOR_BURN: this.set("color-burn"),
    HARD_LIGHT: this.set("hard-light"),
    SOFT_LIGHT: this.set("soft-light"),
    DIFFERENCE: this.set("difference"),
    EXCLUSION: this.set("exclusion"),
    HUE: this.set("hue"),
    SATURATION: this.set("saturation"),
    COLOR: this.set("color"),
    LUMINOSITY: this.set("luminosity")
};
const _Motion = {
    set: (...params) => ({ motion: buildProperty(params) }),
    inset: (...params) => this.set(Method.inset(...params)),
    circle: (...params) => this.set(Method.circle(...params)),
    ellipse: (...params) => this.set(Method.ellipse(...params)),
    polygon: (...params) => this.set(Method.polygon(...params)),
    BORDER_BOX: this.set("border-box"),
    PADDING_BOX: this.set("padding-box"),
    CONTENT_BOX: this.set("content-box"),
    MARGIN_BOX: this.set("margin-box"),
    FILL_BOX: this.set("fill-box"),
    STROKE_BOX: this.set("stroke-box"),
    VIEW_BOX: this.set("view-box"),
    NONE: this.set("none"),
    AMP: this.set("amp;"),
    AUTO: this.set("auto"),
    REVERSE: this.set("reverse"),
    deg: (...nums) => this.set(Angle.deg(...nums)),
    rad: (...nums) => this.set(Angle.rad(...nums)),
    grad: (...nums) => this.set(Angle.grad(...nums)),
    turn: (...nums) => this.set(Angle.turn(...nums))
};
const _MotionOffset = {
    set: (...params) => ({ motionOffset: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _MotionPath = {
    set: (...params) => ({ motionPath: buildProperty(params) }),
    inset: (...params) => this.set(Method.inset(...params)),
    circle: (...params) => this.set(Method.circle(...params)),
    ellipse: (...params) => this.set(Method.ellipse(...params)),
    polygon: (...params) => this.set(Method.polygon(...params)),
    BORDER_BOX: this.set("border-box"),
    PADDING_BOX: this.set("padding-box"),
    CONTENT_BOX: this.set("content-box"),
    MARGIN_BOX: this.set("margin-box"),
    FILL_BOX: this.set("fill-box"),
    STROKE_BOX: this.set("stroke-box"),
    VIEW_BOX: this.set("view-box"),
    NONE: this.set("none")
};
const _MotionRotation = {
    set: (...params) => ({ motionRotation: buildProperty(params) }),
    AUTO: this.set("auto"),
    REVERSE: this.set("reverse"),
    AMP: this.set("amp;"),
    deg: (...nums) => this.set(Angle.deg(...nums)),
    rad: (...nums) => this.set(Angle.rad(...nums)),
    grad: (...nums) => this.set(Angle.grad(...nums)),
    turn: (...nums) => this.set(Angle.turn(...nums))
};
const _ObjectFit = {
    set: (...params) => ({ objectFit: buildProperty(params) }),
    FILL: this.set("fill"),
    CONTAIN: this.set("contain"),
    COVER: this.set("cover"),
    NONE: this.set("none"),
    SCALE_DOWN: this.set("scale-down")
};
const _ObjectPosition = {
    set: (...params) => ({ objectPosition: buildProperty(params) }),
    LEFT: this.set("left"),
    CENTER: this.set("center"),
    RIGHT: this.set("right"),
    TOP: this.set("top"),
    BOTTOM: this.set("bottom"),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _OffsetPosition = {
    set: (...params) => ({ offsetPosition: buildProperty(params) }),
    AUTO: this.set("auto"),
    LEFT: this.set("left"),
    CENTER: this.set("center"),
    RIGHT: this.set("right"),
    TOP: this.set("top"),
    BOTTOM: this.set("bottom"),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _Opacity = { set: (...params) => ({ opacity: buildProperty(params) }) };
const _Order = { set: (...params) => ({ order: buildProperty(params) }) };
const _Orphans = { set: (...params) => ({ orphans: buildProperty(params) }) };
const _Outline = {
    set: (...params) => ({ outline: buildProperty(params) }),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ outline: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText"),
    INVERT: this.set("invert"),
    AUTO: this.set("auto"),
    NONE: this.set("none"),
    HIDDEN: this.set("hidden"),
    DOTTED: this.set("dotted"),
    DASHED: this.set("dashed"),
    SOLID: this.set("solid"),
    DOUBLE: this.set("double"),
    GROOVE: this.set("groove"),
    RIDGE: this.set("ridge"),
    INSET: this.set("inset"),
    OUTSET: this.set("outset"),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    THIN: this.set("thin"),
    MEDIUM: this.set("medium"),
    THICK: this.set("thick")
};
const _OutlineColor = {
    set: (...params) => ({ outlineColor: buildProperty(params) }),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ outlineColor: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText"),
    INVERT: this.set("invert")
};
const _OutlineOffset = {
    set: (...params) => ({ outlineOffset: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums))
};
const _OutlineStyle = {
    set: (...params) => ({ outlineStyle: buildProperty(params) }),
    AUTO: this.set("auto"),
    NONE: this.set("none"),
    HIDDEN: this.set("hidden"),
    DOTTED: this.set("dotted"),
    DASHED: this.set("dashed"),
    SOLID: this.set("solid"),
    DOUBLE: this.set("double"),
    GROOVE: this.set("groove"),
    RIDGE: this.set("ridge"),
    INSET: this.set("inset"),
    OUTSET: this.set("outset")
};
const _OutlineWidth = {
    set: (...params) => ({ outlineWidth: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    THIN: this.set("thin"),
    MEDIUM: this.set("medium"),
    THICK: this.set("thick")
};
const _Overflow = {
    set: (...params) => ({ overflow: buildProperty(params) }),
    VISIBLE: this.set("visible"),
    HIDDEN: this.set("hidden"),
    CLIP: this.set("clip"),
    SCROLL: this.set("scroll"),
    AUTO: this.set("auto")
};
const _OverflowAnchor = {
    set: (...params) => ({ overflowAnchor: buildProperty(params) }),
    AUTO: this.set("auto"),
    NONE: this.set("none")
};
const _OverflowBlock = {
    set: (...params) => ({ overflowBlock: buildProperty(params) }),
    VISIBLE: this.set("visible"),
    HIDDEN: this.set("hidden"),
    CLIP: this.set("clip"),
    SCROLL: this.set("scroll"),
    AUTO: this.set("auto")
};
const _OverflowClipBox = {
    set: (...params) => ({ overflowClipBox: buildProperty(params) }),
    PADDING_BOX: this.set("padding-box"),
    CONTENT_BOX: this.set("content-box")
};
const _OverflowInline = {
    set: (...params) => ({ overflowInline: buildProperty(params) }),
    VISIBLE: this.set("visible"),
    HIDDEN: this.set("hidden"),
    CLIP: this.set("clip"),
    SCROLL: this.set("scroll"),
    AUTO: this.set("auto")
};
const _OverflowWrap = {
    set: (...params) => ({ overflowWrap: buildProperty(params) }),
    NORMAL: this.set("normal"),
    BREAK_WORD: this.set("break-word")
};
const _OverflowX = {
    set: (...params) => ({ overflowX: buildProperty(params) }),
    VISIBLE: this.set("visible"),
    HIDDEN: this.set("hidden"),
    CLIP: this.set("clip"),
    SCROLL: this.set("scroll"),
    AUTO: this.set("auto")
};
const _OverflowY = {
    set: (...params) => ({ overflowY: buildProperty(params) }),
    VISIBLE: this.set("visible"),
    HIDDEN: this.set("hidden"),
    CLIP: this.set("clip"),
    SCROLL: this.set("scroll"),
    AUTO: this.set("auto")
};
const _OverscrollBehavior = {
    set: (...params) => ({ overscrollBehavior: buildProperty(params) }),
    CONTAIN: this.set("contain"),
    NONE: this.set("none"),
    AUTO: this.set("auto")
};
const _OverscrollBehaviorX = {
    set: (...params) => ({ overscrollBehaviorX: buildProperty(params) }),
    CONTAIN: this.set("contain"),
    NONE: this.set("none"),
    AUTO: this.set("auto")
};
const _OverscrollBehaviorY = {
    set: (...params) => ({ overscrollBehaviorY: buildProperty(params) }),
    CONTAIN: this.set("contain"),
    NONE: this.set("none"),
    AUTO: this.set("auto")
};
const _Padding = {
    set: (...params) => ({ padding: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _PaddingBlockEnd = {
    set: (...params) => ({ paddingBlockEnd: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _PaddingBlockStart = {
    set: (...params) => ({ paddingBlockStart: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _PaddingBottom = {
    set: (...params) => ({ paddingBottom: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _PaddingInlineEnd = {
    set: (...params) => ({ paddingInlineEnd: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _PaddingInlineStart = {
    set: (...params) => ({ paddingInlineStart: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _PaddingLeft = {
    set: (...params) => ({ paddingLeft: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _PaddingRight = {
    set: (...params) => ({ paddingRight: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _PaddingTop = {
    set: (...params) => ({ paddingTop: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _PageBreakAfter = {
    set: (...params) => ({ pageBreakAfter: buildProperty(params) }),
    AUTO: this.set("auto"),
    ALWAYS: this.set("always"),
    AVOID: this.set("avoid"),
    LEFT: this.set("left"),
    RIGHT: this.set("right"),
    RECTO: this.set("recto"),
    VERSO: this.set("verso")
};
const _PageBreakBefore = {
    set: (...params) => ({ pageBreakBefore: buildProperty(params) }),
    AUTO: this.set("auto"),
    ALWAYS: this.set("always"),
    AVOID: this.set("avoid"),
    LEFT: this.set("left"),
    RIGHT: this.set("right"),
    RECTO: this.set("recto"),
    VERSO: this.set("verso")
};
const _PageBreakInside = {
    set: (...params) => ({ pageBreakInside: buildProperty(params) }),
    AUTO: this.set("auto"),
    AVOID: this.set("avoid")
};
const _PaintOrder = {
    set: (...params) => ({ paintOrder: buildProperty(params) }),
    NORMAL: this.set("normal"),
    FILL: this.set("fill"),
    STROKE: this.set("stroke"),
    MARKERS: this.set("markers")
};
const _Perspective = {
    set: (...params) => ({ perspective: buildProperty(params) }),
    NONE: this.set("none"),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums))
};
const _PerspectiveOrigin = {
    set: (...params) => ({ perspectiveOrigin: buildProperty(params) }),
    LEFT: this.set("left"),
    CENTER: this.set("center"),
    RIGHT: this.set("right"),
    TOP: this.set("top"),
    BOTTOM: this.set("bottom"),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _PlaceContent = {
    set: (...params) => ({ placeContent: buildProperty(params) }),
    NORMAL: this.set("normal"),
    FIRST: this.set("first"),
    LAST: this.set("last"),
    BASELINE: this.set("baseline"),
    SPACE_BETWEEN: this.set("space-between"),
    SPACE_AROUND: this.set("space-around"),
    SPACE_EVENLY: this.set("space-evenly"),
    STRETCH: this.set("stretch"),
    UNSAFE: this.set("unsafe"),
    SAFE: this.set("safe"),
    CENTER: this.set("center"),
    START: this.set("start"),
    END: this.set("end"),
    FLEX_START: this.set("flex-start"),
    FLEX_END: this.set("flex-end"),
    LEFT: this.set("left"),
    RIGHT: this.set("right")
};
const _PlaceItems = {
    set: (...params) => ({ placeItems: buildProperty(params) }),
    NORMAL: this.set("normal"),
    STRETCH: this.set("stretch"),
    FIRST: this.set("first"),
    LAST: this.set("last"),
    BASELINE: this.set("baseline"),
    UNSAFE: this.set("unsafe"),
    SAFE: this.set("safe"),
    CENTER: this.set("center"),
    START: this.set("start"),
    END: this.set("end"),
    SELF_START: this.set("self-start"),
    SELF_END: this.set("self-end"),
    FLEX_START: this.set("flex-start"),
    FLEX_END: this.set("flex-end"),
    LEFT: this.set("left"),
    RIGHT: this.set("right"),
    LEGACY: this.set("legacy")
};
const _PointerEvents = {
    set: (...params) => ({ pointerEvents: buildProperty(params) }),
    AUTO: this.set("auto"),
    NONE: this.set("none"),
    VISIBLEPAINTED: this.set("visiblePainted"),
    VISIBLEFILL: this.set("visibleFill"),
    VISIBLESTROKE: this.set("visibleStroke"),
    VISIBLE: this.set("visible"),
    PAINTED: this.set("painted"),
    FILL: this.set("fill"),
    STROKE: this.set("stroke"),
    ALL: this.set("all"),
    INHERIT: this.set("inherit")
};
const _Position = {
    set: (...params) => ({ position: buildProperty(params) }),
    STATIC: this.set("static"),
    RELATIVE: this.set("relative"),
    ABSOLUTE: this.set("absolute"),
    STICKY: this.set("sticky"),
    FIXED: this.set("fixed")
};
const _Quotes = { set: (...params) => ({ quotes: buildProperty(params) }), NONE: this.set("none") };
const _Resize = {
    set: (...params) => ({ resize: buildProperty(params) }),
    NONE: this.set("none"),
    BOTH: this.set("both"),
    HORIZONTAL: this.set("horizontal"),
    VERTICAL: this.set("vertical"),
    BLOCK: this.set("block"),
    INLINE: this.set("inline")
};
const _Right = {
    set: (...params) => ({ right: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    AUTO: this.set("auto")
};
const _Rotate = {
    set: (...params) => ({ rotate: buildProperty(params) }),
    NONE: this.set("none"),
    X: this.set("x"),
    Y: this.set("y"),
    Z: this.set("z"),
    deg: (...nums) => this.set(Angle.deg(...nums)),
    rad: (...nums) => this.set(Angle.rad(...nums)),
    grad: (...nums) => this.set(Angle.grad(...nums)),
    turn: (...nums) => this.set(Angle.turn(...nums))
};
const _RowGap = {
    set: (...params) => ({ rowGap: buildProperty(params) }),
    NORMAL: this.set("normal"),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _RubyAlign = {
    set: (...params) => ({ rubyAlign: buildProperty(params) }),
    START: this.set("start"),
    CENTER: this.set("center"),
    SPACE_BETWEEN: this.set("space-between"),
    SPACE_AROUND: this.set("space-around")
};
const _RubyMerge = {
    set: (...params) => ({ rubyMerge: buildProperty(params) }),
    SEPARATE: this.set("separate"),
    COLLAPSE: this.set("collapse"),
    AUTO: this.set("auto")
};
const _RubyPosition = {
    set: (...params) => ({ rubyPosition: buildProperty(params) }),
    OVER: this.set("over"),
    UNDER: this.set("under"),
    INTER_CHARACTER: this.set("inter-character")
};
const _Scale = { set: (...params) => ({ scale: buildProperty(params) }), NONE: this.set("none") };
const _ScrollBehavior = {
    set: (...params) => ({ scrollBehavior: buildProperty(params) }),
    AUTO: this.set("auto"),
    SMOOTH: this.set("smooth")
};
const _ScrollSnapCoordinate = {
    set: (...params) => ({ scrollSnapCoordinate: buildProperty(params) }),
    NONE: this.set("none"),
    LEFT: this.set("left"),
    CENTER: this.set("center"),
    RIGHT: this.set("right"),
    TOP: this.set("top"),
    BOTTOM: this.set("bottom"),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _ScrollSnapDestination = {
    set: (...params) => ({ scrollSnapDestination: buildProperty(params) }),
    LEFT: this.set("left"),
    CENTER: this.set("center"),
    RIGHT: this.set("right"),
    TOP: this.set("top"),
    BOTTOM: this.set("bottom"),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _ScrollSnapPointsX = {
    set: (...params) => ({ scrollSnapPointsX: buildProperty(params) }),
    NONE: this.set("none"),
    repeat: (...params) => this.set(Method.repeat(...params))
};
const _ScrollSnapPointsY = {
    set: (...params) => ({ scrollSnapPointsY: buildProperty(params) }),
    NONE: this.set("none"),
    repeat: (...params) => this.set(Method.repeat(...params))
};
const _ScrollSnapType = {
    set: (...params) => ({ scrollSnapType: buildProperty(params) }),
    NONE: this.set("none"),
    MANDATORY: this.set("mandatory"),
    PROXIMITY: this.set("proximity")
};
const _ScrollSnapTypeX = {
    set: (...params) => ({ scrollSnapTypeX: buildProperty(params) }),
    NONE: this.set("none"),
    MANDATORY: this.set("mandatory"),
    PROXIMITY: this.set("proximity")
};
const _ScrollSnapTypeY = {
    set: (...params) => ({ scrollSnapTypeY: buildProperty(params) }),
    NONE: this.set("none"),
    MANDATORY: this.set("mandatory"),
    PROXIMITY: this.set("proximity")
};
const _ShapeImageThreshold = { set: (...params) => ({ shapeImageThreshold: buildProperty(params) }) };
const _ShapeMargin = {
    set: (...params) => ({ shapeMargin: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _ShapeOutside = {
    set: (...params) => ({ shapeOutside: buildProperty(params) }),
    NONE: this.set("none"),
    BORDER_BOX: this.set("border-box"),
    PADDING_BOX: this.set("padding-box"),
    CONTENT_BOX: this.set("content-box"),
    MARGIN_BOX: this.set("margin-box"),
    inset: (...params) => this.set(Method.inset(...params)),
    circle: (...params) => this.set(Method.circle(...params)),
    ellipse: (...params) => this.set(Method.ellipse(...params)),
    polygon: (...params) => this.set(Method.polygon(...params)),
    image: (...params) => this.set(Method.image(...params)),
    imageSet: (...params) => this.set(Method.imageSet(...params)),
    element: (...params) => this.set(Method.element(...params)),
    crossFade: (...params) => this.set(Method.crossFade(...params)),
    linearGradient: (...params) => this.set(Method.linearGradient(...params)),
    repeatingLinearGradient: (...params) => this.set(Method.repeatingLinearGradient(...params)),
    radialGradient: (...params) => this.set(Method.radialGradient(...params)),
    repeatingRadialGradient: (...params) => this.set(Method.repeatingRadialGradient(...params))
};
const _TabSize = {
    set: (...params) => ({ tabSize: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums))
};
const _TableLayout = {
    set: (...params) => ({ tableLayout: buildProperty(params) }),
    AUTO: this.set("auto"),
    FIXED: this.set("fixed")
};
const _TextAlign = {
    set: (...params) => ({ textAlign: buildProperty(params) }),
    START: this.set("start"),
    END: this.set("end"),
    LEFT: this.set("left"),
    RIGHT: this.set("right"),
    CENTER: this.set("center"),
    JUSTIFY: this.set("justify"),
    MATCH_PARENT: this.set("match-parent")
};
const _TextAlignLast = {
    set: (...params) => ({ textAlignLast: buildProperty(params) }),
    AUTO: this.set("auto"),
    START: this.set("start"),
    END: this.set("end"),
    LEFT: this.set("left"),
    RIGHT: this.set("right"),
    CENTER: this.set("center"),
    JUSTIFY: this.set("justify")
};
const _TextCombineUpright = {
    set: (...params) => ({ textCombineUpright: buildProperty(params) }),
    NONE: this.set("none"),
    ALL: this.set("all"),
    DIGITS: this.set("digits")
};
const _TextDecoration = {
    set: (...params) => ({ textDecoration: buildProperty(params) }),
    NONE: this.set("none"),
    UNDERLINE: this.set("underline"),
    OVERLINE: this.set("overline"),
    LINE_THROUGH: this.set("line-through"),
    BLINK: this.set("blink"),
    SOLID: this.set("solid"),
    DOUBLE: this.set("double"),
    DOTTED: this.set("dotted"),
    DASHED: this.set("dashed"),
    WAVY: this.set("wavy"),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ textDecoration: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText")
};
const _TextDecorationColor = {
    set: (...params) => ({ textDecorationColor: buildProperty(params) }),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ textDecorationColor: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText")
};
const _TextDecorationLine = {
    set: (...params) => ({ textDecorationLine: buildProperty(params) }),
    NONE: this.set("none"),
    UNDERLINE: this.set("underline"),
    OVERLINE: this.set("overline"),
    LINE_THROUGH: this.set("line-through"),
    BLINK: this.set("blink")
};
const _TextDecorationSkip = {
    set: (...params) => ({ textDecorationSkip: buildProperty(params) }),
    NONE: this.set("none"),
    OBJECTS: this.set("objects"),
    SPACES: this.set("spaces"),
    LEADING_SPACES: this.set("leading-spaces"),
    TRAILING_SPACES: this.set("trailing-spaces"),
    EDGES: this.set("edges"),
    BOX_DECORATION: this.set("box-decoration")
};
const _TextDecorationSkipInk = {
    set: (...params) => ({ textDecorationSkipInk: buildProperty(params) }),
    AUTO: this.set("auto"),
    NONE: this.set("none")
};
const _TextDecorationStyle = {
    set: (...params) => ({ textDecorationStyle: buildProperty(params) }),
    SOLID: this.set("solid"),
    DOUBLE: this.set("double"),
    DOTTED: this.set("dotted"),
    DASHED: this.set("dashed"),
    WAVY: this.set("wavy")
};
const _TextEmphasis = {
    set: (...params) => ({ textEmphasis: buildProperty(params) }),
    NONE: this.set("none"),
    FILLED: this.set("filled"),
    OPEN: this.set("open"),
    DOT: this.set("dot"),
    CIRCLE: this.set("circle"),
    DOUBLE_CIRCLE: this.set("double-circle"),
    TRIANGLE: this.set("triangle"),
    SESAME: this.set("sesame"),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ textEmphasis: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText")
};
const _TextEmphasisColor = {
    set: (...params) => ({ textEmphasisColor: buildProperty(params) }),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ textEmphasisColor: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText")
};
const _TextEmphasisPosition = {
    set: (...params) => ({ textEmphasisPosition: buildProperty(params) }),
    OVER: this.set("over"),
    UNDER: this.set("under"),
    RIGHT: this.set("right"),
    LEFT: this.set("left")
};
const _TextEmphasisStyle = {
    set: (...params) => ({ textEmphasisStyle: buildProperty(params) }),
    NONE: this.set("none"),
    FILLED: this.set("filled"),
    OPEN: this.set("open"),
    DOT: this.set("dot"),
    CIRCLE: this.set("circle"),
    DOUBLE_CIRCLE: this.set("double-circle"),
    TRIANGLE: this.set("triangle"),
    SESAME: this.set("sesame")
};
const _TextIndent = {
    set: (...params) => ({ textIndent: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    HANGING: this.set("hanging"),
    EACH_LINE: this.set("each-line")
};
const _TextJustify = {
    set: (...params) => ({ textJustify: buildProperty(params) }),
    AUTO: this.set("auto"),
    INTER_CHARACTER: this.set("inter-character"),
    INTER_WORD: this.set("inter-word"),
    NONE: this.set("none")
};
const _TextOrientation = {
    set: (...params) => ({ textOrientation: buildProperty(params) }),
    MIXED: this.set("mixed"),
    UPRIGHT: this.set("upright"),
    SIDEWAYS: this.set("sideways")
};
const _TextOverflow = {
    set: (...params) => ({ textOverflow: buildProperty(params) }),
    CLIP: this.set("clip"),
    ELLIPSIS: this.set("ellipsis")
};
const _TextRendering = {
    set: (...params) => ({ textRendering: buildProperty(params) }),
    AUTO: this.set("auto"),
    OPTIMIZESPEED: this.set("optimizeSpeed"),
    OPTIMIZELEGIBILITY: this.set("optimizeLegibility"),
    GEOMETRICPRECISION: this.set("geometricPrecision")
};
const _TextShadow = {
    set: (...params) => ({ textShadow: buildProperty(params) }),
    NONE: this.set("none"),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    rgb: (...params) => this.set(Method.rgb(...params)),
    hex: (code) => ({ textShadow: Method.hex(code) }),
    hexa: (code, alpha) => this.set(Method.hexa(code, alpha)),
    rgba: (...params) => this.set(Method.rgba(...params)),
    hsl: (...params) => this.set(Method.hsl(...params)),
    hsla: (...params) => this.set(Method.hsla(...params)),
    BLACK: this.set("black"),
    SILVER: this.set("silver"),
    GRAY: this.set("gray"),
    WHITE: this.set("white"),
    MAROON: this.set("maroon"),
    RED: this.set("red"),
    PURPLE: this.set("purple"),
    FUCHSIA: this.set("fuchsia"),
    GREEN: this.set("green"),
    LIME: this.set("lime"),
    OLIVE: this.set("olive"),
    YELLOW: this.set("yellow"),
    NAVY: this.set("navy"),
    BLUE: this.set("blue"),
    TEAL: this.set("teal"),
    AQUA: this.set("aqua"),
    CURRENTCOLOR: this.set("currentcolor"),
    ACTIVEBORDER: this.set("ActiveBorder"),
    ACTIVECAPTION: this.set("ActiveCaption"),
    APPWORKSPACE: this.set("AppWorkspace"),
    BACKGROUND: this.set("Background"),
    BUTTONFACE: this.set("ButtonFace"),
    BUTTONHIGHLIGHT: this.set("ButtonHighlight"),
    BUTTONSHADOW: this.set("ButtonShadow"),
    BUTTONTEXT: this.set("ButtonText"),
    CAPTIONTEXT: this.set("CaptionText"),
    GRAYTEXT: this.set("GrayText"),
    HIGHLIGHT: this.set("Highlight"),
    HIGHLIGHTTEXT: this.set("HighlightText"),
    INACTIVEBORDER: this.set("InactiveBorder"),
    INACTIVECAPTION: this.set("InactiveCaption"),
    INACTIVECAPTIONTEXT: this.set("InactiveCaptionText"),
    INFOBACKGROUND: this.set("InfoBackground"),
    INFOTEXT: this.set("InfoText"),
    MENU: this.set("Menu"),
    MENUTEXT: this.set("MenuText"),
    SCROLLBAR: this.set("Scrollbar"),
    THREEDDARKSHADOW: this.set("ThreeDDarkShadow"),
    THREEDFACE: this.set("ThreeDFace"),
    THREEDHIGHLIGHT: this.set("ThreeDHighlight"),
    THREEDLIGHTSHADOW: this.set("ThreeDLightShadow"),
    THREEDSHADOW: this.set("ThreeDShadow"),
    WINDOW: this.set("Window"),
    WINDOWFRAME: this.set("WindowFrame"),
    WINDOWTEXT: this.set("WindowText")
};
const _TextSizeAdjust = {
    set: (...params) => ({ textSizeAdjust: buildProperty(params) }),
    NONE: this.set("none"),
    AUTO: this.set("auto"),
    X: (...nums) => this.set(Length.X(...nums))
};
const _TextTransform = {
    set: (...params) => ({ textTransform: buildProperty(params) }),
    NONE: this.set("none"),
    CAPITALIZE: this.set("capitalize"),
    UPPERCASE: this.set("uppercase"),
    LOWERCASE: this.set("lowercase"),
    FULL_WIDTH: this.set("full-width")
};
const _TextUnderlinePosition = {
    set: (...params) => ({ textUnderlinePosition: buildProperty(params) }),
    AUTO: this.set("auto"),
    UNDER: this.set("under"),
    LEFT: this.set("left"),
    RIGHT: this.set("right")
};
const _Top = {
    set: (...params) => ({ top: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    AUTO: this.set("auto")
};
const _TouchAction = {
    set: (...params) => ({ touchAction: buildProperty(params) }),
    AUTO: this.set("auto"),
    NONE: this.set("none"),
    PAN_X: this.set("pan-x"),
    PAN_LEFT: this.set("pan-left"),
    PAN_RIGHT: this.set("pan-right"),
    PAN_Y: this.set("pan-y"),
    PAN_UP: this.set("pan-up"),
    PAN_DOWN: this.set("pan-down"),
    PINCH_ZOOM: this.set("pinch-zoom"),
    MANIPULATION: this.set("manipulation")
};
const _Transform = {
    set: (...params) => ({ transform: buildProperty(params) }),
    NONE: this.set("none"),
    matrix: (...params) => this.set(Method.matrix(...params)),
    translate: (...params) => this.set(Method.translate(...params)),
    translateX: (...params) => this.set(Method.translateX(...params)),
    translateY: (...params) => this.set(Method.translateY(...params)),
    scale: (...params) => this.set(Method.scale(...params)),
    scaleX: (...params) => this.set(Method.scaleX(...params)),
    scaleY: (...params) => this.set(Method.scaleY(...params)),
    rotate: (...params) => this.set(Method.rotate(...params)),
    skew: (...params) => this.set(Method.skew(...params)),
    skewX: (...params) => this.set(Method.skewX(...params)),
    skewY: (...params) => this.set(Method.skewY(...params)),
    matrix3d: (...params) => this.set(Method.matrix3d(...params)),
    translate3d: (...params) => this.set(Method.translate3d(...params)),
    translateZ: (...params) => this.set(Method.translateZ(...params)),
    scale3d: (...params) => this.set(Method.scale3d(...params)),
    scaleZ: (...params) => this.set(Method.scaleZ(...params)),
    rotate3d: (...params) => this.set(Method.rotate3d(...params)),
    rotateX: (...params) => this.set(Method.rotateX(...params)),
    rotateY: (...params) => this.set(Method.rotateY(...params)),
    rotateZ: (...params) => this.set(Method.rotateZ(...params)),
    perspective: (...params) => this.set(Method.perspective(...params))
};
const _TransformBox = {
    set: (...params) => ({ transformBox: buildProperty(params) }),
    BORDER_BOX: this.set("border-box"),
    FILL_BOX: this.set("fill-box"),
    VIEW_BOX: this.set("view-box")
};
const _TransformOrigin = {
    set: (...params) => ({ transformOrigin: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    LEFT: this.set("left"),
    CENTER: this.set("center"),
    RIGHT: this.set("right"),
    TOP: this.set("top"),
    BOTTOM: this.set("bottom")
};
const _TransformStyle = {
    set: (...params) => ({ transformStyle: buildProperty(params) }),
    FLAT: this.set("flat"),
    PRESERVE_3D: this.set("preserve-3d")
};
const _Transition = {
    set: (...params) => ({ transition: buildProperty(params) }),
    NONE: this.set("none"),
    MS_ACCELERATOR: this.set("-ms-accelerator"),
    MS_BLOCK_PROGRESSION: this.set("-ms-block-progression"),
    MS_CONTENT_ZOOM_CHAINING: this.set("-ms-content-zoom-chaining"),
    MS_CONTENT_ZOOMING: this.set("-ms-content-zooming"),
    MS_CONTENT_ZOOM_LIMIT: this.set("-ms-content-zoom-limit"),
    MS_CONTENT_ZOOM_LIMIT_MAX: this.set("-ms-content-zoom-limit-max"),
    MS_CONTENT_ZOOM_LIMIT_MIN: this.set("-ms-content-zoom-limit-min"),
    MS_CONTENT_ZOOM_SNAP: this.set("-ms-content-zoom-snap"),
    MS_CONTENT_ZOOM_SNAP_POINTS: this.set("-ms-content-zoom-snap-points"),
    MS_CONTENT_ZOOM_SNAP_TYPE: this.set("-ms-content-zoom-snap-type"),
    MS_FILTER: this.set("-ms-filter"),
    MS_FLOW_FROM: this.set("-ms-flow-from"),
    MS_FLOW_INTO: this.set("-ms-flow-into"),
    MS_HIGH_CONTRAST_ADJUST: this.set("-ms-high-contrast-adjust"),
    MS_HYPHENATE_LIMIT_CHARS: this.set("-ms-hyphenate-limit-chars"),
    MS_HYPHENATE_LIMIT_LINES: this.set("-ms-hyphenate-limit-lines"),
    MS_HYPHENATE_LIMIT_ZONE: this.set("-ms-hyphenate-limit-zone"),
    MS_IME_ALIGN: this.set("-ms-ime-align"),
    MS_OVERFLOW_STYLE: this.set("-ms-overflow-style"),
    MS_SCROLLBAR_3DLIGHT_COLOR: this.set("-ms-scrollbar-3dlight-color"),
    MS_SCROLLBAR_ARROW_COLOR: this.set("-ms-scrollbar-arrow-color"),
    MS_SCROLLBAR_BASE_COLOR: this.set("-ms-scrollbar-base-color"),
    MS_SCROLLBAR_DARKSHADOW_COLOR: this.set("-ms-scrollbar-darkshadow-color"),
    MS_SCROLLBAR_FACE_COLOR: this.set("-ms-scrollbar-face-color"),
    MS_SCROLLBAR_HIGHLIGHT_COLOR: this.set("-ms-scrollbar-highlight-color"),
    MS_SCROLLBAR_SHADOW_COLOR: this.set("-ms-scrollbar-shadow-color"),
    MS_SCROLLBAR_TRACK_COLOR: this.set("-ms-scrollbar-track-color"),
    MS_SCROLL_CHAINING: this.set("-ms-scroll-chaining"),
    MS_SCROLL_LIMIT: this.set("-ms-scroll-limit"),
    MS_SCROLL_LIMIT_X_MAX: this.set("-ms-scroll-limit-x-max"),
    MS_SCROLL_LIMIT_X_MIN: this.set("-ms-scroll-limit-x-min"),
    MS_SCROLL_LIMIT_Y_MAX: this.set("-ms-scroll-limit-y-max"),
    MS_SCROLL_LIMIT_Y_MIN: this.set("-ms-scroll-limit-y-min"),
    MS_SCROLL_RAILS: this.set("-ms-scroll-rails"),
    MS_SCROLL_SNAP_POINTS_X: this.set("-ms-scroll-snap-points-x"),
    MS_SCROLL_SNAP_POINTS_Y: this.set("-ms-scroll-snap-points-y"),
    MS_SCROLL_SNAP_TYPE: this.set("-ms-scroll-snap-type"),
    MS_SCROLL_SNAP_X: this.set("-ms-scroll-snap-x"),
    MS_SCROLL_SNAP_Y: this.set("-ms-scroll-snap-y"),
    MS_SCROLL_TRANSLATION: this.set("-ms-scroll-translation"),
    MS_TEXT_AUTOSPACE: this.set("-ms-text-autospace"),
    MS_TOUCH_SELECT: this.set("-ms-touch-select"),
    MS_USER_SELECT: this.set("-ms-user-select"),
    MS_WRAP_FLOW: this.set("-ms-wrap-flow"),
    MS_WRAP_MARGIN: this.set("-ms-wrap-margin"),
    MS_WRAP_THROUGH: this.set("-ms-wrap-through"),
    MOZ_APPEARANCE: this.set("-moz-appearance"),
    MOZ_BINDING: this.set("-moz-binding"),
    MOZ_BORDER_BOTTOM_COLORS: this.set("-moz-border-bottom-colors"),
    MOZ_BORDER_LEFT_COLORS: this.set("-moz-border-left-colors"),
    MOZ_BORDER_RIGHT_COLORS: this.set("-moz-border-right-colors"),
    MOZ_BORDER_TOP_COLORS: this.set("-moz-border-top-colors"),
    MOZ_CONTEXT_PROPERTIES: this.set("-moz-context-properties"),
    MOZ_FLOAT_EDGE: this.set("-moz-float-edge"),
    MOZ_FORCE_BROKEN_IMAGE_ICON: this.set("-moz-force-broken-image-icon"),
    MOZ_IMAGE_REGION: this.set("-moz-image-region"),
    MOZ_ORIENT: this.set("-moz-orient"),
    MOZ_OUTLINE_RADIUS: this.set("-moz-outline-radius"),
    MOZ_OUTLINE_RADIUS_BOTTOMLEFT: this.set("-moz-outline-radius-bottomleft"),
    MOZ_OUTLINE_RADIUS_BOTTOMRIGHT: this.set("-moz-outline-radius-bottomright"),
    MOZ_OUTLINE_RADIUS_TOPLEFT: this.set("-moz-outline-radius-topleft"),
    MOZ_OUTLINE_RADIUS_TOPRIGHT: this.set("-moz-outline-radius-topright"),
    MOZ_STACK_SIZING: this.set("-moz-stack-sizing"),
    MOZ_TEXT_BLINK: this.set("-moz-text-blink"),
    MOZ_USER_FOCUS: this.set("-moz-user-focus"),
    MOZ_USER_INPUT: this.set("-moz-user-input"),
    MOZ_USER_MODIFY: this.set("-moz-user-modify"),
    MOZ_WINDOW_DRAGGING: this.set("-moz-window-dragging"),
    MOZ_WINDOW_SHADOW: this.set("-moz-window-shadow"),
    WEBKIT_APPEARANCE: this.set("-webkit-appearance"),
    WEBKIT_BORDER_BEFORE: this.set("-webkit-border-before"),
    WEBKIT_BORDER_BEFORE_COLOR: this.set("-webkit-border-before-color"),
    WEBKIT_BORDER_BEFORE_STYLE: this.set("-webkit-border-before-style"),
    WEBKIT_BORDER_BEFORE_WIDTH: this.set("-webkit-border-before-width"),
    WEBKIT_BOX_REFLECT: this.set("-webkit-box-reflect"),
    WEBKIT_MASK: this.set("-webkit-mask"),
    WEBKIT_MASK_ATTACHMENT: this.set("-webkit-mask-attachment"),
    WEBKIT_MASK_CLIP: this.set("-webkit-mask-clip"),
    WEBKIT_MASK_COMPOSITE: this.set("-webkit-mask-composite"),
    WEBKIT_MASK_IMAGE: this.set("-webkit-mask-image"),
    WEBKIT_MASK_ORIGIN: this.set("-webkit-mask-origin"),
    WEBKIT_MASK_POSITION: this.set("-webkit-mask-position"),
    WEBKIT_MASK_POSITION_X: this.set("-webkit-mask-position-x"),
    WEBKIT_MASK_POSITION_Y: this.set("-webkit-mask-position-y"),
    WEBKIT_MASK_REPEAT: this.set("-webkit-mask-repeat"),
    WEBKIT_MASK_REPEAT_X: this.set("-webkit-mask-repeat-x"),
    WEBKIT_MASK_REPEAT_Y: this.set("-webkit-mask-repeat-y"),
    WEBKIT_MASK_SIZE: this.set("-webkit-mask-size"),
    WEBKIT_OVERFLOW_SCROLLING: this.set("-webkit-overflow-scrolling"),
    WEBKIT_TAP_HIGHLIGHT_COLOR: this.set("-webkit-tap-highlight-color"),
    WEBKIT_TEXT_FILL_COLOR: this.set("-webkit-text-fill-color"),
    WEBKIT_TEXT_STROKE: this.set("-webkit-text-stroke"),
    WEBKIT_TEXT_STROKE_COLOR: this.set("-webkit-text-stroke-color"),
    WEBKIT_TEXT_STROKE_WIDTH: this.set("-webkit-text-stroke-width"),
    WEBKIT_TOUCH_CALLOUT: this.set("-webkit-touch-callout"),
    WEBKIT_USER_MODIFY: this.set("-webkit-user-modify"),
    ALIGN_CONTENT: this.set("align-content"),
    ALIGN_ITEMS: this.set("align-items"),
    ALIGN_SELF: this.set("align-self"),
    ALL: this.set("all"),
    ANIMATION: this.set("animation"),
    ANIMATION_DELAY: this.set("animation-delay"),
    ANIMATION_DIRECTION: this.set("animation-direction"),
    ANIMATION_DURATION: this.set("animation-duration"),
    ANIMATION_FILL_MODE: this.set("animation-fill-mode"),
    ANIMATION_ITERATION_COUNT: this.set("animation-iteration-count"),
    ANIMATION_NAME: this.set("animation-name"),
    ANIMATION_PLAY_STATE: this.set("animation-play-state"),
    ANIMATION_TIMING_FUNCTION: this.set("animation-timing-function"),
    APPEARANCE: this.set("appearance"),
    AZIMUTH: this.set("azimuth"),
    BACKDROP_FILTER: this.set("backdrop-filter"),
    BACKFACE_VISIBILITY: this.set("backface-visibility"),
    BACKGROUND: this.set("background"),
    BACKGROUND_ATTACHMENT: this.set("background-attachment"),
    BACKGROUND_BLEND_MODE: this.set("background-blend-mode"),
    BACKGROUND_CLIP: this.set("background-clip"),
    BACKGROUND_COLOR: this.set("background-color"),
    BACKGROUND_IMAGE: this.set("background-image"),
    BACKGROUND_ORIGIN: this.set("background-origin"),
    BACKGROUND_POSITION: this.set("background-position"),
    BACKGROUND_POSITION_X: this.set("background-position-x"),
    BACKGROUND_POSITION_Y: this.set("background-position-y"),
    BACKGROUND_REPEAT: this.set("background-repeat"),
    BACKGROUND_SIZE: this.set("background-size"),
    BLOCK_OVERFLOW: this.set("block-overflow"),
    BLOCK_SIZE: this.set("block-size"),
    BORDER: this.set("border"),
    BORDER_BLOCK_END: this.set("border-block-end"),
    BORDER_BLOCK_END_COLOR: this.set("border-block-end-color"),
    BORDER_BLOCK_END_STYLE: this.set("border-block-end-style"),
    BORDER_BLOCK_END_WIDTH: this.set("border-block-end-width"),
    BORDER_BLOCK_START: this.set("border-block-start"),
    BORDER_BLOCK_START_COLOR: this.set("border-block-start-color"),
    BORDER_BLOCK_START_STYLE: this.set("border-block-start-style"),
    BORDER_BLOCK_START_WIDTH: this.set("border-block-start-width"),
    BORDER_BOTTOM: this.set("border-bottom"),
    BORDER_BOTTOM_COLOR: this.set("border-bottom-color"),
    BORDER_BOTTOM_LEFT_RADIUS: this.set("border-bottom-left-radius"),
    BORDER_BOTTOM_RIGHT_RADIUS: this.set("border-bottom-right-radius"),
    BORDER_BOTTOM_STYLE: this.set("border-bottom-style"),
    BORDER_BOTTOM_WIDTH: this.set("border-bottom-width"),
    BORDER_COLLAPSE: this.set("border-collapse"),
    BORDER_COLOR: this.set("border-color"),
    BORDER_IMAGE: this.set("border-image"),
    BORDER_IMAGE_OUTSET: this.set("border-image-outset"),
    BORDER_IMAGE_REPEAT: this.set("border-image-repeat"),
    BORDER_IMAGE_SLICE: this.set("border-image-slice"),
    BORDER_IMAGE_SOURCE: this.set("border-image-source"),
    BORDER_IMAGE_WIDTH: this.set("border-image-width"),
    BORDER_INLINE_END: this.set("border-inline-end"),
    BORDER_INLINE_END_COLOR: this.set("border-inline-end-color"),
    BORDER_INLINE_END_STYLE: this.set("border-inline-end-style"),
    BORDER_INLINE_END_WIDTH: this.set("border-inline-end-width"),
    BORDER_INLINE_START: this.set("border-inline-start"),
    BORDER_INLINE_START_COLOR: this.set("border-inline-start-color"),
    BORDER_INLINE_START_STYLE: this.set("border-inline-start-style"),
    BORDER_INLINE_START_WIDTH: this.set("border-inline-start-width"),
    BORDER_LEFT: this.set("border-left"),
    BORDER_LEFT_COLOR: this.set("border-left-color"),
    BORDER_LEFT_STYLE: this.set("border-left-style"),
    BORDER_LEFT_WIDTH: this.set("border-left-width"),
    BORDER_RADIUS: this.set("border-radius"),
    BORDER_RIGHT: this.set("border-right"),
    BORDER_RIGHT_COLOR: this.set("border-right-color"),
    BORDER_RIGHT_STYLE: this.set("border-right-style"),
    BORDER_RIGHT_WIDTH: this.set("border-right-width"),
    BORDER_SPACING: this.set("border-spacing"),
    BORDER_STYLE: this.set("border-style"),
    BORDER_TOP: this.set("border-top"),
    BORDER_TOP_COLOR: this.set("border-top-color"),
    BORDER_TOP_LEFT_RADIUS: this.set("border-top-left-radius"),
    BORDER_TOP_RIGHT_RADIUS: this.set("border-top-right-radius"),
    BORDER_TOP_STYLE: this.set("border-top-style"),
    BORDER_TOP_WIDTH: this.set("border-top-width"),
    BORDER_WIDTH: this.set("border-width"),
    BOTTOM: this.set("bottom"),
    BOX_ALIGN: this.set("box-align"),
    BOX_DECORATION_BREAK: this.set("box-decoration-break"),
    BOX_DIRECTION: this.set("box-direction"),
    BOX_FLEX: this.set("box-flex"),
    BOX_FLEX_GROUP: this.set("box-flex-group"),
    BOX_LINES: this.set("box-lines"),
    BOX_ORDINAL_GROUP: this.set("box-ordinal-group"),
    BOX_ORIENT: this.set("box-orient"),
    BOX_PACK: this.set("box-pack"),
    BOX_SHADOW: this.set("box-shadow"),
    BOX_SIZING: this.set("box-sizing"),
    BREAK_AFTER: this.set("break-after"),
    BREAK_BEFORE: this.set("break-before"),
    BREAK_INSIDE: this.set("break-inside"),
    CAPTION_SIDE: this.set("caption-side"),
    CARET_COLOR: this.set("caret-color"),
    CLEAR: this.set("clear"),
    CLIP: this.set("clip"),
    CLIP_PATH: this.set("clip-path"),
    COLOR: this.set("color"),
    COLOR_ADJUST: this.set("color-adjust"),
    COLUMN_COUNT: this.set("column-count"),
    COLUMN_FILL: this.set("column-fill"),
    COLUMN_GAP: this.set("column-gap"),
    COLUMN_RULE: this.set("column-rule"),
    COLUMN_RULE_COLOR: this.set("column-rule-color"),
    COLUMN_RULE_STYLE: this.set("column-rule-style"),
    COLUMN_RULE_WIDTH: this.set("column-rule-width"),
    COLUMN_SPAN: this.set("column-span"),
    COLUMN_WIDTH: this.set("column-width"),
    COLUMNS: this.set("columns"),
    CONTAIN: this.set("contain"),
    CONTENT: this.set("content"),
    COUNTER_INCREMENT: this.set("counter-increment"),
    COUNTER_RESET: this.set("counter-reset"),
    CURSOR: this.set("cursor"),
    DIRECTION: this.set("direction"),
    DISPLAY: this.set("display"),
    EMPTY_CELLS: this.set("empty-cells"),
    FILTER: this.set("filter"),
    FLEX: this.set("flex"),
    FLEX_BASIS: this.set("flex-basis"),
    FLEX_DIRECTION: this.set("flex-direction"),
    FLEX_FLOW: this.set("flex-flow"),
    FLEX_GROW: this.set("flex-grow"),
    FLEX_SHRINK: this.set("flex-shrink"),
    FLEX_WRAP: this.set("flex-wrap"),
    FLOAT: this.set("float"),
    FONT: this.set("font"),
    FONT_FAMILY: this.set("font-family"),
    FONT_FEATURE_SETTINGS: this.set("font-feature-settings"),
    FONT_KERNING: this.set("font-kerning"),
    FONT_LANGUAGE_OVERRIDE: this.set("font-language-override"),
    FONT_OPTICAL_SIZING: this.set("font-optical-sizing"),
    FONT_VARIATION_SETTINGS: this.set("font-variation-settings"),
    FONT_SIZE: this.set("font-size"),
    FONT_SIZE_ADJUST: this.set("font-size-adjust"),
    FONT_STRETCH: this.set("font-stretch"),
    FONT_STYLE: this.set("font-style"),
    FONT_SYNTHESIS: this.set("font-synthesis"),
    FONT_VARIANT: this.set("font-variant"),
    FONT_VARIANT_ALTERNATES: this.set("font-variant-alternates"),
    FONT_VARIANT_CAPS: this.set("font-variant-caps"),
    FONT_VARIANT_EAST_ASIAN: this.set("font-variant-east-asian"),
    FONT_VARIANT_LIGATURES: this.set("font-variant-ligatures"),
    FONT_VARIANT_NUMERIC: this.set("font-variant-numeric"),
    FONT_VARIANT_POSITION: this.set("font-variant-position"),
    FONT_WEIGHT: this.set("font-weight"),
    GAP: this.set("gap"),
    GRID: this.set("grid"),
    GRID_AREA: this.set("grid-area"),
    GRID_AUTO_COLUMNS: this.set("grid-auto-columns"),
    GRID_AUTO_FLOW: this.set("grid-auto-flow"),
    GRID_AUTO_ROWS: this.set("grid-auto-rows"),
    GRID_COLUMN: this.set("grid-column"),
    GRID_COLUMN_END: this.set("grid-column-end"),
    GRID_COLUMN_GAP: this.set("grid-column-gap"),
    GRID_COLUMN_START: this.set("grid-column-start"),
    GRID_GAP: this.set("grid-gap"),
    GRID_ROW: this.set("grid-row"),
    GRID_ROW_END: this.set("grid-row-end"),
    GRID_ROW_GAP: this.set("grid-row-gap"),
    GRID_ROW_START: this.set("grid-row-start"),
    GRID_TEMPLATE: this.set("grid-template"),
    GRID_TEMPLATE_AREAS: this.set("grid-template-areas"),
    GRID_TEMPLATE_COLUMNS: this.set("grid-template-columns"),
    GRID_TEMPLATE_ROWS: this.set("grid-template-rows"),
    HANGING_PUNCTUATION: this.set("hanging-punctuation"),
    HEIGHT: this.set("height"),
    HYPHENS: this.set("hyphens"),
    IMAGE_ORIENTATION: this.set("image-orientation"),
    IMAGE_RENDERING: this.set("image-rendering"),
    IMAGE_RESOLUTION: this.set("image-resolution"),
    IME_MODE: this.set("ime-mode"),
    INITIAL_LETTER: this.set("initial-letter"),
    INITIAL_LETTER_ALIGN: this.set("initial-letter-align"),
    INLINE_SIZE: this.set("inline-size"),
    INSET_BLOCK_END: this.set("inset-block-end"),
    INSET_BLOCK_START: this.set("inset-block-start"),
    INSET_INLINE_END: this.set("inset-inline-end"),
    INSET_INLINE_START: this.set("inset-inline-start"),
    ISOLATION: this.set("isolation"),
    JUSTIFY_CONTENT: this.set("justify-content"),
    JUSTIFY_ITEMS: this.set("justify-items"),
    JUSTIFY_SELF: this.set("justify-self"),
    LEFT: this.set("left"),
    LETTER_SPACING: this.set("letter-spacing"),
    LINE_BREAK: this.set("line-break"),
    LINE_CLAMP: this.set("line-clamp"),
    LINE_HEIGHT: this.set("line-height"),
    LIST_STYLE: this.set("list-style"),
    LIST_STYLE_IMAGE: this.set("list-style-image"),
    LIST_STYLE_POSITION: this.set("list-style-position"),
    LIST_STYLE_TYPE: this.set("list-style-type"),
    MARGIN: this.set("margin"),
    MARGIN_BLOCK_END: this.set("margin-block-end"),
    MARGIN_BLOCK_START: this.set("margin-block-start"),
    MARGIN_BOTTOM: this.set("margin-bottom"),
    MARGIN_INLINE_END: this.set("margin-inline-end"),
    MARGIN_INLINE_START: this.set("margin-inline-start"),
    MARGIN_LEFT: this.set("margin-left"),
    MARGIN_RIGHT: this.set("margin-right"),
    MARGIN_TOP: this.set("margin-top"),
    MASK: this.set("mask"),
    MASK_BORDER: this.set("mask-border"),
    MASK_BORDER_MODE: this.set("mask-border-mode"),
    MASK_BORDER_OUTSET: this.set("mask-border-outset"),
    MASK_BORDER_REPEAT: this.set("mask-border-repeat"),
    MASK_BORDER_SLICE: this.set("mask-border-slice"),
    MASK_BORDER_SOURCE: this.set("mask-border-source"),
    MASK_BORDER_WIDTH: this.set("mask-border-width"),
    MASK_CLIP: this.set("mask-clip"),
    MASK_COMPOSITE: this.set("mask-composite"),
    MASK_IMAGE: this.set("mask-image"),
    MASK_MODE: this.set("mask-mode"),
    MASK_ORIGIN: this.set("mask-origin"),
    MASK_POSITION: this.set("mask-position"),
    MASK_REPEAT: this.set("mask-repeat"),
    MASK_SIZE: this.set("mask-size"),
    MASK_TYPE: this.set("mask-type"),
    MAX_BLOCK_SIZE: this.set("max-block-size"),
    MAX_HEIGHT: this.set("max-height"),
    MAX_INLINE_SIZE: this.set("max-inline-size"),
    MAX_LINES: this.set("max-lines"),
    MAX_WIDTH: this.set("max-width"),
    MIN_BLOCK_SIZE: this.set("min-block-size"),
    MIN_HEIGHT: this.set("min-height"),
    MIN_INLINE_SIZE: this.set("min-inline-size"),
    MIN_WIDTH: this.set("min-width"),
    MIX_BLEND_MODE: this.set("mix-blend-mode"),
    MOTION: this.set("motion"),
    MOTION_OFFSET: this.set("motion-offset"),
    MOTION_PATH: this.set("motion-path"),
    MOTION_ROTATION: this.set("motion-rotation"),
    OBJECT_FIT: this.set("object-fit"),
    OBJECT_POSITION: this.set("object-position"),
    OFFSET_POSITION: this.set("offset-position"),
    OPACITY: this.set("opacity"),
    ORDER: this.set("order"),
    ORPHANS: this.set("orphans"),
    OUTLINE: this.set("outline"),
    OUTLINE_COLOR: this.set("outline-color"),
    OUTLINE_OFFSET: this.set("outline-offset"),
    OUTLINE_STYLE: this.set("outline-style"),
    OUTLINE_WIDTH: this.set("outline-width"),
    OVERFLOW: this.set("overflow"),
    OVERFLOW_ANCHOR: this.set("overflow-anchor"),
    OVERFLOW_BLOCK: this.set("overflow-block"),
    OVERFLOW_CLIP_BOX: this.set("overflow-clip-box"),
    OVERFLOW_INLINE: this.set("overflow-inline"),
    OVERFLOW_WRAP: this.set("overflow-wrap"),
    OVERFLOW_X: this.set("overflow-x"),
    OVERFLOW_Y: this.set("overflow-y"),
    OVERSCROLL_BEHAVIOR: this.set("overscroll-behavior"),
    OVERSCROLL_BEHAVIOR_X: this.set("overscroll-behavior-x"),
    OVERSCROLL_BEHAVIOR_Y: this.set("overscroll-behavior-y"),
    PADDING: this.set("padding"),
    PADDING_BLOCK_END: this.set("padding-block-end"),
    PADDING_BLOCK_START: this.set("padding-block-start"),
    PADDING_BOTTOM: this.set("padding-bottom"),
    PADDING_INLINE_END: this.set("padding-inline-end"),
    PADDING_INLINE_START: this.set("padding-inline-start"),
    PADDING_LEFT: this.set("padding-left"),
    PADDING_RIGHT: this.set("padding-right"),
    PADDING_TOP: this.set("padding-top"),
    PAGE_BREAK_AFTER: this.set("page-break-after"),
    PAGE_BREAK_BEFORE: this.set("page-break-before"),
    PAGE_BREAK_INSIDE: this.set("page-break-inside"),
    PAINT_ORDER: this.set("paint-order"),
    PERSPECTIVE: this.set("perspective"),
    PERSPECTIVE_ORIGIN: this.set("perspective-origin"),
    PLACE_CONTENT: this.set("place-content"),
    PLACE_ITEMS: this.set("place-items"),
    POINTER_EVENTS: this.set("pointer-events"),
    POSITION: this.set("position"),
    QUOTES: this.set("quotes"),
    RESIZE: this.set("resize"),
    RIGHT: this.set("right"),
    ROTATE: this.set("rotate"),
    ROW_GAP: this.set("row-gap"),
    RUBY_ALIGN: this.set("ruby-align"),
    RUBY_MERGE: this.set("ruby-merge"),
    RUBY_POSITION: this.set("ruby-position"),
    SCALE: this.set("scale"),
    SCROLL_BEHAVIOR: this.set("scroll-behavior"),
    SCROLL_SNAP_COORDINATE: this.set("scroll-snap-coordinate"),
    SCROLL_SNAP_DESTINATION: this.set("scroll-snap-destination"),
    SCROLL_SNAP_POINTS_X: this.set("scroll-snap-points-x"),
    SCROLL_SNAP_POINTS_Y: this.set("scroll-snap-points-y"),
    SCROLL_SNAP_TYPE: this.set("scroll-snap-type"),
    SCROLL_SNAP_TYPE_X: this.set("scroll-snap-type-x"),
    SCROLL_SNAP_TYPE_Y: this.set("scroll-snap-type-y"),
    SHAPE_IMAGE_THRESHOLD: this.set("shape-image-threshold"),
    SHAPE_MARGIN: this.set("shape-margin"),
    SHAPE_OUTSIDE: this.set("shape-outside"),
    TAB_SIZE: this.set("tab-size"),
    TABLE_LAYOUT: this.set("table-layout"),
    TEXT_ALIGN: this.set("text-align"),
    TEXT_ALIGN_LAST: this.set("text-align-last"),
    TEXT_COMBINE_UPRIGHT: this.set("text-combine-upright"),
    TEXT_DECORATION: this.set("text-decoration"),
    TEXT_DECORATION_COLOR: this.set("text-decoration-color"),
    TEXT_DECORATION_LINE: this.set("text-decoration-line"),
    TEXT_DECORATION_SKIP: this.set("text-decoration-skip"),
    TEXT_DECORATION_SKIP_INK: this.set("text-decoration-skip-ink"),
    TEXT_DECORATION_STYLE: this.set("text-decoration-style"),
    TEXT_EMPHASIS: this.set("text-emphasis"),
    TEXT_EMPHASIS_COLOR: this.set("text-emphasis-color"),
    TEXT_EMPHASIS_POSITION: this.set("text-emphasis-position"),
    TEXT_EMPHASIS_STYLE: this.set("text-emphasis-style"),
    TEXT_INDENT: this.set("text-indent"),
    TEXT_JUSTIFY: this.set("text-justify"),
    TEXT_ORIENTATION: this.set("text-orientation"),
    TEXT_OVERFLOW: this.set("text-overflow"),
    TEXT_RENDERING: this.set("text-rendering"),
    TEXT_SHADOW: this.set("text-shadow"),
    TEXT_SIZE_ADJUST: this.set("text-size-adjust"),
    TEXT_TRANSFORM: this.set("text-transform"),
    TEXT_UNDERLINE_POSITION: this.set("text-underline-position"),
    TOP: this.set("top"),
    TOUCH_ACTION: this.set("touch-action"),
    TRANSFORM: this.set("transform"),
    TRANSFORM_BOX: this.set("transform-box"),
    TRANSFORM_ORIGIN: this.set("transform-origin"),
    TRANSFORM_STYLE: this.set("transform-style"),
    TRANSITION: this.set("transition"),
    TRANSITION_DELAY: this.set("transition-delay"),
    TRANSITION_DURATION: this.set("transition-duration"),
    TRANSITION_PROPERTY: this.set("transition-property"),
    TRANSITION_TIMING_FUNCTION: this.set("transition-timing-function"),
    TRANSLATE: this.set("translate"),
    UNICODE_BIDI: this.set("unicode-bidi"),
    USER_SELECT: this.set("user-select"),
    VERTICAL_ALIGN: this.set("vertical-align"),
    VISIBILITY: this.set("visibility"),
    WHITE_SPACE: this.set("white-space"),
    WIDOWS: this.set("widows"),
    WIDTH: this.set("width"),
    WILL_CHANGE: this.set("will-change"),
    WORD_BREAK: this.set("word-break"),
    WORD_SPACING: this.set("word-spacing"),
    WORD_WRAP: this.set("word-wrap"),
    WRITING_MODE: this.set("writing-mode"),
    Z_INDEX: this.set("z-index"),
    ZOOM: this.set("zoom"),
    s: (...nums) => this.set(Time.s(...nums)),
    ms: (...nums) => this.set(Time.ms(...nums)),
    LINEAR: this.set("linear"),
    EASE: this.set("ease"),
    EASE_IN: this.set("ease-in"),
    EASE_OUT: this.set("ease-out"),
    EASE_IN_OUT: this.set("ease-in-out"),
    cubicBezier: (...params) => this.set(Method.cubicBezier(...params)),
    STEP_START: this.set("step-start"),
    STEP_END: this.set("step-end"),
    steps: (...params) => this.set(Method.steps(...params)),
    frames: (...params) => this.set(Method.frames(...params))
};
const _TransitionDelay = {
    set: (...params) => ({ transitionDelay: buildProperty(params) }),
    s: (...nums) => this.set(Time.s(...nums)),
    ms: (...nums) => this.set(Time.ms(...nums))
};
const _TransitionDuration = {
    set: (...params) => ({ transitionDuration: buildProperty(params) }),
    s: (...nums) => this.set(Time.s(...nums)),
    ms: (...nums) => this.set(Time.ms(...nums))
};
const _TransitionProperty = {
    set: (...params) => ({ transitionProperty: buildProperty(params) }),
    NONE: this.set("none"),
    MS_ACCELERATOR: this.set("-ms-accelerator"),
    MS_BLOCK_PROGRESSION: this.set("-ms-block-progression"),
    MS_CONTENT_ZOOM_CHAINING: this.set("-ms-content-zoom-chaining"),
    MS_CONTENT_ZOOMING: this.set("-ms-content-zooming"),
    MS_CONTENT_ZOOM_LIMIT: this.set("-ms-content-zoom-limit"),
    MS_CONTENT_ZOOM_LIMIT_MAX: this.set("-ms-content-zoom-limit-max"),
    MS_CONTENT_ZOOM_LIMIT_MIN: this.set("-ms-content-zoom-limit-min"),
    MS_CONTENT_ZOOM_SNAP: this.set("-ms-content-zoom-snap"),
    MS_CONTENT_ZOOM_SNAP_POINTS: this.set("-ms-content-zoom-snap-points"),
    MS_CONTENT_ZOOM_SNAP_TYPE: this.set("-ms-content-zoom-snap-type"),
    MS_FILTER: this.set("-ms-filter"),
    MS_FLOW_FROM: this.set("-ms-flow-from"),
    MS_FLOW_INTO: this.set("-ms-flow-into"),
    MS_HIGH_CONTRAST_ADJUST: this.set("-ms-high-contrast-adjust"),
    MS_HYPHENATE_LIMIT_CHARS: this.set("-ms-hyphenate-limit-chars"),
    MS_HYPHENATE_LIMIT_LINES: this.set("-ms-hyphenate-limit-lines"),
    MS_HYPHENATE_LIMIT_ZONE: this.set("-ms-hyphenate-limit-zone"),
    MS_IME_ALIGN: this.set("-ms-ime-align"),
    MS_OVERFLOW_STYLE: this.set("-ms-overflow-style"),
    MS_SCROLLBAR_3DLIGHT_COLOR: this.set("-ms-scrollbar-3dlight-color"),
    MS_SCROLLBAR_ARROW_COLOR: this.set("-ms-scrollbar-arrow-color"),
    MS_SCROLLBAR_BASE_COLOR: this.set("-ms-scrollbar-base-color"),
    MS_SCROLLBAR_DARKSHADOW_COLOR: this.set("-ms-scrollbar-darkshadow-color"),
    MS_SCROLLBAR_FACE_COLOR: this.set("-ms-scrollbar-face-color"),
    MS_SCROLLBAR_HIGHLIGHT_COLOR: this.set("-ms-scrollbar-highlight-color"),
    MS_SCROLLBAR_SHADOW_COLOR: this.set("-ms-scrollbar-shadow-color"),
    MS_SCROLLBAR_TRACK_COLOR: this.set("-ms-scrollbar-track-color"),
    MS_SCROLL_CHAINING: this.set("-ms-scroll-chaining"),
    MS_SCROLL_LIMIT: this.set("-ms-scroll-limit"),
    MS_SCROLL_LIMIT_X_MAX: this.set("-ms-scroll-limit-x-max"),
    MS_SCROLL_LIMIT_X_MIN: this.set("-ms-scroll-limit-x-min"),
    MS_SCROLL_LIMIT_Y_MAX: this.set("-ms-scroll-limit-y-max"),
    MS_SCROLL_LIMIT_Y_MIN: this.set("-ms-scroll-limit-y-min"),
    MS_SCROLL_RAILS: this.set("-ms-scroll-rails"),
    MS_SCROLL_SNAP_POINTS_X: this.set("-ms-scroll-snap-points-x"),
    MS_SCROLL_SNAP_POINTS_Y: this.set("-ms-scroll-snap-points-y"),
    MS_SCROLL_SNAP_TYPE: this.set("-ms-scroll-snap-type"),
    MS_SCROLL_SNAP_X: this.set("-ms-scroll-snap-x"),
    MS_SCROLL_SNAP_Y: this.set("-ms-scroll-snap-y"),
    MS_SCROLL_TRANSLATION: this.set("-ms-scroll-translation"),
    MS_TEXT_AUTOSPACE: this.set("-ms-text-autospace"),
    MS_TOUCH_SELECT: this.set("-ms-touch-select"),
    MS_USER_SELECT: this.set("-ms-user-select"),
    MS_WRAP_FLOW: this.set("-ms-wrap-flow"),
    MS_WRAP_MARGIN: this.set("-ms-wrap-margin"),
    MS_WRAP_THROUGH: this.set("-ms-wrap-through"),
    MOZ_APPEARANCE: this.set("-moz-appearance"),
    MOZ_BINDING: this.set("-moz-binding"),
    MOZ_BORDER_BOTTOM_COLORS: this.set("-moz-border-bottom-colors"),
    MOZ_BORDER_LEFT_COLORS: this.set("-moz-border-left-colors"),
    MOZ_BORDER_RIGHT_COLORS: this.set("-moz-border-right-colors"),
    MOZ_BORDER_TOP_COLORS: this.set("-moz-border-top-colors"),
    MOZ_CONTEXT_PROPERTIES: this.set("-moz-context-properties"),
    MOZ_FLOAT_EDGE: this.set("-moz-float-edge"),
    MOZ_FORCE_BROKEN_IMAGE_ICON: this.set("-moz-force-broken-image-icon"),
    MOZ_IMAGE_REGION: this.set("-moz-image-region"),
    MOZ_ORIENT: this.set("-moz-orient"),
    MOZ_OUTLINE_RADIUS: this.set("-moz-outline-radius"),
    MOZ_OUTLINE_RADIUS_BOTTOMLEFT: this.set("-moz-outline-radius-bottomleft"),
    MOZ_OUTLINE_RADIUS_BOTTOMRIGHT: this.set("-moz-outline-radius-bottomright"),
    MOZ_OUTLINE_RADIUS_TOPLEFT: this.set("-moz-outline-radius-topleft"),
    MOZ_OUTLINE_RADIUS_TOPRIGHT: this.set("-moz-outline-radius-topright"),
    MOZ_STACK_SIZING: this.set("-moz-stack-sizing"),
    MOZ_TEXT_BLINK: this.set("-moz-text-blink"),
    MOZ_USER_FOCUS: this.set("-moz-user-focus"),
    MOZ_USER_INPUT: this.set("-moz-user-input"),
    MOZ_USER_MODIFY: this.set("-moz-user-modify"),
    MOZ_WINDOW_DRAGGING: this.set("-moz-window-dragging"),
    MOZ_WINDOW_SHADOW: this.set("-moz-window-shadow"),
    WEBKIT_APPEARANCE: this.set("-webkit-appearance"),
    WEBKIT_BORDER_BEFORE: this.set("-webkit-border-before"),
    WEBKIT_BORDER_BEFORE_COLOR: this.set("-webkit-border-before-color"),
    WEBKIT_BORDER_BEFORE_STYLE: this.set("-webkit-border-before-style"),
    WEBKIT_BORDER_BEFORE_WIDTH: this.set("-webkit-border-before-width"),
    WEBKIT_BOX_REFLECT: this.set("-webkit-box-reflect"),
    WEBKIT_MASK: this.set("-webkit-mask"),
    WEBKIT_MASK_ATTACHMENT: this.set("-webkit-mask-attachment"),
    WEBKIT_MASK_CLIP: this.set("-webkit-mask-clip"),
    WEBKIT_MASK_COMPOSITE: this.set("-webkit-mask-composite"),
    WEBKIT_MASK_IMAGE: this.set("-webkit-mask-image"),
    WEBKIT_MASK_ORIGIN: this.set("-webkit-mask-origin"),
    WEBKIT_MASK_POSITION: this.set("-webkit-mask-position"),
    WEBKIT_MASK_POSITION_X: this.set("-webkit-mask-position-x"),
    WEBKIT_MASK_POSITION_Y: this.set("-webkit-mask-position-y"),
    WEBKIT_MASK_REPEAT: this.set("-webkit-mask-repeat"),
    WEBKIT_MASK_REPEAT_X: this.set("-webkit-mask-repeat-x"),
    WEBKIT_MASK_REPEAT_Y: this.set("-webkit-mask-repeat-y"),
    WEBKIT_MASK_SIZE: this.set("-webkit-mask-size"),
    WEBKIT_OVERFLOW_SCROLLING: this.set("-webkit-overflow-scrolling"),
    WEBKIT_TAP_HIGHLIGHT_COLOR: this.set("-webkit-tap-highlight-color"),
    WEBKIT_TEXT_FILL_COLOR: this.set("-webkit-text-fill-color"),
    WEBKIT_TEXT_STROKE: this.set("-webkit-text-stroke"),
    WEBKIT_TEXT_STROKE_COLOR: this.set("-webkit-text-stroke-color"),
    WEBKIT_TEXT_STROKE_WIDTH: this.set("-webkit-text-stroke-width"),
    WEBKIT_TOUCH_CALLOUT: this.set("-webkit-touch-callout"),
    WEBKIT_USER_MODIFY: this.set("-webkit-user-modify"),
    ALIGN_CONTENT: this.set("align-content"),
    ALIGN_ITEMS: this.set("align-items"),
    ALIGN_SELF: this.set("align-self"),
    ALL: this.set("all"),
    ANIMATION: this.set("animation"),
    ANIMATION_DELAY: this.set("animation-delay"),
    ANIMATION_DIRECTION: this.set("animation-direction"),
    ANIMATION_DURATION: this.set("animation-duration"),
    ANIMATION_FILL_MODE: this.set("animation-fill-mode"),
    ANIMATION_ITERATION_COUNT: this.set("animation-iteration-count"),
    ANIMATION_NAME: this.set("animation-name"),
    ANIMATION_PLAY_STATE: this.set("animation-play-state"),
    ANIMATION_TIMING_FUNCTION: this.set("animation-timing-function"),
    APPEARANCE: this.set("appearance"),
    AZIMUTH: this.set("azimuth"),
    BACKDROP_FILTER: this.set("backdrop-filter"),
    BACKFACE_VISIBILITY: this.set("backface-visibility"),
    BACKGROUND: this.set("background"),
    BACKGROUND_ATTACHMENT: this.set("background-attachment"),
    BACKGROUND_BLEND_MODE: this.set("background-blend-mode"),
    BACKGROUND_CLIP: this.set("background-clip"),
    BACKGROUND_COLOR: this.set("background-color"),
    BACKGROUND_IMAGE: this.set("background-image"),
    BACKGROUND_ORIGIN: this.set("background-origin"),
    BACKGROUND_POSITION: this.set("background-position"),
    BACKGROUND_POSITION_X: this.set("background-position-x"),
    BACKGROUND_POSITION_Y: this.set("background-position-y"),
    BACKGROUND_REPEAT: this.set("background-repeat"),
    BACKGROUND_SIZE: this.set("background-size"),
    BLOCK_OVERFLOW: this.set("block-overflow"),
    BLOCK_SIZE: this.set("block-size"),
    BORDER: this.set("border"),
    BORDER_BLOCK_END: this.set("border-block-end"),
    BORDER_BLOCK_END_COLOR: this.set("border-block-end-color"),
    BORDER_BLOCK_END_STYLE: this.set("border-block-end-style"),
    BORDER_BLOCK_END_WIDTH: this.set("border-block-end-width"),
    BORDER_BLOCK_START: this.set("border-block-start"),
    BORDER_BLOCK_START_COLOR: this.set("border-block-start-color"),
    BORDER_BLOCK_START_STYLE: this.set("border-block-start-style"),
    BORDER_BLOCK_START_WIDTH: this.set("border-block-start-width"),
    BORDER_BOTTOM: this.set("border-bottom"),
    BORDER_BOTTOM_COLOR: this.set("border-bottom-color"),
    BORDER_BOTTOM_LEFT_RADIUS: this.set("border-bottom-left-radius"),
    BORDER_BOTTOM_RIGHT_RADIUS: this.set("border-bottom-right-radius"),
    BORDER_BOTTOM_STYLE: this.set("border-bottom-style"),
    BORDER_BOTTOM_WIDTH: this.set("border-bottom-width"),
    BORDER_COLLAPSE: this.set("border-collapse"),
    BORDER_COLOR: this.set("border-color"),
    BORDER_IMAGE: this.set("border-image"),
    BORDER_IMAGE_OUTSET: this.set("border-image-outset"),
    BORDER_IMAGE_REPEAT: this.set("border-image-repeat"),
    BORDER_IMAGE_SLICE: this.set("border-image-slice"),
    BORDER_IMAGE_SOURCE: this.set("border-image-source"),
    BORDER_IMAGE_WIDTH: this.set("border-image-width"),
    BORDER_INLINE_END: this.set("border-inline-end"),
    BORDER_INLINE_END_COLOR: this.set("border-inline-end-color"),
    BORDER_INLINE_END_STYLE: this.set("border-inline-end-style"),
    BORDER_INLINE_END_WIDTH: this.set("border-inline-end-width"),
    BORDER_INLINE_START: this.set("border-inline-start"),
    BORDER_INLINE_START_COLOR: this.set("border-inline-start-color"),
    BORDER_INLINE_START_STYLE: this.set("border-inline-start-style"),
    BORDER_INLINE_START_WIDTH: this.set("border-inline-start-width"),
    BORDER_LEFT: this.set("border-left"),
    BORDER_LEFT_COLOR: this.set("border-left-color"),
    BORDER_LEFT_STYLE: this.set("border-left-style"),
    BORDER_LEFT_WIDTH: this.set("border-left-width"),
    BORDER_RADIUS: this.set("border-radius"),
    BORDER_RIGHT: this.set("border-right"),
    BORDER_RIGHT_COLOR: this.set("border-right-color"),
    BORDER_RIGHT_STYLE: this.set("border-right-style"),
    BORDER_RIGHT_WIDTH: this.set("border-right-width"),
    BORDER_SPACING: this.set("border-spacing"),
    BORDER_STYLE: this.set("border-style"),
    BORDER_TOP: this.set("border-top"),
    BORDER_TOP_COLOR: this.set("border-top-color"),
    BORDER_TOP_LEFT_RADIUS: this.set("border-top-left-radius"),
    BORDER_TOP_RIGHT_RADIUS: this.set("border-top-right-radius"),
    BORDER_TOP_STYLE: this.set("border-top-style"),
    BORDER_TOP_WIDTH: this.set("border-top-width"),
    BORDER_WIDTH: this.set("border-width"),
    BOTTOM: this.set("bottom"),
    BOX_ALIGN: this.set("box-align"),
    BOX_DECORATION_BREAK: this.set("box-decoration-break"),
    BOX_DIRECTION: this.set("box-direction"),
    BOX_FLEX: this.set("box-flex"),
    BOX_FLEX_GROUP: this.set("box-flex-group"),
    BOX_LINES: this.set("box-lines"),
    BOX_ORDINAL_GROUP: this.set("box-ordinal-group"),
    BOX_ORIENT: this.set("box-orient"),
    BOX_PACK: this.set("box-pack"),
    BOX_SHADOW: this.set("box-shadow"),
    BOX_SIZING: this.set("box-sizing"),
    BREAK_AFTER: this.set("break-after"),
    BREAK_BEFORE: this.set("break-before"),
    BREAK_INSIDE: this.set("break-inside"),
    CAPTION_SIDE: this.set("caption-side"),
    CARET_COLOR: this.set("caret-color"),
    CLEAR: this.set("clear"),
    CLIP: this.set("clip"),
    CLIP_PATH: this.set("clip-path"),
    COLOR: this.set("color"),
    COLOR_ADJUST: this.set("color-adjust"),
    COLUMN_COUNT: this.set("column-count"),
    COLUMN_FILL: this.set("column-fill"),
    COLUMN_GAP: this.set("column-gap"),
    COLUMN_RULE: this.set("column-rule"),
    COLUMN_RULE_COLOR: this.set("column-rule-color"),
    COLUMN_RULE_STYLE: this.set("column-rule-style"),
    COLUMN_RULE_WIDTH: this.set("column-rule-width"),
    COLUMN_SPAN: this.set("column-span"),
    COLUMN_WIDTH: this.set("column-width"),
    COLUMNS: this.set("columns"),
    CONTAIN: this.set("contain"),
    CONTENT: this.set("content"),
    COUNTER_INCREMENT: this.set("counter-increment"),
    COUNTER_RESET: this.set("counter-reset"),
    CURSOR: this.set("cursor"),
    DIRECTION: this.set("direction"),
    DISPLAY: this.set("display"),
    EMPTY_CELLS: this.set("empty-cells"),
    FILTER: this.set("filter"),
    FLEX: this.set("flex"),
    FLEX_BASIS: this.set("flex-basis"),
    FLEX_DIRECTION: this.set("flex-direction"),
    FLEX_FLOW: this.set("flex-flow"),
    FLEX_GROW: this.set("flex-grow"),
    FLEX_SHRINK: this.set("flex-shrink"),
    FLEX_WRAP: this.set("flex-wrap"),
    FLOAT: this.set("float"),
    FONT: this.set("font"),
    FONT_FAMILY: this.set("font-family"),
    FONT_FEATURE_SETTINGS: this.set("font-feature-settings"),
    FONT_KERNING: this.set("font-kerning"),
    FONT_LANGUAGE_OVERRIDE: this.set("font-language-override"),
    FONT_OPTICAL_SIZING: this.set("font-optical-sizing"),
    FONT_VARIATION_SETTINGS: this.set("font-variation-settings"),
    FONT_SIZE: this.set("font-size"),
    FONT_SIZE_ADJUST: this.set("font-size-adjust"),
    FONT_STRETCH: this.set("font-stretch"),
    FONT_STYLE: this.set("font-style"),
    FONT_SYNTHESIS: this.set("font-synthesis"),
    FONT_VARIANT: this.set("font-variant"),
    FONT_VARIANT_ALTERNATES: this.set("font-variant-alternates"),
    FONT_VARIANT_CAPS: this.set("font-variant-caps"),
    FONT_VARIANT_EAST_ASIAN: this.set("font-variant-east-asian"),
    FONT_VARIANT_LIGATURES: this.set("font-variant-ligatures"),
    FONT_VARIANT_NUMERIC: this.set("font-variant-numeric"),
    FONT_VARIANT_POSITION: this.set("font-variant-position"),
    FONT_WEIGHT: this.set("font-weight"),
    GAP: this.set("gap"),
    GRID: this.set("grid"),
    GRID_AREA: this.set("grid-area"),
    GRID_AUTO_COLUMNS: this.set("grid-auto-columns"),
    GRID_AUTO_FLOW: this.set("grid-auto-flow"),
    GRID_AUTO_ROWS: this.set("grid-auto-rows"),
    GRID_COLUMN: this.set("grid-column"),
    GRID_COLUMN_END: this.set("grid-column-end"),
    GRID_COLUMN_GAP: this.set("grid-column-gap"),
    GRID_COLUMN_START: this.set("grid-column-start"),
    GRID_GAP: this.set("grid-gap"),
    GRID_ROW: this.set("grid-row"),
    GRID_ROW_END: this.set("grid-row-end"),
    GRID_ROW_GAP: this.set("grid-row-gap"),
    GRID_ROW_START: this.set("grid-row-start"),
    GRID_TEMPLATE: this.set("grid-template"),
    GRID_TEMPLATE_AREAS: this.set("grid-template-areas"),
    GRID_TEMPLATE_COLUMNS: this.set("grid-template-columns"),
    GRID_TEMPLATE_ROWS: this.set("grid-template-rows"),
    HANGING_PUNCTUATION: this.set("hanging-punctuation"),
    HEIGHT: this.set("height"),
    HYPHENS: this.set("hyphens"),
    IMAGE_ORIENTATION: this.set("image-orientation"),
    IMAGE_RENDERING: this.set("image-rendering"),
    IMAGE_RESOLUTION: this.set("image-resolution"),
    IME_MODE: this.set("ime-mode"),
    INITIAL_LETTER: this.set("initial-letter"),
    INITIAL_LETTER_ALIGN: this.set("initial-letter-align"),
    INLINE_SIZE: this.set("inline-size"),
    INSET_BLOCK_END: this.set("inset-block-end"),
    INSET_BLOCK_START: this.set("inset-block-start"),
    INSET_INLINE_END: this.set("inset-inline-end"),
    INSET_INLINE_START: this.set("inset-inline-start"),
    ISOLATION: this.set("isolation"),
    JUSTIFY_CONTENT: this.set("justify-content"),
    JUSTIFY_ITEMS: this.set("justify-items"),
    JUSTIFY_SELF: this.set("justify-self"),
    LEFT: this.set("left"),
    LETTER_SPACING: this.set("letter-spacing"),
    LINE_BREAK: this.set("line-break"),
    LINE_CLAMP: this.set("line-clamp"),
    LINE_HEIGHT: this.set("line-height"),
    LIST_STYLE: this.set("list-style"),
    LIST_STYLE_IMAGE: this.set("list-style-image"),
    LIST_STYLE_POSITION: this.set("list-style-position"),
    LIST_STYLE_TYPE: this.set("list-style-type"),
    MARGIN: this.set("margin"),
    MARGIN_BLOCK_END: this.set("margin-block-end"),
    MARGIN_BLOCK_START: this.set("margin-block-start"),
    MARGIN_BOTTOM: this.set("margin-bottom"),
    MARGIN_INLINE_END: this.set("margin-inline-end"),
    MARGIN_INLINE_START: this.set("margin-inline-start"),
    MARGIN_LEFT: this.set("margin-left"),
    MARGIN_RIGHT: this.set("margin-right"),
    MARGIN_TOP: this.set("margin-top"),
    MASK: this.set("mask"),
    MASK_BORDER: this.set("mask-border"),
    MASK_BORDER_MODE: this.set("mask-border-mode"),
    MASK_BORDER_OUTSET: this.set("mask-border-outset"),
    MASK_BORDER_REPEAT: this.set("mask-border-repeat"),
    MASK_BORDER_SLICE: this.set("mask-border-slice"),
    MASK_BORDER_SOURCE: this.set("mask-border-source"),
    MASK_BORDER_WIDTH: this.set("mask-border-width"),
    MASK_CLIP: this.set("mask-clip"),
    MASK_COMPOSITE: this.set("mask-composite"),
    MASK_IMAGE: this.set("mask-image"),
    MASK_MODE: this.set("mask-mode"),
    MASK_ORIGIN: this.set("mask-origin"),
    MASK_POSITION: this.set("mask-position"),
    MASK_REPEAT: this.set("mask-repeat"),
    MASK_SIZE: this.set("mask-size"),
    MASK_TYPE: this.set("mask-type"),
    MAX_BLOCK_SIZE: this.set("max-block-size"),
    MAX_HEIGHT: this.set("max-height"),
    MAX_INLINE_SIZE: this.set("max-inline-size"),
    MAX_LINES: this.set("max-lines"),
    MAX_WIDTH: this.set("max-width"),
    MIN_BLOCK_SIZE: this.set("min-block-size"),
    MIN_HEIGHT: this.set("min-height"),
    MIN_INLINE_SIZE: this.set("min-inline-size"),
    MIN_WIDTH: this.set("min-width"),
    MIX_BLEND_MODE: this.set("mix-blend-mode"),
    MOTION: this.set("motion"),
    MOTION_OFFSET: this.set("motion-offset"),
    MOTION_PATH: this.set("motion-path"),
    MOTION_ROTATION: this.set("motion-rotation"),
    OBJECT_FIT: this.set("object-fit"),
    OBJECT_POSITION: this.set("object-position"),
    OFFSET_POSITION: this.set("offset-position"),
    OPACITY: this.set("opacity"),
    ORDER: this.set("order"),
    ORPHANS: this.set("orphans"),
    OUTLINE: this.set("outline"),
    OUTLINE_COLOR: this.set("outline-color"),
    OUTLINE_OFFSET: this.set("outline-offset"),
    OUTLINE_STYLE: this.set("outline-style"),
    OUTLINE_WIDTH: this.set("outline-width"),
    OVERFLOW: this.set("overflow"),
    OVERFLOW_ANCHOR: this.set("overflow-anchor"),
    OVERFLOW_BLOCK: this.set("overflow-block"),
    OVERFLOW_CLIP_BOX: this.set("overflow-clip-box"),
    OVERFLOW_INLINE: this.set("overflow-inline"),
    OVERFLOW_WRAP: this.set("overflow-wrap"),
    OVERFLOW_X: this.set("overflow-x"),
    OVERFLOW_Y: this.set("overflow-y"),
    OVERSCROLL_BEHAVIOR: this.set("overscroll-behavior"),
    OVERSCROLL_BEHAVIOR_X: this.set("overscroll-behavior-x"),
    OVERSCROLL_BEHAVIOR_Y: this.set("overscroll-behavior-y"),
    PADDING: this.set("padding"),
    PADDING_BLOCK_END: this.set("padding-block-end"),
    PADDING_BLOCK_START: this.set("padding-block-start"),
    PADDING_BOTTOM: this.set("padding-bottom"),
    PADDING_INLINE_END: this.set("padding-inline-end"),
    PADDING_INLINE_START: this.set("padding-inline-start"),
    PADDING_LEFT: this.set("padding-left"),
    PADDING_RIGHT: this.set("padding-right"),
    PADDING_TOP: this.set("padding-top"),
    PAGE_BREAK_AFTER: this.set("page-break-after"),
    PAGE_BREAK_BEFORE: this.set("page-break-before"),
    PAGE_BREAK_INSIDE: this.set("page-break-inside"),
    PAINT_ORDER: this.set("paint-order"),
    PERSPECTIVE: this.set("perspective"),
    PERSPECTIVE_ORIGIN: this.set("perspective-origin"),
    PLACE_CONTENT: this.set("place-content"),
    PLACE_ITEMS: this.set("place-items"),
    POINTER_EVENTS: this.set("pointer-events"),
    POSITION: this.set("position"),
    QUOTES: this.set("quotes"),
    RESIZE: this.set("resize"),
    RIGHT: this.set("right"),
    ROTATE: this.set("rotate"),
    ROW_GAP: this.set("row-gap"),
    RUBY_ALIGN: this.set("ruby-align"),
    RUBY_MERGE: this.set("ruby-merge"),
    RUBY_POSITION: this.set("ruby-position"),
    SCALE: this.set("scale"),
    SCROLL_BEHAVIOR: this.set("scroll-behavior"),
    SCROLL_SNAP_COORDINATE: this.set("scroll-snap-coordinate"),
    SCROLL_SNAP_DESTINATION: this.set("scroll-snap-destination"),
    SCROLL_SNAP_POINTS_X: this.set("scroll-snap-points-x"),
    SCROLL_SNAP_POINTS_Y: this.set("scroll-snap-points-y"),
    SCROLL_SNAP_TYPE: this.set("scroll-snap-type"),
    SCROLL_SNAP_TYPE_X: this.set("scroll-snap-type-x"),
    SCROLL_SNAP_TYPE_Y: this.set("scroll-snap-type-y"),
    SHAPE_IMAGE_THRESHOLD: this.set("shape-image-threshold"),
    SHAPE_MARGIN: this.set("shape-margin"),
    SHAPE_OUTSIDE: this.set("shape-outside"),
    TAB_SIZE: this.set("tab-size"),
    TABLE_LAYOUT: this.set("table-layout"),
    TEXT_ALIGN: this.set("text-align"),
    TEXT_ALIGN_LAST: this.set("text-align-last"),
    TEXT_COMBINE_UPRIGHT: this.set("text-combine-upright"),
    TEXT_DECORATION: this.set("text-decoration"),
    TEXT_DECORATION_COLOR: this.set("text-decoration-color"),
    TEXT_DECORATION_LINE: this.set("text-decoration-line"),
    TEXT_DECORATION_SKIP: this.set("text-decoration-skip"),
    TEXT_DECORATION_SKIP_INK: this.set("text-decoration-skip-ink"),
    TEXT_DECORATION_STYLE: this.set("text-decoration-style"),
    TEXT_EMPHASIS: this.set("text-emphasis"),
    TEXT_EMPHASIS_COLOR: this.set("text-emphasis-color"),
    TEXT_EMPHASIS_POSITION: this.set("text-emphasis-position"),
    TEXT_EMPHASIS_STYLE: this.set("text-emphasis-style"),
    TEXT_INDENT: this.set("text-indent"),
    TEXT_JUSTIFY: this.set("text-justify"),
    TEXT_ORIENTATION: this.set("text-orientation"),
    TEXT_OVERFLOW: this.set("text-overflow"),
    TEXT_RENDERING: this.set("text-rendering"),
    TEXT_SHADOW: this.set("text-shadow"),
    TEXT_SIZE_ADJUST: this.set("text-size-adjust"),
    TEXT_TRANSFORM: this.set("text-transform"),
    TEXT_UNDERLINE_POSITION: this.set("text-underline-position"),
    TOP: this.set("top"),
    TOUCH_ACTION: this.set("touch-action"),
    TRANSFORM: this.set("transform"),
    TRANSFORM_BOX: this.set("transform-box"),
    TRANSFORM_ORIGIN: this.set("transform-origin"),
    TRANSFORM_STYLE: this.set("transform-style"),
    TRANSITION: this.set("transition"),
    TRANSITION_DELAY: this.set("transition-delay"),
    TRANSITION_DURATION: this.set("transition-duration"),
    TRANSITION_PROPERTY: this.set("transition-property"),
    TRANSITION_TIMING_FUNCTION: this.set("transition-timing-function"),
    TRANSLATE: this.set("translate"),
    UNICODE_BIDI: this.set("unicode-bidi"),
    USER_SELECT: this.set("user-select"),
    VERTICAL_ALIGN: this.set("vertical-align"),
    VISIBILITY: this.set("visibility"),
    WHITE_SPACE: this.set("white-space"),
    WIDOWS: this.set("widows"),
    WIDTH: this.set("width"),
    WILL_CHANGE: this.set("will-change"),
    WORD_BREAK: this.set("word-break"),
    WORD_SPACING: this.set("word-spacing"),
    WORD_WRAP: this.set("word-wrap"),
    WRITING_MODE: this.set("writing-mode"),
    Z_INDEX: this.set("z-index"),
    ZOOM: this.set("zoom")
};
const _TransitionTimingFunction = {
    set: (...params) => ({ transitionTimingFunction: buildProperty(params) }),
    LINEAR: this.set("linear"),
    EASE: this.set("ease"),
    EASE_IN: this.set("ease-in"),
    EASE_OUT: this.set("ease-out"),
    EASE_IN_OUT: this.set("ease-in-out"),
    cubicBezier: (...params) => this.set(Method.cubicBezier(...params)),
    STEP_START: this.set("step-start"),
    STEP_END: this.set("step-end"),
    steps: (...params) => this.set(Method.steps(...params)),
    frames: (...params) => this.set(Method.frames(...params))
};
const _Translate = {
    set: (...params) => ({ translate: buildProperty(params) }),
    NONE: this.set("none"),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _UnicodeBidi = {
    set: (...params) => ({ unicodeBidi: buildProperty(params) }),
    NORMAL: this.set("normal"),
    EMBED: this.set("embed"),
    ISOLATE: this.set("isolate"),
    BIDI_OVERRIDE: this.set("bidi-override"),
    ISOLATE_OVERRIDE: this.set("isolate-override"),
    PLAINTEXT: this.set("plaintext")
};
const _UserSelect = {
    set: (...params) => ({ userSelect: buildProperty(params) }),
    AUTO: this.set("auto"),
    TEXT: this.set("text"),
    NONE: this.set("none"),
    CONTAIN: this.set("contain"),
    ALL: this.set("all")
};
const _VerticalAlign = {
    set: (...params) => ({ verticalAlign: buildProperty(params) }),
    BASELINE: this.set("baseline"),
    SUB: this.set("sub"),
    SUPER: this.set("super"),
    TEXT_TOP: this.set("text-top"),
    TEXT_BOTTOM: this.set("text-bottom"),
    MIDDLE: this.set("middle"),
    TOP: this.set("top"),
    BOTTOM: this.set("bottom"),
    X: (...nums) => this.set(Length.X(...nums)),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums))
};
const _Visibility = {
    set: (...params) => ({ visibility: buildProperty(params) }),
    VISIBLE: this.set("visible"),
    HIDDEN: this.set("hidden"),
    COLLAPSE: this.set("collapse")
};
const _WhiteSpace = {
    set: (...params) => ({ whiteSpace: buildProperty(params) }),
    NORMAL: this.set("normal"),
    PRE: this.set("pre"),
    NOWRAP: this.set("nowrap"),
    PRE_WRAP: this.set("pre-wrap"),
    PRE_LINE: this.set("pre-line")
};
const _Widows = { set: (...params) => ({ widows: buildProperty(params) }) };
const _Width = {
    set: (...params) => ({ width: buildProperty(params) }),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums)),
    BORDER_BOX: this.set("border-box"),
    CONTENT_BOX: this.set("content-box"),
    AVAILABLE: this.set("available"),
    MIN_CONTENT: this.set("min-content"),
    MAX_CONTENT: this.set("max-content"),
    FIT_CONTENT: this.set("fit-content"),
    AUTO: this.set("auto")
};
const _WillChange = {
    set: (...params) => ({ willChange: buildProperty(params) }),
    AUTO: this.set("auto"),
    SCROLL_POSITION: this.set("scroll-position"),
    CONTENTS: this.set("contents")
};
const _WordBreak = {
    set: (...params) => ({ wordBreak: buildProperty(params) }),
    NORMAL: this.set("normal"),
    BREAK_ALL: this.set("break-all"),
    KEEP_ALL: this.set("keep-all"),
    BREAK_WORD: this.set("break-word")
};
const _WordSpacing = {
    set: (...params) => ({ wordSpacing: buildProperty(params) }),
    NORMAL: this.set("normal"),
    cap: (...nums) => this.set(Length.cap(...nums)),
    ch: (...nums) => this.set(Length.ch(...nums)),
    em: (...nums) => this.set(Length.em(...nums)),
    ex: (...nums) => this.set(Length.ex(...nums)),
    ic: (...nums) => this.set(Length.ic(...nums)),
    lh: (...nums) => this.set(Length.lh(...nums)),
    rem: (...nums) => this.set(Length.rem(...nums)),
    rlh: (...nums) => this.set(Length.rlh(...nums)),
    vh: (...nums) => this.set(Length.vh(...nums)),
    vw: (...nums) => this.set(Length.vw(...nums)),
    vi: (...nums) => this.set(Length.vi(...nums)),
    vb: (...nums) => this.set(Length.vb(...nums)),
    vmin: (...nums) => this.set(Length.vmin(...nums)),
    vmax: (...nums) => this.set(Length.vmax(...nums)),
    px: (...nums) => this.set(Length.px(...nums)),
    cm: (...nums) => this.set(Length.cm(...nums)),
    mm: (...nums) => this.set(Length.mm(...nums)),
    Q: (...nums) => this.set(Length.Q(...nums)),
    in: (...nums) => this.set(Length.in(...nums)),
    pc: (...nums) => this.set(Length.pc(...nums)),
    pt: (...nums) => this.set(Length.pt(...nums)),
    fr: (...nums) => this.set(Length.fr(...nums)),
    X: (...nums) => this.set(Length.X(...nums))
};
const _WordWrap = {
    set: (...params) => ({ wordWrap: buildProperty(params) }),
    NORMAL: this.set("normal"),
    BREAK_WORD: this.set("break-word")
};
const _WritingMode = {
    set: (...params) => ({ writingMode: buildProperty(params) }),
    HORIZONTAL_TB: this.set("horizontal-tb"),
    VERTICAL_RL: this.set("vertical-rl"),
    VERTICAL_LR: this.set("vertical-lr"),
    SIDEWAYS_RL: this.set("sideways-rl"),
    SIDEWAYS_LR: this.set("sideways-lr")
};
const _ZIndex = { set: (...params) => ({ zIndex: buildProperty(params) }), AUTO: this.set("auto") };
const _Zoom = {
    set: (...params) => ({ zoom: buildProperty(params) }),
    NORMAL: this.set("normal"),
    RESET: this.set("reset"),
    X: (...nums) => this.set(Length.X(...nums))
};
export const Css = {
    AlignContent: _AlignContent,
    AlignItems: _AlignItems,
    AlignSelf: _AlignSelf,
    All: _All,
    Animation: _Animation,
    AnimationDelay: _AnimationDelay,
    AnimationDirection: _AnimationDirection,
    AnimationDuration: _AnimationDuration,
    AnimationFillMode: _AnimationFillMode,
    AnimationIterationCount: _AnimationIterationCount,
    AnimationName: _AnimationName,
    AnimationPlayState: _AnimationPlayState,
    AnimationTimingFunction: _AnimationTimingFunction,
    Appearance: _Appearance,
    Azimuth: _Azimuth,
    BackdropFilter: _BackdropFilter,
    BackfaceVisibility: _BackfaceVisibility,
    Background: _Background,
    BackgroundAttachment: _BackgroundAttachment,
    BackgroundBlendMode: _BackgroundBlendMode,
    BackgroundClip: _BackgroundClip,
    BackgroundColor: _BackgroundColor,
    BackgroundImage: _BackgroundImage,
    BackgroundOrigin: _BackgroundOrigin,
    BackgroundPosition: _BackgroundPosition,
    BackgroundPositionX: _BackgroundPositionX,
    BackgroundPositionY: _BackgroundPositionY,
    BackgroundRepeat: _BackgroundRepeat,
    BackgroundSize: _BackgroundSize,
    BlockOverflow: _BlockOverflow,
    BlockSize: _BlockSize,
    Border: _Border,
    BorderBlockEnd: _BorderBlockEnd,
    BorderBlockEndColor: _BorderBlockEndColor,
    BorderBlockEndStyle: _BorderBlockEndStyle,
    BorderBlockEndWidth: _BorderBlockEndWidth,
    BorderBlockStart: _BorderBlockStart,
    BorderBlockStartColor: _BorderBlockStartColor,
    BorderBlockStartStyle: _BorderBlockStartStyle,
    BorderBlockStartWidth: _BorderBlockStartWidth,
    BorderBottom: _BorderBottom,
    BorderBottomColor: _BorderBottomColor,
    BorderBottomLeftRadius: _BorderBottomLeftRadius,
    BorderBottomRightRadius: _BorderBottomRightRadius,
    BorderBottomStyle: _BorderBottomStyle,
    BorderBottomWidth: _BorderBottomWidth,
    BorderCollapse: _BorderCollapse,
    BorderColor: _BorderColor,
    BorderImage: _BorderImage,
    BorderImageOutset: _BorderImageOutset,
    BorderImageRepeat: _BorderImageRepeat,
    BorderImageSlice: _BorderImageSlice,
    BorderImageSource: _BorderImageSource,
    BorderImageWidth: _BorderImageWidth,
    BorderInlineEnd: _BorderInlineEnd,
    BorderInlineEndColor: _BorderInlineEndColor,
    BorderInlineEndStyle: _BorderInlineEndStyle,
    BorderInlineEndWidth: _BorderInlineEndWidth,
    BorderInlineStart: _BorderInlineStart,
    BorderInlineStartColor: _BorderInlineStartColor,
    BorderInlineStartStyle: _BorderInlineStartStyle,
    BorderInlineStartWidth: _BorderInlineStartWidth,
    BorderLeft: _BorderLeft,
    BorderLeftColor: _BorderLeftColor,
    BorderLeftStyle: _BorderLeftStyle,
    BorderLeftWidth: _BorderLeftWidth,
    BorderRadius: _BorderRadius,
    BorderRight: _BorderRight,
    BorderRightColor: _BorderRightColor,
    BorderRightStyle: _BorderRightStyle,
    BorderRightWidth: _BorderRightWidth,
    BorderSpacing: _BorderSpacing,
    BorderStyle: _BorderStyle,
    BorderTop: _BorderTop,
    BorderTopColor: _BorderTopColor,
    BorderTopLeftRadius: _BorderTopLeftRadius,
    BorderTopRightRadius: _BorderTopRightRadius,
    BorderTopStyle: _BorderTopStyle,
    BorderTopWidth: _BorderTopWidth,
    BorderWidth: _BorderWidth,
    Bottom: _Bottom,
    BoxAlign: _BoxAlign,
    BoxDecorationBreak: _BoxDecorationBreak,
    BoxDirection: _BoxDirection,
    BoxFlex: _BoxFlex,
    BoxFlexGroup: _BoxFlexGroup,
    BoxLines: _BoxLines,
    BoxOrdinalGroup: _BoxOrdinalGroup,
    BoxOrient: _BoxOrient,
    BoxPack: _BoxPack,
    BoxShadow: _BoxShadow,
    BoxSizing: _BoxSizing,
    BreakAfter: _BreakAfter,
    BreakBefore: _BreakBefore,
    BreakInside: _BreakInside,
    CaptionSide: _CaptionSide,
    CaretColor: _CaretColor,
    Clear: _Clear,
    Clip: _Clip,
    ClipPath: _ClipPath,
    Color: _Color,
    ColorAdjust: _ColorAdjust,
    ColumnCount: _ColumnCount,
    ColumnFill: _ColumnFill,
    ColumnGap: _ColumnGap,
    ColumnRule: _ColumnRule,
    ColumnRuleColor: _ColumnRuleColor,
    ColumnRuleStyle: _ColumnRuleStyle,
    ColumnRuleWidth: _ColumnRuleWidth,
    ColumnSpan: _ColumnSpan,
    ColumnWidth: _ColumnWidth,
    Columns: _Columns,
    Contain: _Contain,
    Content: _Content,
    CounterIncrement: _CounterIncrement,
    CounterReset: _CounterReset,
    Cursor: _Cursor,
    Direction: _Direction,
    Display: _Display,
    EmptyCells: _EmptyCells,
    Filter: _Filter,
    Flex: _Flex,
    FlexBasis: _FlexBasis,
    FlexDirection: _FlexDirection,
    FlexFlow: _FlexFlow,
    FlexGrow: _FlexGrow,
    FlexShrink: _FlexShrink,
    FlexWrap: _FlexWrap,
    Float: _Float,
    Font: _Font,
    FontFamily: _FontFamily,
    FontFeatureSettings: _FontFeatureSettings,
    FontKerning: _FontKerning,
    FontLanguageOverride: _FontLanguageOverride,
    FontOpticalSizing: _FontOpticalSizing,
    FontSize: _FontSize,
    FontSizeAdjust: _FontSizeAdjust,
    FontStretch: _FontStretch,
    FontStyle: _FontStyle,
    FontSynthesis: _FontSynthesis,
    FontVariant: _FontVariant,
    FontVariantAlternates: _FontVariantAlternates,
    FontVariantCaps: _FontVariantCaps,
    FontVariantEastAsian: _FontVariantEastAsian,
    FontVariantLigatures: _FontVariantLigatures,
    FontVariantNumeric: _FontVariantNumeric,
    FontVariantPosition: _FontVariantPosition,
    FontVariationSettings: _FontVariationSettings,
    FontWeight: _FontWeight,
    Gap: _Gap,
    Grid: _Grid,
    GridArea: _GridArea,
    GridAutoColumns: _GridAutoColumns,
    GridAutoFlow: _GridAutoFlow,
    GridAutoRows: _GridAutoRows,
    GridColumn: _GridColumn,
    GridColumnEnd: _GridColumnEnd,
    GridColumnGap: _GridColumnGap,
    GridColumnStart: _GridColumnStart,
    GridGap: _GridGap,
    GridRow: _GridRow,
    GridRowEnd: _GridRowEnd,
    GridRowGap: _GridRowGap,
    GridRowStart: _GridRowStart,
    GridTemplate: _GridTemplate,
    GridTemplateAreas: _GridTemplateAreas,
    GridTemplateColumns: _GridTemplateColumns,
    GridTemplateRows: _GridTemplateRows,
    HangingPunctuation: _HangingPunctuation,
    Height: _Height,
    Hyphens: _Hyphens,
    ImageOrientation: _ImageOrientation,
    ImageRendering: _ImageRendering,
    ImageResolution: _ImageResolution,
    ImeMode: _ImeMode,
    InitialLetter: _InitialLetter,
    InitialLetterAlign: _InitialLetterAlign,
    InlineSize: _InlineSize,
    InsetBlockEnd: _InsetBlockEnd,
    InsetBlockStart: _InsetBlockStart,
    InsetInlineEnd: _InsetInlineEnd,
    InsetInlineStart: _InsetInlineStart,
    Isolation: _Isolation,
    JustifyContent: _JustifyContent,
    JustifyItems: _JustifyItems,
    JustifySelf: _JustifySelf,
    Left: _Left,
    LetterSpacing: _LetterSpacing,
    LineBreak: _LineBreak,
    LineClamp: _LineClamp,
    LineHeight: _LineHeight,
    ListStyle: _ListStyle,
    ListStyleImage: _ListStyleImage,
    ListStylePosition: _ListStylePosition,
    ListStyleType: _ListStyleType,
    Margin: _Margin,
    MarginBlockEnd: _MarginBlockEnd,
    MarginBlockStart: _MarginBlockStart,
    MarginBottom: _MarginBottom,
    MarginInlineEnd: _MarginInlineEnd,
    MarginInlineStart: _MarginInlineStart,
    MarginLeft: _MarginLeft,
    MarginRight: _MarginRight,
    MarginTop: _MarginTop,
    Mask: _Mask,
    MaskBorder: _MaskBorder,
    MaskBorderMode: _MaskBorderMode,
    MaskBorderOutset: _MaskBorderOutset,
    MaskBorderRepeat: _MaskBorderRepeat,
    MaskBorderSlice: _MaskBorderSlice,
    MaskBorderSource: _MaskBorderSource,
    MaskBorderWidth: _MaskBorderWidth,
    MaskClip: _MaskClip,
    MaskComposite: _MaskComposite,
    MaskImage: _MaskImage,
    MaskMode: _MaskMode,
    MaskOrigin: _MaskOrigin,
    MaskPosition: _MaskPosition,
    MaskRepeat: _MaskRepeat,
    MaskSize: _MaskSize,
    MaskType: _MaskType,
    MaxBlockSize: _MaxBlockSize,
    MaxHeight: _MaxHeight,
    MaxInlineSize: _MaxInlineSize,
    MaxLines: _MaxLines,
    MaxWidth: _MaxWidth,
    MinBlockSize: _MinBlockSize,
    MinHeight: _MinHeight,
    MinInlineSize: _MinInlineSize,
    MinWidth: _MinWidth,
    MixBlendMode: _MixBlendMode,
    Motion: _Motion,
    MotionOffset: _MotionOffset,
    MotionPath: _MotionPath,
    MotionRotation: _MotionRotation,
    MozAppearance: _MozAppearance,
    MozBinding: _MozBinding,
    MozBorderBottomColors: _MozBorderBottomColors,
    MozBorderLeftColors: _MozBorderLeftColors,
    MozBorderRightColors: _MozBorderRightColors,
    MozBorderTopColors: _MozBorderTopColors,
    MozContextProperties: _MozContextProperties,
    MozFloatEdge: _MozFloatEdge,
    MozForceBrokenImageIcon: _MozForceBrokenImageIcon,
    MozImageRegion: _MozImageRegion,
    MozOrient: _MozOrient,
    MozOutlineRadius: _MozOutlineRadius,
    MozOutlineRadiusBottomleft: _MozOutlineRadiusBottomleft,
    MozOutlineRadiusBottomright: _MozOutlineRadiusBottomright,
    MozOutlineRadiusTopleft: _MozOutlineRadiusTopleft,
    MozOutlineRadiusTopright: _MozOutlineRadiusTopright,
    MozStackSizing: _MozStackSizing,
    MozTextBlink: _MozTextBlink,
    MozUserFocus: _MozUserFocus,
    MozUserInput: _MozUserInput,
    MozUserModify: _MozUserModify,
    MozWindowDragging: _MozWindowDragging,
    MozWindowShadow: _MozWindowShadow,
    MsAccelerator: _MsAccelerator,
    MsBlockProgression: _MsBlockProgression,
    MsContentZoomChaining: _MsContentZoomChaining,
    MsContentZoomLimit: _MsContentZoomLimit,
    MsContentZoomLimitMax: _MsContentZoomLimitMax,
    MsContentZoomLimitMin: _MsContentZoomLimitMin,
    MsContentZoomSnap: _MsContentZoomSnap,
    MsContentZoomSnapPoints: _MsContentZoomSnapPoints,
    MsContentZoomSnapType: _MsContentZoomSnapType,
    MsContentZooming: _MsContentZooming,
    MsFilter: _MsFilter,
    MsFlowFrom: _MsFlowFrom,
    MsFlowInto: _MsFlowInto,
    MsHighContrastAdjust: _MsHighContrastAdjust,
    MsHyphenateLimitChars: _MsHyphenateLimitChars,
    MsHyphenateLimitLines: _MsHyphenateLimitLines,
    MsHyphenateLimitZone: _MsHyphenateLimitZone,
    MsImeAlign: _MsImeAlign,
    MsOverflowStyle: _MsOverflowStyle,
    MsScrollChaining: _MsScrollChaining,
    MsScrollLimit: _MsScrollLimit,
    MsScrollLimitXMax: _MsScrollLimitXMax,
    MsScrollLimitXMin: _MsScrollLimitXMin,
    MsScrollLimitYMax: _MsScrollLimitYMax,
    MsScrollLimitYMin: _MsScrollLimitYMin,
    MsScrollRails: _MsScrollRails,
    MsScrollSnapPointsX: _MsScrollSnapPointsX,
    MsScrollSnapPointsY: _MsScrollSnapPointsY,
    MsScrollSnapType: _MsScrollSnapType,
    MsScrollSnapX: _MsScrollSnapX,
    MsScrollSnapY: _MsScrollSnapY,
    MsScrollTranslation: _MsScrollTranslation,
    MsScrollbar3dlightColor: _MsScrollbar3dlightColor,
    MsScrollbarArrowColor: _MsScrollbarArrowColor,
    MsScrollbarBaseColor: _MsScrollbarBaseColor,
    MsScrollbarDarkshadowColor: _MsScrollbarDarkshadowColor,
    MsScrollbarFaceColor: _MsScrollbarFaceColor,
    MsScrollbarHighlightColor: _MsScrollbarHighlightColor,
    MsScrollbarShadowColor: _MsScrollbarShadowColor,
    MsScrollbarTrackColor: _MsScrollbarTrackColor,
    MsTextAutospace: _MsTextAutospace,
    MsTouchSelect: _MsTouchSelect,
    MsUserSelect: _MsUserSelect,
    MsWrapFlow: _MsWrapFlow,
    MsWrapMargin: _MsWrapMargin,
    MsWrapThrough: _MsWrapThrough,
    ObjectFit: _ObjectFit,
    ObjectPosition: _ObjectPosition,
    OffsetPosition: _OffsetPosition,
    Opacity: _Opacity,
    Order: _Order,
    Orphans: _Orphans,
    Outline: _Outline,
    OutlineColor: _OutlineColor,
    OutlineOffset: _OutlineOffset,
    OutlineStyle: _OutlineStyle,
    OutlineWidth: _OutlineWidth,
    Overflow: _Overflow,
    OverflowAnchor: _OverflowAnchor,
    OverflowBlock: _OverflowBlock,
    OverflowClipBox: _OverflowClipBox,
    OverflowInline: _OverflowInline,
    OverflowWrap: _OverflowWrap,
    OverflowX: _OverflowX,
    OverflowY: _OverflowY,
    OverscrollBehavior: _OverscrollBehavior,
    OverscrollBehaviorX: _OverscrollBehaviorX,
    OverscrollBehaviorY: _OverscrollBehaviorY,
    Padding: _Padding,
    PaddingBlockEnd: _PaddingBlockEnd,
    PaddingBlockStart: _PaddingBlockStart,
    PaddingBottom: _PaddingBottom,
    PaddingInlineEnd: _PaddingInlineEnd,
    PaddingInlineStart: _PaddingInlineStart,
    PaddingLeft: _PaddingLeft,
    PaddingRight: _PaddingRight,
    PaddingTop: _PaddingTop,
    PageBreakAfter: _PageBreakAfter,
    PageBreakBefore: _PageBreakBefore,
    PageBreakInside: _PageBreakInside,
    PaintOrder: _PaintOrder,
    Perspective: _Perspective,
    PerspectiveOrigin: _PerspectiveOrigin,
    PlaceContent: _PlaceContent,
    PlaceItems: _PlaceItems,
    PointerEvents: _PointerEvents,
    Position: _Position,
    Quotes: _Quotes,
    Resize: _Resize,
    Right: _Right,
    Rotate: _Rotate,
    RowGap: _RowGap,
    RubyAlign: _RubyAlign,
    RubyMerge: _RubyMerge,
    RubyPosition: _RubyPosition,
    Scale: _Scale,
    ScrollBehavior: _ScrollBehavior,
    ScrollSnapCoordinate: _ScrollSnapCoordinate,
    ScrollSnapDestination: _ScrollSnapDestination,
    ScrollSnapPointsX: _ScrollSnapPointsX,
    ScrollSnapPointsY: _ScrollSnapPointsY,
    ScrollSnapType: _ScrollSnapType,
    ScrollSnapTypeX: _ScrollSnapTypeX,
    ScrollSnapTypeY: _ScrollSnapTypeY,
    ShapeImageThreshold: _ShapeImageThreshold,
    ShapeMargin: _ShapeMargin,
    ShapeOutside: _ShapeOutside,
    TabSize: _TabSize,
    TableLayout: _TableLayout,
    TextAlign: _TextAlign,
    TextAlignLast: _TextAlignLast,
    TextCombineUpright: _TextCombineUpright,
    TextDecoration: _TextDecoration,
    TextDecorationColor: _TextDecorationColor,
    TextDecorationLine: _TextDecorationLine,
    TextDecorationSkip: _TextDecorationSkip,
    TextDecorationSkipInk: _TextDecorationSkipInk,
    TextDecorationStyle: _TextDecorationStyle,
    TextEmphasis: _TextEmphasis,
    TextEmphasisColor: _TextEmphasisColor,
    TextEmphasisPosition: _TextEmphasisPosition,
    TextEmphasisStyle: _TextEmphasisStyle,
    TextIndent: _TextIndent,
    TextJustify: _TextJustify,
    TextOrientation: _TextOrientation,
    TextOverflow: _TextOverflow,
    TextRendering: _TextRendering,
    TextShadow: _TextShadow,
    TextSizeAdjust: _TextSizeAdjust,
    TextTransform: _TextTransform,
    TextUnderlinePosition: _TextUnderlinePosition,
    Top: _Top,
    TouchAction: _TouchAction,
    Transform: _Transform,
    TransformBox: _TransformBox,
    TransformOrigin: _TransformOrigin,
    TransformStyle: _TransformStyle,
    Transition: _Transition,
    TransitionDelay: _TransitionDelay,
    TransitionDuration: _TransitionDuration,
    TransitionProperty: _TransitionProperty,
    TransitionTimingFunction: _TransitionTimingFunction,
    Translate: _Translate,
    UnicodeBidi: _UnicodeBidi,
    UserSelect: _UserSelect,
    VerticalAlign: _VerticalAlign,
    Visibility: _Visibility,
    WebkitAppearance: _WebkitAppearance,
    WebkitBorderBefore: _WebkitBorderBefore,
    WebkitBorderBeforeColor: _WebkitBorderBeforeColor,
    WebkitBorderBeforeStyle: _WebkitBorderBeforeStyle,
    WebkitBorderBeforeWidth: _WebkitBorderBeforeWidth,
    WebkitBoxReflect: _WebkitBoxReflect,
    WebkitMask: _WebkitMask,
    WebkitMaskAttachment: _WebkitMaskAttachment,
    WebkitMaskClip: _WebkitMaskClip,
    WebkitMaskComposite: _WebkitMaskComposite,
    WebkitMaskImage: _WebkitMaskImage,
    WebkitMaskOrigin: _WebkitMaskOrigin,
    WebkitMaskPosition: _WebkitMaskPosition,
    WebkitMaskPositionX: _WebkitMaskPositionX,
    WebkitMaskPositionY: _WebkitMaskPositionY,
    WebkitMaskRepeat: _WebkitMaskRepeat,
    WebkitMaskRepeatX: _WebkitMaskRepeatX,
    WebkitMaskRepeatY: _WebkitMaskRepeatY,
    WebkitMaskSize: _WebkitMaskSize,
    WebkitOverflowScrolling: _WebkitOverflowScrolling,
    WebkitTapHighlightColor: _WebkitTapHighlightColor,
    WebkitTextFillColor: _WebkitTextFillColor,
    WebkitTextStroke: _WebkitTextStroke,
    WebkitTextStrokeColor: _WebkitTextStrokeColor,
    WebkitTextStrokeWidth: _WebkitTextStrokeWidth,
    WebkitTouchCallout: _WebkitTouchCallout,
    WebkitUserModify: _WebkitUserModify,
    WhiteSpace: _WhiteSpace,
    Widows: _Widows,
    Width: _Width,
    WillChange: _WillChange,
    WordBreak: _WordBreak,
    WordSpacing: _WordSpacing,
    WordWrap: _WordWrap,
    WritingMode: _WritingMode,
    ZIndex: _ZIndex,
    Zoom: _Zoom,
    sheet: _sheet
};
export default Css;
