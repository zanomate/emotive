(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (factory((global.emotive = {})));
}(this, (function (exports) { 'use strict';

    var _this = undefined;
    var concatWithSpaces = function (values) { return values.join(" "); };
    var concatWithCommas = function (values) { return values.join(", "); };
    var buildDatatype = function (unit, nums) { return nums.map(function (num) { return num + (num ? unit : ""); }).join(" "); };
    var buildMethod = function (name, params) {
        return ("(" +
            concatWithCommas(params.map(function (param) {
                if (Array.isArray(param)) {
                    return concatWithSpaces(param.filter(function (subParam) {
                        return !Array.isArray(subParam);
                    }));
                }
                return param;
            })) +
            ")");
    };
    var buildProperty = function (values) {
        return concatWithSpaces(values.map(function (value) {
            if (Array.isArray(value)) {
                return concatWithCommas(value.map(function (subValue) {
                    if (Array.isArray(subValue)) {
                        return concatWithSpaces(subValue.filter(function (subSubValue) {
                            return !Array.isArray(subSubValue);
                        }));
                    }
                    return subValue;
                }));
            }
            return value;
        }));
    };
    var Keyword = {
        _ABOVE: "above",
        _ABSOLUTE: "absolute",
        _ACTIVE: "active",
        _ACTIVEBORDER: "ActiveBorder",
        _ACTIVECAPTION: "ActiveCaption",
        _ADD: "add",
        _AFTER: "after",
        _ALIAS: "alias",
        _ALICEBLUE: "aliceblue",
        _ALL: "all",
        _ALLOW_END: "allow-end",
        _ALL_PETITE_CAPS: "all-petite-caps",
        _ALL_SCROLL: "all-scroll",
        _ALL_SMALL_CAPS: "all-small-caps",
        _ALPHA: "alpha",
        _ALPHABETIC: "alphabetic",
        _ALTERNATE: "alternate",
        _ALTERNATE_REVERSE: "alternate-reverse",
        _ALWAYS: "always",
        _AMP: "amp;",
        _AND: "and",
        _ANGLE: "angle",
        _ANNOTATION: "@annotation",
        _ANTIQUEWHITE: "antiquewhite",
        _APPWORKSPACE: "AppWorkspace",
        _AQUA: "aqua",
        _AQUAMARINE: "aquamarine",
        _AT: "at",
        _AUTO: "auto",
        _AUTO_FILL: "auto-fill",
        _AUTO_FIT: "auto-fit",
        _AUTO_FLOW: "auto-flow",
        _AVAILABLE: "available",
        _AVOID: "avoid",
        _AVOID_COLUMN: "avoid-column",
        _AVOID_PAGE: "avoid-page",
        _AVOID_REGION: "avoid-region",
        _AZURE: "azure",
        _BACKGROUND: "Background",
        _BACKWARDS: "backwards",
        _BALANCE: "balance",
        _BALANCE_ALL: "balance-all",
        _BASELINE: "baseline",
        _BEFORE: "before",
        _BEHIND: "behind",
        _BEIGE: "beige",
        _BELOW: "below",
        _BIDI_OVERRIDE: "bidi-override",
        _BISQUE: "bisque",
        _BLACK: "black",
        _BLANCHEDALMOND: "blanchedalmond",
        _BLANK: "blank",
        _BLINK: "blink",
        _BLOCK: "block",
        _BLOCK_AXIS: "block-axis",
        _BLOCK_END: "block-end",
        _BLOCK_START: "block-start",
        _BLUE: "blue",
        _BLUEVIOLET: "blueviolet",
        _BOLD: "bold",
        _BOLDER: "bolder",
        _BORDER: "border",
        _BORDER_BOX: "border-box",
        _BOTH: "both",
        _BOTTOM: "bottom",
        _BOTTOM_CENTER: "@bottom-center",
        _BOTTOM_LEFT: "@bottom-left",
        _BOTTOM_LEFT_CORNER: "@bottom-left-corner",
        _BOTTOM_RIGHT: "@bottom-right",
        _BOTTOM_RIGHT_CORNER: "@bottom-right-corner",
        _BOX_DECORATION: "box-decoration",
        _BREAK_ALL: "break-all",
        _BREAK_WORD: "break-word",
        _BROWN: "brown",
        _BT: "bt",
        _BURLYWOOD: "burlywood",
        _BUTTON: "button",
        _BUTTONFACE: "ButtonFace",
        _BUTTONHIGHLIGHT: "ButtonHighlight",
        _BUTTONSHADOW: "ButtonShadow",
        _BUTTONTEXT: "ButtonText",
        _BUTTON_ARROW_DOWN: "button-arrow-down",
        _BUTTON_ARROW_NEXT: "button-arrow-next",
        _BUTTON_ARROW_PREVIOUS: "button-arrow-previous",
        _BUTTON_ARROW_UP: "button-arrow-up",
        _BUTTON_BEVEL: "button-bevel",
        _BUTTON_FOCUS: "button-focus",
        _CADETBLUE: "cadetblue",
        _CAPITALIZE: "capitalize",
        _CAPTION: "caption",
        _CAPTIONTEXT: "CaptionText",
        _CARET: "caret",
        _CELL: "cell",
        _CENTER: "center",
        _CENTER_LEFT: "center-left",
        _CENTER_RIGHT: "center-right",
        _CHAINED: "chained",
        _CHARACTER_VARIANT: "@character-variant",
        _CHARTREUSE: "chartreuse",
        _CHECKBOX: "checkbox",
        _CHECKBOX_CONTAINER: "checkbox-container",
        _CHECKBOX_LABEL: "checkbox-label",
        _CHECKMENUITEM: "checkmenuitem",
        _CHOCOLATE: "chocolate",
        _CIRCLE: "circle",
        _CLEAR: "clear",
        _CLIP: "clip",
        _CLONE: "clone",
        _CLOSEST_CORNER: "closest-corner",
        _CLOSEST_SIDE: "closest-side",
        _CLOSE_QUOTE: "close-quote",
        _CM: "cm",
        _COLLAPSE: "collapse",
        _COLOR: "color",
        _COLOR_BURN: "color-burn",
        _COLOR_DODGE: "color-dodge",
        _COLUMN: "column",
        _COLUMN_REVERSE: "column-reverse",
        _COL_RESIZE: "col-resize",
        _COMMON_LIGATURES: "common-ligatures",
        _CONDENSED: "condensed",
        _CONTAIN: "contain",
        _CONTENT: "content",
        _CONTENTS: "contents",
        _CONTENT_BOX: "content-box",
        _CONTEXTUAL: "contextual",
        _CONTEXT_MENU: "context-menu",
        _COPY: "copy",
        _CORAL: "coral",
        _CORNFLOWERBLUE: "cornflowerblue",
        _CORNSILK: "cornsilk",
        _COVER: "cover",
        _CRIMSON: "crimson",
        _CRISP_EDGES: "crisp-edges",
        _CROSSHAIR: "crosshair",
        _CURRENTCOLOR: "currentcolor",
        _CURSIVE: "cursive",
        _CYAN: "cyan",
        _DARKBLUE: "darkblue",
        _DARKCYAN: "darkcyan",
        _DARKEN: "darken",
        _DARKGOLDENROD: "darkgoldenrod",
        _DARKGRAY: "darkgray",
        _DARKGREEN: "darkgreen",
        _DARKGREY: "darkgrey",
        _DARKKHAKI: "darkkhaki",
        _DARKMAGENTA: "darkmagenta",
        _DARKOLIVEGREEN: "darkolivegreen",
        _DARKORANGE: "darkorange",
        _DARKORCHID: "darkorchid",
        _DARKRED: "darkred",
        _DARKSALMON: "darksalmon",
        _DARKSEAGREEN: "darkseagreen",
        _DARKSLATEBLUE: "darkslateblue",
        _DARKSLATEGRAY: "darkslategray",
        _DARKSLATEGREY: "darkslategrey",
        _DARKTURQUOISE: "darkturquoise",
        _DARKVIOLET: "darkviolet",
        _DASHED: "dashed",
        _DECLARATION_LIST: "{\n  <declaration-list>\n}",
        _DEEPPINK: "deeppink",
        _DEEPSKYBLUE: "deepskyblue",
        _DEFAULT: "default",
        _DEFAULT_BUTTON: "default-button",
        _DEG: "deg",
        _DENSE: "dense",
        _DESTINATION_ATOP: "destination-atop",
        _DESTINATION_IN: "destination-in",
        _DESTINATION_OUT: "destination-out",
        _DESTINATION_OVER: "destination-over",
        _DIAGONAL_FRACTIONS: "diagonal-fractions",
        _DIFFERENCE: "difference",
        _DIGITS: "digits",
        _DIMGRAY: "dimgray",
        _DIMGREY: "dimgrey",
        _DISABLED: "disabled",
        _DISCRETIONARY_LIGATURES: "discretionary-ligatures",
        _DODGERBLUE: "dodgerblue",
        _DOT: "dot",
        _DOTTED: "dotted",
        _DOUBLE: "double",
        _DOUBLE_CIRCLE: "double-circle",
        _DRAG: "drag",
        _DUALBUTTON: "dualbutton",
        _EACH_LINE: "each-line",
        _EASE: "ease",
        _EASE_IN: "ease-in",
        _EASE_IN_OUT: "ease-in-out",
        _EASE_OUT: "ease-out",
        _ECONOMY: "economy",
        _EDGES: "edges",
        _ELEMENT: "element",
        _ELLIPSE: "ellipse",
        _ELLIPSIS: "ellipsis",
        _EM: "em",
        _EMBED: "embed",
        _ENABLED: "enabled",
        _END: "end",
        _EVEN: "even",
        _EVENODD: "evenodd",
        _EW_RESIZE: "ew-resize",
        _EX: "ex",
        _EXACT: "exact",
        _EXCLUDE: "exclude",
        _EXCLUSION: "exclusion",
        _EXPANDED: "expanded",
        _EXTRA_CONDENSED: "extra-condensed",
        _EXTRA_EXPANDED: "extra-expanded",
        _E_RESIZE: "e-resize",
        _FALSE: "false",
        _FANTASY: "fantasy",
        _FARTHEST_CORNER: "farthest-corner",
        _FARTHEST_SIDE: "farthest-side",
        _FAR_LEFT: "far-left",
        _FAR_RIGHT: "far-right",
        _FEATURE_VALUE_DECLARATION_LIST: "{\n  <feature-value-declaration-list>\n}",
        _FILL: "fill",
        _FILLED: "filled",
        _FILL_AVAILABLE: "fill-available",
        _FILL_BOX: "fill-box",
        _FILL_OPACITY: "fill-opacity",
        _FIREBRICK: "firebrick",
        _FIRST: "first",
        _FIRST_LETTER: "first-letter",
        _FIT_CONTENT: "fit-content",
        _FIXED: "fixed",
        _FLAT: "flat",
        _FLEX: "flex",
        _FLEX_END: "flex-end",
        _FLEX_START: "flex-start",
        _FLIP: "flip",
        _FLORALWHITE: "floralwhite",
        _FLOW: "flow",
        _FLOW_ROOT: "flow-root",
        _FORCE_END: "force-end",
        _FORESTGREEN: "forestgreen",
        _FORWARDS: "forwards",
        _FREQUENCY: "frequency",
        _FROM: "from",
        _FROM_IMAGE: "from-image",
        _FUCHSIA: "fuchsia",
        _FULL_WIDTH: "full-width",
        _GAINSBORO: "gainsboro",
        _GEOMETRICPRECISION: "geometricPrecision",
        _GHOSTWHITE: "ghostwhite",
        _GOLD: "gold",
        _GOLDENROD: "goldenrod",
        _GRAB: "grab",
        _GRABBING: "grabbing",
        _GRAD: "grad",
        _GRAY: "gray",
        _GRAYTEXT: "GrayText",
        _GREEN: "green",
        _GREENYELLOW: "greenyellow",
        _GREY: "grey",
        _GRID: "grid",
        _GRIPPERS: "grippers",
        _GROOVE: "groove",
        _GROUPBOX: "groupbox",
        _HANGING: "hanging",
        _HARD_LIGHT: "hard-light",
        _HELP: "help",
        _HIDDEN: "hidden",
        _HIDE: "hide",
        _HIGHLIGHT: "Highlight",
        _HIGHLIGHTTEXT: "HighlightText",
        _HISTORICAL_FORMS: "historical-forms",
        _HISTORICAL_LIGATURES: "historical-ligatures",
        _HONEYDEW: "honeydew",
        _HORIZONTAL: "horizontal",
        _HORIZONTAL_TB: "horizontal-tb",
        _HOTPINK: "hotpink",
        _HUE: "hue",
        _HZ: "Hz",
        _I: "i",
        _ICON: "icon",
        _IDEOGRAPHIC: "ideographic",
        _IDEOGRAPH_ALPHA: "ideograph-alpha",
        _IDEOGRAPH_NUMERIC: "ideograph-numeric",
        _IDEOGRAPH_PARENTHESIS: "ideograph-parenthesis",
        _IDEOGRAPH_SPACE: "ideograph-space",
        _IGNORE: "ignore",
        _IN: "in",
        _INACTIVE: "inactive",
        _INACTIVEBORDER: "InactiveBorder",
        _INACTIVECAPTION: "InactiveCaption",
        _INACTIVECAPTIONTEXT: "InactiveCaptionText",
        _INDIANRED: "indianred",
        _INDIGO: "indigo",
        _INFINITE: "infinite",
        _INFOBACKGROUND: "InfoBackground",
        _INFOTEXT: "InfoText",
        _INHERIT: "inherit",
        _INITIAL: "initial",
        _INLINE: "inline",
        _INLINE_AXIS: "inline-axis",
        _INLINE_BLOCK: "inline-block",
        _INLINE_END: "inline-end",
        _INLINE_FLEX: "inline-flex",
        _INLINE_GRID: "inline-grid",
        _INLINE_LIST_ITEM: "inline-list-item",
        _INLINE_START: "inline-start",
        _INLINE_TABLE: "inline-table",
        _INNER_SPIN_BUTTON: "inner-spin-button",
        _INSET: "inset",
        _INSIDE: "inside",
        _INTEGER: "integer",
        _INTERSECT: "intersect",
        _INTER_CHARACTER: "inter-character",
        _INTER_WORD: "inter-word",
        _INVERT: "invert",
        _ISOLATE: "isolate",
        _ISOLATE_OVERRIDE: "isolate-override",
        _ITALIC: "italic",
        _IVORY: "ivory",
        _JIS04: "jis04",
        _JIS78: "jis78",
        _JIS83: "jis83",
        _JIS90: "jis90",
        _JUSTIFY: "justify",
        _KEEP_ALL: "keep-all",
        _KHAKI: "khaki",
        _KHZ: "kHz",
        _LARGE: "large",
        _LARGER: "larger",
        _LAST: "last",
        _LAVENDER: "lavender",
        _LAVENDERBLUSH: "lavenderblush",
        _LAWNGREEN: "lawngreen",
        _LAYOUT: "layout",
        _LEADING_SPACES: "leading-spaces",
        _LEFT: "left",
        _LEFTWARDS: "leftwards",
        _LEFT_BOTTOM: "@left-bottom",
        _LEFT_MIDDLE: "@left-middle",
        _LEFT_SIDE: "left-side",
        _LEFT_TOP: "@left-top",
        _LEGACY: "legacy",
        _LEMONCHIFFON: "lemonchiffon",
        _LENGTH: "length",
        _LIGHTBLUE: "lightblue",
        _LIGHTCORAL: "lightcoral",
        _LIGHTCYAN: "lightcyan",
        _LIGHTEN: "lighten",
        _LIGHTER: "lighter",
        _LIGHTGOLDENRODYELLOW: "lightgoldenrodyellow",
        _LIGHTGRAY: "lightgray",
        _LIGHTGREEN: "lightgreen",
        _LIGHTGREY: "lightgrey",
        _LIGHTPINK: "lightpink",
        _LIGHTSALMON: "lightsalmon",
        _LIGHTSEAGREEN: "lightseagreen",
        _LIGHTSKYBLUE: "lightskyblue",
        _LIGHTSLATEGRAY: "lightslategray",
        _LIGHTSLATEGREY: "lightslategrey",
        _LIGHTSTEELBLUE: "lightsteelblue",
        _LIGHTYELLOW: "lightyellow",
        _LIME: "lime",
        _LIMEGREEN: "limegreen",
        _LINEAR: "linear",
        _LINEN: "linen",
        _LINE_THROUGH: "line-through",
        _LINING_NUMS: "lining-nums",
        _LISTBOX: "listbox",
        _LISTITEM: "listitem",
        _LIST_ITEM: "list-item",
        _LOCAL: "local",
        _LOOSE: "loose",
        _LOWERCASE: "lowercase",
        _LR: "lr",
        _LTR: "ltr",
        _LUMINANCE: "luminance",
        _LUMINOSITY: "luminosity",
        _MAGENTA: "magenta",
        _MANDATORY: "mandatory",
        _MANIPULATION: "manipulation",
        _MANUAL: "manual",
        _MARGIN_BOX: "margin-box",
        _MARKERS: "markers",
        _MAROON: "maroon",
        _MATCH_PARENT: "match-parent",
        _MATCH_SOURCE: "match-source",
        _MAXIMUM: "maximum",
        _MAX_CONTENT: "max-content",
        _MEDIA_CONTROLS_BACKGROUND: "media-controls-background",
        _MEDIA_CONTROLS_FULLSCREEN_BACKGROUND: "media-controls-fullscreen-background",
        _MEDIA_CURRENT_TIME_DISPLAY: "media-current-time-display",
        _MEDIA_ENTER_FULLSCREEN_BUTTON: "media-enter-fullscreen-button",
        _MEDIA_EXIT_FULLSCREEN_BUTTON: "media-exit-fullscreen-button",
        _MEDIA_FULLSCREEN_BUTTON: "media-fullscreen-button",
        _MEDIA_MUTE_BUTTON: "media-mute-button",
        _MEDIA_OVERLAY_PLAY_BUTTON: "media-overlay-play-button",
        _MEDIA_PLAY_BUTTON: "media-play-button",
        _MEDIA_SEEK_BACK_BUTTON: "media-seek-back-button",
        _MEDIA_SEEK_FORWARD_BUTTON: "media-seek-forward-button",
        _MEDIA_SLIDER: "media-slider",
        _MEDIA_SLIDERTHUMB: "media-sliderthumb",
        _MEDIA_TIME_REMAINING_DISPLAY: "media-time-remaining-display",
        _MEDIA_TOGGLE_CLOSED_CAPTIONS_BUTTON: "media-toggle-closed-captions-button",
        _MEDIA_VOLUME_SLIDER: "media-volume-slider",
        _MEDIA_VOLUME_SLIDERTHUMB: "media-volume-sliderthumb",
        _MEDIA_VOLUME_SLIDER_CONTAINER: "media-volume-slider-container",
        _MEDIUM: "medium",
        _MEDIUMAQUAMARINE: "mediumaquamarine",
        _MEDIUMBLUE: "mediumblue",
        _MEDIUMORCHID: "mediumorchid",
        _MEDIUMPURPLE: "mediumpurple",
        _MEDIUMSEAGREEN: "mediumseagreen",
        _MEDIUMSLATEBLUE: "mediumslateblue",
        _MEDIUMSPRINGGREEN: "mediumspringgreen",
        _MEDIUMTURQUOISE: "mediumturquoise",
        _MEDIUMVIOLETRED: "mediumvioletred",
        _MENU: "menu",
        _MENUARROW: "menuarrow",
        _MENUBAR: "menubar",
        _MENUCHECKBOX: "menucheckbox",
        _MENUIMAGE: "menuimage",
        _MENUITEM: "menuitem",
        _MENUITEMTEXT: "menuitemtext",
        _MENULIST: "menulist",
        _MENULIST_BUTTON: "menulist-button",
        _MENULIST_TEXT: "menulist-text",
        _MENULIST_TEXTFIELD: "menulist-textfield",
        _MENUPOPUP: "menupopup",
        _MENURADIO: "menuradio",
        _MENUSEPARATOR: "menuseparator",
        _MENUTEXT: "MenuText",
        _MESSAGE_BOX: "message-box",
        _METER: "meter",
        _METERBAR: "meterbar",
        _METERCHUNK: "meterchunk",
        _MIDDLE: "middle",
        _MIDNIGHTBLUE: "midnightblue",
        _MINTCREAM: "mintcream",
        _MIN_CONTENT: "min-content",
        _MISTYROSE: "mistyrose",
        _MIXED: "mixed",
        _MM: "mm",
        _MOCCASIN: "moccasin",
        _MONOSPACE: "monospace",
        _MOVE: "move",
        _MOZ_MAC_UNIFIED_TOOLBAR: "-moz-mac-unified-toolbar",
        _MOZ_WINDOW_BUTTON_BOX: "-moz-window-button-box",
        _MOZ_WINDOW_BUTTON_BOX_MAXIMIZED: "-moz-window-button-box-maximized",
        _MOZ_WINDOW_BUTTON_CLOSE: "-moz-window-button-close",
        _MOZ_WINDOW_BUTTON_MAXIMIZE: "-moz-window-button-maximize",
        _MOZ_WINDOW_BUTTON_MINIMIZE: "-moz-window-button-minimize",
        _MOZ_WINDOW_BUTTON_RESTORE: "-moz-window-button-restore",
        _MOZ_WINDOW_FRAME_BOTTOM: "-moz-window-frame-bottom",
        _MOZ_WINDOW_FRAME_LEFT: "-moz-window-frame-left",
        _MOZ_WINDOW_FRAME_RIGHT: "-moz-window-frame-right",
        _MOZ_WINDOW_TITLEBAR: "-moz-window-titlebar",
        _MOZ_WINDOW_TITLEBAR_MAXIMIZED: "-moz-window-titlebar-maximized",
        _MOZ_WIN_BORDERLESS_GLASS: "-moz-win-borderless-glass",
        _MOZ_WIN_BROWSERTABBAR_TOOLBOX: "-moz-win-browsertabbar-toolbox",
        _MOZ_WIN_COMMUNICATIONSTEXT: "-moz-win-communicationstext",
        _MOZ_WIN_COMMUNICATIONS_TOOLBOX: "-moz-win-communications-toolbox",
        _MOZ_WIN_EXCLUDE_GLASS: "-moz-win-exclude-glass",
        _MOZ_WIN_GLASS: "-moz-win-glass",
        _MOZ_WIN_MEDIATEXT: "-moz-win-mediatext",
        _MOZ_WIN_MEDIA_TOOLBOX: "-moz-win-media-toolbox",
        _MS: "ms",
        _MS_AUTOHIDING_SCROLLBAR: "-ms-autohiding-scrollbar",
        _MULTIPLE: "multiple",
        _MULTIPLY: "multiply",
        _NAVAJOWHITE: "navajowhite",
        _NAVY: "navy",
        _NESW_RESIZE: "nesw-resize",
        _NE_RESIZE: "ne-resize",
        _NONE: "none",
        _NONZERO: "nonzero",
        _NORMAL: "normal",
        _NOT: "not",
        _NOT_ALLOWED: "not-allowed",
        _NOWRAP: "nowrap",
        _NO_CLIP: "no-clip",
        _NO_CLOSE_QUOTE: "no-close-quote",
        _NO_COMMON_LIGATURES: "no-common-ligatures",
        _NO_CONTEXTUAL: "no-contextual",
        _NO_DISCRETIONARY_LIGATURES: "no-discretionary-ligatures",
        _NO_DRAG: "no-drag",
        _NO_DROP: "no-drop",
        _NO_HISTORICAL_LIGATURES: "no-historical-ligatures",
        _NO_LIMIT: "no-limit",
        _NO_OPEN_QUOTE: "no-open-quote",
        _NO_REPEAT: "no-repeat",
        _NS_RESIZE: "ns-resize",
        _NUMBER: "number",
        _NWSE_RESIZE: "nwse-resize",
        _NW_RESIZE: "nw-resize",
        _N_RESIZE: "n-resize",
        _OBJECTS: "objects",
        _OBLIQUE: "oblique",
        _ODD: "odd",
        _OFF: "off",
        _OLDLACE: "oldlace",
        _OLDSTYLE_NUMS: "oldstyle-nums",
        _OLIVE: "olive",
        _OLIVEDRAB: "olivedrab",
        _ON: "on",
        _ONLY: "only",
        _OPEN: "open",
        _OPEN_QUOTE: "open-quote",
        _OPTIMIZELEGIBILITY: "optimizeLegibility",
        _OPTIMIZESPEED: "optimizeSpeed",
        _OR: "or",
        _ORANGE: "orange",
        _ORANGERED: "orangered",
        _ORCHID: "orchid",
        _ORDINAL: "ordinal",
        _ORNAMENTS: "@ornaments",
        _OUTSET: "outset",
        _OUTSIDE: "outside",
        _OVER: "over",
        _OVERLAY: "overlay",
        _OVERLINE: "overline",
        _PADDING: "padding",
        _PADDING_BOX: "padding-box",
        _PAGE: "page",
        _PAINT: "paint",
        _PAINTED: "painted",
        _PALEGOLDENROD: "palegoldenrod",
        _PALEGREEN: "palegreen",
        _PALETURQUOISE: "paleturquoise",
        _PALEVIOLETRED: "palevioletred",
        _PAN_DOWN: "pan-down",
        _PAN_LEFT: "pan-left",
        _PAN_RIGHT: "pan-right",
        _PAN_UP: "pan-up",
        _PAN_X: "pan-x",
        _PAN_Y: "pan-y",
        _PAPAYAWHIP: "papayawhip",
        _PAUSED: "paused",
        _PC: "pc",
        _PEACHPUFF: "peachpuff",
        _PERU: "peru",
        _PETITE_CAPS: "petite-caps",
        _PINCH_ZOOM: "pinch-zoom",
        _PINK: "pink",
        _PIXELATED: "pixelated",
        _PLAINTEXT: "plaintext",
        _PLUM: "plum",
        _POINTER: "pointer",
        _POWDERBLUE: "powderblue",
        _PRE: "pre",
        _PRESERVE_3D: "preserve-3d",
        _PRE_LINE: "pre-line",
        _PRE_WRAP: "pre-wrap",
        _PROGRESS: "progress",
        _PROGRESSBAR: "progressbar",
        _PROGRESSBAR_VERTICAL: "progressbar-vertical",
        _PROGRESSCHUNK: "progresschunk",
        _PROGRESSCHUNK_VERTICAL: "progresschunk-vertical",
        _PROGRESS_BAR: "progress-bar",
        _PROGRESS_BAR_VALUE: "progress-bar-value",
        _PROPORTIONAL_NUMS: "proportional-nums",
        _PROPORTIONAL_WIDTH: "proportional-width",
        _PROXIMITY: "proximity",
        _PT: "pt",
        _PURPLE: "purple",
        _PUSH_BUTTON: "push-button",
        _PX: "px",
        _Q: "q",
        _RAD: "rad",
        _RADIO: "radio",
        _RADIOMENUITEM: "radiomenuitem",
        _RADIO_CONTAINER: "radio-container",
        _RADIO_LABEL: "radio-label",
        _RAILED: "railed",
        _RANGE: "range",
        _RANGE_THUMB: "range-thumb",
        _READ_ONLY: "read-only",
        _READ_WRITE: "read-write",
        _READ_WRITE_PLAINTEXT_ONLY: "read-write-plaintext-only",
        _REBECCAPURPLE: "rebeccapurple",
        _RECTO: "recto",
        _RED: "red",
        _REGION: "region",
        _RELATIVE: "relative",
        _REM: "rem",
        _REPEAT: "repeat",
        _REPEAT_X: "repeat-x",
        _REPEAT_Y: "repeat-y",
        _RESET: "reset",
        _RESIZER: "resizer",
        _RESIZERPANEL: "resizerpanel",
        _REVERSE: "reverse",
        _REVERT: "revert",
        _RIDGE: "ridge",
        _RIGHT: "right",
        _RIGHTWARDS: "rightwards",
        _RIGHT_BOTTOM: "@right-bottom",
        _RIGHT_MIDDLE: "@right-middle",
        _RIGHT_SIDE: "right-side",
        _RIGHT_TOP: "@right-top",
        _RL: "rl",
        _ROSYBROWN: "rosybrown",
        _ROUND: "round",
        _ROW: "row",
        _ROW_RESIZE: "row-resize",
        _ROW_REVERSE: "row-reverse",
        _ROYALBLUE: "royalblue",
        _RTL: "rtl",
        _RUBY: "ruby",
        _RUBY_BASE: "ruby-base",
        _RUBY_BASE_CONTAINER: "ruby-base-container",
        _RUBY_TEXT: "ruby-text",
        _RUBY_TEXT_CONTAINER: "ruby-text-container",
        _RUNNING: "running",
        _RUN_IN: "run-in",
        _S: "s",
        _SADDLEBROWN: "saddlebrown",
        _SAFE: "safe",
        _SALMON: "salmon",
        _SANDYBROWN: "sandybrown",
        _SANS_SERIF: "sans-serif",
        _SATURATION: "saturation",
        _SCALETHUMBEND: "scalethumbend",
        _SCALETHUMBSTART: "scalethumbstart",
        _SCALETHUMBTICK: "scalethumbtick",
        _SCALETHUMB_HORIZONTAL: "scalethumb-horizontal",
        _SCALETHUMB_VERTICAL: "scalethumb-vertical",
        _SCALE_DOWN: "scale-down",
        _SCALE_HORIZONTAL: "scale-horizontal",
        _SCALE_VERTICAL: "scale-vertical",
        _SCREEN: "screen",
        _SCROLL: "scroll",
        _SCROLLBAR: "scrollbar",
        _SCROLLBARBUTTON_DOWN: "scrollbarbutton-down",
        _SCROLLBARBUTTON_LEFT: "scrollbarbutton-left",
        _SCROLLBARBUTTON_RIGHT: "scrollbarbutton-right",
        _SCROLLBARBUTTON_UP: "scrollbarbutton-up",
        _SCROLLBARTHUMB_HORIZONTAL: "scrollbarthumb-horizontal",
        _SCROLLBARTHUMB_VERTICAL: "scrollbarthumb-vertical",
        _SCROLLBARTRACK_HORIZONTAL: "scrollbartrack-horizontal",
        _SCROLLBARTRACK_VERTICAL: "scrollbartrack-vertical",
        _SCROLL_POSITION: "scroll-position",
        _SEAGREEN: "seagreen",
        _SEARCHFIELD: "searchfield",
        _SEARCHFIELD_CANCEL_BUTTON: "searchfield-cancel-button",
        _SEARCHFIELD_DECORATION: "searchfield-decoration",
        _SEARCHFIELD_RESULTS_BUTTON: "searchfield-results-button",
        _SEARCHFIELD_RESULTS_DECORATION: "searchfield-results-decoration",
        _SEASHELL: "seashell",
        _SELECT_AFTER: "select-after",
        _SELECT_ALL: "select-all",
        _SELECT_BEFORE: "select-before",
        _SELECT_MENU: "select-menu",
        _SELECT_SAME: "select-same",
        _SELF_END: "self-end",
        _SELF_START: "self-start",
        _SEMI_CONDENSED: "semi-condensed",
        _SEMI_EXPANDED: "semi-expanded",
        _SEPARATE: "separate",
        _SEPARATOR: "separator",
        _SERIF: "serif",
        _SESAME: "sesame",
        _SE_RESIZE: "se-resize",
        _SHEET: "sheet",
        _SHOW: "show",
        _SIDEWAYS: "sideways",
        _SIDEWAYS_LR: "sideways-lr",
        _SIDEWAYS_RL: "sideways-rl",
        _SIENNA: "sienna",
        _SILVER: "silver",
        _SIMPLIFIED: "simplified",
        _SINGLE: "single",
        _SIZE: "size",
        _SKYBLUE: "skyblue",
        _SLASHED_ZERO: "slashed-zero",
        _SLATEBLUE: "slateblue",
        _SLATEGRAY: "slategray",
        _SLATEGREY: "slategrey",
        _SLICE: "slice",
        _SLIDERTHUMB_HORIZONTAL: "sliderthumb-horizontal",
        _SLIDERTHUMB_VERTICAL: "sliderthumb-vertical",
        _SLIDER_HORIZONTAL: "slider-horizontal",
        _SLIDER_VERTICAL: "slider-vertical",
        _SMALL: "small",
        _SMALLER: "smaller",
        _SMALL_CAPS: "small-caps",
        _SMALL_CAPTION: "small-caption",
        _SMOOTH: "smooth",
        _SNAP: "snap",
        _SNOW: "snow",
        _SOFT_LIGHT: "soft-light",
        _SOLID: "solid",
        _SOURCE_ATOP: "source-atop",
        _SOURCE_IN: "source-in",
        _SOURCE_OUT: "source-out",
        _SOURCE_OVER: "source-over",
        _SPACE: "space",
        _SPACES: "spaces",
        _SPACE_AROUND: "space-around",
        _SPACE_BETWEEN: "space-between",
        _SPACE_EVENLY: "space-evenly",
        _SPAN: "span",
        _SPINNER: "spinner",
        _SPINNER_DOWNBUTTON: "spinner-downbutton",
        _SPINNER_TEXTFIELD: "spinner-textfield",
        _SPINNER_UPBUTTON: "spinner-upbutton",
        _SPLITTER: "splitter",
        _SPRINGGREEN: "springgreen",
        _SQUARE_BUTTON: "square-button",
        _STACKED_FRACTIONS: "stacked-fractions",
        _START: "start",
        _STATIC: "static",
        _STATUSBAR: "statusbar",
        _STATUSBARPANEL: "statusbarpanel",
        _STATUS_BAR: "status-bar",
        _STEELBLUE: "steelblue",
        _STEP_END: "step-end",
        _STEP_START: "step-start",
        _STICKY: "sticky",
        _STRETCH: "stretch",
        _STRETCH_TO_FIT: "stretch-to-fit",
        _STRICT: "strict",
        _STRING: "string",
        _STROKE: "stroke",
        _STROKE_BOX: "stroke-box",
        _STROKE_OPACITY: "stroke-opacity",
        _STYLE: "style",
        _STYLESET: "@styleset",
        _STYLISTIC: "@stylistic",
        _SUB: "sub",
        _SUBTRACT: "subtract",
        _SUPER: "super",
        _SWASH: "@swash",
        _SW_RESIZE: "sw-resize",
        _S_RESIZE: "s-resize",
        _TAB: "tab",
        _TABLE: "table",
        _TABLE_CAPTION: "table-caption",
        _TABLE_CELL: "table-cell",
        _TABLE_COLUMN: "table-column",
        _TABLE_COLUMN_GROUP: "table-column-group",
        _TABLE_FOOTER_GROUP: "table-footer-group",
        _TABLE_HEADER_GROUP: "table-header-group",
        _TABLE_ROW: "table-row",
        _TABLE_ROW_GROUP: "table-row-group",
        _TABPANEL: "tabpanel",
        _TABPANELS: "tabpanels",
        _TABULAR_NUMS: "tabular-nums",
        _TAB_SCROLL_ARROW_BACK: "tab-scroll-arrow-back",
        _TAB_SCROLL_ARROW_FORWARD: "tab-scroll-arrow-forward",
        _TAN: "tan",
        _TB: "tb",
        _TEAL: "teal",
        _TEXT: "text",
        _TEXTAREA: "textarea",
        _TEXTFIELD: "textfield",
        _TEXTFIELD_MULTILINE: "textfield-multiline",
        _TEXT_BOTTOM: "text-bottom",
        _TEXT_TOP: "text-top",
        _THICK: "thick",
        _THIN: "thin",
        _THISTLE: "thistle",
        _THREEDDARKSHADOW: "ThreeDDarkShadow",
        _THREEDFACE: "ThreeDFace",
        _THREEDHIGHLIGHT: "ThreeDHighlight",
        _THREEDLIGHTSHADOW: "ThreeDLightShadow",
        _THREEDSHADOW: "ThreeDShadow",
        _TIME: "time",
        _TITLING_CAPS: "titling-caps",
        _TO: "to",
        _TOMATO: "tomato",
        _TOOLBAR: "toolbar",
        _TOOLBARBUTTON: "toolbarbutton",
        _TOOLBARBUTTON_DROPDOWN: "toolbarbutton-dropdown",
        _TOOLBARGRIPPER: "toolbargripper",
        _TOOLBOX: "toolbox",
        _TOOLTIP: "tooltip",
        _TOP: "top",
        _TOP_CENTER: "@top-center",
        _TOP_LEFT: "@top-left",
        _TOP_LEFT_CORNER: "@top-left-corner",
        _TOP_RIGHT: "@top-right",
        _TOP_RIGHT_CORNER: "@top-right-corner",
        _TOUCH: "touch",
        _TRADITIONAL: "traditional",
        _TRAILING_SPACES: "trailing-spaces",
        _TRANSPARENT: "transparent",
        _TREEHEADER: "treeheader",
        _TREEHEADERCELL: "treeheadercell",
        _TREEHEADERSORTARROW: "treeheadersortarrow",
        _TREEITEM: "treeitem",
        _TREELINE: "treeline",
        _TREETWISTY: "treetwisty",
        _TREETWISTYOPEN: "treetwistyopen",
        _TREEVIEW: "treeview",
        _TRIANGLE: "triangle",
        _TRUE: "true",
        _TURQUOISE: "turquoise",
        _ULTRA_CONDENSED: "ultra-condensed",
        _ULTRA_EXPANDED: "ultra-expanded",
        _UNDER: "under",
        _UNDERLINE: "underline",
        _UNICASE: "unicase",
        _UNSAFE: "unsafe",
        _UNSET: "unset",
        _UPPERCASE: "uppercase",
        _UPRIGHT: "upright",
        _URL: "url",
        _VERSO: "verso",
        _VERTICAL: "vertical",
        _VERTICAL_LR: "vertical-lr",
        _VERTICAL_RL: "vertical-rl",
        _VERTICAL_TEXT: "vertical-text",
        _VERTICAL_TO_HORIZONTAL: "vertical-to-horizontal",
        _VH: "vh",
        _VIEW_BOX: "view-box",
        _VIOLET: "violet",
        _VISIBLE: "visible",
        _VISIBLEFILL: "visibleFill",
        _VISIBLEPAINTED: "visiblePainted",
        _VISIBLESTROKE: "visibleStroke",
        _VMAX: "vmax",
        _VMIN: "vmin",
        _VW: "vw",
        _WAIT: "wait",
        _WAVY: "wavy",
        _WEIGHT: "weight",
        _WHEAT: "wheat",
        _WHITE: "white",
        _WHITESMOKE: "whitesmoke",
        _WINDOW: "Window",
        _WINDOWFRAME: "WindowFrame",
        _WINDOWTEXT: "WindowText",
        _WRAP: "wrap",
        _WRAP_REVERSE: "wrap-reverse",
        _WRITE_ONLY: "write-only",
        _W_RESIZE: "w-resize",
        _X: "x",
        _XOR: "xor",
        _XX_LARGE: "xx-large",
        _XX_SMALL: "xx-small",
        _X_END: "x-end",
        _X_LARGE: "x-large",
        _X_SMALL: "x-small",
        _X_START: "x-start",
        _Y: "y",
        _YELLOW: "yellow",
        _YELLOWGREEN: "yellowgreen",
        _Y_END: "y-end",
        _Y_START: "y-start",
        _Z: "z",
        _ZOOM: "zoom",
        _ZOOM_IN: "zoom-in",
        _ZOOM_OUT: "zoom-out"
    };
    var Property = {
        MOZ_APPEARANCE: "-moz-appearance",
        MOZ_BINDING: "-moz-binding",
        MOZ_BORDER_BOTTOM_COLORS: "-moz-border-bottom-colors",
        MOZ_BORDER_LEFT_COLORS: "-moz-border-left-colors",
        MOZ_BORDER_RIGHT_COLORS: "-moz-border-right-colors",
        MOZ_BORDER_TOP_COLORS: "-moz-border-top-colors",
        MOZ_CONTEXT_PROPERTIES: "-moz-context-properties",
        MOZ_FLOAT_EDGE: "-moz-float-edge",
        MOZ_FORCE_BROKEN_IMAGE_ICON: "-moz-force-broken-image-icon",
        MOZ_IMAGE_REGION: "-moz-image-region",
        MOZ_ORIENT: "-moz-orient",
        MOZ_OUTLINE_RADIUS: "-moz-outline-radius",
        MOZ_OUTLINE_RADIUS_BOTTOMLEFT: "-moz-outline-radius-bottomleft",
        MOZ_OUTLINE_RADIUS_BOTTOMRIGHT: "-moz-outline-radius-bottomright",
        MOZ_OUTLINE_RADIUS_TOPLEFT: "-moz-outline-radius-topleft",
        MOZ_OUTLINE_RADIUS_TOPRIGHT: "-moz-outline-radius-topright",
        MOZ_STACK_SIZING: "-moz-stack-sizing",
        MOZ_TEXT_BLINK: "-moz-text-blink",
        MOZ_USER_FOCUS: "-moz-user-focus",
        MOZ_USER_INPUT: "-moz-user-input",
        MOZ_USER_MODIFY: "-moz-user-modify",
        MOZ_WINDOW_DRAGGING: "-moz-window-dragging",
        MOZ_WINDOW_SHADOW: "-moz-window-shadow",
        MS_ACCELERATOR: "-ms-accelerator",
        MS_BLOCK_PROGRESSION: "-ms-block-progression",
        MS_CONTENT_ZOOM_CHAINING: "-ms-content-zoom-chaining",
        MS_CONTENT_ZOOM_LIMIT: "-ms-content-zoom-limit",
        MS_CONTENT_ZOOM_LIMIT_MAX: "-ms-content-zoom-limit-max",
        MS_CONTENT_ZOOM_LIMIT_MIN: "-ms-content-zoom-limit-min",
        MS_CONTENT_ZOOM_SNAP: "-ms-content-zoom-snap",
        MS_CONTENT_ZOOM_SNAP_POINTS: "-ms-content-zoom-snap-points",
        MS_CONTENT_ZOOM_SNAP_TYPE: "-ms-content-zoom-snap-type",
        MS_CONTENT_ZOOMING: "-ms-content-zooming",
        MS_FILTER: "-ms-filter",
        MS_FLOW_FROM: "-ms-flow-from",
        MS_FLOW_INTO: "-ms-flow-into",
        MS_HIGH_CONTRAST_ADJUST: "-ms-high-contrast-adjust",
        MS_HYPHENATE_LIMIT_CHARS: "-ms-hyphenate-limit-chars",
        MS_HYPHENATE_LIMIT_LINES: "-ms-hyphenate-limit-lines",
        MS_HYPHENATE_LIMIT_ZONE: "-ms-hyphenate-limit-zone",
        MS_IME_ALIGN: "-ms-ime-align",
        MS_OVERFLOW_STYLE: "-ms-overflow-style",
        MS_SCROLL_CHAINING: "-ms-scroll-chaining",
        MS_SCROLL_LIMIT: "-ms-scroll-limit",
        MS_SCROLL_LIMIT_X_MAX: "-ms-scroll-limit-x-max",
        MS_SCROLL_LIMIT_X_MIN: "-ms-scroll-limit-x-min",
        MS_SCROLL_LIMIT_Y_MAX: "-ms-scroll-limit-y-max",
        MS_SCROLL_LIMIT_Y_MIN: "-ms-scroll-limit-y-min",
        MS_SCROLL_RAILS: "-ms-scroll-rails",
        MS_SCROLL_SNAP_POINTS_X: "-ms-scroll-snap-points-x",
        MS_SCROLL_SNAP_POINTS_Y: "-ms-scroll-snap-points-y",
        MS_SCROLL_SNAP_TYPE: "-ms-scroll-snap-type",
        MS_SCROLL_SNAP_X: "-ms-scroll-snap-x",
        MS_SCROLL_SNAP_Y: "-ms-scroll-snap-y",
        MS_SCROLL_TRANSLATION: "-ms-scroll-translation",
        MS_SCROLLBAR_3DLIGHT_COLOR: "-ms-scrollbar-3dlight-color",
        MS_SCROLLBAR_ARROW_COLOR: "-ms-scrollbar-arrow-color",
        MS_SCROLLBAR_BASE_COLOR: "-ms-scrollbar-base-color",
        MS_SCROLLBAR_DARKSHADOW_COLOR: "-ms-scrollbar-darkshadow-color",
        MS_SCROLLBAR_FACE_COLOR: "-ms-scrollbar-face-color",
        MS_SCROLLBAR_HIGHLIGHT_COLOR: "-ms-scrollbar-highlight-color",
        MS_SCROLLBAR_SHADOW_COLOR: "-ms-scrollbar-shadow-color",
        MS_SCROLLBAR_TRACK_COLOR: "-ms-scrollbar-track-color",
        MS_TEXT_AUTOSPACE: "-ms-text-autospace",
        MS_TOUCH_SELECT: "-ms-touch-select",
        MS_USER_SELECT: "-ms-user-select",
        MS_WRAP_FLOW: "-ms-wrap-flow",
        MS_WRAP_MARGIN: "-ms-wrap-margin",
        MS_WRAP_THROUGH: "-ms-wrap-through",
        WEBKIT_APPEARANCE: "-webkit-appearance",
        WEBKIT_BORDER_BEFORE: "-webkit-border-before",
        WEBKIT_BORDER_BEFORE_COLOR: "-webkit-border-before-color",
        WEBKIT_BORDER_BEFORE_STYLE: "-webkit-border-before-style",
        WEBKIT_BORDER_BEFORE_WIDTH: "-webkit-border-before-width",
        WEBKIT_BOX_REFLECT: "-webkit-box-reflect",
        WEBKIT_MASK: "-webkit-mask",
        WEBKIT_MASK_ATTACHMENT: "-webkit-mask-attachment",
        WEBKIT_MASK_CLIP: "-webkit-mask-clip",
        WEBKIT_MASK_COMPOSITE: "-webkit-mask-composite",
        WEBKIT_MASK_IMAGE: "-webkit-mask-image",
        WEBKIT_MASK_ORIGIN: "-webkit-mask-origin",
        WEBKIT_MASK_POSITION: "-webkit-mask-position",
        WEBKIT_MASK_POSITION_X: "-webkit-mask-position-x",
        WEBKIT_MASK_POSITION_Y: "-webkit-mask-position-y",
        WEBKIT_MASK_REPEAT: "-webkit-mask-repeat",
        WEBKIT_MASK_REPEAT_X: "-webkit-mask-repeat-x",
        WEBKIT_MASK_REPEAT_Y: "-webkit-mask-repeat-y",
        WEBKIT_MASK_SIZE: "-webkit-mask-size",
        WEBKIT_OVERFLOW_SCROLLING: "-webkit-overflow-scrolling",
        WEBKIT_TAP_HIGHLIGHT_COLOR: "-webkit-tap-highlight-color",
        WEBKIT_TEXT_FILL_COLOR: "-webkit-text-fill-color",
        WEBKIT_TEXT_STROKE: "-webkit-text-stroke",
        WEBKIT_TEXT_STROKE_COLOR: "-webkit-text-stroke-color",
        WEBKIT_TEXT_STROKE_WIDTH: "-webkit-text-stroke-width",
        WEBKIT_TOUCH_CALLOUT: "-webkit-touch-callout",
        WEBKIT_USER_MODIFY: "-webkit-user-modify",
        ALIGN_CONTENT: "align-content",
        ALIGN_ITEMS: "align-items",
        ALIGN_SELF: "align-self",
        ALL: "all",
        ANIMATION: "animation",
        ANIMATION_DELAY: "animation-delay",
        ANIMATION_DIRECTION: "animation-direction",
        ANIMATION_DURATION: "animation-duration",
        ANIMATION_FILL_MODE: "animation-fill-mode",
        ANIMATION_ITERATION_COUNT: "animation-iteration-count",
        ANIMATION_NAME: "animation-name",
        ANIMATION_PLAY_STATE: "animation-play-state",
        ANIMATION_TIMING_FUNCTION: "animation-timing-function",
        APPEARANCE: "appearance",
        AZIMUTH: "azimuth",
        BACKDROP_FILTER: "backdrop-filter",
        BACKFACE_VISIBILITY: "backface-visibility",
        BACKGROUND: "background",
        BACKGROUND_ATTACHMENT: "background-attachment",
        BACKGROUND_BLEND_MODE: "background-blend-mode",
        BACKGROUND_CLIP: "background-clip",
        BACKGROUND_COLOR: "background-color",
        BACKGROUND_IMAGE: "background-image",
        BACKGROUND_ORIGIN: "background-origin",
        BACKGROUND_POSITION: "background-position",
        BACKGROUND_POSITION_X: "background-position-x",
        BACKGROUND_POSITION_Y: "background-position-y",
        BACKGROUND_REPEAT: "background-repeat",
        BACKGROUND_SIZE: "background-size",
        BLOCK_OVERFLOW: "block-overflow",
        BLOCK_SIZE: "block-size",
        BORDER: "border",
        BORDER_BLOCK_END: "border-block-end",
        BORDER_BLOCK_END_COLOR: "border-block-end-color",
        BORDER_BLOCK_END_STYLE: "border-block-end-style",
        BORDER_BLOCK_END_WIDTH: "border-block-end-width",
        BORDER_BLOCK_START: "border-block-start",
        BORDER_BLOCK_START_COLOR: "border-block-start-color",
        BORDER_BLOCK_START_STYLE: "border-block-start-style",
        BORDER_BLOCK_START_WIDTH: "border-block-start-width",
        BORDER_BOTTOM: "border-bottom",
        BORDER_BOTTOM_COLOR: "border-bottom-color",
        BORDER_BOTTOM_LEFT_RADIUS: "border-bottom-left-radius",
        BORDER_BOTTOM_RIGHT_RADIUS: "border-bottom-right-radius",
        BORDER_BOTTOM_STYLE: "border-bottom-style",
        BORDER_BOTTOM_WIDTH: "border-bottom-width",
        BORDER_COLLAPSE: "border-collapse",
        BORDER_COLOR: "border-color",
        BORDER_IMAGE: "border-image",
        BORDER_IMAGE_OUTSET: "border-image-outset",
        BORDER_IMAGE_REPEAT: "border-image-repeat",
        BORDER_IMAGE_SLICE: "border-image-slice",
        BORDER_IMAGE_SOURCE: "border-image-source",
        BORDER_IMAGE_WIDTH: "border-image-width",
        BORDER_INLINE_END: "border-inline-end",
        BORDER_INLINE_END_COLOR: "border-inline-end-color",
        BORDER_INLINE_END_STYLE: "border-inline-end-style",
        BORDER_INLINE_END_WIDTH: "border-inline-end-width",
        BORDER_INLINE_START: "border-inline-start",
        BORDER_INLINE_START_COLOR: "border-inline-start-color",
        BORDER_INLINE_START_STYLE: "border-inline-start-style",
        BORDER_INLINE_START_WIDTH: "border-inline-start-width",
        BORDER_LEFT: "border-left",
        BORDER_LEFT_COLOR: "border-left-color",
        BORDER_LEFT_STYLE: "border-left-style",
        BORDER_LEFT_WIDTH: "border-left-width",
        BORDER_RADIUS: "border-radius",
        BORDER_RIGHT: "border-right",
        BORDER_RIGHT_COLOR: "border-right-color",
        BORDER_RIGHT_STYLE: "border-right-style",
        BORDER_RIGHT_WIDTH: "border-right-width",
        BORDER_SPACING: "border-spacing",
        BORDER_STYLE: "border-style",
        BORDER_TOP: "border-top",
        BORDER_TOP_COLOR: "border-top-color",
        BORDER_TOP_LEFT_RADIUS: "border-top-left-radius",
        BORDER_TOP_RIGHT_RADIUS: "border-top-right-radius",
        BORDER_TOP_STYLE: "border-top-style",
        BORDER_TOP_WIDTH: "border-top-width",
        BORDER_WIDTH: "border-width",
        BOTTOM: "bottom",
        BOX_ALIGN: "box-align",
        BOX_DECORATION_BREAK: "box-decoration-break",
        BOX_DIRECTION: "box-direction",
        BOX_FLEX: "box-flex",
        BOX_FLEX_GROUP: "box-flex-group",
        BOX_LINES: "box-lines",
        BOX_ORDINAL_GROUP: "box-ordinal-group",
        BOX_ORIENT: "box-orient",
        BOX_PACK: "box-pack",
        BOX_SHADOW: "box-shadow",
        BOX_SIZING: "box-sizing",
        BREAK_AFTER: "break-after",
        BREAK_BEFORE: "break-before",
        BREAK_INSIDE: "break-inside",
        CAPTION_SIDE: "caption-side",
        CARET_COLOR: "caret-color",
        CLEAR: "clear",
        CLIP: "clip",
        CLIP_PATH: "clip-path",
        COLOR: "color",
        COLOR_ADJUST: "color-adjust",
        COLUMN_COUNT: "column-count",
        COLUMN_FILL: "column-fill",
        COLUMN_GAP: "column-gap",
        COLUMN_RULE: "column-rule",
        COLUMN_RULE_COLOR: "column-rule-color",
        COLUMN_RULE_STYLE: "column-rule-style",
        COLUMN_RULE_WIDTH: "column-rule-width",
        COLUMN_SPAN: "column-span",
        COLUMN_WIDTH: "column-width",
        COLUMNS: "columns",
        CONTAIN: "contain",
        CONTENT: "content",
        COUNTER_INCREMENT: "counter-increment",
        COUNTER_RESET: "counter-reset",
        CURSOR: "cursor",
        DIRECTION: "direction",
        DISPLAY: "display",
        EMPTY_CELLS: "empty-cells",
        FILTER: "filter",
        FLEX: "flex",
        FLEX_BASIS: "flex-basis",
        FLEX_DIRECTION: "flex-direction",
        FLEX_FLOW: "flex-flow",
        FLEX_GROW: "flex-grow",
        FLEX_SHRINK: "flex-shrink",
        FLEX_WRAP: "flex-wrap",
        FLOAT: "float",
        FONT: "font",
        FONT_FAMILY: "font-family",
        FONT_FEATURE_SETTINGS: "font-feature-settings",
        FONT_KERNING: "font-kerning",
        FONT_LANGUAGE_OVERRIDE: "font-language-override",
        FONT_OPTICAL_SIZING: "font-optical-sizing",
        FONT_SIZE: "font-size",
        FONT_SIZE_ADJUST: "font-size-adjust",
        FONT_STRETCH: "font-stretch",
        FONT_STYLE: "font-style",
        FONT_SYNTHESIS: "font-synthesis",
        FONT_VARIANT: "font-variant",
        FONT_VARIANT_ALTERNATES: "font-variant-alternates",
        FONT_VARIANT_CAPS: "font-variant-caps",
        FONT_VARIANT_EAST_ASIAN: "font-variant-east-asian",
        FONT_VARIANT_LIGATURES: "font-variant-ligatures",
        FONT_VARIANT_NUMERIC: "font-variant-numeric",
        FONT_VARIANT_POSITION: "font-variant-position",
        FONT_VARIATION_SETTINGS: "font-variation-settings",
        FONT_WEIGHT: "font-weight",
        GAP: "gap",
        GRID: "grid",
        GRID_AREA: "grid-area",
        GRID_AUTO_COLUMNS: "grid-auto-columns",
        GRID_AUTO_FLOW: "grid-auto-flow",
        GRID_AUTO_ROWS: "grid-auto-rows",
        GRID_COLUMN: "grid-column",
        GRID_COLUMN_END: "grid-column-end",
        GRID_COLUMN_GAP: "grid-column-gap",
        GRID_COLUMN_START: "grid-column-start",
        GRID_GAP: "grid-gap",
        GRID_ROW: "grid-row",
        GRID_ROW_END: "grid-row-end",
        GRID_ROW_GAP: "grid-row-gap",
        GRID_ROW_START: "grid-row-start",
        GRID_TEMPLATE: "grid-template",
        GRID_TEMPLATE_AREAS: "grid-template-areas",
        GRID_TEMPLATE_COLUMNS: "grid-template-columns",
        GRID_TEMPLATE_ROWS: "grid-template-rows",
        HANGING_PUNCTUATION: "hanging-punctuation",
        HEIGHT: "height",
        HYPHENS: "hyphens",
        IMAGE_ORIENTATION: "image-orientation",
        IMAGE_RENDERING: "image-rendering",
        IMAGE_RESOLUTION: "image-resolution",
        IME_MODE: "ime-mode",
        INITIAL_LETTER: "initial-letter",
        INITIAL_LETTER_ALIGN: "initial-letter-align",
        INLINE_SIZE: "inline-size",
        INSET_BLOCK_END: "inset-block-end",
        INSET_BLOCK_START: "inset-block-start",
        INSET_INLINE_END: "inset-inline-end",
        INSET_INLINE_START: "inset-inline-start",
        ISOLATION: "isolation",
        JUSTIFY_CONTENT: "justify-content",
        JUSTIFY_ITEMS: "justify-items",
        JUSTIFY_SELF: "justify-self",
        LEFT: "left",
        LETTER_SPACING: "letter-spacing",
        LINE_BREAK: "line-break",
        LINE_CLAMP: "line-clamp",
        LINE_HEIGHT: "line-height",
        LIST_STYLE: "list-style",
        LIST_STYLE_IMAGE: "list-style-image",
        LIST_STYLE_POSITION: "list-style-position",
        LIST_STYLE_TYPE: "list-style-type",
        MARGIN: "margin",
        MARGIN_BLOCK_END: "margin-block-end",
        MARGIN_BLOCK_START: "margin-block-start",
        MARGIN_BOTTOM: "margin-bottom",
        MARGIN_INLINE_END: "margin-inline-end",
        MARGIN_INLINE_START: "margin-inline-start",
        MARGIN_LEFT: "margin-left",
        MARGIN_RIGHT: "margin-right",
        MARGIN_TOP: "margin-top",
        MASK: "mask",
        MASK_BORDER: "mask-border",
        MASK_BORDER_MODE: "mask-border-mode",
        MASK_BORDER_OUTSET: "mask-border-outset",
        MASK_BORDER_REPEAT: "mask-border-repeat",
        MASK_BORDER_SLICE: "mask-border-slice",
        MASK_BORDER_SOURCE: "mask-border-source",
        MASK_BORDER_WIDTH: "mask-border-width",
        MASK_CLIP: "mask-clip",
        MASK_COMPOSITE: "mask-composite",
        MASK_IMAGE: "mask-image",
        MASK_MODE: "mask-mode",
        MASK_ORIGIN: "mask-origin",
        MASK_POSITION: "mask-position",
        MASK_REPEAT: "mask-repeat",
        MASK_SIZE: "mask-size",
        MASK_TYPE: "mask-type",
        MAX_BLOCK_SIZE: "max-block-size",
        MAX_HEIGHT: "max-height",
        MAX_INLINE_SIZE: "max-inline-size",
        MAX_LINES: "max-lines",
        MAX_WIDTH: "max-width",
        MIN_BLOCK_SIZE: "min-block-size",
        MIN_HEIGHT: "min-height",
        MIN_INLINE_SIZE: "min-inline-size",
        MIN_WIDTH: "min-width",
        MIX_BLEND_MODE: "mix-blend-mode",
        MOTION: "motion",
        MOTION_OFFSET: "motion-offset",
        MOTION_PATH: "motion-path",
        MOTION_ROTATION: "motion-rotation",
        OBJECT_FIT: "object-fit",
        OBJECT_POSITION: "object-position",
        OFFSET_POSITION: "offset-position",
        OPACITY: "opacity",
        ORDER: "order",
        ORPHANS: "orphans",
        OUTLINE: "outline",
        OUTLINE_COLOR: "outline-color",
        OUTLINE_OFFSET: "outline-offset",
        OUTLINE_STYLE: "outline-style",
        OUTLINE_WIDTH: "outline-width",
        OVERFLOW: "overflow",
        OVERFLOW_ANCHOR: "overflow-anchor",
        OVERFLOW_BLOCK: "overflow-block",
        OVERFLOW_CLIP_BOX: "overflow-clip-box",
        OVERFLOW_INLINE: "overflow-inline",
        OVERFLOW_WRAP: "overflow-wrap",
        OVERFLOW_X: "overflow-x",
        OVERFLOW_Y: "overflow-y",
        OVERSCROLL_BEHAVIOR: "overscroll-behavior",
        OVERSCROLL_BEHAVIOR_X: "overscroll-behavior-x",
        OVERSCROLL_BEHAVIOR_Y: "overscroll-behavior-y",
        PADDING: "padding",
        PADDING_BLOCK_END: "padding-block-end",
        PADDING_BLOCK_START: "padding-block-start",
        PADDING_BOTTOM: "padding-bottom",
        PADDING_INLINE_END: "padding-inline-end",
        PADDING_INLINE_START: "padding-inline-start",
        PADDING_LEFT: "padding-left",
        PADDING_RIGHT: "padding-right",
        PADDING_TOP: "padding-top",
        PAGE_BREAK_AFTER: "page-break-after",
        PAGE_BREAK_BEFORE: "page-break-before",
        PAGE_BREAK_INSIDE: "page-break-inside",
        PAINT_ORDER: "paint-order",
        PERSPECTIVE: "perspective",
        PERSPECTIVE_ORIGIN: "perspective-origin",
        PLACE_CONTENT: "place-content",
        PLACE_ITEMS: "place-items",
        POINTER_EVENTS: "pointer-events",
        POSITION: "position",
        QUOTES: "quotes",
        RESIZE: "resize",
        RIGHT: "right",
        ROTATE: "rotate",
        ROW_GAP: "row-gap",
        RUBY_ALIGN: "ruby-align",
        RUBY_MERGE: "ruby-merge",
        RUBY_POSITION: "ruby-position",
        SCALE: "scale",
        SCROLL_BEHAVIOR: "scroll-behavior",
        SCROLL_SNAP_COORDINATE: "scroll-snap-coordinate",
        SCROLL_SNAP_DESTINATION: "scroll-snap-destination",
        SCROLL_SNAP_POINTS_X: "scroll-snap-points-x",
        SCROLL_SNAP_POINTS_Y: "scroll-snap-points-y",
        SCROLL_SNAP_TYPE: "scroll-snap-type",
        SCROLL_SNAP_TYPE_X: "scroll-snap-type-x",
        SCROLL_SNAP_TYPE_Y: "scroll-snap-type-y",
        SHAPE_IMAGE_THRESHOLD: "shape-image-threshold",
        SHAPE_MARGIN: "shape-margin",
        SHAPE_OUTSIDE: "shape-outside",
        TAB_SIZE: "tab-size",
        TABLE_LAYOUT: "table-layout",
        TEXT_ALIGN: "text-align",
        TEXT_ALIGN_LAST: "text-align-last",
        TEXT_COMBINE_UPRIGHT: "text-combine-upright",
        TEXT_DECORATION: "text-decoration",
        TEXT_DECORATION_COLOR: "text-decoration-color",
        TEXT_DECORATION_LINE: "text-decoration-line",
        TEXT_DECORATION_SKIP: "text-decoration-skip",
        TEXT_DECORATION_SKIP_INK: "text-decoration-skip-ink",
        TEXT_DECORATION_STYLE: "text-decoration-style",
        TEXT_EMPHASIS: "text-emphasis",
        TEXT_EMPHASIS_COLOR: "text-emphasis-color",
        TEXT_EMPHASIS_POSITION: "text-emphasis-position",
        TEXT_EMPHASIS_STYLE: "text-emphasis-style",
        TEXT_INDENT: "text-indent",
        TEXT_JUSTIFY: "text-justify",
        TEXT_ORIENTATION: "text-orientation",
        TEXT_OVERFLOW: "text-overflow",
        TEXT_RENDERING: "text-rendering",
        TEXT_SHADOW: "text-shadow",
        TEXT_SIZE_ADJUST: "text-size-adjust",
        TEXT_TRANSFORM: "text-transform",
        TEXT_UNDERLINE_POSITION: "text-underline-position",
        TOP: "top",
        TOUCH_ACTION: "touch-action",
        TRANSFORM: "transform",
        TRANSFORM_BOX: "transform-box",
        TRANSFORM_ORIGIN: "transform-origin",
        TRANSFORM_STYLE: "transform-style",
        TRANSITION: "transition",
        TRANSITION_DELAY: "transition-delay",
        TRANSITION_DURATION: "transition-duration",
        TRANSITION_PROPERTY: "transition-property",
        TRANSITION_TIMING_FUNCTION: "transition-timing-function",
        TRANSLATE: "translate",
        UNICODE_BIDI: "unicode-bidi",
        USER_SELECT: "user-select",
        VERTICAL_ALIGN: "vertical-align",
        VISIBILITY: "visibility",
        WHITE_SPACE: "white-space",
        WIDOWS: "widows",
        WIDTH: "width",
        WILL_CHANGE: "will-change",
        WORD_BREAK: "word-break",
        WORD_SPACING: "word-spacing",
        WORD_WRAP: "word-wrap",
        WRITING_MODE: "writing-mode",
        Z_INDEX: "z-index",
        ZOOM: "zoom"
    };
    var Color = {
        ALICEBLUE: "aliceblue",
        ANTIQUEWHITE: "antiquewhite",
        AQUA: "aqua",
        AQUAMARINE: "aquamarine",
        AZURE: "azure",
        BEIGE: "beige",
        BISQUE: "bisque",
        BLACK: "black",
        BLANCHEDALMOND: "blanchedalmond",
        BLUE: "blue",
        BLUEVIOLET: "blueviolet",
        BROWN: "brown",
        BURLYWOOD: "burlywood",
        CADETBLUE: "cadetblue",
        CHARTREUSE: "chartreuse",
        CHOCOLATE: "chocolate",
        CORAL: "coral",
        CORNFLOWERBLUE: "cornflowerblue",
        CORNSILK: "cornsilk",
        CRIMSON: "crimson",
        CYAN: "cyan",
        DARKBLUE: "darkblue",
        DARKCYAN: "darkcyan",
        DARKGOLDENROD: "darkgoldenrod",
        DARKGRAY: "darkgray",
        DARKGREEN: "darkgreen",
        DARKGREY: "darkgrey",
        DARKKHAKI: "darkkhaki",
        DARKMAGENTA: "darkmagenta",
        DARKOLIVEGREEN: "darkolivegreen",
        DARKORANGE: "darkorange",
        DARKORCHID: "darkorchid",
        DARKRED: "darkred",
        DARKSALMON: "darksalmon",
        DARKSEAGREEN: "darkseagreen",
        DARKSLATEBLUE: "darkslateblue",
        DARKSLATEGRAY: "darkslategray",
        DARKSLATEGREY: "darkslategrey",
        DARKTURQUOISE: "darkturquoise",
        DARKVIOLET: "darkviolet",
        DEEPPINK: "deeppink",
        DEEPSKYBLUE: "deepskyblue",
        DIMGRAY: "dimgray",
        DIMGREY: "dimgrey",
        DODGERBLUE: "dodgerblue",
        FIREBRICK: "firebrick",
        FLORALWHITE: "floralwhite",
        FORESTGREEN: "forestgreen",
        FUCHSIA: "fuchsia",
        GAINSBORO: "gainsboro",
        GHOSTWHITE: "ghostwhite",
        GOLD: "gold",
        GOLDENROD: "goldenrod",
        GRAY: "gray",
        GREEN: "green",
        GREENYELLOW: "greenyellow",
        GREY: "grey",
        HONEYDEW: "honeydew",
        HOTPINK: "hotpink",
        INDIANRED: "indianred",
        INDIGO: "indigo",
        IVORY: "ivory",
        KHAKI: "khaki",
        LAVENDER: "lavender",
        LAVENDERBLUSH: "lavenderblush",
        LAWNGREEN: "lawngreen",
        LEMONCHIFFON: "lemonchiffon",
        LIGHTBLUE: "lightblue",
        LIGHTCORAL: "lightcoral",
        LIGHTCYAN: "lightcyan",
        LIGHTGOLDENRODYELLOW: "lightgoldenrodyellow",
        LIGHTGRAY: "lightgray",
        LIGHTGREEN: "lightgreen",
        LIGHTGREY: "lightgrey",
        LIGHTPINK: "lightpink",
        LIGHTSALMON: "lightsalmon",
        LIGHTSEAGREEN: "lightseagreen",
        LIGHTSKYBLUE: "lightskyblue",
        LIGHTSLATEGRAY: "lightslategray",
        LIGHTSLATEGREY: "lightslategrey",
        LIGHTSTEELBLUE: "lightsteelblue",
        LIGHTYELLOW: "lightyellow",
        LIME: "lime",
        LIMEGREEN: "limegreen",
        LINEN: "linen",
        MAGENTA: "magenta",
        MAROON: "maroon",
        MEDIUMAQUAMARINE: "mediumaquamarine",
        MEDIUMBLUE: "mediumblue",
        MEDIUMORCHID: "mediumorchid",
        MEDIUMPURPLE: "mediumpurple",
        MEDIUMSEAGREEN: "mediumseagreen",
        MEDIUMSLATEBLUE: "mediumslateblue",
        MEDIUMSPRINGGREEN: "mediumspringgreen",
        MEDIUMTURQUOISE: "mediumturquoise",
        MEDIUMVIOLETRED: "mediumvioletred",
        MIDNIGHTBLUE: "midnightblue",
        MINTCREAM: "mintcream",
        MISTYROSE: "mistyrose",
        MOCCASIN: "moccasin",
        NAVAJOWHITE: "navajowhite",
        NAVY: "navy",
        OLDLACE: "oldlace",
        OLIVE: "olive",
        OLIVEDRAB: "olivedrab",
        ORANGE: "orange",
        ORANGERED: "orangered",
        ORCHID: "orchid",
        PALEGOLDENROD: "palegoldenrod",
        PALEGREEN: "palegreen",
        PALETURQUOISE: "paleturquoise",
        PALEVIOLETRED: "palevioletred",
        PAPAYAWHIP: "papayawhip",
        PEACHPUFF: "peachpuff",
        PERU: "peru",
        PINK: "pink",
        PLUM: "plum",
        POWDERBLUE: "powderblue",
        PURPLE: "purple",
        REBECCAPURPLE: "rebeccapurple",
        RED: "red",
        ROSYBROWN: "rosybrown",
        ROYALBLUE: "royalblue",
        SADDLEBROWN: "saddlebrown",
        SALMON: "salmon",
        SANDYBROWN: "sandybrown",
        SEAGREEN: "seagreen",
        SEASHELL: "seashell",
        SIENNA: "sienna",
        SILVER: "silver",
        SKYBLUE: "skyblue",
        SLATEBLUE: "slateblue",
        SLATEGRAY: "slategray",
        SLATEGREY: "slategrey",
        SNOW: "snow",
        SPRINGGREEN: "springgreen",
        STEELBLUE: "steelblue",
        TAN: "tan",
        TEAL: "teal",
        THISTLE: "thistle",
        TOMATO: "tomato",
        TRANSPARENT: "transparent",
        TURQUOISE: "turquoise",
        VIOLET: "violet",
        WHEAT: "wheat",
        WHITE: "white",
        WHITESMOKE: "whitesmoke",
        YELLOW: "yellow",
        YELLOWGREEN: "yellowgreen"
    };
    var Unit = {
        HZ: "Hz",
        Q: "Q",
        CAP: "cap",
        CH: "ch",
        CM: "cm",
        DEG: "deg",
        DPCM: "dpcm",
        DPI: "dpi",
        DPPX: "dppx",
        EM: "em",
        EX: "ex",
        FR: "fr",
        GRAD: "grad",
        IC: "ic",
        IN: "in",
        KHZ: "kHz",
        LH: "lh",
        MM: "mm",
        MS: "ms",
        PC: "pc",
        PERCENTAGE: "%",
        PT: "pt",
        PX: "px",
        RAD: "rad",
        REM: "rem",
        RLH: "rlh",
        S: "s",
        TURN: "turn",
        VB: "vb",
        VH: "vh",
        VI: "vi",
        VMAX: "vmax",
        VMIN: "vmin",
        VW: "vw",
        X: "x"
    };
    var Angle = {
        deg: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return buildDatatype("deg", params);
        },
        grad: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return buildDatatype("grad", params);
        },
        rad: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return buildDatatype("rad", params);
        },
        turn: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return buildDatatype("turn", params);
        }
    };
    var Frequency = {
        Hz: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return buildDatatype("Hz", params);
        },
        kHz: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return buildDatatype("kHz", params);
        }
    };
    var Length = {
        Q: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return buildDatatype("Q", params);
        },
        X: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return buildDatatype("%", params);
        },
        cap: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return buildDatatype("cap", params);
        },
        ch: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return buildDatatype("ch", params);
        },
        cm: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return buildDatatype("cm", params);
        },
        em: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return buildDatatype("em", params);
        },
        ex: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return buildDatatype("ex", params);
        },
        fr: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return buildDatatype("fr", params);
        },
        ic: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return buildDatatype("ic", params);
        },
        in: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return buildDatatype("in", params);
        },
        lh: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return buildDatatype("lh", params);
        },
        mm: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return buildDatatype("mm", params);
        },
        pc: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return buildDatatype("pc", params);
        },
        pt: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return buildDatatype("pt", params);
        },
        px: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return buildDatatype("px", params);
        },
        rem: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return buildDatatype("rem", params);
        },
        rlh: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return buildDatatype("rlh", params);
        },
        vb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return buildDatatype("vb", params);
        },
        vh: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return buildDatatype("vh", params);
        },
        vi: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return buildDatatype("vi", params);
        },
        vmax: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return buildDatatype("vmax", params);
        },
        vmin: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return buildDatatype("vmin", params);
        },
        vw: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return buildDatatype("vw", params);
        }
    };
    var Resolution = {
        dpcm: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return buildDatatype("dpcm", params);
        },
        dpi: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return buildDatatype("dpi", params);
        },
        dppx: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return buildDatatype("dppx", params);
        },
        x: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return buildDatatype("x", params);
        }
    };
    var Time = {
        ms: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return buildDatatype("ms", params);
        },
        s: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return buildDatatype("s", params);
        }
    };
    var _snapInterval = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("snapInterval", params);
    };
    var _snapList = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("snapList", params);
    };
    var _stylistic = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("stylistic", params);
    };
    var _styleset = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("styleset", params);
    };
    var _characterVariant = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("character-variant", params);
    };
    var _swash = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("swash", params);
    };
    var _ornaments = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("ornaments", params);
    };
    var _annotation = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("annotation", params);
    };
    var _repeat = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("repeat", params);
    };
    var _attr = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("attr", params);
    };
    var _blur = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("blur", params);
    };
    var _brightness = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("brightness", params);
    };
    var _circle = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("circle", params);
    };
    var _contrast = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("contrast", params);
    };
    var _symbols = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("symbols", params);
    };
    var _crossFade = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("cross-fade", params);
    };
    var _cubicBezier = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("cubic-bezier", params);
    };
    var _dropShadow = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("drop-shadow", params);
    };
    var _element = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("element", params);
    };
    var _ellipse = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("ellipse", params);
    };
    var _fitContent = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("fit-content", params);
    };
    var _minmax = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("minmax", params);
    };
    var _frames = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("frames", params);
    };
    var _grayscale = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("grayscale", params);
    };
    var _hsl = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("hsl", params);
    };
    var _hsla = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("hsla", params);
    };
    var _hueRotate = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("hue-rotate", params);
    };
    var _image = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("image", params);
    };
    var _imageSet = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("image-set", params);
    };
    var _inset = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("inset", params);
    };
    var _invert = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("invert", params);
    };
    var _leader = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("leader", params);
    };
    var _linearGradient = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("linear-gradient", params);
    };
    var _matrix = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("matrix", params);
    };
    var _matrix3d = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("matrix3d", params);
    };
    var _opacity = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("opacity", params);
    };
    var _perspective = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("perspective", params);
    };
    var _polygon = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("polygon", params);
    };
    var _radialGradient = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("radial-gradient", params);
    };
    var _repeatingLinearGradient = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("repeating-linear-gradient", params);
    };
    var _repeatingRadialGradient = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("repeating-radial-gradient", params);
    };
    var _rgb = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("rgb", params);
    };
    var _rgba = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("rgba", params);
    };
    var _rotate = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("rotate", params);
    };
    var _rotate3d = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("rotate3d", params);
    };
    var _rotateX = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("rotateX", params);
    };
    var _rotateY = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("rotateY", params);
    };
    var _rotateZ = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("rotateZ", params);
    };
    var _saturate = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("saturate", params);
    };
    var _scale = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("scale", params);
    };
    var _scale3d = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("scale3d", params);
    };
    var _scaleX = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("scaleX", params);
    };
    var _scaleY = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("scaleY", params);
    };
    var _scaleZ = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("scaleZ", params);
    };
    var _skew = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("skew", params);
    };
    var _skewX = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("skewX", params);
    };
    var _skewY = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("skewY", params);
    };
    var _sepia = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("sepia", params);
    };
    var _rect = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("rect", params);
    };
    var _steps = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("steps", params);
    };
    var _targetCounter = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("target-counter", params);
    };
    var _targetCounters = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("target-counters", params);
    };
    var _targetText = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("target-text", params);
    };
    var _translate = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("translate", params);
    };
    var _translate3d = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("translate3d", params);
    };
    var _translateX = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("translateX", params);
    };
    var _translateY = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("translateY", params);
    };
    var _translateZ = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("translateZ", params);
    };
    var _var = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return buildMethod("var", params);
    };
    var _addParams = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return params
            .map(function (value) {
            if (Array.isArray(value)) {
                return "(" + _mulParams.apply(void 0, value) + ")";
            }
            return value;
        })
            .join(" + ");
    };
    var _mulParams = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return params
            .map(function (value) {
            if (Array.isArray(value)) {
                return "(" + _addParams.apply(void 0, value) + ")";
            }
            return value;
        })
            .join(" * ");
    };
    var _calc = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return "calc(" + _addParams.apply(void 0, params) + ")";
    };
    var _hex = function (code) {
        return code[0] === "#" ? code : "#" + code;
    };
    var _hexa = function (code, alpha) {
        return _hex(code) + ((alpha - 1) * 255).toString(16);
    };
    var Method = {
        annotation: _annotation,
        attr: _attr,
        blur: _blur,
        brightness: _brightness,
        calc: _calc,
        characterVariant: _characterVariant,
        circle: _circle,
        contrast: _contrast,
        crossFade: _crossFade,
        cubicBezier: _cubicBezier,
        dropShadow: _dropShadow,
        element: _element,
        ellipse: _ellipse,
        fitContent: _fitContent,
        frames: _frames,
        grayscale: _grayscale,
        hex: _hex,
        hexa: _hexa,
        hsl: _hsl,
        hsla: _hsla,
        hueRotate: _hueRotate,
        image: _image,
        imageSet: _imageSet,
        inset: _inset,
        invert: _invert,
        leader: _leader,
        linearGradient: _linearGradient,
        matrix: _matrix,
        matrix3d: _matrix3d,
        minmax: _minmax,
        opacity: _opacity,
        ornaments: _ornaments,
        perspective: _perspective,
        polygon: _polygon,
        radialGradient: _radialGradient,
        rect: _rect,
        repeat: _repeat,
        repeatingLinearGradient: _repeatingLinearGradient,
        repeatingRadialGradient: _repeatingRadialGradient,
        rgb: _rgb,
        rgba: _rgba,
        rotate: _rotate,
        rotate3d: _rotate3d,
        rotateX: _rotateX,
        rotateY: _rotateY,
        rotateZ: _rotateZ,
        saturate: _saturate,
        scale: _scale,
        scale3d: _scale3d,
        scaleX: _scaleX,
        scaleY: _scaleY,
        scaleZ: _scaleZ,
        sepia: _sepia,
        skew: _skew,
        skewX: _skewX,
        skewY: _skewY,
        snapInterval: _snapInterval,
        snapList: _snapList,
        steps: _steps,
        styleset: _styleset,
        stylistic: _stylistic,
        swash: _swash,
        symbols: _symbols,
        targetCounter: _targetCounter,
        targetCounters: _targetCounters,
        targetText: _targetText,
        translate: _translate,
        translate3d: _translate3d,
        translateX: _translateX,
        translateY: _translateY,
        translateZ: _translateZ,
        var: _var
    };
    var _sheet = function () {
        var properties = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            properties[_i] = arguments[_i];
        }
        var sheet = {};
        for (var _a = 0, properties_1 = properties; _a < properties_1.length; _a++) {
            var property = properties_1[_a];
            Object.assign(sheet, property);
        }
        return sheet;
    };
    var _MsAccelerator = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msAccelerator: buildProperty(params) });
        },
        FALSE: undefined.set("false"),
        TRUE: undefined.set("true")
    };
    var _MsBlockProgression = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msBlockProgression: buildProperty(params) });
        },
        TB: undefined.set("tb"),
        RL: undefined.set("rl"),
        BT: undefined.set("bt"),
        LR: undefined.set("lr")
    };
    var _MsContentZoomChaining = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msContentZoomChaining: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        CHAINED: undefined.set("chained")
    };
    var _MsContentZooming = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msContentZooming: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        ZOOM: undefined.set("zoom")
    };
    var _MsContentZoomLimit = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msContentZoomLimit: buildProperty(params) });
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _MsContentZoomLimitMax = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msContentZoomLimitMax: buildProperty(params) });
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _MsContentZoomLimitMin = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msContentZoomLimitMin: buildProperty(params) });
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _MsContentZoomSnap = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msContentZoomSnap: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        PROXIMITY: undefined.set("proximity"),
        MANDATORY: undefined.set("mandatory"),
        snapInterval: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.snapInterval.apply(Method, params));
        },
        snapList: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.snapList.apply(Method, params));
        }
    };
    var _MsContentZoomSnapPoints = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msContentZoomSnapPoints: buildProperty(params) });
        },
        snapInterval: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.snapInterval.apply(Method, params));
        },
        snapList: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.snapList.apply(Method, params));
        }
    };
    var _MsContentZoomSnapType = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msContentZoomSnapType: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        PROXIMITY: undefined.set("proximity"),
        MANDATORY: undefined.set("mandatory")
    };
    var _MsFilter = { set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msFilter: buildProperty(params) });
        } };
    var _MsFlowFrom = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msFlowFrom: buildProperty(params) });
        },
        NONE: undefined.set("none")
    };
    var _MsFlowInto = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msFlowInto: buildProperty(params) });
        },
        NONE: undefined.set("none")
    };
    var _MsHighContrastAdjust = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msHighContrastAdjust: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        NONE: undefined.set("none")
    };
    var _MsHyphenateLimitChars = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msHyphenateLimitChars: buildProperty(params) });
        },
        AUTO: undefined.set("auto")
    };
    var _MsHyphenateLimitLines = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msHyphenateLimitLines: buildProperty(params) });
        },
        NO_LIMIT: undefined.set("no-limit")
    };
    var _MsHyphenateLimitZone = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msHyphenateLimitZone: buildProperty(params) });
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        }
    };
    var _MsImeAlign = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msImeAlign: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        AFTER: undefined.set("after")
    };
    var _MsOverflowStyle = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msOverflowStyle: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        NONE: undefined.set("none"),
        SCROLLBAR: undefined.set("scrollbar"),
        MS_AUTOHIDING_SCROLLBAR: undefined.set("-ms-autohiding-scrollbar")
    };
    var _MsScrollbar3dlightColor = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msScrollbar3dlightColor: buildProperty(params) });
        },
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ msScrollbar3dlightColor: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText")
    };
    var _MsScrollbarArrowColor = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msScrollbarArrowColor: buildProperty(params) });
        },
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ msScrollbarArrowColor: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText")
    };
    var _MsScrollbarBaseColor = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msScrollbarBaseColor: buildProperty(params) });
        },
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ msScrollbarBaseColor: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText")
    };
    var _MsScrollbarDarkshadowColor = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msScrollbarDarkshadowColor: buildProperty(params) });
        },
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ msScrollbarDarkshadowColor: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText")
    };
    var _MsScrollbarFaceColor = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msScrollbarFaceColor: buildProperty(params) });
        },
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ msScrollbarFaceColor: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText")
    };
    var _MsScrollbarHighlightColor = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msScrollbarHighlightColor: buildProperty(params) });
        },
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ msScrollbarHighlightColor: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText")
    };
    var _MsScrollbarShadowColor = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msScrollbarShadowColor: buildProperty(params) });
        },
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ msScrollbarShadowColor: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText")
    };
    var _MsScrollbarTrackColor = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msScrollbarTrackColor: buildProperty(params) });
        },
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ msScrollbarTrackColor: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText")
    };
    var _MsScrollChaining = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msScrollChaining: buildProperty(params) });
        },
        CHAINED: undefined.set("chained"),
        NONE: undefined.set("none")
    };
    var _MsScrollLimit = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msScrollLimit: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        AUTO: undefined.set("auto")
    };
    var _MsScrollLimitXMax = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msScrollLimitXMax: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        }
    };
    var _MsScrollLimitXMin = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msScrollLimitXMin: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        }
    };
    var _MsScrollLimitYMax = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msScrollLimitYMax: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        }
    };
    var _MsScrollLimitYMin = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msScrollLimitYMin: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        }
    };
    var _MsScrollRails = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msScrollRails: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        RAILED: undefined.set("railed")
    };
    var _MsScrollSnapPointsX = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msScrollSnapPointsX: buildProperty(params) });
        },
        snapInterval: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.snapInterval.apply(Method, params));
        },
        snapList: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.snapList.apply(Method, params));
        }
    };
    var _MsScrollSnapPointsY = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msScrollSnapPointsY: buildProperty(params) });
        },
        snapInterval: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.snapInterval.apply(Method, params));
        },
        snapList: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.snapList.apply(Method, params));
        }
    };
    var _MsScrollSnapType = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msScrollSnapType: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        PROXIMITY: undefined.set("proximity"),
        MANDATORY: undefined.set("mandatory")
    };
    var _MsScrollSnapX = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msScrollSnapX: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        PROXIMITY: undefined.set("proximity"),
        MANDATORY: undefined.set("mandatory"),
        snapInterval: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.snapInterval.apply(Method, params));
        },
        snapList: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.snapList.apply(Method, params));
        }
    };
    var _MsScrollSnapY = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msScrollSnapY: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        PROXIMITY: undefined.set("proximity"),
        MANDATORY: undefined.set("mandatory"),
        snapInterval: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.snapInterval.apply(Method, params));
        },
        snapList: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.snapList.apply(Method, params));
        }
    };
    var _MsScrollTranslation = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msScrollTranslation: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        VERTICAL_TO_HORIZONTAL: undefined.set("vertical-to-horizontal")
    };
    var _MsTextAutospace = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msTextAutospace: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        IDEOGRAPH_ALPHA: undefined.set("ideograph-alpha"),
        IDEOGRAPH_NUMERIC: undefined.set("ideograph-numeric"),
        IDEOGRAPH_PARENTHESIS: undefined.set("ideograph-parenthesis"),
        IDEOGRAPH_SPACE: undefined.set("ideograph-space")
    };
    var _MsTouchSelect = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msTouchSelect: buildProperty(params) });
        },
        GRIPPERS: undefined.set("grippers"),
        NONE: undefined.set("none")
    };
    var _MsUserSelect = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msUserSelect: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        ELEMENT: undefined.set("element"),
        TEXT: undefined.set("text")
    };
    var _MsWrapFlow = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msWrapFlow: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        BOTH: undefined.set("both"),
        START: undefined.set("start"),
        END: undefined.set("end"),
        MAXIMUM: undefined.set("maximum"),
        CLEAR: undefined.set("clear")
    };
    var _MsWrapMargin = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msWrapMargin: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        }
    };
    var _MsWrapThrough = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ msWrapThrough: buildProperty(params) });
        },
        WRAP: undefined.set("wrap"),
        NONE: undefined.set("none")
    };
    var _MozAppearance = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ mozAppearance: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        BUTTON: undefined.set("button"),
        BUTTON_ARROW_DOWN: undefined.set("button-arrow-down"),
        BUTTON_ARROW_NEXT: undefined.set("button-arrow-next"),
        BUTTON_ARROW_PREVIOUS: undefined.set("button-arrow-previous"),
        BUTTON_ARROW_UP: undefined.set("button-arrow-up"),
        BUTTON_BEVEL: undefined.set("button-bevel"),
        BUTTON_FOCUS: undefined.set("button-focus"),
        CARET: undefined.set("caret"),
        CHECKBOX: undefined.set("checkbox"),
        CHECKBOX_CONTAINER: undefined.set("checkbox-container"),
        CHECKBOX_LABEL: undefined.set("checkbox-label"),
        CHECKMENUITEM: undefined.set("checkmenuitem"),
        DUALBUTTON: undefined.set("dualbutton"),
        GROUPBOX: undefined.set("groupbox"),
        LISTBOX: undefined.set("listbox"),
        LISTITEM: undefined.set("listitem"),
        MENUARROW: undefined.set("menuarrow"),
        MENUBAR: undefined.set("menubar"),
        MENUCHECKBOX: undefined.set("menucheckbox"),
        MENUIMAGE: undefined.set("menuimage"),
        MENUITEM: undefined.set("menuitem"),
        MENUITEMTEXT: undefined.set("menuitemtext"),
        MENULIST: undefined.set("menulist"),
        MENULIST_BUTTON: undefined.set("menulist-button"),
        MENULIST_TEXT: undefined.set("menulist-text"),
        MENULIST_TEXTFIELD: undefined.set("menulist-textfield"),
        MENUPOPUP: undefined.set("menupopup"),
        MENURADIO: undefined.set("menuradio"),
        MENUSEPARATOR: undefined.set("menuseparator"),
        METERBAR: undefined.set("meterbar"),
        METERCHUNK: undefined.set("meterchunk"),
        PROGRESSBAR: undefined.set("progressbar"),
        PROGRESSBAR_VERTICAL: undefined.set("progressbar-vertical"),
        PROGRESSCHUNK: undefined.set("progresschunk"),
        PROGRESSCHUNK_VERTICAL: undefined.set("progresschunk-vertical"),
        RADIO: undefined.set("radio"),
        RADIO_CONTAINER: undefined.set("radio-container"),
        RADIO_LABEL: undefined.set("radio-label"),
        RADIOMENUITEM: undefined.set("radiomenuitem"),
        RANGE: undefined.set("range"),
        RANGE_THUMB: undefined.set("range-thumb"),
        RESIZER: undefined.set("resizer"),
        RESIZERPANEL: undefined.set("resizerpanel"),
        SCALE_HORIZONTAL: undefined.set("scale-horizontal"),
        SCALETHUMBEND: undefined.set("scalethumbend"),
        SCALETHUMB_HORIZONTAL: undefined.set("scalethumb-horizontal"),
        SCALETHUMBSTART: undefined.set("scalethumbstart"),
        SCALETHUMBTICK: undefined.set("scalethumbtick"),
        SCALETHUMB_VERTICAL: undefined.set("scalethumb-vertical"),
        SCALE_VERTICAL: undefined.set("scale-vertical"),
        SCROLLBARBUTTON_DOWN: undefined.set("scrollbarbutton-down"),
        SCROLLBARBUTTON_LEFT: undefined.set("scrollbarbutton-left"),
        SCROLLBARBUTTON_RIGHT: undefined.set("scrollbarbutton-right"),
        SCROLLBARBUTTON_UP: undefined.set("scrollbarbutton-up"),
        SCROLLBARTHUMB_HORIZONTAL: undefined.set("scrollbarthumb-horizontal"),
        SCROLLBARTHUMB_VERTICAL: undefined.set("scrollbarthumb-vertical"),
        SCROLLBARTRACK_HORIZONTAL: undefined.set("scrollbartrack-horizontal"),
        SCROLLBARTRACK_VERTICAL: undefined.set("scrollbartrack-vertical"),
        SEARCHFIELD: undefined.set("searchfield"),
        SEPARATOR: undefined.set("separator"),
        SHEET: undefined.set("sheet"),
        SPINNER: undefined.set("spinner"),
        SPINNER_DOWNBUTTON: undefined.set("spinner-downbutton"),
        SPINNER_TEXTFIELD: undefined.set("spinner-textfield"),
        SPINNER_UPBUTTON: undefined.set("spinner-upbutton"),
        SPLITTER: undefined.set("splitter"),
        STATUSBAR: undefined.set("statusbar"),
        STATUSBARPANEL: undefined.set("statusbarpanel"),
        TAB: undefined.set("tab"),
        TABPANEL: undefined.set("tabpanel"),
        TABPANELS: undefined.set("tabpanels"),
        TAB_SCROLL_ARROW_BACK: undefined.set("tab-scroll-arrow-back"),
        TAB_SCROLL_ARROW_FORWARD: undefined.set("tab-scroll-arrow-forward"),
        TEXTFIELD: undefined.set("textfield"),
        TEXTFIELD_MULTILINE: undefined.set("textfield-multiline"),
        TOOLBAR: undefined.set("toolbar"),
        TOOLBARBUTTON: undefined.set("toolbarbutton"),
        TOOLBARBUTTON_DROPDOWN: undefined.set("toolbarbutton-dropdown"),
        TOOLBARGRIPPER: undefined.set("toolbargripper"),
        TOOLBOX: undefined.set("toolbox"),
        TOOLTIP: undefined.set("tooltip"),
        TREEHEADER: undefined.set("treeheader"),
        TREEHEADERCELL: undefined.set("treeheadercell"),
        TREEHEADERSORTARROW: undefined.set("treeheadersortarrow"),
        TREEITEM: undefined.set("treeitem"),
        TREELINE: undefined.set("treeline"),
        TREETWISTY: undefined.set("treetwisty"),
        TREETWISTYOPEN: undefined.set("treetwistyopen"),
        TREEVIEW: undefined.set("treeview"),
        MOZ_MAC_UNIFIED_TOOLBAR: undefined.set("-moz-mac-unified-toolbar"),
        MOZ_WIN_BORDERLESS_GLASS: undefined.set("-moz-win-borderless-glass"),
        MOZ_WIN_BROWSERTABBAR_TOOLBOX: undefined.set("-moz-win-browsertabbar-toolbox"),
        MOZ_WIN_COMMUNICATIONSTEXT: undefined.set("-moz-win-communicationstext"),
        MOZ_WIN_COMMUNICATIONS_TOOLBOX: undefined.set("-moz-win-communications-toolbox"),
        MOZ_WIN_EXCLUDE_GLASS: undefined.set("-moz-win-exclude-glass"),
        MOZ_WIN_GLASS: undefined.set("-moz-win-glass"),
        MOZ_WIN_MEDIATEXT: undefined.set("-moz-win-mediatext"),
        MOZ_WIN_MEDIA_TOOLBOX: undefined.set("-moz-win-media-toolbox"),
        MOZ_WINDOW_BUTTON_BOX: undefined.set("-moz-window-button-box"),
        MOZ_WINDOW_BUTTON_BOX_MAXIMIZED: undefined.set("-moz-window-button-box-maximized"),
        MOZ_WINDOW_BUTTON_CLOSE: undefined.set("-moz-window-button-close"),
        MOZ_WINDOW_BUTTON_MAXIMIZE: undefined.set("-moz-window-button-maximize"),
        MOZ_WINDOW_BUTTON_MINIMIZE: undefined.set("-moz-window-button-minimize"),
        MOZ_WINDOW_BUTTON_RESTORE: undefined.set("-moz-window-button-restore"),
        MOZ_WINDOW_FRAME_BOTTOM: undefined.set("-moz-window-frame-bottom"),
        MOZ_WINDOW_FRAME_LEFT: undefined.set("-moz-window-frame-left"),
        MOZ_WINDOW_FRAME_RIGHT: undefined.set("-moz-window-frame-right"),
        MOZ_WINDOW_TITLEBAR: undefined.set("-moz-window-titlebar"),
        MOZ_WINDOW_TITLEBAR_MAXIMIZED: undefined.set("-moz-window-titlebar-maximized")
    };
    var _MozBinding = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ mozBinding: buildProperty(params) });
        },
        NONE: undefined.set("none")
    };
    var _MozBorderBottomColors = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ mozBorderBottomColors: buildProperty(params) });
        },
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ mozBorderBottomColors: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText"),
        NONE: undefined.set("none")
    };
    var _MozBorderLeftColors = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ mozBorderLeftColors: buildProperty(params) });
        },
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ mozBorderLeftColors: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText"),
        NONE: undefined.set("none")
    };
    var _MozBorderRightColors = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ mozBorderRightColors: buildProperty(params) });
        },
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ mozBorderRightColors: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText"),
        NONE: undefined.set("none")
    };
    var _MozBorderTopColors = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ mozBorderTopColors: buildProperty(params) });
        },
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ mozBorderTopColors: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText"),
        NONE: undefined.set("none")
    };
    var _MozContextProperties = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ mozContextProperties: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        FILL: undefined.set("fill"),
        FILL_OPACITY: undefined.set("fill-opacity"),
        STROKE: undefined.set("stroke"),
        STROKE_OPACITY: undefined.set("stroke-opacity")
    };
    var _MozFloatEdge = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ mozFloatEdge: buildProperty(params) });
        },
        BORDER_BOX: undefined.set("border-box"),
        CONTENT_BOX: undefined.set("content-box"),
        MARGIN_BOX: undefined.set("margin-box"),
        PADDING_BOX: undefined.set("padding-box")
    };
    var _MozForceBrokenImageIcon = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ mozForceBrokenImageIcon: buildProperty(params) });
        }
    };
    var _MozImageRegion = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ mozImageRegion: buildProperty(params) });
        },
        rect: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rect.apply(Method, params));
        },
        AUTO: undefined.set("auto")
    };
    var _MozOrient = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ mozOrient: buildProperty(params) });
        },
        INLINE: undefined.set("inline"),
        BLOCK: undefined.set("block"),
        HORIZONTAL: undefined.set("horizontal"),
        VERTICAL: undefined.set("vertical")
    };
    var _MozOutlineRadius = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ mozOutlineRadius: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _MozOutlineRadiusBottomleft = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ mozOutlineRadiusBottomleft: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _MozOutlineRadiusBottomright = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ mozOutlineRadiusBottomright: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _MozOutlineRadiusTopleft = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ mozOutlineRadiusTopleft: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _MozOutlineRadiusTopright = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ mozOutlineRadiusTopright: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _MozStackSizing = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ mozStackSizing: buildProperty(params) });
        },
        IGNORE: undefined.set("ignore"),
        STRETCH_TO_FIT: undefined.set("stretch-to-fit")
    };
    var _MozTextBlink = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ mozTextBlink: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        BLINK: undefined.set("blink")
    };
    var _MozUserFocus = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ mozUserFocus: buildProperty(params) });
        },
        IGNORE: undefined.set("ignore"),
        NORMAL: undefined.set("normal"),
        SELECT_AFTER: undefined.set("select-after"),
        SELECT_BEFORE: undefined.set("select-before"),
        SELECT_MENU: undefined.set("select-menu"),
        SELECT_SAME: undefined.set("select-same"),
        SELECT_ALL: undefined.set("select-all"),
        NONE: undefined.set("none")
    };
    var _MozUserInput = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ mozUserInput: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        NONE: undefined.set("none"),
        ENABLED: undefined.set("enabled"),
        DISABLED: undefined.set("disabled")
    };
    var _MozUserModify = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ mozUserModify: buildProperty(params) });
        },
        READ_ONLY: undefined.set("read-only"),
        READ_WRITE: undefined.set("read-write"),
        WRITE_ONLY: undefined.set("write-only")
    };
    var _MozWindowDragging = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ mozWindowDragging: buildProperty(params) });
        },
        DRAG: undefined.set("drag"),
        NO_DRAG: undefined.set("no-drag")
    };
    var _MozWindowShadow = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ mozWindowShadow: buildProperty(params) });
        },
        DEFAULT: undefined.set("default"),
        MENU: undefined.set("menu"),
        TOOLTIP: undefined.set("tooltip"),
        SHEET: undefined.set("sheet"),
        NONE: undefined.set("none")
    };
    var _WebkitAppearance = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ webkitAppearance: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        BUTTON: undefined.set("button"),
        BUTTON_BEVEL: undefined.set("button-bevel"),
        CARET: undefined.set("caret"),
        CHECKBOX: undefined.set("checkbox"),
        DEFAULT_BUTTON: undefined.set("default-button"),
        INNER_SPIN_BUTTON: undefined.set("inner-spin-button"),
        LISTBOX: undefined.set("listbox"),
        LISTITEM: undefined.set("listitem"),
        MEDIA_CONTROLS_BACKGROUND: undefined.set("media-controls-background"),
        MEDIA_CONTROLS_FULLSCREEN_BACKGROUND: undefined.set("media-controls-fullscreen-background"),
        MEDIA_CURRENT_TIME_DISPLAY: undefined.set("media-current-time-display"),
        MEDIA_ENTER_FULLSCREEN_BUTTON: undefined.set("media-enter-fullscreen-button"),
        MEDIA_EXIT_FULLSCREEN_BUTTON: undefined.set("media-exit-fullscreen-button"),
        MEDIA_FULLSCREEN_BUTTON: undefined.set("media-fullscreen-button"),
        MEDIA_MUTE_BUTTON: undefined.set("media-mute-button"),
        MEDIA_OVERLAY_PLAY_BUTTON: undefined.set("media-overlay-play-button"),
        MEDIA_PLAY_BUTTON: undefined.set("media-play-button"),
        MEDIA_SEEK_BACK_BUTTON: undefined.set("media-seek-back-button"),
        MEDIA_SEEK_FORWARD_BUTTON: undefined.set("media-seek-forward-button"),
        MEDIA_SLIDER: undefined.set("media-slider"),
        MEDIA_SLIDERTHUMB: undefined.set("media-sliderthumb"),
        MEDIA_TIME_REMAINING_DISPLAY: undefined.set("media-time-remaining-display"),
        MEDIA_TOGGLE_CLOSED_CAPTIONS_BUTTON: undefined.set("media-toggle-closed-captions-button"),
        MEDIA_VOLUME_SLIDER: undefined.set("media-volume-slider"),
        MEDIA_VOLUME_SLIDER_CONTAINER: undefined.set("media-volume-slider-container"),
        MEDIA_VOLUME_SLIDERTHUMB: undefined.set("media-volume-sliderthumb"),
        MENULIST: undefined.set("menulist"),
        MENULIST_BUTTON: undefined.set("menulist-button"),
        MENULIST_TEXT: undefined.set("menulist-text"),
        MENULIST_TEXTFIELD: undefined.set("menulist-textfield"),
        METER: undefined.set("meter"),
        PROGRESS_BAR: undefined.set("progress-bar"),
        PROGRESS_BAR_VALUE: undefined.set("progress-bar-value"),
        PUSH_BUTTON: undefined.set("push-button"),
        RADIO: undefined.set("radio"),
        SEARCHFIELD: undefined.set("searchfield"),
        SEARCHFIELD_CANCEL_BUTTON: undefined.set("searchfield-cancel-button"),
        SEARCHFIELD_DECORATION: undefined.set("searchfield-decoration"),
        SEARCHFIELD_RESULTS_BUTTON: undefined.set("searchfield-results-button"),
        SEARCHFIELD_RESULTS_DECORATION: undefined.set("searchfield-results-decoration"),
        SLIDER_HORIZONTAL: undefined.set("slider-horizontal"),
        SLIDER_VERTICAL: undefined.set("slider-vertical"),
        SLIDERTHUMB_HORIZONTAL: undefined.set("sliderthumb-horizontal"),
        SLIDERTHUMB_VERTICAL: undefined.set("sliderthumb-vertical"),
        SQUARE_BUTTON: undefined.set("square-button"),
        TEXTAREA: undefined.set("textarea"),
        TEXTFIELD: undefined.set("textfield")
    };
    var _WebkitBorderBefore = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ webkitBorderBefore: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        THIN: undefined.set("thin"),
        MEDIUM: undefined.set("medium"),
        THICK: undefined.set("thick"),
        NONE: undefined.set("none"),
        HIDDEN: undefined.set("hidden"),
        DOTTED: undefined.set("dotted"),
        DASHED: undefined.set("dashed"),
        SOLID: undefined.set("solid"),
        DOUBLE: undefined.set("double"),
        GROOVE: undefined.set("groove"),
        RIDGE: undefined.set("ridge"),
        INSET: undefined.set("inset"),
        OUTSET: undefined.set("outset")
    };
    var _WebkitBorderBeforeColor = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ webkitBorderBeforeColor: buildProperty(params) });
        }
    };
    var _WebkitBorderBeforeStyle = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ webkitBorderBeforeStyle: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        HIDDEN: undefined.set("hidden"),
        DOTTED: undefined.set("dotted"),
        DASHED: undefined.set("dashed"),
        SOLID: undefined.set("solid"),
        DOUBLE: undefined.set("double"),
        GROOVE: undefined.set("groove"),
        RIDGE: undefined.set("ridge"),
        INSET: undefined.set("inset"),
        OUTSET: undefined.set("outset")
    };
    var _WebkitBorderBeforeWidth = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ webkitBorderBeforeWidth: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        THIN: undefined.set("thin"),
        MEDIUM: undefined.set("medium"),
        THICK: undefined.set("thick")
    };
    var _WebkitBoxReflect = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ webkitBoxReflect: buildProperty(params) });
        },
        ABOVE: undefined.set("above"),
        BELOW: undefined.set("below"),
        RIGHT: undefined.set("right"),
        LEFT: undefined.set("left"),
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        image: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.image.apply(Method, params));
        },
        imageSet: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.imageSet.apply(Method, params));
        },
        element: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.element.apply(Method, params));
        },
        crossFade: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.crossFade.apply(Method, params));
        },
        linearGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.linearGradient.apply(Method, params));
        },
        repeatingLinearGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.repeatingLinearGradient.apply(Method, params));
        },
        radialGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.radialGradient.apply(Method, params));
        },
        repeatingRadialGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.repeatingRadialGradient.apply(Method, params));
        }
    };
    var _WebkitMask = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ webkitMask: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        image: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.image.apply(Method, params));
        },
        imageSet: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.imageSet.apply(Method, params));
        },
        element: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.element.apply(Method, params));
        },
        crossFade: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.crossFade.apply(Method, params));
        },
        linearGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.linearGradient.apply(Method, params));
        },
        repeatingLinearGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.repeatingLinearGradient.apply(Method, params));
        },
        radialGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.radialGradient.apply(Method, params));
        },
        repeatingRadialGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.repeatingRadialGradient.apply(Method, params));
        },
        AUTO: undefined.set("auto"),
        COVER: undefined.set("cover"),
        CONTAIN: undefined.set("contain"),
        REPEAT_X: undefined.set("repeat-x"),
        REPEAT_Y: undefined.set("repeat-y"),
        REPEAT: undefined.set("repeat"),
        SPACE: undefined.set("space"),
        ROUND: undefined.set("round"),
        NO_REPEAT: undefined.set("no-repeat"),
        BORDER_BOX: undefined.set("border-box"),
        PADDING_BOX: undefined.set("padding-box"),
        CONTENT_BOX: undefined.set("content-box"),
        BORDER: undefined.set("border"),
        PADDING: undefined.set("padding"),
        CONTENT: undefined.set("content"),
        TEXT: undefined.set("text")
    };
    var _WebkitMaskAttachment = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ webkitMaskAttachment: buildProperty(params) });
        },
        SCROLL: undefined.set("scroll"),
        FIXED: undefined.set("fixed"),
        LOCAL: undefined.set("local")
    };
    var _WebkitMaskClip = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ webkitMaskClip: buildProperty(params) });
        },
        BORDER_BOX: undefined.set("border-box"),
        PADDING_BOX: undefined.set("padding-box"),
        CONTENT_BOX: undefined.set("content-box"),
        BORDER: undefined.set("border"),
        PADDING: undefined.set("padding"),
        CONTENT: undefined.set("content"),
        TEXT: undefined.set("text")
    };
    var _WebkitMaskComposite = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ webkitMaskComposite: buildProperty(params) });
        },
        CLEAR: undefined.set("clear"),
        COPY: undefined.set("copy"),
        SOURCE_OVER: undefined.set("source-over"),
        SOURCE_IN: undefined.set("source-in"),
        SOURCE_OUT: undefined.set("source-out"),
        SOURCE_ATOP: undefined.set("source-atop"),
        DESTINATION_OVER: undefined.set("destination-over"),
        DESTINATION_IN: undefined.set("destination-in"),
        DESTINATION_OUT: undefined.set("destination-out"),
        DESTINATION_ATOP: undefined.set("destination-atop"),
        XOR: undefined.set("xor")
    };
    var _WebkitMaskImage = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ webkitMaskImage: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        image: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.image.apply(Method, params));
        },
        imageSet: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.imageSet.apply(Method, params));
        },
        element: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.element.apply(Method, params));
        },
        crossFade: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.crossFade.apply(Method, params));
        },
        linearGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.linearGradient.apply(Method, params));
        },
        repeatingLinearGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.repeatingLinearGradient.apply(Method, params));
        },
        radialGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.radialGradient.apply(Method, params));
        },
        repeatingRadialGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.repeatingRadialGradient.apply(Method, params));
        }
    };
    var _WebkitMaskOrigin = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ webkitMaskOrigin: buildProperty(params) });
        },
        BORDER_BOX: undefined.set("border-box"),
        PADDING_BOX: undefined.set("padding-box"),
        CONTENT_BOX: undefined.set("content-box"),
        BORDER: undefined.set("border"),
        PADDING: undefined.set("padding"),
        CONTENT: undefined.set("content")
    };
    var _WebkitMaskPosition = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ webkitMaskPosition: buildProperty(params) });
        },
        LEFT: undefined.set("left"),
        CENTER: undefined.set("center"),
        RIGHT: undefined.set("right"),
        TOP: undefined.set("top"),
        BOTTOM: undefined.set("bottom"),
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _WebkitMaskPositionX = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ webkitMaskPositionX: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        LEFT: undefined.set("left"),
        CENTER: undefined.set("center"),
        RIGHT: undefined.set("right")
    };
    var _WebkitMaskPositionY = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ webkitMaskPositionY: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        TOP: undefined.set("top"),
        CENTER: undefined.set("center"),
        BOTTOM: undefined.set("bottom")
    };
    var _WebkitMaskRepeat = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ webkitMaskRepeat: buildProperty(params) });
        },
        REPEAT_X: undefined.set("repeat-x"),
        REPEAT_Y: undefined.set("repeat-y"),
        REPEAT: undefined.set("repeat"),
        SPACE: undefined.set("space"),
        ROUND: undefined.set("round"),
        NO_REPEAT: undefined.set("no-repeat")
    };
    var _WebkitMaskRepeatX = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ webkitMaskRepeatX: buildProperty(params) });
        },
        REPEAT: undefined.set("repeat"),
        NO_REPEAT: undefined.set("no-repeat"),
        SPACE: undefined.set("space"),
        ROUND: undefined.set("round")
    };
    var _WebkitMaskRepeatY = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ webkitMaskRepeatY: buildProperty(params) });
        },
        REPEAT: undefined.set("repeat"),
        NO_REPEAT: undefined.set("no-repeat"),
        SPACE: undefined.set("space"),
        ROUND: undefined.set("round")
    };
    var _WebkitMaskSize = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ webkitMaskSize: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        AUTO: undefined.set("auto"),
        COVER: undefined.set("cover"),
        CONTAIN: undefined.set("contain")
    };
    var _WebkitOverflowScrolling = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ webkitOverflowScrolling: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        TOUCH: undefined.set("touch")
    };
    var _WebkitTapHighlightColor = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ webkitTapHighlightColor: buildProperty(params) });
        },
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ webkitTapHighlightColor: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText")
    };
    var _WebkitTextFillColor = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ webkitTextFillColor: buildProperty(params) });
        },
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ webkitTextFillColor: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText")
    };
    var _WebkitTextStroke = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ webkitTextStroke: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ webkitTextStroke: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText")
    };
    var _WebkitTextStrokeColor = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ webkitTextStrokeColor: buildProperty(params) });
        },
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ webkitTextStrokeColor: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText")
    };
    var _WebkitTextStrokeWidth = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ webkitTextStrokeWidth: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        }
    };
    var _WebkitTouchCallout = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ webkitTouchCallout: buildProperty(params) });
        },
        DEFAULT: undefined.set("default"),
        NONE: undefined.set("none")
    };
    var _WebkitUserModify = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ webkitUserModify: buildProperty(params) });
        },
        READ_ONLY: undefined.set("read-only"),
        READ_WRITE: undefined.set("read-write"),
        READ_WRITE_PLAINTEXT_ONLY: undefined.set("read-write-plaintext-only")
    };
    var _AlignContent = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ alignContent: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        FIRST: undefined.set("first"),
        LAST: undefined.set("last"),
        BASELINE: undefined.set("baseline"),
        SPACE_BETWEEN: undefined.set("space-between"),
        SPACE_AROUND: undefined.set("space-around"),
        SPACE_EVENLY: undefined.set("space-evenly"),
        STRETCH: undefined.set("stretch"),
        UNSAFE: undefined.set("unsafe"),
        SAFE: undefined.set("safe"),
        CENTER: undefined.set("center"),
        START: undefined.set("start"),
        END: undefined.set("end"),
        FLEX_START: undefined.set("flex-start"),
        FLEX_END: undefined.set("flex-end")
    };
    var _AlignItems = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ alignItems: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        STRETCH: undefined.set("stretch"),
        FIRST: undefined.set("first"),
        LAST: undefined.set("last"),
        BASELINE: undefined.set("baseline"),
        UNSAFE: undefined.set("unsafe"),
        SAFE: undefined.set("safe"),
        CENTER: undefined.set("center"),
        START: undefined.set("start"),
        END: undefined.set("end"),
        SELF_START: undefined.set("self-start"),
        SELF_END: undefined.set("self-end"),
        FLEX_START: undefined.set("flex-start"),
        FLEX_END: undefined.set("flex-end")
    };
    var _AlignSelf = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ alignSelf: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        NORMAL: undefined.set("normal"),
        STRETCH: undefined.set("stretch"),
        FIRST: undefined.set("first"),
        LAST: undefined.set("last"),
        BASELINE: undefined.set("baseline"),
        UNSAFE: undefined.set("unsafe"),
        SAFE: undefined.set("safe"),
        CENTER: undefined.set("center"),
        START: undefined.set("start"),
        END: undefined.set("end"),
        SELF_START: undefined.set("self-start"),
        SELF_END: undefined.set("self-end"),
        FLEX_START: undefined.set("flex-start"),
        FLEX_END: undefined.set("flex-end")
    };
    var _All = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ all: buildProperty(params) });
        },
        INITIAL: undefined.set("initial"),
        INHERIT: undefined.set("inherit"),
        UNSET: undefined.set("unset"),
        REVERT: undefined.set("revert")
    };
    var _Animation = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ animation: buildProperty(params) });
        },
        s: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Time.s.apply(Time, nums));
        },
        ms: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Time.ms.apply(Time, nums));
        },
        LINEAR: undefined.set("linear"),
        EASE: undefined.set("ease"),
        EASE_IN: undefined.set("ease-in"),
        EASE_OUT: undefined.set("ease-out"),
        EASE_IN_OUT: undefined.set("ease-in-out"),
        cubicBezier: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.cubicBezier.apply(Method, params));
        },
        STEP_START: undefined.set("step-start"),
        STEP_END: undefined.set("step-end"),
        steps: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.steps.apply(Method, params));
        },
        frames: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.frames.apply(Method, params));
        },
        INFINITE: undefined.set("infinite"),
        NORMAL: undefined.set("normal"),
        REVERSE: undefined.set("reverse"),
        ALTERNATE: undefined.set("alternate"),
        ALTERNATE_REVERSE: undefined.set("alternate-reverse"),
        NONE: undefined.set("none"),
        FORWARDS: undefined.set("forwards"),
        BACKWARDS: undefined.set("backwards"),
        BOTH: undefined.set("both"),
        RUNNING: undefined.set("running"),
        PAUSED: undefined.set("paused")
    };
    var _AnimationDelay = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ animationDelay: buildProperty(params) });
        },
        s: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Time.s.apply(Time, nums));
        },
        ms: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Time.ms.apply(Time, nums));
        }
    };
    var _AnimationDirection = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ animationDirection: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        REVERSE: undefined.set("reverse"),
        ALTERNATE: undefined.set("alternate"),
        ALTERNATE_REVERSE: undefined.set("alternate-reverse")
    };
    var _AnimationDuration = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ animationDuration: buildProperty(params) });
        },
        s: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Time.s.apply(Time, nums));
        },
        ms: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Time.ms.apply(Time, nums));
        }
    };
    var _AnimationFillMode = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ animationFillMode: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        FORWARDS: undefined.set("forwards"),
        BACKWARDS: undefined.set("backwards"),
        BOTH: undefined.set("both")
    };
    var _AnimationIterationCount = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ animationIterationCount: buildProperty(params) });
        },
        INFINITE: undefined.set("infinite")
    };
    var _AnimationName = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ animationName: buildProperty(params) });
        },
        NONE: undefined.set("none")
    };
    var _AnimationPlayState = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ animationPlayState: buildProperty(params) });
        },
        RUNNING: undefined.set("running"),
        PAUSED: undefined.set("paused")
    };
    var _AnimationTimingFunction = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ animationTimingFunction: buildProperty(params) });
        },
        LINEAR: undefined.set("linear"),
        EASE: undefined.set("ease"),
        EASE_IN: undefined.set("ease-in"),
        EASE_OUT: undefined.set("ease-out"),
        EASE_IN_OUT: undefined.set("ease-in-out"),
        cubicBezier: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.cubicBezier.apply(Method, params));
        },
        STEP_START: undefined.set("step-start"),
        STEP_END: undefined.set("step-end"),
        steps: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.steps.apply(Method, params));
        },
        frames: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.frames.apply(Method, params));
        }
    };
    var _Appearance = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ appearance: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        NONE: undefined.set("none")
    };
    var _Azimuth = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ azimuth: buildProperty(params) });
        },
        deg: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Angle.deg.apply(Angle, nums));
        },
        rad: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Angle.rad.apply(Angle, nums));
        },
        grad: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Angle.grad.apply(Angle, nums));
        },
        turn: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Angle.turn.apply(Angle, nums));
        },
        LEFT_SIDE: undefined.set("left-side"),
        FAR_LEFT: undefined.set("far-left"),
        LEFT: undefined.set("left"),
        CENTER_LEFT: undefined.set("center-left"),
        CENTER: undefined.set("center"),
        CENTER_RIGHT: undefined.set("center-right"),
        RIGHT: undefined.set("right"),
        FAR_RIGHT: undefined.set("far-right"),
        RIGHT_SIDE: undefined.set("right-side"),
        BEHIND: undefined.set("behind"),
        LEFTWARDS: undefined.set("leftwards"),
        RIGHTWARDS: undefined.set("rightwards")
    };
    var _BackdropFilter = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ backdropFilter: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        blur: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.blur.apply(Method, params));
        },
        brightness: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.brightness.apply(Method, params));
        },
        contrast: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.contrast.apply(Method, params));
        },
        dropShadow: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.dropShadow.apply(Method, params));
        },
        grayscale: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.grayscale.apply(Method, params));
        },
        hueRotate: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hueRotate.apply(Method, params));
        },
        invert: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.invert.apply(Method, params));
        },
        opacity: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.opacity.apply(Method, params));
        },
        saturate: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.saturate.apply(Method, params));
        },
        sepia: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.sepia.apply(Method, params));
        }
    };
    var _BackfaceVisibility = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ backfaceVisibility: buildProperty(params) });
        },
        VISIBLE: undefined.set("visible"),
        HIDDEN: undefined.set("hidden")
    };
    var _Background = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ background: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        image: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.image.apply(Method, params));
        },
        imageSet: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.imageSet.apply(Method, params));
        },
        element: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.element.apply(Method, params));
        },
        crossFade: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.crossFade.apply(Method, params));
        },
        linearGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.linearGradient.apply(Method, params));
        },
        repeatingLinearGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.repeatingLinearGradient.apply(Method, params));
        },
        radialGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.radialGradient.apply(Method, params));
        },
        repeatingRadialGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.repeatingRadialGradient.apply(Method, params));
        },
        LEFT: undefined.set("left"),
        CENTER: undefined.set("center"),
        RIGHT: undefined.set("right"),
        TOP: undefined.set("top"),
        BOTTOM: undefined.set("bottom"),
        AUTO: undefined.set("auto"),
        COVER: undefined.set("cover"),
        CONTAIN: undefined.set("contain"),
        REPEAT_X: undefined.set("repeat-x"),
        REPEAT_Y: undefined.set("repeat-y"),
        REPEAT: undefined.set("repeat"),
        SPACE: undefined.set("space"),
        ROUND: undefined.set("round"),
        NO_REPEAT: undefined.set("no-repeat"),
        SCROLL: undefined.set("scroll"),
        FIXED: undefined.set("fixed"),
        LOCAL: undefined.set("local"),
        BORDER_BOX: undefined.set("border-box"),
        PADDING_BOX: undefined.set("padding-box"),
        CONTENT_BOX: undefined.set("content-box")
    };
    var _BackgroundAttachment = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ backgroundAttachment: buildProperty(params) });
        },
        SCROLL: undefined.set("scroll"),
        FIXED: undefined.set("fixed"),
        LOCAL: undefined.set("local")
    };
    var _BackgroundBlendMode = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ backgroundBlendMode: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        MULTIPLY: undefined.set("multiply"),
        SCREEN: undefined.set("screen"),
        OVERLAY: undefined.set("overlay"),
        DARKEN: undefined.set("darken"),
        LIGHTEN: undefined.set("lighten"),
        COLOR_DODGE: undefined.set("color-dodge"),
        COLOR_BURN: undefined.set("color-burn"),
        HARD_LIGHT: undefined.set("hard-light"),
        SOFT_LIGHT: undefined.set("soft-light"),
        DIFFERENCE: undefined.set("difference"),
        EXCLUSION: undefined.set("exclusion"),
        HUE: undefined.set("hue"),
        SATURATION: undefined.set("saturation"),
        COLOR: undefined.set("color"),
        LUMINOSITY: undefined.set("luminosity")
    };
    var _BackgroundClip = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ backgroundClip: buildProperty(params) });
        },
        BORDER_BOX: undefined.set("border-box"),
        PADDING_BOX: undefined.set("padding-box"),
        CONTENT_BOX: undefined.set("content-box")
    };
    var _BackgroundColor = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ backgroundColor: buildProperty(params) });
        },
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ backgroundColor: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText")
    };
    var _BackgroundImage = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ backgroundImage: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        image: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.image.apply(Method, params));
        },
        imageSet: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.imageSet.apply(Method, params));
        },
        element: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.element.apply(Method, params));
        },
        crossFade: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.crossFade.apply(Method, params));
        },
        linearGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.linearGradient.apply(Method, params));
        },
        repeatingLinearGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.repeatingLinearGradient.apply(Method, params));
        },
        radialGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.radialGradient.apply(Method, params));
        },
        repeatingRadialGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.repeatingRadialGradient.apply(Method, params));
        }
    };
    var _BackgroundOrigin = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ backgroundOrigin: buildProperty(params) });
        },
        BORDER_BOX: undefined.set("border-box"),
        PADDING_BOX: undefined.set("padding-box"),
        CONTENT_BOX: undefined.set("content-box")
    };
    var _BackgroundPosition = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ backgroundPosition: buildProperty(params) });
        },
        LEFT: undefined.set("left"),
        CENTER: undefined.set("center"),
        RIGHT: undefined.set("right"),
        TOP: undefined.set("top"),
        BOTTOM: undefined.set("bottom"),
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _BackgroundPositionX = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ backgroundPositionX: buildProperty(params) });
        },
        CENTER: undefined.set("center"),
        LEFT: undefined.set("left"),
        RIGHT: undefined.set("right"),
        X_START: undefined.set("x-start"),
        X_END: undefined.set("x-end"),
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _BackgroundPositionY = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ backgroundPositionY: buildProperty(params) });
        },
        CENTER: undefined.set("center"),
        TOP: undefined.set("top"),
        BOTTOM: undefined.set("bottom"),
        Y_START: undefined.set("y-start"),
        Y_END: undefined.set("y-end"),
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _BackgroundRepeat = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ backgroundRepeat: buildProperty(params) });
        },
        REPEAT_X: undefined.set("repeat-x"),
        REPEAT_Y: undefined.set("repeat-y"),
        REPEAT: undefined.set("repeat"),
        SPACE: undefined.set("space"),
        ROUND: undefined.set("round"),
        NO_REPEAT: undefined.set("no-repeat")
    };
    var _BackgroundSize = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ backgroundSize: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        AUTO: undefined.set("auto"),
        COVER: undefined.set("cover"),
        CONTAIN: undefined.set("contain")
    };
    var _BlockOverflow = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ blockOverflow: buildProperty(params) });
        },
        CLIP: undefined.set("clip"),
        ELLIPSIS: undefined.set("ellipsis")
    };
    var _BlockSize = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ blockSize: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        BORDER_BOX: undefined.set("border-box"),
        CONTENT_BOX: undefined.set("content-box"),
        AVAILABLE: undefined.set("available"),
        MIN_CONTENT: undefined.set("min-content"),
        MAX_CONTENT: undefined.set("max-content"),
        FIT_CONTENT: undefined.set("fit-content"),
        AUTO: undefined.set("auto")
    };
    var _Border = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ border: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        THIN: undefined.set("thin"),
        MEDIUM: undefined.set("medium"),
        THICK: undefined.set("thick"),
        NONE: undefined.set("none"),
        HIDDEN: undefined.set("hidden"),
        DOTTED: undefined.set("dotted"),
        DASHED: undefined.set("dashed"),
        SOLID: undefined.set("solid"),
        DOUBLE: undefined.set("double"),
        GROOVE: undefined.set("groove"),
        RIDGE: undefined.set("ridge"),
        INSET: undefined.set("inset"),
        OUTSET: undefined.set("outset"),
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ border: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText")
    };
    var _BorderBlockEnd = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderBlockEnd: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        THIN: undefined.set("thin"),
        MEDIUM: undefined.set("medium"),
        THICK: undefined.set("thick"),
        NONE: undefined.set("none"),
        HIDDEN: undefined.set("hidden"),
        DOTTED: undefined.set("dotted"),
        DASHED: undefined.set("dashed"),
        SOLID: undefined.set("solid"),
        DOUBLE: undefined.set("double"),
        GROOVE: undefined.set("groove"),
        RIDGE: undefined.set("ridge"),
        INSET: undefined.set("inset"),
        OUTSET: undefined.set("outset")
    };
    var _BorderBlockEndColor = { set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderBlockEndColor: buildProperty(params) });
        } };
    var _BorderBlockEndStyle = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderBlockEndStyle: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        HIDDEN: undefined.set("hidden"),
        DOTTED: undefined.set("dotted"),
        DASHED: undefined.set("dashed"),
        SOLID: undefined.set("solid"),
        DOUBLE: undefined.set("double"),
        GROOVE: undefined.set("groove"),
        RIDGE: undefined.set("ridge"),
        INSET: undefined.set("inset"),
        OUTSET: undefined.set("outset")
    };
    var _BorderBlockEndWidth = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderBlockEndWidth: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        THIN: undefined.set("thin"),
        MEDIUM: undefined.set("medium"),
        THICK: undefined.set("thick")
    };
    var _BorderBlockStart = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderBlockStart: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        THIN: undefined.set("thin"),
        MEDIUM: undefined.set("medium"),
        THICK: undefined.set("thick"),
        NONE: undefined.set("none"),
        HIDDEN: undefined.set("hidden"),
        DOTTED: undefined.set("dotted"),
        DASHED: undefined.set("dashed"),
        SOLID: undefined.set("solid"),
        DOUBLE: undefined.set("double"),
        GROOVE: undefined.set("groove"),
        RIDGE: undefined.set("ridge"),
        INSET: undefined.set("inset"),
        OUTSET: undefined.set("outset")
    };
    var _BorderBlockStartColor = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderBlockStartColor: buildProperty(params) });
        }
    };
    var _BorderBlockStartStyle = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderBlockStartStyle: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        HIDDEN: undefined.set("hidden"),
        DOTTED: undefined.set("dotted"),
        DASHED: undefined.set("dashed"),
        SOLID: undefined.set("solid"),
        DOUBLE: undefined.set("double"),
        GROOVE: undefined.set("groove"),
        RIDGE: undefined.set("ridge"),
        INSET: undefined.set("inset"),
        OUTSET: undefined.set("outset")
    };
    var _BorderBlockStartWidth = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderBlockStartWidth: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        THIN: undefined.set("thin"),
        MEDIUM: undefined.set("medium"),
        THICK: undefined.set("thick")
    };
    var _BorderBottom = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderBottom: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        THIN: undefined.set("thin"),
        MEDIUM: undefined.set("medium"),
        THICK: undefined.set("thick"),
        NONE: undefined.set("none"),
        HIDDEN: undefined.set("hidden"),
        DOTTED: undefined.set("dotted"),
        DASHED: undefined.set("dashed"),
        SOLID: undefined.set("solid"),
        DOUBLE: undefined.set("double"),
        GROOVE: undefined.set("groove"),
        RIDGE: undefined.set("ridge"),
        INSET: undefined.set("inset"),
        OUTSET: undefined.set("outset"),
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ borderBottom: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText")
    };
    var _BorderBottomColor = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderBottomColor: buildProperty(params) });
        },
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ borderBottomColor: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText")
    };
    var _BorderBottomLeftRadius = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderBottomLeftRadius: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _BorderBottomRightRadius = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderBottomRightRadius: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _BorderBottomStyle = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderBottomStyle: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        HIDDEN: undefined.set("hidden"),
        DOTTED: undefined.set("dotted"),
        DASHED: undefined.set("dashed"),
        SOLID: undefined.set("solid"),
        DOUBLE: undefined.set("double"),
        GROOVE: undefined.set("groove"),
        RIDGE: undefined.set("ridge"),
        INSET: undefined.set("inset"),
        OUTSET: undefined.set("outset")
    };
    var _BorderBottomWidth = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderBottomWidth: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        THIN: undefined.set("thin"),
        MEDIUM: undefined.set("medium"),
        THICK: undefined.set("thick")
    };
    var _BorderCollapse = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderCollapse: buildProperty(params) });
        },
        COLLAPSE: undefined.set("collapse"),
        SEPARATE: undefined.set("separate")
    };
    var _BorderColor = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderColor: buildProperty(params) });
        },
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ borderColor: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText")
    };
    var _BorderImage = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderImage: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        image: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.image.apply(Method, params));
        },
        imageSet: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.imageSet.apply(Method, params));
        },
        element: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.element.apply(Method, params));
        },
        crossFade: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.crossFade.apply(Method, params));
        },
        linearGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.linearGradient.apply(Method, params));
        },
        repeatingLinearGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.repeatingLinearGradient.apply(Method, params));
        },
        radialGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.radialGradient.apply(Method, params));
        },
        repeatingRadialGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.repeatingRadialGradient.apply(Method, params));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        FILL: undefined.set("fill"),
        AUTO: undefined.set("auto"),
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        STRETCH: undefined.set("stretch"),
        REPEAT: undefined.set("repeat"),
        ROUND: undefined.set("round"),
        SPACE: undefined.set("space")
    };
    var _BorderImageOutset = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderImageOutset: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        }
    };
    var _BorderImageRepeat = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderImageRepeat: buildProperty(params) });
        },
        STRETCH: undefined.set("stretch"),
        REPEAT: undefined.set("repeat"),
        ROUND: undefined.set("round"),
        SPACE: undefined.set("space")
    };
    var _BorderImageSlice = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderImageSlice: buildProperty(params) });
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        FILL: undefined.set("fill")
    };
    var _BorderImageSource = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderImageSource: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        image: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.image.apply(Method, params));
        },
        imageSet: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.imageSet.apply(Method, params));
        },
        element: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.element.apply(Method, params));
        },
        crossFade: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.crossFade.apply(Method, params));
        },
        linearGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.linearGradient.apply(Method, params));
        },
        repeatingLinearGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.repeatingLinearGradient.apply(Method, params));
        },
        radialGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.radialGradient.apply(Method, params));
        },
        repeatingRadialGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.repeatingRadialGradient.apply(Method, params));
        }
    };
    var _BorderImageWidth = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderImageWidth: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        AUTO: undefined.set("auto")
    };
    var _BorderInlineEnd = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderInlineEnd: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        THIN: undefined.set("thin"),
        MEDIUM: undefined.set("medium"),
        THICK: undefined.set("thick"),
        NONE: undefined.set("none"),
        HIDDEN: undefined.set("hidden"),
        DOTTED: undefined.set("dotted"),
        DASHED: undefined.set("dashed"),
        SOLID: undefined.set("solid"),
        DOUBLE: undefined.set("double"),
        GROOVE: undefined.set("groove"),
        RIDGE: undefined.set("ridge"),
        INSET: undefined.set("inset"),
        OUTSET: undefined.set("outset")
    };
    var _BorderInlineEndColor = { set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderInlineEndColor: buildProperty(params) });
        } };
    var _BorderInlineEndStyle = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderInlineEndStyle: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        HIDDEN: undefined.set("hidden"),
        DOTTED: undefined.set("dotted"),
        DASHED: undefined.set("dashed"),
        SOLID: undefined.set("solid"),
        DOUBLE: undefined.set("double"),
        GROOVE: undefined.set("groove"),
        RIDGE: undefined.set("ridge"),
        INSET: undefined.set("inset"),
        OUTSET: undefined.set("outset")
    };
    var _BorderInlineEndWidth = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderInlineEndWidth: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        THIN: undefined.set("thin"),
        MEDIUM: undefined.set("medium"),
        THICK: undefined.set("thick")
    };
    var _BorderInlineStart = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderInlineStart: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        THIN: undefined.set("thin"),
        MEDIUM: undefined.set("medium"),
        THICK: undefined.set("thick"),
        NONE: undefined.set("none"),
        HIDDEN: undefined.set("hidden"),
        DOTTED: undefined.set("dotted"),
        DASHED: undefined.set("dashed"),
        SOLID: undefined.set("solid"),
        DOUBLE: undefined.set("double"),
        GROOVE: undefined.set("groove"),
        RIDGE: undefined.set("ridge"),
        INSET: undefined.set("inset"),
        OUTSET: undefined.set("outset")
    };
    var _BorderInlineStartColor = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderInlineStartColor: buildProperty(params) });
        }
    };
    var _BorderInlineStartStyle = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderInlineStartStyle: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        HIDDEN: undefined.set("hidden"),
        DOTTED: undefined.set("dotted"),
        DASHED: undefined.set("dashed"),
        SOLID: undefined.set("solid"),
        DOUBLE: undefined.set("double"),
        GROOVE: undefined.set("groove"),
        RIDGE: undefined.set("ridge"),
        INSET: undefined.set("inset"),
        OUTSET: undefined.set("outset")
    };
    var _BorderInlineStartWidth = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderInlineStartWidth: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        THIN: undefined.set("thin"),
        MEDIUM: undefined.set("medium"),
        THICK: undefined.set("thick")
    };
    var _BorderLeft = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderLeft: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        THIN: undefined.set("thin"),
        MEDIUM: undefined.set("medium"),
        THICK: undefined.set("thick"),
        NONE: undefined.set("none"),
        HIDDEN: undefined.set("hidden"),
        DOTTED: undefined.set("dotted"),
        DASHED: undefined.set("dashed"),
        SOLID: undefined.set("solid"),
        DOUBLE: undefined.set("double"),
        GROOVE: undefined.set("groove"),
        RIDGE: undefined.set("ridge"),
        INSET: undefined.set("inset"),
        OUTSET: undefined.set("outset"),
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ borderLeft: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText")
    };
    var _BorderLeftColor = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderLeftColor: buildProperty(params) });
        },
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ borderLeftColor: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText")
    };
    var _BorderLeftStyle = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderLeftStyle: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        HIDDEN: undefined.set("hidden"),
        DOTTED: undefined.set("dotted"),
        DASHED: undefined.set("dashed"),
        SOLID: undefined.set("solid"),
        DOUBLE: undefined.set("double"),
        GROOVE: undefined.set("groove"),
        RIDGE: undefined.set("ridge"),
        INSET: undefined.set("inset"),
        OUTSET: undefined.set("outset")
    };
    var _BorderLeftWidth = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderLeftWidth: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        THIN: undefined.set("thin"),
        MEDIUM: undefined.set("medium"),
        THICK: undefined.set("thick")
    };
    var _BorderRadius = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderRadius: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _BorderRight = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderRight: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        THIN: undefined.set("thin"),
        MEDIUM: undefined.set("medium"),
        THICK: undefined.set("thick"),
        NONE: undefined.set("none"),
        HIDDEN: undefined.set("hidden"),
        DOTTED: undefined.set("dotted"),
        DASHED: undefined.set("dashed"),
        SOLID: undefined.set("solid"),
        DOUBLE: undefined.set("double"),
        GROOVE: undefined.set("groove"),
        RIDGE: undefined.set("ridge"),
        INSET: undefined.set("inset"),
        OUTSET: undefined.set("outset"),
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ borderRight: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText")
    };
    var _BorderRightColor = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderRightColor: buildProperty(params) });
        },
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ borderRightColor: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText")
    };
    var _BorderRightStyle = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderRightStyle: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        HIDDEN: undefined.set("hidden"),
        DOTTED: undefined.set("dotted"),
        DASHED: undefined.set("dashed"),
        SOLID: undefined.set("solid"),
        DOUBLE: undefined.set("double"),
        GROOVE: undefined.set("groove"),
        RIDGE: undefined.set("ridge"),
        INSET: undefined.set("inset"),
        OUTSET: undefined.set("outset")
    };
    var _BorderRightWidth = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderRightWidth: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        THIN: undefined.set("thin"),
        MEDIUM: undefined.set("medium"),
        THICK: undefined.set("thick")
    };
    var _BorderSpacing = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderSpacing: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        }
    };
    var _BorderStyle = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderStyle: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        HIDDEN: undefined.set("hidden"),
        DOTTED: undefined.set("dotted"),
        DASHED: undefined.set("dashed"),
        SOLID: undefined.set("solid"),
        DOUBLE: undefined.set("double"),
        GROOVE: undefined.set("groove"),
        RIDGE: undefined.set("ridge"),
        INSET: undefined.set("inset"),
        OUTSET: undefined.set("outset")
    };
    var _BorderTop = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderTop: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        THIN: undefined.set("thin"),
        MEDIUM: undefined.set("medium"),
        THICK: undefined.set("thick"),
        NONE: undefined.set("none"),
        HIDDEN: undefined.set("hidden"),
        DOTTED: undefined.set("dotted"),
        DASHED: undefined.set("dashed"),
        SOLID: undefined.set("solid"),
        DOUBLE: undefined.set("double"),
        GROOVE: undefined.set("groove"),
        RIDGE: undefined.set("ridge"),
        INSET: undefined.set("inset"),
        OUTSET: undefined.set("outset"),
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ borderTop: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText")
    };
    var _BorderTopColor = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderTopColor: buildProperty(params) });
        },
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ borderTopColor: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText")
    };
    var _BorderTopLeftRadius = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderTopLeftRadius: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _BorderTopRightRadius = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderTopRightRadius: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _BorderTopStyle = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderTopStyle: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        HIDDEN: undefined.set("hidden"),
        DOTTED: undefined.set("dotted"),
        DASHED: undefined.set("dashed"),
        SOLID: undefined.set("solid"),
        DOUBLE: undefined.set("double"),
        GROOVE: undefined.set("groove"),
        RIDGE: undefined.set("ridge"),
        INSET: undefined.set("inset"),
        OUTSET: undefined.set("outset")
    };
    var _BorderTopWidth = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderTopWidth: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        THIN: undefined.set("thin"),
        MEDIUM: undefined.set("medium"),
        THICK: undefined.set("thick")
    };
    var _BorderWidth = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ borderWidth: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        THIN: undefined.set("thin"),
        MEDIUM: undefined.set("medium"),
        THICK: undefined.set("thick")
    };
    var _Bottom = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ bottom: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        AUTO: undefined.set("auto")
    };
    var _BoxAlign = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ boxAlign: buildProperty(params) });
        },
        START: undefined.set("start"),
        CENTER: undefined.set("center"),
        END: undefined.set("end"),
        BASELINE: undefined.set("baseline"),
        STRETCH: undefined.set("stretch")
    };
    var _BoxDecorationBreak = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ boxDecorationBreak: buildProperty(params) });
        },
        SLICE: undefined.set("slice"),
        CLONE: undefined.set("clone")
    };
    var _BoxDirection = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ boxDirection: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        REVERSE: undefined.set("reverse"),
        INHERIT: undefined.set("inherit")
    };
    var _BoxFlex = { set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ boxFlex: buildProperty(params) });
        } };
    var _BoxFlexGroup = { set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ boxFlexGroup: buildProperty(params) });
        } };
    var _BoxLines = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ boxLines: buildProperty(params) });
        },
        SINGLE: undefined.set("single"),
        MULTIPLE: undefined.set("multiple")
    };
    var _BoxOrdinalGroup = { set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ boxOrdinalGroup: buildProperty(params) });
        } };
    var _BoxOrient = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ boxOrient: buildProperty(params) });
        },
        HORIZONTAL: undefined.set("horizontal"),
        VERTICAL: undefined.set("vertical"),
        INLINE_AXIS: undefined.set("inline-axis"),
        BLOCK_AXIS: undefined.set("block-axis"),
        INHERIT: undefined.set("inherit")
    };
    var _BoxPack = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ boxPack: buildProperty(params) });
        },
        START: undefined.set("start"),
        CENTER: undefined.set("center"),
        END: undefined.set("end"),
        JUSTIFY: undefined.set("justify")
    };
    var _BoxShadow = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ boxShadow: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        INSET: undefined.set("inset"),
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ boxShadow: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText")
    };
    var _BoxSizing = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ boxSizing: buildProperty(params) });
        },
        CONTENT_BOX: undefined.set("content-box"),
        BORDER_BOX: undefined.set("border-box")
    };
    var _BreakAfter = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ breakAfter: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        AVOID: undefined.set("avoid"),
        AVOID_PAGE: undefined.set("avoid-page"),
        PAGE: undefined.set("page"),
        LEFT: undefined.set("left"),
        RIGHT: undefined.set("right"),
        RECTO: undefined.set("recto"),
        VERSO: undefined.set("verso"),
        AVOID_COLUMN: undefined.set("avoid-column"),
        COLUMN: undefined.set("column"),
        AVOID_REGION: undefined.set("avoid-region"),
        REGION: undefined.set("region")
    };
    var _BreakBefore = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ breakBefore: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        AVOID: undefined.set("avoid"),
        AVOID_PAGE: undefined.set("avoid-page"),
        PAGE: undefined.set("page"),
        LEFT: undefined.set("left"),
        RIGHT: undefined.set("right"),
        RECTO: undefined.set("recto"),
        VERSO: undefined.set("verso"),
        AVOID_COLUMN: undefined.set("avoid-column"),
        COLUMN: undefined.set("column"),
        AVOID_REGION: undefined.set("avoid-region"),
        REGION: undefined.set("region")
    };
    var _BreakInside = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ breakInside: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        AVOID: undefined.set("avoid"),
        AVOID_PAGE: undefined.set("avoid-page"),
        AVOID_COLUMN: undefined.set("avoid-column"),
        AVOID_REGION: undefined.set("avoid-region")
    };
    var _CaptionSide = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ captionSide: buildProperty(params) });
        },
        TOP: undefined.set("top"),
        BOTTOM: undefined.set("bottom"),
        BLOCK_START: undefined.set("block-start"),
        BLOCK_END: undefined.set("block-end"),
        INLINE_START: undefined.set("inline-start"),
        INLINE_END: undefined.set("inline-end")
    };
    var _CaretColor = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ caretColor: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ caretColor: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText")
    };
    var _Clear = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ clear: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        LEFT: undefined.set("left"),
        RIGHT: undefined.set("right"),
        BOTH: undefined.set("both"),
        INLINE_START: undefined.set("inline-start"),
        INLINE_END: undefined.set("inline-end")
    };
    var _Clip = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ clip: buildProperty(params) });
        },
        rect: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rect.apply(Method, params));
        },
        AUTO: undefined.set("auto")
    };
    var _ClipPath = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ clipPath: buildProperty(params) });
        },
        inset: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.inset.apply(Method, params));
        },
        circle: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.circle.apply(Method, params));
        },
        ellipse: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.ellipse.apply(Method, params));
        },
        polygon: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.polygon.apply(Method, params));
        },
        BORDER_BOX: undefined.set("border-box"),
        PADDING_BOX: undefined.set("padding-box"),
        CONTENT_BOX: undefined.set("content-box"),
        MARGIN_BOX: undefined.set("margin-box"),
        FILL_BOX: undefined.set("fill-box"),
        STROKE_BOX: undefined.set("stroke-box"),
        VIEW_BOX: undefined.set("view-box"),
        NONE: undefined.set("none")
    };
    var _Color = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ color: buildProperty(params) });
        },
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ color: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText")
    };
    var _ColorAdjust = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ colorAdjust: buildProperty(params) });
        },
        ECONOMY: undefined.set("economy"),
        EXACT: undefined.set("exact")
    };
    var _ColumnCount = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ columnCount: buildProperty(params) });
        },
        AUTO: undefined.set("auto")
    };
    var _ColumnFill = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ columnFill: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        BALANCE: undefined.set("balance"),
        BALANCE_ALL: undefined.set("balance-all")
    };
    var _ColumnGap = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ columnGap: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _ColumnRule = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ columnRule: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        THIN: undefined.set("thin"),
        MEDIUM: undefined.set("medium"),
        THICK: undefined.set("thick"),
        NONE: undefined.set("none"),
        HIDDEN: undefined.set("hidden"),
        DOTTED: undefined.set("dotted"),
        DASHED: undefined.set("dashed"),
        SOLID: undefined.set("solid"),
        DOUBLE: undefined.set("double"),
        GROOVE: undefined.set("groove"),
        RIDGE: undefined.set("ridge"),
        INSET: undefined.set("inset"),
        OUTSET: undefined.set("outset"),
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ columnRule: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText")
    };
    var _ColumnRuleColor = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ columnRuleColor: buildProperty(params) });
        },
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ columnRuleColor: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText")
    };
    var _ColumnRuleStyle = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ columnRuleStyle: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        HIDDEN: undefined.set("hidden"),
        DOTTED: undefined.set("dotted"),
        DASHED: undefined.set("dashed"),
        SOLID: undefined.set("solid"),
        DOUBLE: undefined.set("double"),
        GROOVE: undefined.set("groove"),
        RIDGE: undefined.set("ridge"),
        INSET: undefined.set("inset"),
        OUTSET: undefined.set("outset")
    };
    var _ColumnRuleWidth = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ columnRuleWidth: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        THIN: undefined.set("thin"),
        MEDIUM: undefined.set("medium"),
        THICK: undefined.set("thick")
    };
    var _ColumnSpan = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ columnSpan: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        ALL: undefined.set("all")
    };
    var _ColumnWidth = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ columnWidth: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        AUTO: undefined.set("auto")
    };
    var _Columns = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ columns: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        AUTO: undefined.set("auto")
    };
    var _Contain = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ contain: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        STRICT: undefined.set("strict"),
        CONTENT: undefined.set("content"),
        SIZE: undefined.set("size"),
        LAYOUT: undefined.set("layout"),
        STYLE: undefined.set("style"),
        PAINT: undefined.set("paint")
    };
    var _Content = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ content: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        NONE: undefined.set("none"),
        image: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.image.apply(Method, params));
        },
        imageSet: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.imageSet.apply(Method, params));
        },
        element: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.element.apply(Method, params));
        },
        crossFade: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.crossFade.apply(Method, params));
        },
        linearGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.linearGradient.apply(Method, params));
        },
        repeatingLinearGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.repeatingLinearGradient.apply(Method, params));
        },
        radialGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.radialGradient.apply(Method, params));
        },
        repeatingRadialGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.repeatingRadialGradient.apply(Method, params));
        },
        CONTENTS: undefined.set("contents"),
        OPEN_QUOTE: undefined.set("open-quote"),
        CLOSE_QUOTE: undefined.set("close-quote"),
        NO_OPEN_QUOTE: undefined.set("no-open-quote"),
        NO_CLOSE_QUOTE: undefined.set("no-close-quote"),
        targetCounter: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.targetCounter.apply(Method, params));
        },
        targetCounters: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.targetCounters.apply(Method, params));
        },
        targetText: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.targetText.apply(Method, params));
        },
        leader: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.leader.apply(Method, params));
        }
    };
    var _CounterIncrement = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ counterIncrement: buildProperty(params) });
        },
        NONE: undefined.set("none")
    };
    var _CounterReset = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ counterReset: buildProperty(params) });
        },
        NONE: undefined.set("none")
    };
    var _Cursor = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ cursor: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        DEFAULT: undefined.set("default"),
        NONE: undefined.set("none"),
        CONTEXT_MENU: undefined.set("context-menu"),
        HELP: undefined.set("help"),
        POINTER: undefined.set("pointer"),
        PROGRESS: undefined.set("progress"),
        WAIT: undefined.set("wait"),
        CELL: undefined.set("cell"),
        CROSSHAIR: undefined.set("crosshair"),
        TEXT: undefined.set("text"),
        VERTICAL_TEXT: undefined.set("vertical-text"),
        ALIAS: undefined.set("alias"),
        COPY: undefined.set("copy"),
        MOVE: undefined.set("move"),
        NO_DROP: undefined.set("no-drop"),
        NOT_ALLOWED: undefined.set("not-allowed"),
        E_RESIZE: undefined.set("e-resize"),
        N_RESIZE: undefined.set("n-resize"),
        NE_RESIZE: undefined.set("ne-resize"),
        NW_RESIZE: undefined.set("nw-resize"),
        S_RESIZE: undefined.set("s-resize"),
        SE_RESIZE: undefined.set("se-resize"),
        SW_RESIZE: undefined.set("sw-resize"),
        W_RESIZE: undefined.set("w-resize"),
        EW_RESIZE: undefined.set("ew-resize"),
        NS_RESIZE: undefined.set("ns-resize"),
        NESW_RESIZE: undefined.set("nesw-resize"),
        NWSE_RESIZE: undefined.set("nwse-resize"),
        COL_RESIZE: undefined.set("col-resize"),
        ROW_RESIZE: undefined.set("row-resize"),
        ALL_SCROLL: undefined.set("all-scroll"),
        ZOOM_IN: undefined.set("zoom-in"),
        ZOOM_OUT: undefined.set("zoom-out"),
        GRAB: undefined.set("grab"),
        GRABBING: undefined.set("grabbing")
    };
    var _Direction = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ direction: buildProperty(params) });
        },
        LTR: undefined.set("ltr"),
        RTL: undefined.set("rtl")
    };
    var _Display = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ display: buildProperty(params) });
        },
        BLOCK: undefined.set("block"),
        INLINE: undefined.set("inline"),
        RUN_IN: undefined.set("run-in"),
        FLOW: undefined.set("flow"),
        FLOW_ROOT: undefined.set("flow-root"),
        TABLE: undefined.set("table"),
        FLEX: undefined.set("flex"),
        GRID: undefined.set("grid"),
        RUBY: undefined.set("ruby"),
        LIST_ITEM: undefined.set("list-item"),
        TABLE_ROW_GROUP: undefined.set("table-row-group"),
        TABLE_HEADER_GROUP: undefined.set("table-header-group"),
        TABLE_FOOTER_GROUP: undefined.set("table-footer-group"),
        TABLE_ROW: undefined.set("table-row"),
        TABLE_CELL: undefined.set("table-cell"),
        TABLE_COLUMN_GROUP: undefined.set("table-column-group"),
        TABLE_COLUMN: undefined.set("table-column"),
        TABLE_CAPTION: undefined.set("table-caption"),
        RUBY_BASE: undefined.set("ruby-base"),
        RUBY_TEXT: undefined.set("ruby-text"),
        RUBY_BASE_CONTAINER: undefined.set("ruby-base-container"),
        RUBY_TEXT_CONTAINER: undefined.set("ruby-text-container"),
        CONTENTS: undefined.set("contents"),
        NONE: undefined.set("none"),
        INLINE_BLOCK: undefined.set("inline-block"),
        INLINE_LIST_ITEM: undefined.set("inline-list-item"),
        INLINE_TABLE: undefined.set("inline-table"),
        INLINE_FLEX: undefined.set("inline-flex"),
        INLINE_GRID: undefined.set("inline-grid")
    };
    var _EmptyCells = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ emptyCells: buildProperty(params) });
        },
        SHOW: undefined.set("show"),
        HIDE: undefined.set("hide")
    };
    var _Filter = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ filter: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        blur: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.blur.apply(Method, params));
        },
        brightness: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.brightness.apply(Method, params));
        },
        contrast: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.contrast.apply(Method, params));
        },
        dropShadow: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.dropShadow.apply(Method, params));
        },
        grayscale: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.grayscale.apply(Method, params));
        },
        hueRotate: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hueRotate.apply(Method, params));
        },
        invert: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.invert.apply(Method, params));
        },
        opacity: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.opacity.apply(Method, params));
        },
        saturate: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.saturate.apply(Method, params));
        },
        sepia: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.sepia.apply(Method, params));
        }
    };
    var _Flex = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ flex: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        CONTENT: undefined.set("content"),
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        BORDER_BOX: undefined.set("border-box"),
        CONTENT_BOX: undefined.set("content-box"),
        AVAILABLE: undefined.set("available"),
        MIN_CONTENT: undefined.set("min-content"),
        MAX_CONTENT: undefined.set("max-content"),
        FIT_CONTENT: undefined.set("fit-content"),
        AUTO: undefined.set("auto")
    };
    var _FlexBasis = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ flexBasis: buildProperty(params) });
        },
        CONTENT: undefined.set("content"),
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        BORDER_BOX: undefined.set("border-box"),
        CONTENT_BOX: undefined.set("content-box"),
        AVAILABLE: undefined.set("available"),
        MIN_CONTENT: undefined.set("min-content"),
        MAX_CONTENT: undefined.set("max-content"),
        FIT_CONTENT: undefined.set("fit-content"),
        AUTO: undefined.set("auto")
    };
    var _FlexDirection = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ flexDirection: buildProperty(params) });
        },
        ROW: undefined.set("row"),
        ROW_REVERSE: undefined.set("row-reverse"),
        COLUMN: undefined.set("column"),
        COLUMN_REVERSE: undefined.set("column-reverse")
    };
    var _FlexFlow = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ flexFlow: buildProperty(params) });
        },
        ROW: undefined.set("row"),
        ROW_REVERSE: undefined.set("row-reverse"),
        COLUMN: undefined.set("column"),
        COLUMN_REVERSE: undefined.set("column-reverse"),
        NOWRAP: undefined.set("nowrap"),
        WRAP: undefined.set("wrap"),
        WRAP_REVERSE: undefined.set("wrap-reverse")
    };
    var _FlexGrow = { set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ flexGrow: buildProperty(params) });
        } };
    var _FlexShrink = { set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ flexShrink: buildProperty(params) });
        } };
    var _FlexWrap = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ flexWrap: buildProperty(params) });
        },
        NOWRAP: undefined.set("nowrap"),
        WRAP: undefined.set("wrap"),
        WRAP_REVERSE: undefined.set("wrap-reverse")
    };
    var _Float = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ float: buildProperty(params) });
        },
        LEFT: undefined.set("left"),
        RIGHT: undefined.set("right"),
        NONE: undefined.set("none"),
        INLINE_START: undefined.set("inline-start"),
        INLINE_END: undefined.set("inline-end")
    };
    var _Font = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ font: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        ITALIC: undefined.set("italic"),
        OBLIQUE: undefined.set("oblique"),
        deg: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Angle.deg.apply(Angle, nums));
        },
        rad: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Angle.rad.apply(Angle, nums));
        },
        grad: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Angle.grad.apply(Angle, nums));
        },
        turn: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Angle.turn.apply(Angle, nums));
        },
        SMALL_CAPS: undefined.set("small-caps"),
        BOLD: undefined.set("bold"),
        BOLDER: undefined.set("bolder"),
        LIGHTER: undefined.set("lighter"),
        ULTRA_CONDENSED: undefined.set("ultra-condensed"),
        EXTRA_CONDENSED: undefined.set("extra-condensed"),
        CONDENSED: undefined.set("condensed"),
        SEMI_CONDENSED: undefined.set("semi-condensed"),
        SEMI_EXPANDED: undefined.set("semi-expanded"),
        EXPANDED: undefined.set("expanded"),
        EXTRA_EXPANDED: undefined.set("extra-expanded"),
        ULTRA_EXPANDED: undefined.set("ultra-expanded"),
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        XX_SMALL: undefined.set("xx-small"),
        X_SMALL: undefined.set("x-small"),
        SMALL: undefined.set("small"),
        MEDIUM: undefined.set("medium"),
        LARGE: undefined.set("large"),
        X_LARGE: undefined.set("x-large"),
        XX_LARGE: undefined.set("xx-large"),
        LARGER: undefined.set("larger"),
        SMALLER: undefined.set("smaller"),
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        SERIF: undefined.set("serif"),
        SANS_SERIF: undefined.set("sans-serif"),
        CURSIVE: undefined.set("cursive"),
        FANTASY: undefined.set("fantasy"),
        MONOSPACE: undefined.set("monospace"),
        CAPTION: undefined.set("caption"),
        ICON: undefined.set("icon"),
        MENU: undefined.set("menu"),
        MESSAGE_BOX: undefined.set("message-box"),
        SMALL_CAPTION: undefined.set("small-caption"),
        STATUS_BAR: undefined.set("status-bar")
    };
    var _FontFamily = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ fontFamily: buildProperty(params) });
        },
        SERIF: undefined.set("serif"),
        SANS_SERIF: undefined.set("sans-serif"),
        CURSIVE: undefined.set("cursive"),
        FANTASY: undefined.set("fantasy"),
        MONOSPACE: undefined.set("monospace")
    };
    var _FontFeatureSettings = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ fontFeatureSettings: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        ON: undefined.set("on"),
        OFF: undefined.set("off")
    };
    var _FontKerning = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ fontKerning: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        NORMAL: undefined.set("normal"),
        NONE: undefined.set("none")
    };
    var _FontLanguageOverride = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ fontLanguageOverride: buildProperty(params) });
        },
        NORMAL: undefined.set("normal")
    };
    var _FontOpticalSizing = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ fontOpticalSizing: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        NONE: undefined.set("none")
    };
    var _FontVariationSettings = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ fontVariationSettings: buildProperty(params) });
        },
        NORMAL: undefined.set("normal")
    };
    var _FontSize = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ fontSize: buildProperty(params) });
        },
        XX_SMALL: undefined.set("xx-small"),
        X_SMALL: undefined.set("x-small"),
        SMALL: undefined.set("small"),
        MEDIUM: undefined.set("medium"),
        LARGE: undefined.set("large"),
        X_LARGE: undefined.set("x-large"),
        XX_LARGE: undefined.set("xx-large"),
        LARGER: undefined.set("larger"),
        SMALLER: undefined.set("smaller"),
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _FontSizeAdjust = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ fontSizeAdjust: buildProperty(params) });
        },
        NONE: undefined.set("none")
    };
    var _FontStretch = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ fontStretch: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        ULTRA_CONDENSED: undefined.set("ultra-condensed"),
        EXTRA_CONDENSED: undefined.set("extra-condensed"),
        CONDENSED: undefined.set("condensed"),
        SEMI_CONDENSED: undefined.set("semi-condensed"),
        SEMI_EXPANDED: undefined.set("semi-expanded"),
        EXPANDED: undefined.set("expanded"),
        EXTRA_EXPANDED: undefined.set("extra-expanded"),
        ULTRA_EXPANDED: undefined.set("ultra-expanded"),
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _FontStyle = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ fontStyle: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        ITALIC: undefined.set("italic"),
        OBLIQUE: undefined.set("oblique"),
        deg: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Angle.deg.apply(Angle, nums));
        },
        rad: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Angle.rad.apply(Angle, nums));
        },
        grad: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Angle.grad.apply(Angle, nums));
        },
        turn: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Angle.turn.apply(Angle, nums));
        }
    };
    var _FontSynthesis = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ fontSynthesis: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        WEIGHT: undefined.set("weight"),
        STYLE: undefined.set("style")
    };
    var _FontVariant = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ fontVariant: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        NONE: undefined.set("none"),
        COMMON_LIGATURES: undefined.set("common-ligatures"),
        NO_COMMON_LIGATURES: undefined.set("no-common-ligatures"),
        DISCRETIONARY_LIGATURES: undefined.set("discretionary-ligatures"),
        NO_DISCRETIONARY_LIGATURES: undefined.set("no-discretionary-ligatures"),
        HISTORICAL_LIGATURES: undefined.set("historical-ligatures"),
        NO_HISTORICAL_LIGATURES: undefined.set("no-historical-ligatures"),
        CONTEXTUAL: undefined.set("contextual"),
        NO_CONTEXTUAL: undefined.set("no-contextual"),
        stylistic: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.stylistic.apply(Method, params));
        },
        HISTORICAL_FORMS: undefined.set("historical-forms"),
        styleset: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.styleset.apply(Method, params));
        },
        characterVariant: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.characterVariant.apply(Method, params));
        },
        swash: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.swash.apply(Method, params));
        },
        ornaments: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.ornaments.apply(Method, params));
        },
        annotation: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.annotation.apply(Method, params));
        },
        SMALL_CAPS: undefined.set("small-caps"),
        ALL_SMALL_CAPS: undefined.set("all-small-caps"),
        PETITE_CAPS: undefined.set("petite-caps"),
        ALL_PETITE_CAPS: undefined.set("all-petite-caps"),
        UNICASE: undefined.set("unicase"),
        TITLING_CAPS: undefined.set("titling-caps"),
        LINING_NUMS: undefined.set("lining-nums"),
        OLDSTYLE_NUMS: undefined.set("oldstyle-nums"),
        PROPORTIONAL_NUMS: undefined.set("proportional-nums"),
        TABULAR_NUMS: undefined.set("tabular-nums"),
        DIAGONAL_FRACTIONS: undefined.set("diagonal-fractions"),
        STACKED_FRACTIONS: undefined.set("stacked-fractions"),
        ORDINAL: undefined.set("ordinal"),
        SLASHED_ZERO: undefined.set("slashed-zero"),
        JIS78: undefined.set("jis78"),
        JIS83: undefined.set("jis83"),
        JIS90: undefined.set("jis90"),
        JIS04: undefined.set("jis04"),
        SIMPLIFIED: undefined.set("simplified"),
        TRADITIONAL: undefined.set("traditional"),
        FULL_WIDTH: undefined.set("full-width"),
        PROPORTIONAL_WIDTH: undefined.set("proportional-width"),
        RUBY: undefined.set("ruby")
    };
    var _FontVariantAlternates = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ fontVariantAlternates: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        stylistic: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.stylistic.apply(Method, params));
        },
        HISTORICAL_FORMS: undefined.set("historical-forms"),
        styleset: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.styleset.apply(Method, params));
        },
        characterVariant: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.characterVariant.apply(Method, params));
        },
        swash: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.swash.apply(Method, params));
        },
        ornaments: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.ornaments.apply(Method, params));
        },
        annotation: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.annotation.apply(Method, params));
        }
    };
    var _FontVariantCaps = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ fontVariantCaps: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        SMALL_CAPS: undefined.set("small-caps"),
        ALL_SMALL_CAPS: undefined.set("all-small-caps"),
        PETITE_CAPS: undefined.set("petite-caps"),
        ALL_PETITE_CAPS: undefined.set("all-petite-caps"),
        UNICASE: undefined.set("unicase"),
        TITLING_CAPS: undefined.set("titling-caps")
    };
    var _FontVariantEastAsian = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ fontVariantEastAsian: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        JIS78: undefined.set("jis78"),
        JIS83: undefined.set("jis83"),
        JIS90: undefined.set("jis90"),
        JIS04: undefined.set("jis04"),
        SIMPLIFIED: undefined.set("simplified"),
        TRADITIONAL: undefined.set("traditional"),
        FULL_WIDTH: undefined.set("full-width"),
        PROPORTIONAL_WIDTH: undefined.set("proportional-width"),
        RUBY: undefined.set("ruby")
    };
    var _FontVariantLigatures = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ fontVariantLigatures: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        NONE: undefined.set("none"),
        COMMON_LIGATURES: undefined.set("common-ligatures"),
        NO_COMMON_LIGATURES: undefined.set("no-common-ligatures"),
        DISCRETIONARY_LIGATURES: undefined.set("discretionary-ligatures"),
        NO_DISCRETIONARY_LIGATURES: undefined.set("no-discretionary-ligatures"),
        HISTORICAL_LIGATURES: undefined.set("historical-ligatures"),
        NO_HISTORICAL_LIGATURES: undefined.set("no-historical-ligatures"),
        CONTEXTUAL: undefined.set("contextual"),
        NO_CONTEXTUAL: undefined.set("no-contextual")
    };
    var _FontVariantNumeric = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ fontVariantNumeric: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        LINING_NUMS: undefined.set("lining-nums"),
        OLDSTYLE_NUMS: undefined.set("oldstyle-nums"),
        PROPORTIONAL_NUMS: undefined.set("proportional-nums"),
        TABULAR_NUMS: undefined.set("tabular-nums"),
        DIAGONAL_FRACTIONS: undefined.set("diagonal-fractions"),
        STACKED_FRACTIONS: undefined.set("stacked-fractions"),
        ORDINAL: undefined.set("ordinal"),
        SLASHED_ZERO: undefined.set("slashed-zero")
    };
    var _FontVariantPosition = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ fontVariantPosition: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        SUB: undefined.set("sub"),
        SUPER: undefined.set("super")
    };
    var _FontWeight = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ fontWeight: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        BOLD: undefined.set("bold"),
        BOLDER: undefined.set("bolder"),
        LIGHTER: undefined.set("lighter")
    };
    var _Gap = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ gap: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _Grid = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ grid: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        MIN_CONTENT: undefined.set("min-content"),
        MAX_CONTENT: undefined.set("max-content"),
        AUTO: undefined.set("auto"),
        minmax: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.minmax.apply(Method, params));
        },
        fitContent: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.fitContent.apply(Method, params));
        },
        repeat: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.repeat.apply(Method, params));
        },
        AUTO_FLOW: undefined.set("auto-flow"),
        DENSE: undefined.set("dense")
    };
    var _GridArea = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ gridArea: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        SPAN: undefined.set("span")
    };
    var _GridAutoColumns = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ gridAutoColumns: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        MIN_CONTENT: undefined.set("min-content"),
        MAX_CONTENT: undefined.set("max-content"),
        AUTO: undefined.set("auto"),
        minmax: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.minmax.apply(Method, params));
        },
        fitContent: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.fitContent.apply(Method, params));
        }
    };
    var _GridAutoFlow = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ gridAutoFlow: buildProperty(params) });
        },
        ROW: undefined.set("row"),
        COLUMN: undefined.set("column"),
        DENSE: undefined.set("dense")
    };
    var _GridAutoRows = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ gridAutoRows: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        MIN_CONTENT: undefined.set("min-content"),
        MAX_CONTENT: undefined.set("max-content"),
        AUTO: undefined.set("auto"),
        minmax: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.minmax.apply(Method, params));
        },
        fitContent: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.fitContent.apply(Method, params));
        }
    };
    var _GridColumn = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ gridColumn: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        SPAN: undefined.set("span")
    };
    var _GridColumnEnd = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ gridColumnEnd: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        SPAN: undefined.set("span")
    };
    var _GridColumnGap = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ gridColumnGap: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _GridColumnStart = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ gridColumnStart: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        SPAN: undefined.set("span")
    };
    var _GridGap = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ gridGap: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _GridRow = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ gridRow: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        SPAN: undefined.set("span")
    };
    var _GridRowEnd = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ gridRowEnd: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        SPAN: undefined.set("span")
    };
    var _GridRowGap = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ gridRowGap: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _GridRowStart = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ gridRowStart: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        SPAN: undefined.set("span")
    };
    var _GridTemplate = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ gridTemplate: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        MIN_CONTENT: undefined.set("min-content"),
        MAX_CONTENT: undefined.set("max-content"),
        AUTO: undefined.set("auto"),
        minmax: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.minmax.apply(Method, params));
        },
        fitContent: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.fitContent.apply(Method, params));
        },
        repeat: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.repeat.apply(Method, params));
        }
    };
    var _GridTemplateAreas = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ gridTemplateAreas: buildProperty(params) });
        },
        NONE: undefined.set("none")
    };
    var _GridTemplateColumns = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ gridTemplateColumns: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        MIN_CONTENT: undefined.set("min-content"),
        MAX_CONTENT: undefined.set("max-content"),
        AUTO: undefined.set("auto"),
        minmax: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.minmax.apply(Method, params));
        },
        fitContent: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.fitContent.apply(Method, params));
        },
        repeat: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.repeat.apply(Method, params));
        }
    };
    var _GridTemplateRows = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ gridTemplateRows: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        MIN_CONTENT: undefined.set("min-content"),
        MAX_CONTENT: undefined.set("max-content"),
        AUTO: undefined.set("auto"),
        minmax: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.minmax.apply(Method, params));
        },
        fitContent: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.fitContent.apply(Method, params));
        },
        repeat: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.repeat.apply(Method, params));
        }
    };
    var _HangingPunctuation = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ hangingPunctuation: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        FIRST: undefined.set("first"),
        FORCE_END: undefined.set("force-end"),
        ALLOW_END: undefined.set("allow-end"),
        LAST: undefined.set("last")
    };
    var _Height = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ height: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        BORDER_BOX: undefined.set("border-box"),
        CONTENT_BOX: undefined.set("content-box"),
        AVAILABLE: undefined.set("available"),
        MIN_CONTENT: undefined.set("min-content"),
        MAX_CONTENT: undefined.set("max-content"),
        FIT_CONTENT: undefined.set("fit-content"),
        AUTO: undefined.set("auto")
    };
    var _Hyphens = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ hyphens: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        MANUAL: undefined.set("manual"),
        AUTO: undefined.set("auto")
    };
    var _ImageOrientation = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ imageOrientation: buildProperty(params) });
        },
        FROM_IMAGE: undefined.set("from-image"),
        deg: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Angle.deg.apply(Angle, nums));
        },
        rad: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Angle.rad.apply(Angle, nums));
        },
        grad: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Angle.grad.apply(Angle, nums));
        },
        turn: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Angle.turn.apply(Angle, nums));
        },
        FLIP: undefined.set("flip")
    };
    var _ImageRendering = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ imageRendering: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        CRISP_EDGES: undefined.set("crisp-edges"),
        PIXELATED: undefined.set("pixelated")
    };
    var _ImageResolution = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ imageResolution: buildProperty(params) });
        },
        FROM_IMAGE: undefined.set("from-image"),
        dpi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Resolution.dpi.apply(Resolution, nums));
        },
        dpcm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Resolution.dpcm.apply(Resolution, nums));
        },
        dppx: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Resolution.dppx.apply(Resolution, nums));
        },
        x: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Resolution.x.apply(Resolution, nums));
        },
        SNAP: undefined.set("snap")
    };
    var _ImeMode = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ imeMode: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        NORMAL: undefined.set("normal"),
        ACTIVE: undefined.set("active"),
        INACTIVE: undefined.set("inactive"),
        DISABLED: undefined.set("disabled")
    };
    var _InitialLetter = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ initialLetter: buildProperty(params) });
        },
        NORMAL: undefined.set("normal")
    };
    var _InitialLetterAlign = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ initialLetterAlign: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        ALPHABETIC: undefined.set("alphabetic"),
        HANGING: undefined.set("hanging"),
        IDEOGRAPHIC: undefined.set("ideographic")
    };
    var _InlineSize = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ inlineSize: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        BORDER_BOX: undefined.set("border-box"),
        CONTENT_BOX: undefined.set("content-box"),
        AVAILABLE: undefined.set("available"),
        MIN_CONTENT: undefined.set("min-content"),
        MAX_CONTENT: undefined.set("max-content"),
        FIT_CONTENT: undefined.set("fit-content"),
        AUTO: undefined.set("auto")
    };
    var _InsetBlockEnd = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ insetBlockEnd: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        AUTO: undefined.set("auto")
    };
    var _InsetBlockStart = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ insetBlockStart: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        AUTO: undefined.set("auto")
    };
    var _InsetInlineEnd = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ insetInlineEnd: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        AUTO: undefined.set("auto")
    };
    var _InsetInlineStart = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ insetInlineStart: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        AUTO: undefined.set("auto")
    };
    var _Isolation = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ isolation: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        ISOLATE: undefined.set("isolate")
    };
    var _JustifyContent = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ justifyContent: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        SPACE_BETWEEN: undefined.set("space-between"),
        SPACE_AROUND: undefined.set("space-around"),
        SPACE_EVENLY: undefined.set("space-evenly"),
        STRETCH: undefined.set("stretch"),
        UNSAFE: undefined.set("unsafe"),
        SAFE: undefined.set("safe"),
        CENTER: undefined.set("center"),
        START: undefined.set("start"),
        END: undefined.set("end"),
        FLEX_START: undefined.set("flex-start"),
        FLEX_END: undefined.set("flex-end"),
        LEFT: undefined.set("left"),
        RIGHT: undefined.set("right")
    };
    var _JustifyItems = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ justifyItems: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        STRETCH: undefined.set("stretch"),
        FIRST: undefined.set("first"),
        LAST: undefined.set("last"),
        BASELINE: undefined.set("baseline"),
        UNSAFE: undefined.set("unsafe"),
        SAFE: undefined.set("safe"),
        CENTER: undefined.set("center"),
        START: undefined.set("start"),
        END: undefined.set("end"),
        SELF_START: undefined.set("self-start"),
        SELF_END: undefined.set("self-end"),
        FLEX_START: undefined.set("flex-start"),
        FLEX_END: undefined.set("flex-end"),
        LEFT: undefined.set("left"),
        RIGHT: undefined.set("right"),
        LEGACY: undefined.set("legacy")
    };
    var _JustifySelf = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ justifySelf: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        NORMAL: undefined.set("normal"),
        STRETCH: undefined.set("stretch"),
        FIRST: undefined.set("first"),
        LAST: undefined.set("last"),
        BASELINE: undefined.set("baseline"),
        UNSAFE: undefined.set("unsafe"),
        SAFE: undefined.set("safe"),
        CENTER: undefined.set("center"),
        START: undefined.set("start"),
        END: undefined.set("end"),
        SELF_START: undefined.set("self-start"),
        SELF_END: undefined.set("self-end"),
        FLEX_START: undefined.set("flex-start"),
        FLEX_END: undefined.set("flex-end"),
        LEFT: undefined.set("left"),
        RIGHT: undefined.set("right")
    };
    var _Left = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ left: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        AUTO: undefined.set("auto")
    };
    var _LetterSpacing = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ letterSpacing: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        }
    };
    var _LineBreak = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ lineBreak: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        LOOSE: undefined.set("loose"),
        NORMAL: undefined.set("normal"),
        STRICT: undefined.set("strict")
    };
    var _LineClamp = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ lineClamp: buildProperty(params) });
        },
        NONE: undefined.set("none")
    };
    var _LineHeight = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ lineHeight: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _ListStyle = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ listStyle: buildProperty(params) });
        },
        symbols: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.symbols.apply(Method, params));
        },
        NONE: undefined.set("none"),
        INSIDE: undefined.set("inside"),
        OUTSIDE: undefined.set("outside")
    };
    var _ListStyleImage = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ listStyleImage: buildProperty(params) });
        },
        NONE: undefined.set("none")
    };
    var _ListStylePosition = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ listStylePosition: buildProperty(params) });
        },
        INSIDE: undefined.set("inside"),
        OUTSIDE: undefined.set("outside")
    };
    var _ListStyleType = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ listStyleType: buildProperty(params) });
        },
        symbols: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.symbols.apply(Method, params));
        },
        NONE: undefined.set("none")
    };
    var _Margin = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ margin: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        AUTO: undefined.set("auto")
    };
    var _MarginBlockEnd = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ marginBlockEnd: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        AUTO: undefined.set("auto")
    };
    var _MarginBlockStart = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ marginBlockStart: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        AUTO: undefined.set("auto")
    };
    var _MarginBottom = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ marginBottom: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        AUTO: undefined.set("auto")
    };
    var _MarginInlineEnd = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ marginInlineEnd: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        AUTO: undefined.set("auto")
    };
    var _MarginInlineStart = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ marginInlineStart: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        AUTO: undefined.set("auto")
    };
    var _MarginLeft = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ marginLeft: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        AUTO: undefined.set("auto")
    };
    var _MarginRight = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ marginRight: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        AUTO: undefined.set("auto")
    };
    var _MarginTop = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ marginTop: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        AUTO: undefined.set("auto")
    };
    var _Mask = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ mask: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        image: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.image.apply(Method, params));
        },
        imageSet: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.imageSet.apply(Method, params));
        },
        element: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.element.apply(Method, params));
        },
        crossFade: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.crossFade.apply(Method, params));
        },
        linearGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.linearGradient.apply(Method, params));
        },
        repeatingLinearGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.repeatingLinearGradient.apply(Method, params));
        },
        radialGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.radialGradient.apply(Method, params));
        },
        repeatingRadialGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.repeatingRadialGradient.apply(Method, params));
        },
        AUTO: undefined.set("auto"),
        COVER: undefined.set("cover"),
        CONTAIN: undefined.set("contain"),
        REPEAT_X: undefined.set("repeat-x"),
        REPEAT_Y: undefined.set("repeat-y"),
        REPEAT: undefined.set("repeat"),
        SPACE: undefined.set("space"),
        ROUND: undefined.set("round"),
        NO_REPEAT: undefined.set("no-repeat"),
        BORDER_BOX: undefined.set("border-box"),
        PADDING_BOX: undefined.set("padding-box"),
        CONTENT_BOX: undefined.set("content-box"),
        MARGIN_BOX: undefined.set("margin-box"),
        FILL_BOX: undefined.set("fill-box"),
        STROKE_BOX: undefined.set("stroke-box"),
        VIEW_BOX: undefined.set("view-box"),
        NO_CLIP: undefined.set("no-clip"),
        ADD: undefined.set("add"),
        SUBTRACT: undefined.set("subtract"),
        INTERSECT: undefined.set("intersect"),
        EXCLUDE: undefined.set("exclude"),
        ALPHA: undefined.set("alpha"),
        LUMINANCE: undefined.set("luminance"),
        MATCH_SOURCE: undefined.set("match-source")
    };
    var _MaskBorder = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ maskBorder: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        image: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.image.apply(Method, params));
        },
        imageSet: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.imageSet.apply(Method, params));
        },
        element: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.element.apply(Method, params));
        },
        crossFade: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.crossFade.apply(Method, params));
        },
        linearGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.linearGradient.apply(Method, params));
        },
        repeatingLinearGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.repeatingLinearGradient.apply(Method, params));
        },
        radialGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.radialGradient.apply(Method, params));
        },
        repeatingRadialGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.repeatingRadialGradient.apply(Method, params));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        FILL: undefined.set("fill"),
        AUTO: undefined.set("auto"),
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        STRETCH: undefined.set("stretch"),
        REPEAT: undefined.set("repeat"),
        ROUND: undefined.set("round"),
        SPACE: undefined.set("space"),
        LUMINANCE: undefined.set("luminance"),
        ALPHA: undefined.set("alpha")
    };
    var _MaskBorderMode = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ maskBorderMode: buildProperty(params) });
        },
        LUMINANCE: undefined.set("luminance"),
        ALPHA: undefined.set("alpha")
    };
    var _MaskBorderOutset = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ maskBorderOutset: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        }
    };
    var _MaskBorderRepeat = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ maskBorderRepeat: buildProperty(params) });
        },
        STRETCH: undefined.set("stretch"),
        REPEAT: undefined.set("repeat"),
        ROUND: undefined.set("round"),
        SPACE: undefined.set("space")
    };
    var _MaskBorderSlice = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ maskBorderSlice: buildProperty(params) });
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        FILL: undefined.set("fill")
    };
    var _MaskBorderSource = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ maskBorderSource: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        image: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.image.apply(Method, params));
        },
        imageSet: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.imageSet.apply(Method, params));
        },
        element: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.element.apply(Method, params));
        },
        crossFade: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.crossFade.apply(Method, params));
        },
        linearGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.linearGradient.apply(Method, params));
        },
        repeatingLinearGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.repeatingLinearGradient.apply(Method, params));
        },
        radialGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.radialGradient.apply(Method, params));
        },
        repeatingRadialGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.repeatingRadialGradient.apply(Method, params));
        }
    };
    var _MaskBorderWidth = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ maskBorderWidth: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        AUTO: undefined.set("auto")
    };
    var _MaskClip = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ maskClip: buildProperty(params) });
        },
        BORDER_BOX: undefined.set("border-box"),
        PADDING_BOX: undefined.set("padding-box"),
        CONTENT_BOX: undefined.set("content-box"),
        MARGIN_BOX: undefined.set("margin-box"),
        FILL_BOX: undefined.set("fill-box"),
        STROKE_BOX: undefined.set("stroke-box"),
        VIEW_BOX: undefined.set("view-box"),
        NO_CLIP: undefined.set("no-clip")
    };
    var _MaskComposite = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ maskComposite: buildProperty(params) });
        },
        ADD: undefined.set("add"),
        SUBTRACT: undefined.set("subtract"),
        INTERSECT: undefined.set("intersect"),
        EXCLUDE: undefined.set("exclude")
    };
    var _MaskImage = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ maskImage: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        image: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.image.apply(Method, params));
        },
        imageSet: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.imageSet.apply(Method, params));
        },
        element: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.element.apply(Method, params));
        },
        crossFade: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.crossFade.apply(Method, params));
        },
        linearGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.linearGradient.apply(Method, params));
        },
        repeatingLinearGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.repeatingLinearGradient.apply(Method, params));
        },
        radialGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.radialGradient.apply(Method, params));
        },
        repeatingRadialGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.repeatingRadialGradient.apply(Method, params));
        }
    };
    var _MaskMode = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ maskMode: buildProperty(params) });
        },
        ALPHA: undefined.set("alpha"),
        LUMINANCE: undefined.set("luminance"),
        MATCH_SOURCE: undefined.set("match-source")
    };
    var _MaskOrigin = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ maskOrigin: buildProperty(params) });
        },
        BORDER_BOX: undefined.set("border-box"),
        PADDING_BOX: undefined.set("padding-box"),
        CONTENT_BOX: undefined.set("content-box"),
        MARGIN_BOX: undefined.set("margin-box"),
        FILL_BOX: undefined.set("fill-box"),
        STROKE_BOX: undefined.set("stroke-box"),
        VIEW_BOX: undefined.set("view-box")
    };
    var _MaskPosition = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ maskPosition: buildProperty(params) });
        },
        LEFT: undefined.set("left"),
        CENTER: undefined.set("center"),
        RIGHT: undefined.set("right"),
        TOP: undefined.set("top"),
        BOTTOM: undefined.set("bottom"),
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _MaskRepeat = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ maskRepeat: buildProperty(params) });
        },
        REPEAT_X: undefined.set("repeat-x"),
        REPEAT_Y: undefined.set("repeat-y"),
        REPEAT: undefined.set("repeat"),
        SPACE: undefined.set("space"),
        ROUND: undefined.set("round"),
        NO_REPEAT: undefined.set("no-repeat")
    };
    var _MaskSize = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ maskSize: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        AUTO: undefined.set("auto"),
        COVER: undefined.set("cover"),
        CONTAIN: undefined.set("contain")
    };
    var _MaskType = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ maskType: buildProperty(params) });
        },
        LUMINANCE: undefined.set("luminance"),
        ALPHA: undefined.set("alpha")
    };
    var _MaxBlockSize = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ maxBlockSize: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        NONE: undefined.set("none"),
        MAX_CONTENT: undefined.set("max-content"),
        MIN_CONTENT: undefined.set("min-content"),
        FIT_CONTENT: undefined.set("fit-content"),
        FILL_AVAILABLE: undefined.set("fill-available")
    };
    var _MaxHeight = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ maxHeight: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        NONE: undefined.set("none"),
        MAX_CONTENT: undefined.set("max-content"),
        MIN_CONTENT: undefined.set("min-content"),
        FIT_CONTENT: undefined.set("fit-content"),
        FILL_AVAILABLE: undefined.set("fill-available")
    };
    var _MaxInlineSize = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ maxInlineSize: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        NONE: undefined.set("none"),
        MAX_CONTENT: undefined.set("max-content"),
        MIN_CONTENT: undefined.set("min-content"),
        FIT_CONTENT: undefined.set("fit-content"),
        FILL_AVAILABLE: undefined.set("fill-available")
    };
    var _MaxLines = { set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ maxLines: buildProperty(params) });
        }, NONE: undefined.set("none") };
    var _MaxWidth = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ maxWidth: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        NONE: undefined.set("none"),
        MAX_CONTENT: undefined.set("max-content"),
        MIN_CONTENT: undefined.set("min-content"),
        FIT_CONTENT: undefined.set("fit-content"),
        FILL_AVAILABLE: undefined.set("fill-available")
    };
    var _MinBlockSize = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ minBlockSize: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        AUTO: undefined.set("auto"),
        MAX_CONTENT: undefined.set("max-content"),
        MIN_CONTENT: undefined.set("min-content"),
        FIT_CONTENT: undefined.set("fit-content"),
        FILL_AVAILABLE: undefined.set("fill-available")
    };
    var _MinHeight = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ minHeight: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        AUTO: undefined.set("auto"),
        MAX_CONTENT: undefined.set("max-content"),
        MIN_CONTENT: undefined.set("min-content"),
        FIT_CONTENT: undefined.set("fit-content"),
        FILL_AVAILABLE: undefined.set("fill-available")
    };
    var _MinInlineSize = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ minInlineSize: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        AUTO: undefined.set("auto"),
        MAX_CONTENT: undefined.set("max-content"),
        MIN_CONTENT: undefined.set("min-content"),
        FIT_CONTENT: undefined.set("fit-content"),
        FILL_AVAILABLE: undefined.set("fill-available")
    };
    var _MinWidth = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ minWidth: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        AUTO: undefined.set("auto"),
        MAX_CONTENT: undefined.set("max-content"),
        MIN_CONTENT: undefined.set("min-content"),
        FIT_CONTENT: undefined.set("fit-content"),
        FILL_AVAILABLE: undefined.set("fill-available")
    };
    var _MixBlendMode = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ mixBlendMode: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        MULTIPLY: undefined.set("multiply"),
        SCREEN: undefined.set("screen"),
        OVERLAY: undefined.set("overlay"),
        DARKEN: undefined.set("darken"),
        LIGHTEN: undefined.set("lighten"),
        COLOR_DODGE: undefined.set("color-dodge"),
        COLOR_BURN: undefined.set("color-burn"),
        HARD_LIGHT: undefined.set("hard-light"),
        SOFT_LIGHT: undefined.set("soft-light"),
        DIFFERENCE: undefined.set("difference"),
        EXCLUSION: undefined.set("exclusion"),
        HUE: undefined.set("hue"),
        SATURATION: undefined.set("saturation"),
        COLOR: undefined.set("color"),
        LUMINOSITY: undefined.set("luminosity")
    };
    var _Motion = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ motion: buildProperty(params) });
        },
        inset: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.inset.apply(Method, params));
        },
        circle: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.circle.apply(Method, params));
        },
        ellipse: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.ellipse.apply(Method, params));
        },
        polygon: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.polygon.apply(Method, params));
        },
        BORDER_BOX: undefined.set("border-box"),
        PADDING_BOX: undefined.set("padding-box"),
        CONTENT_BOX: undefined.set("content-box"),
        MARGIN_BOX: undefined.set("margin-box"),
        FILL_BOX: undefined.set("fill-box"),
        STROKE_BOX: undefined.set("stroke-box"),
        VIEW_BOX: undefined.set("view-box"),
        NONE: undefined.set("none"),
        AMP: undefined.set("amp;"),
        AUTO: undefined.set("auto"),
        REVERSE: undefined.set("reverse"),
        deg: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Angle.deg.apply(Angle, nums));
        },
        rad: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Angle.rad.apply(Angle, nums));
        },
        grad: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Angle.grad.apply(Angle, nums));
        },
        turn: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Angle.turn.apply(Angle, nums));
        }
    };
    var _MotionOffset = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ motionOffset: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _MotionPath = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ motionPath: buildProperty(params) });
        },
        inset: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.inset.apply(Method, params));
        },
        circle: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.circle.apply(Method, params));
        },
        ellipse: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.ellipse.apply(Method, params));
        },
        polygon: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.polygon.apply(Method, params));
        },
        BORDER_BOX: undefined.set("border-box"),
        PADDING_BOX: undefined.set("padding-box"),
        CONTENT_BOX: undefined.set("content-box"),
        MARGIN_BOX: undefined.set("margin-box"),
        FILL_BOX: undefined.set("fill-box"),
        STROKE_BOX: undefined.set("stroke-box"),
        VIEW_BOX: undefined.set("view-box"),
        NONE: undefined.set("none")
    };
    var _MotionRotation = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ motionRotation: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        REVERSE: undefined.set("reverse"),
        AMP: undefined.set("amp;"),
        deg: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Angle.deg.apply(Angle, nums));
        },
        rad: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Angle.rad.apply(Angle, nums));
        },
        grad: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Angle.grad.apply(Angle, nums));
        },
        turn: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Angle.turn.apply(Angle, nums));
        }
    };
    var _ObjectFit = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ objectFit: buildProperty(params) });
        },
        FILL: undefined.set("fill"),
        CONTAIN: undefined.set("contain"),
        COVER: undefined.set("cover"),
        NONE: undefined.set("none"),
        SCALE_DOWN: undefined.set("scale-down")
    };
    var _ObjectPosition = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ objectPosition: buildProperty(params) });
        },
        LEFT: undefined.set("left"),
        CENTER: undefined.set("center"),
        RIGHT: undefined.set("right"),
        TOP: undefined.set("top"),
        BOTTOM: undefined.set("bottom"),
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _OffsetPosition = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ offsetPosition: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        LEFT: undefined.set("left"),
        CENTER: undefined.set("center"),
        RIGHT: undefined.set("right"),
        TOP: undefined.set("top"),
        BOTTOM: undefined.set("bottom"),
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _Opacity = { set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ opacity: buildProperty(params) });
        } };
    var _Order = { set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ order: buildProperty(params) });
        } };
    var _Orphans = { set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ orphans: buildProperty(params) });
        } };
    var _Outline = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ outline: buildProperty(params) });
        },
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ outline: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText"),
        INVERT: undefined.set("invert"),
        AUTO: undefined.set("auto"),
        NONE: undefined.set("none"),
        HIDDEN: undefined.set("hidden"),
        DOTTED: undefined.set("dotted"),
        DASHED: undefined.set("dashed"),
        SOLID: undefined.set("solid"),
        DOUBLE: undefined.set("double"),
        GROOVE: undefined.set("groove"),
        RIDGE: undefined.set("ridge"),
        INSET: undefined.set("inset"),
        OUTSET: undefined.set("outset"),
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        THIN: undefined.set("thin"),
        MEDIUM: undefined.set("medium"),
        THICK: undefined.set("thick")
    };
    var _OutlineColor = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ outlineColor: buildProperty(params) });
        },
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ outlineColor: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText"),
        INVERT: undefined.set("invert")
    };
    var _OutlineOffset = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ outlineOffset: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        }
    };
    var _OutlineStyle = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ outlineStyle: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        NONE: undefined.set("none"),
        HIDDEN: undefined.set("hidden"),
        DOTTED: undefined.set("dotted"),
        DASHED: undefined.set("dashed"),
        SOLID: undefined.set("solid"),
        DOUBLE: undefined.set("double"),
        GROOVE: undefined.set("groove"),
        RIDGE: undefined.set("ridge"),
        INSET: undefined.set("inset"),
        OUTSET: undefined.set("outset")
    };
    var _OutlineWidth = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ outlineWidth: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        THIN: undefined.set("thin"),
        MEDIUM: undefined.set("medium"),
        THICK: undefined.set("thick")
    };
    var _Overflow = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ overflow: buildProperty(params) });
        },
        VISIBLE: undefined.set("visible"),
        HIDDEN: undefined.set("hidden"),
        CLIP: undefined.set("clip"),
        SCROLL: undefined.set("scroll"),
        AUTO: undefined.set("auto")
    };
    var _OverflowAnchor = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ overflowAnchor: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        NONE: undefined.set("none")
    };
    var _OverflowBlock = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ overflowBlock: buildProperty(params) });
        },
        VISIBLE: undefined.set("visible"),
        HIDDEN: undefined.set("hidden"),
        CLIP: undefined.set("clip"),
        SCROLL: undefined.set("scroll"),
        AUTO: undefined.set("auto")
    };
    var _OverflowClipBox = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ overflowClipBox: buildProperty(params) });
        },
        PADDING_BOX: undefined.set("padding-box"),
        CONTENT_BOX: undefined.set("content-box")
    };
    var _OverflowInline = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ overflowInline: buildProperty(params) });
        },
        VISIBLE: undefined.set("visible"),
        HIDDEN: undefined.set("hidden"),
        CLIP: undefined.set("clip"),
        SCROLL: undefined.set("scroll"),
        AUTO: undefined.set("auto")
    };
    var _OverflowWrap = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ overflowWrap: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        BREAK_WORD: undefined.set("break-word")
    };
    var _OverflowX = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ overflowX: buildProperty(params) });
        },
        VISIBLE: undefined.set("visible"),
        HIDDEN: undefined.set("hidden"),
        CLIP: undefined.set("clip"),
        SCROLL: undefined.set("scroll"),
        AUTO: undefined.set("auto")
    };
    var _OverflowY = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ overflowY: buildProperty(params) });
        },
        VISIBLE: undefined.set("visible"),
        HIDDEN: undefined.set("hidden"),
        CLIP: undefined.set("clip"),
        SCROLL: undefined.set("scroll"),
        AUTO: undefined.set("auto")
    };
    var _OverscrollBehavior = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ overscrollBehavior: buildProperty(params) });
        },
        CONTAIN: undefined.set("contain"),
        NONE: undefined.set("none"),
        AUTO: undefined.set("auto")
    };
    var _OverscrollBehaviorX = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ overscrollBehaviorX: buildProperty(params) });
        },
        CONTAIN: undefined.set("contain"),
        NONE: undefined.set("none"),
        AUTO: undefined.set("auto")
    };
    var _OverscrollBehaviorY = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ overscrollBehaviorY: buildProperty(params) });
        },
        CONTAIN: undefined.set("contain"),
        NONE: undefined.set("none"),
        AUTO: undefined.set("auto")
    };
    var _Padding = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ padding: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _PaddingBlockEnd = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ paddingBlockEnd: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _PaddingBlockStart = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ paddingBlockStart: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _PaddingBottom = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ paddingBottom: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _PaddingInlineEnd = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ paddingInlineEnd: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _PaddingInlineStart = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ paddingInlineStart: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _PaddingLeft = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ paddingLeft: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _PaddingRight = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ paddingRight: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _PaddingTop = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ paddingTop: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _PageBreakAfter = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ pageBreakAfter: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        ALWAYS: undefined.set("always"),
        AVOID: undefined.set("avoid"),
        LEFT: undefined.set("left"),
        RIGHT: undefined.set("right"),
        RECTO: undefined.set("recto"),
        VERSO: undefined.set("verso")
    };
    var _PageBreakBefore = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ pageBreakBefore: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        ALWAYS: undefined.set("always"),
        AVOID: undefined.set("avoid"),
        LEFT: undefined.set("left"),
        RIGHT: undefined.set("right"),
        RECTO: undefined.set("recto"),
        VERSO: undefined.set("verso")
    };
    var _PageBreakInside = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ pageBreakInside: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        AVOID: undefined.set("avoid")
    };
    var _PaintOrder = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ paintOrder: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        FILL: undefined.set("fill"),
        STROKE: undefined.set("stroke"),
        MARKERS: undefined.set("markers")
    };
    var _Perspective = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ perspective: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        }
    };
    var _PerspectiveOrigin = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ perspectiveOrigin: buildProperty(params) });
        },
        LEFT: undefined.set("left"),
        CENTER: undefined.set("center"),
        RIGHT: undefined.set("right"),
        TOP: undefined.set("top"),
        BOTTOM: undefined.set("bottom"),
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _PlaceContent = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ placeContent: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        FIRST: undefined.set("first"),
        LAST: undefined.set("last"),
        BASELINE: undefined.set("baseline"),
        SPACE_BETWEEN: undefined.set("space-between"),
        SPACE_AROUND: undefined.set("space-around"),
        SPACE_EVENLY: undefined.set("space-evenly"),
        STRETCH: undefined.set("stretch"),
        UNSAFE: undefined.set("unsafe"),
        SAFE: undefined.set("safe"),
        CENTER: undefined.set("center"),
        START: undefined.set("start"),
        END: undefined.set("end"),
        FLEX_START: undefined.set("flex-start"),
        FLEX_END: undefined.set("flex-end"),
        LEFT: undefined.set("left"),
        RIGHT: undefined.set("right")
    };
    var _PlaceItems = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ placeItems: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        STRETCH: undefined.set("stretch"),
        FIRST: undefined.set("first"),
        LAST: undefined.set("last"),
        BASELINE: undefined.set("baseline"),
        UNSAFE: undefined.set("unsafe"),
        SAFE: undefined.set("safe"),
        CENTER: undefined.set("center"),
        START: undefined.set("start"),
        END: undefined.set("end"),
        SELF_START: undefined.set("self-start"),
        SELF_END: undefined.set("self-end"),
        FLEX_START: undefined.set("flex-start"),
        FLEX_END: undefined.set("flex-end"),
        LEFT: undefined.set("left"),
        RIGHT: undefined.set("right"),
        LEGACY: undefined.set("legacy")
    };
    var _PointerEvents = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ pointerEvents: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        NONE: undefined.set("none"),
        VISIBLEPAINTED: undefined.set("visiblePainted"),
        VISIBLEFILL: undefined.set("visibleFill"),
        VISIBLESTROKE: undefined.set("visibleStroke"),
        VISIBLE: undefined.set("visible"),
        PAINTED: undefined.set("painted"),
        FILL: undefined.set("fill"),
        STROKE: undefined.set("stroke"),
        ALL: undefined.set("all"),
        INHERIT: undefined.set("inherit")
    };
    var _Position = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ position: buildProperty(params) });
        },
        STATIC: undefined.set("static"),
        RELATIVE: undefined.set("relative"),
        ABSOLUTE: undefined.set("absolute"),
        STICKY: undefined.set("sticky"),
        FIXED: undefined.set("fixed")
    };
    var _Quotes = { set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ quotes: buildProperty(params) });
        }, NONE: undefined.set("none") };
    var _Resize = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ resize: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        BOTH: undefined.set("both"),
        HORIZONTAL: undefined.set("horizontal"),
        VERTICAL: undefined.set("vertical"),
        BLOCK: undefined.set("block"),
        INLINE: undefined.set("inline")
    };
    var _Right = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ right: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        AUTO: undefined.set("auto")
    };
    var _Rotate = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ rotate: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        X: undefined.set("x"),
        Y: undefined.set("y"),
        Z: undefined.set("z"),
        deg: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Angle.deg.apply(Angle, nums));
        },
        rad: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Angle.rad.apply(Angle, nums));
        },
        grad: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Angle.grad.apply(Angle, nums));
        },
        turn: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Angle.turn.apply(Angle, nums));
        }
    };
    var _RowGap = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ rowGap: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _RubyAlign = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ rubyAlign: buildProperty(params) });
        },
        START: undefined.set("start"),
        CENTER: undefined.set("center"),
        SPACE_BETWEEN: undefined.set("space-between"),
        SPACE_AROUND: undefined.set("space-around")
    };
    var _RubyMerge = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ rubyMerge: buildProperty(params) });
        },
        SEPARATE: undefined.set("separate"),
        COLLAPSE: undefined.set("collapse"),
        AUTO: undefined.set("auto")
    };
    var _RubyPosition = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ rubyPosition: buildProperty(params) });
        },
        OVER: undefined.set("over"),
        UNDER: undefined.set("under"),
        INTER_CHARACTER: undefined.set("inter-character")
    };
    var _Scale = { set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ scale: buildProperty(params) });
        }, NONE: undefined.set("none") };
    var _ScrollBehavior = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ scrollBehavior: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        SMOOTH: undefined.set("smooth")
    };
    var _ScrollSnapCoordinate = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ scrollSnapCoordinate: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        LEFT: undefined.set("left"),
        CENTER: undefined.set("center"),
        RIGHT: undefined.set("right"),
        TOP: undefined.set("top"),
        BOTTOM: undefined.set("bottom"),
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _ScrollSnapDestination = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ scrollSnapDestination: buildProperty(params) });
        },
        LEFT: undefined.set("left"),
        CENTER: undefined.set("center"),
        RIGHT: undefined.set("right"),
        TOP: undefined.set("top"),
        BOTTOM: undefined.set("bottom"),
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _ScrollSnapPointsX = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ scrollSnapPointsX: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        repeat: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.repeat.apply(Method, params));
        }
    };
    var _ScrollSnapPointsY = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ scrollSnapPointsY: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        repeat: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.repeat.apply(Method, params));
        }
    };
    var _ScrollSnapType = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ scrollSnapType: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        MANDATORY: undefined.set("mandatory"),
        PROXIMITY: undefined.set("proximity")
    };
    var _ScrollSnapTypeX = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ scrollSnapTypeX: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        MANDATORY: undefined.set("mandatory"),
        PROXIMITY: undefined.set("proximity")
    };
    var _ScrollSnapTypeY = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ scrollSnapTypeY: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        MANDATORY: undefined.set("mandatory"),
        PROXIMITY: undefined.set("proximity")
    };
    var _ShapeImageThreshold = { set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ shapeImageThreshold: buildProperty(params) });
        } };
    var _ShapeMargin = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ shapeMargin: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _ShapeOutside = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ shapeOutside: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        BORDER_BOX: undefined.set("border-box"),
        PADDING_BOX: undefined.set("padding-box"),
        CONTENT_BOX: undefined.set("content-box"),
        MARGIN_BOX: undefined.set("margin-box"),
        inset: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.inset.apply(Method, params));
        },
        circle: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.circle.apply(Method, params));
        },
        ellipse: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.ellipse.apply(Method, params));
        },
        polygon: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.polygon.apply(Method, params));
        },
        image: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.image.apply(Method, params));
        },
        imageSet: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.imageSet.apply(Method, params));
        },
        element: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.element.apply(Method, params));
        },
        crossFade: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.crossFade.apply(Method, params));
        },
        linearGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.linearGradient.apply(Method, params));
        },
        repeatingLinearGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.repeatingLinearGradient.apply(Method, params));
        },
        radialGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.radialGradient.apply(Method, params));
        },
        repeatingRadialGradient: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.repeatingRadialGradient.apply(Method, params));
        }
    };
    var _TabSize = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ tabSize: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        }
    };
    var _TableLayout = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ tableLayout: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        FIXED: undefined.set("fixed")
    };
    var _TextAlign = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ textAlign: buildProperty(params) });
        },
        START: undefined.set("start"),
        END: undefined.set("end"),
        LEFT: undefined.set("left"),
        RIGHT: undefined.set("right"),
        CENTER: undefined.set("center"),
        JUSTIFY: undefined.set("justify"),
        MATCH_PARENT: undefined.set("match-parent")
    };
    var _TextAlignLast = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ textAlignLast: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        START: undefined.set("start"),
        END: undefined.set("end"),
        LEFT: undefined.set("left"),
        RIGHT: undefined.set("right"),
        CENTER: undefined.set("center"),
        JUSTIFY: undefined.set("justify")
    };
    var _TextCombineUpright = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ textCombineUpright: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        ALL: undefined.set("all"),
        DIGITS: undefined.set("digits")
    };
    var _TextDecoration = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ textDecoration: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        UNDERLINE: undefined.set("underline"),
        OVERLINE: undefined.set("overline"),
        LINE_THROUGH: undefined.set("line-through"),
        BLINK: undefined.set("blink"),
        SOLID: undefined.set("solid"),
        DOUBLE: undefined.set("double"),
        DOTTED: undefined.set("dotted"),
        DASHED: undefined.set("dashed"),
        WAVY: undefined.set("wavy"),
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ textDecoration: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText")
    };
    var _TextDecorationColor = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ textDecorationColor: buildProperty(params) });
        },
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ textDecorationColor: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText")
    };
    var _TextDecorationLine = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ textDecorationLine: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        UNDERLINE: undefined.set("underline"),
        OVERLINE: undefined.set("overline"),
        LINE_THROUGH: undefined.set("line-through"),
        BLINK: undefined.set("blink")
    };
    var _TextDecorationSkip = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ textDecorationSkip: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        OBJECTS: undefined.set("objects"),
        SPACES: undefined.set("spaces"),
        LEADING_SPACES: undefined.set("leading-spaces"),
        TRAILING_SPACES: undefined.set("trailing-spaces"),
        EDGES: undefined.set("edges"),
        BOX_DECORATION: undefined.set("box-decoration")
    };
    var _TextDecorationSkipInk = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ textDecorationSkipInk: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        NONE: undefined.set("none")
    };
    var _TextDecorationStyle = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ textDecorationStyle: buildProperty(params) });
        },
        SOLID: undefined.set("solid"),
        DOUBLE: undefined.set("double"),
        DOTTED: undefined.set("dotted"),
        DASHED: undefined.set("dashed"),
        WAVY: undefined.set("wavy")
    };
    var _TextEmphasis = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ textEmphasis: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        FILLED: undefined.set("filled"),
        OPEN: undefined.set("open"),
        DOT: undefined.set("dot"),
        CIRCLE: undefined.set("circle"),
        DOUBLE_CIRCLE: undefined.set("double-circle"),
        TRIANGLE: undefined.set("triangle"),
        SESAME: undefined.set("sesame"),
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ textEmphasis: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText")
    };
    var _TextEmphasisColor = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ textEmphasisColor: buildProperty(params) });
        },
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ textEmphasisColor: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText")
    };
    var _TextEmphasisPosition = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ textEmphasisPosition: buildProperty(params) });
        },
        OVER: undefined.set("over"),
        UNDER: undefined.set("under"),
        RIGHT: undefined.set("right"),
        LEFT: undefined.set("left")
    };
    var _TextEmphasisStyle = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ textEmphasisStyle: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        FILLED: undefined.set("filled"),
        OPEN: undefined.set("open"),
        DOT: undefined.set("dot"),
        CIRCLE: undefined.set("circle"),
        DOUBLE_CIRCLE: undefined.set("double-circle"),
        TRIANGLE: undefined.set("triangle"),
        SESAME: undefined.set("sesame")
    };
    var _TextIndent = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ textIndent: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        HANGING: undefined.set("hanging"),
        EACH_LINE: undefined.set("each-line")
    };
    var _TextJustify = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ textJustify: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        INTER_CHARACTER: undefined.set("inter-character"),
        INTER_WORD: undefined.set("inter-word"),
        NONE: undefined.set("none")
    };
    var _TextOrientation = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ textOrientation: buildProperty(params) });
        },
        MIXED: undefined.set("mixed"),
        UPRIGHT: undefined.set("upright"),
        SIDEWAYS: undefined.set("sideways")
    };
    var _TextOverflow = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ textOverflow: buildProperty(params) });
        },
        CLIP: undefined.set("clip"),
        ELLIPSIS: undefined.set("ellipsis")
    };
    var _TextRendering = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ textRendering: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        OPTIMIZESPEED: undefined.set("optimizeSpeed"),
        OPTIMIZELEGIBILITY: undefined.set("optimizeLegibility"),
        GEOMETRICPRECISION: undefined.set("geometricPrecision")
    };
    var _TextShadow = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ textShadow: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        rgb: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgb.apply(Method, params));
        },
        hex: function (code) { return ({ textShadow: Method.hex(code) }); },
        hexa: function (code, alpha) { return _this.set(Method.hexa(code, alpha)); },
        rgba: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rgba.apply(Method, params));
        },
        hsl: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsl.apply(Method, params));
        },
        hsla: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.hsla.apply(Method, params));
        },
        BLACK: undefined.set("black"),
        SILVER: undefined.set("silver"),
        GRAY: undefined.set("gray"),
        WHITE: undefined.set("white"),
        MAROON: undefined.set("maroon"),
        RED: undefined.set("red"),
        PURPLE: undefined.set("purple"),
        FUCHSIA: undefined.set("fuchsia"),
        GREEN: undefined.set("green"),
        LIME: undefined.set("lime"),
        OLIVE: undefined.set("olive"),
        YELLOW: undefined.set("yellow"),
        NAVY: undefined.set("navy"),
        BLUE: undefined.set("blue"),
        TEAL: undefined.set("teal"),
        AQUA: undefined.set("aqua"),
        CURRENTCOLOR: undefined.set("currentcolor"),
        ACTIVEBORDER: undefined.set("ActiveBorder"),
        ACTIVECAPTION: undefined.set("ActiveCaption"),
        APPWORKSPACE: undefined.set("AppWorkspace"),
        BACKGROUND: undefined.set("Background"),
        BUTTONFACE: undefined.set("ButtonFace"),
        BUTTONHIGHLIGHT: undefined.set("ButtonHighlight"),
        BUTTONSHADOW: undefined.set("ButtonShadow"),
        BUTTONTEXT: undefined.set("ButtonText"),
        CAPTIONTEXT: undefined.set("CaptionText"),
        GRAYTEXT: undefined.set("GrayText"),
        HIGHLIGHT: undefined.set("Highlight"),
        HIGHLIGHTTEXT: undefined.set("HighlightText"),
        INACTIVEBORDER: undefined.set("InactiveBorder"),
        INACTIVECAPTION: undefined.set("InactiveCaption"),
        INACTIVECAPTIONTEXT: undefined.set("InactiveCaptionText"),
        INFOBACKGROUND: undefined.set("InfoBackground"),
        INFOTEXT: undefined.set("InfoText"),
        MENU: undefined.set("Menu"),
        MENUTEXT: undefined.set("MenuText"),
        SCROLLBAR: undefined.set("Scrollbar"),
        THREEDDARKSHADOW: undefined.set("ThreeDDarkShadow"),
        THREEDFACE: undefined.set("ThreeDFace"),
        THREEDHIGHLIGHT: undefined.set("ThreeDHighlight"),
        THREEDLIGHTSHADOW: undefined.set("ThreeDLightShadow"),
        THREEDSHADOW: undefined.set("ThreeDShadow"),
        WINDOW: undefined.set("Window"),
        WINDOWFRAME: undefined.set("WindowFrame"),
        WINDOWTEXT: undefined.set("WindowText")
    };
    var _TextSizeAdjust = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ textSizeAdjust: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        AUTO: undefined.set("auto"),
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _TextTransform = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ textTransform: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        CAPITALIZE: undefined.set("capitalize"),
        UPPERCASE: undefined.set("uppercase"),
        LOWERCASE: undefined.set("lowercase"),
        FULL_WIDTH: undefined.set("full-width")
    };
    var _TextUnderlinePosition = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ textUnderlinePosition: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        UNDER: undefined.set("under"),
        LEFT: undefined.set("left"),
        RIGHT: undefined.set("right")
    };
    var _Top = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ top: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        AUTO: undefined.set("auto")
    };
    var _TouchAction = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ touchAction: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        NONE: undefined.set("none"),
        PAN_X: undefined.set("pan-x"),
        PAN_LEFT: undefined.set("pan-left"),
        PAN_RIGHT: undefined.set("pan-right"),
        PAN_Y: undefined.set("pan-y"),
        PAN_UP: undefined.set("pan-up"),
        PAN_DOWN: undefined.set("pan-down"),
        PINCH_ZOOM: undefined.set("pinch-zoom"),
        MANIPULATION: undefined.set("manipulation")
    };
    var _Transform = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ transform: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        matrix: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.matrix.apply(Method, params));
        },
        translate: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.translate.apply(Method, params));
        },
        translateX: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.translateX.apply(Method, params));
        },
        translateY: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.translateY.apply(Method, params));
        },
        scale: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.scale.apply(Method, params));
        },
        scaleX: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.scaleX.apply(Method, params));
        },
        scaleY: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.scaleY.apply(Method, params));
        },
        rotate: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rotate.apply(Method, params));
        },
        skew: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.skew.apply(Method, params));
        },
        skewX: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.skewX.apply(Method, params));
        },
        skewY: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.skewY.apply(Method, params));
        },
        matrix3d: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.matrix3d.apply(Method, params));
        },
        translate3d: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.translate3d.apply(Method, params));
        },
        translateZ: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.translateZ.apply(Method, params));
        },
        scale3d: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.scale3d.apply(Method, params));
        },
        scaleZ: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.scaleZ.apply(Method, params));
        },
        rotate3d: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rotate3d.apply(Method, params));
        },
        rotateX: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rotateX.apply(Method, params));
        },
        rotateY: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rotateY.apply(Method, params));
        },
        rotateZ: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.rotateZ.apply(Method, params));
        },
        perspective: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.perspective.apply(Method, params));
        }
    };
    var _TransformBox = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ transformBox: buildProperty(params) });
        },
        BORDER_BOX: undefined.set("border-box"),
        FILL_BOX: undefined.set("fill-box"),
        VIEW_BOX: undefined.set("view-box")
    };
    var _TransformOrigin = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ transformOrigin: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        LEFT: undefined.set("left"),
        CENTER: undefined.set("center"),
        RIGHT: undefined.set("right"),
        TOP: undefined.set("top"),
        BOTTOM: undefined.set("bottom")
    };
    var _TransformStyle = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ transformStyle: buildProperty(params) });
        },
        FLAT: undefined.set("flat"),
        PRESERVE_3D: undefined.set("preserve-3d")
    };
    var _Transition = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ transition: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        MS_ACCELERATOR: undefined.set("-ms-accelerator"),
        MS_BLOCK_PROGRESSION: undefined.set("-ms-block-progression"),
        MS_CONTENT_ZOOM_CHAINING: undefined.set("-ms-content-zoom-chaining"),
        MS_CONTENT_ZOOMING: undefined.set("-ms-content-zooming"),
        MS_CONTENT_ZOOM_LIMIT: undefined.set("-ms-content-zoom-limit"),
        MS_CONTENT_ZOOM_LIMIT_MAX: undefined.set("-ms-content-zoom-limit-max"),
        MS_CONTENT_ZOOM_LIMIT_MIN: undefined.set("-ms-content-zoom-limit-min"),
        MS_CONTENT_ZOOM_SNAP: undefined.set("-ms-content-zoom-snap"),
        MS_CONTENT_ZOOM_SNAP_POINTS: undefined.set("-ms-content-zoom-snap-points"),
        MS_CONTENT_ZOOM_SNAP_TYPE: undefined.set("-ms-content-zoom-snap-type"),
        MS_FILTER: undefined.set("-ms-filter"),
        MS_FLOW_FROM: undefined.set("-ms-flow-from"),
        MS_FLOW_INTO: undefined.set("-ms-flow-into"),
        MS_HIGH_CONTRAST_ADJUST: undefined.set("-ms-high-contrast-adjust"),
        MS_HYPHENATE_LIMIT_CHARS: undefined.set("-ms-hyphenate-limit-chars"),
        MS_HYPHENATE_LIMIT_LINES: undefined.set("-ms-hyphenate-limit-lines"),
        MS_HYPHENATE_LIMIT_ZONE: undefined.set("-ms-hyphenate-limit-zone"),
        MS_IME_ALIGN: undefined.set("-ms-ime-align"),
        MS_OVERFLOW_STYLE: undefined.set("-ms-overflow-style"),
        MS_SCROLLBAR_3DLIGHT_COLOR: undefined.set("-ms-scrollbar-3dlight-color"),
        MS_SCROLLBAR_ARROW_COLOR: undefined.set("-ms-scrollbar-arrow-color"),
        MS_SCROLLBAR_BASE_COLOR: undefined.set("-ms-scrollbar-base-color"),
        MS_SCROLLBAR_DARKSHADOW_COLOR: undefined.set("-ms-scrollbar-darkshadow-color"),
        MS_SCROLLBAR_FACE_COLOR: undefined.set("-ms-scrollbar-face-color"),
        MS_SCROLLBAR_HIGHLIGHT_COLOR: undefined.set("-ms-scrollbar-highlight-color"),
        MS_SCROLLBAR_SHADOW_COLOR: undefined.set("-ms-scrollbar-shadow-color"),
        MS_SCROLLBAR_TRACK_COLOR: undefined.set("-ms-scrollbar-track-color"),
        MS_SCROLL_CHAINING: undefined.set("-ms-scroll-chaining"),
        MS_SCROLL_LIMIT: undefined.set("-ms-scroll-limit"),
        MS_SCROLL_LIMIT_X_MAX: undefined.set("-ms-scroll-limit-x-max"),
        MS_SCROLL_LIMIT_X_MIN: undefined.set("-ms-scroll-limit-x-min"),
        MS_SCROLL_LIMIT_Y_MAX: undefined.set("-ms-scroll-limit-y-max"),
        MS_SCROLL_LIMIT_Y_MIN: undefined.set("-ms-scroll-limit-y-min"),
        MS_SCROLL_RAILS: undefined.set("-ms-scroll-rails"),
        MS_SCROLL_SNAP_POINTS_X: undefined.set("-ms-scroll-snap-points-x"),
        MS_SCROLL_SNAP_POINTS_Y: undefined.set("-ms-scroll-snap-points-y"),
        MS_SCROLL_SNAP_TYPE: undefined.set("-ms-scroll-snap-type"),
        MS_SCROLL_SNAP_X: undefined.set("-ms-scroll-snap-x"),
        MS_SCROLL_SNAP_Y: undefined.set("-ms-scroll-snap-y"),
        MS_SCROLL_TRANSLATION: undefined.set("-ms-scroll-translation"),
        MS_TEXT_AUTOSPACE: undefined.set("-ms-text-autospace"),
        MS_TOUCH_SELECT: undefined.set("-ms-touch-select"),
        MS_USER_SELECT: undefined.set("-ms-user-select"),
        MS_WRAP_FLOW: undefined.set("-ms-wrap-flow"),
        MS_WRAP_MARGIN: undefined.set("-ms-wrap-margin"),
        MS_WRAP_THROUGH: undefined.set("-ms-wrap-through"),
        MOZ_APPEARANCE: undefined.set("-moz-appearance"),
        MOZ_BINDING: undefined.set("-moz-binding"),
        MOZ_BORDER_BOTTOM_COLORS: undefined.set("-moz-border-bottom-colors"),
        MOZ_BORDER_LEFT_COLORS: undefined.set("-moz-border-left-colors"),
        MOZ_BORDER_RIGHT_COLORS: undefined.set("-moz-border-right-colors"),
        MOZ_BORDER_TOP_COLORS: undefined.set("-moz-border-top-colors"),
        MOZ_CONTEXT_PROPERTIES: undefined.set("-moz-context-properties"),
        MOZ_FLOAT_EDGE: undefined.set("-moz-float-edge"),
        MOZ_FORCE_BROKEN_IMAGE_ICON: undefined.set("-moz-force-broken-image-icon"),
        MOZ_IMAGE_REGION: undefined.set("-moz-image-region"),
        MOZ_ORIENT: undefined.set("-moz-orient"),
        MOZ_OUTLINE_RADIUS: undefined.set("-moz-outline-radius"),
        MOZ_OUTLINE_RADIUS_BOTTOMLEFT: undefined.set("-moz-outline-radius-bottomleft"),
        MOZ_OUTLINE_RADIUS_BOTTOMRIGHT: undefined.set("-moz-outline-radius-bottomright"),
        MOZ_OUTLINE_RADIUS_TOPLEFT: undefined.set("-moz-outline-radius-topleft"),
        MOZ_OUTLINE_RADIUS_TOPRIGHT: undefined.set("-moz-outline-radius-topright"),
        MOZ_STACK_SIZING: undefined.set("-moz-stack-sizing"),
        MOZ_TEXT_BLINK: undefined.set("-moz-text-blink"),
        MOZ_USER_FOCUS: undefined.set("-moz-user-focus"),
        MOZ_USER_INPUT: undefined.set("-moz-user-input"),
        MOZ_USER_MODIFY: undefined.set("-moz-user-modify"),
        MOZ_WINDOW_DRAGGING: undefined.set("-moz-window-dragging"),
        MOZ_WINDOW_SHADOW: undefined.set("-moz-window-shadow"),
        WEBKIT_APPEARANCE: undefined.set("-webkit-appearance"),
        WEBKIT_BORDER_BEFORE: undefined.set("-webkit-border-before"),
        WEBKIT_BORDER_BEFORE_COLOR: undefined.set("-webkit-border-before-color"),
        WEBKIT_BORDER_BEFORE_STYLE: undefined.set("-webkit-border-before-style"),
        WEBKIT_BORDER_BEFORE_WIDTH: undefined.set("-webkit-border-before-width"),
        WEBKIT_BOX_REFLECT: undefined.set("-webkit-box-reflect"),
        WEBKIT_MASK: undefined.set("-webkit-mask"),
        WEBKIT_MASK_ATTACHMENT: undefined.set("-webkit-mask-attachment"),
        WEBKIT_MASK_CLIP: undefined.set("-webkit-mask-clip"),
        WEBKIT_MASK_COMPOSITE: undefined.set("-webkit-mask-composite"),
        WEBKIT_MASK_IMAGE: undefined.set("-webkit-mask-image"),
        WEBKIT_MASK_ORIGIN: undefined.set("-webkit-mask-origin"),
        WEBKIT_MASK_POSITION: undefined.set("-webkit-mask-position"),
        WEBKIT_MASK_POSITION_X: undefined.set("-webkit-mask-position-x"),
        WEBKIT_MASK_POSITION_Y: undefined.set("-webkit-mask-position-y"),
        WEBKIT_MASK_REPEAT: undefined.set("-webkit-mask-repeat"),
        WEBKIT_MASK_REPEAT_X: undefined.set("-webkit-mask-repeat-x"),
        WEBKIT_MASK_REPEAT_Y: undefined.set("-webkit-mask-repeat-y"),
        WEBKIT_MASK_SIZE: undefined.set("-webkit-mask-size"),
        WEBKIT_OVERFLOW_SCROLLING: undefined.set("-webkit-overflow-scrolling"),
        WEBKIT_TAP_HIGHLIGHT_COLOR: undefined.set("-webkit-tap-highlight-color"),
        WEBKIT_TEXT_FILL_COLOR: undefined.set("-webkit-text-fill-color"),
        WEBKIT_TEXT_STROKE: undefined.set("-webkit-text-stroke"),
        WEBKIT_TEXT_STROKE_COLOR: undefined.set("-webkit-text-stroke-color"),
        WEBKIT_TEXT_STROKE_WIDTH: undefined.set("-webkit-text-stroke-width"),
        WEBKIT_TOUCH_CALLOUT: undefined.set("-webkit-touch-callout"),
        WEBKIT_USER_MODIFY: undefined.set("-webkit-user-modify"),
        ALIGN_CONTENT: undefined.set("align-content"),
        ALIGN_ITEMS: undefined.set("align-items"),
        ALIGN_SELF: undefined.set("align-self"),
        ALL: undefined.set("all"),
        ANIMATION: undefined.set("animation"),
        ANIMATION_DELAY: undefined.set("animation-delay"),
        ANIMATION_DIRECTION: undefined.set("animation-direction"),
        ANIMATION_DURATION: undefined.set("animation-duration"),
        ANIMATION_FILL_MODE: undefined.set("animation-fill-mode"),
        ANIMATION_ITERATION_COUNT: undefined.set("animation-iteration-count"),
        ANIMATION_NAME: undefined.set("animation-name"),
        ANIMATION_PLAY_STATE: undefined.set("animation-play-state"),
        ANIMATION_TIMING_FUNCTION: undefined.set("animation-timing-function"),
        APPEARANCE: undefined.set("appearance"),
        AZIMUTH: undefined.set("azimuth"),
        BACKDROP_FILTER: undefined.set("backdrop-filter"),
        BACKFACE_VISIBILITY: undefined.set("backface-visibility"),
        BACKGROUND: undefined.set("background"),
        BACKGROUND_ATTACHMENT: undefined.set("background-attachment"),
        BACKGROUND_BLEND_MODE: undefined.set("background-blend-mode"),
        BACKGROUND_CLIP: undefined.set("background-clip"),
        BACKGROUND_COLOR: undefined.set("background-color"),
        BACKGROUND_IMAGE: undefined.set("background-image"),
        BACKGROUND_ORIGIN: undefined.set("background-origin"),
        BACKGROUND_POSITION: undefined.set("background-position"),
        BACKGROUND_POSITION_X: undefined.set("background-position-x"),
        BACKGROUND_POSITION_Y: undefined.set("background-position-y"),
        BACKGROUND_REPEAT: undefined.set("background-repeat"),
        BACKGROUND_SIZE: undefined.set("background-size"),
        BLOCK_OVERFLOW: undefined.set("block-overflow"),
        BLOCK_SIZE: undefined.set("block-size"),
        BORDER: undefined.set("border"),
        BORDER_BLOCK_END: undefined.set("border-block-end"),
        BORDER_BLOCK_END_COLOR: undefined.set("border-block-end-color"),
        BORDER_BLOCK_END_STYLE: undefined.set("border-block-end-style"),
        BORDER_BLOCK_END_WIDTH: undefined.set("border-block-end-width"),
        BORDER_BLOCK_START: undefined.set("border-block-start"),
        BORDER_BLOCK_START_COLOR: undefined.set("border-block-start-color"),
        BORDER_BLOCK_START_STYLE: undefined.set("border-block-start-style"),
        BORDER_BLOCK_START_WIDTH: undefined.set("border-block-start-width"),
        BORDER_BOTTOM: undefined.set("border-bottom"),
        BORDER_BOTTOM_COLOR: undefined.set("border-bottom-color"),
        BORDER_BOTTOM_LEFT_RADIUS: undefined.set("border-bottom-left-radius"),
        BORDER_BOTTOM_RIGHT_RADIUS: undefined.set("border-bottom-right-radius"),
        BORDER_BOTTOM_STYLE: undefined.set("border-bottom-style"),
        BORDER_BOTTOM_WIDTH: undefined.set("border-bottom-width"),
        BORDER_COLLAPSE: undefined.set("border-collapse"),
        BORDER_COLOR: undefined.set("border-color"),
        BORDER_IMAGE: undefined.set("border-image"),
        BORDER_IMAGE_OUTSET: undefined.set("border-image-outset"),
        BORDER_IMAGE_REPEAT: undefined.set("border-image-repeat"),
        BORDER_IMAGE_SLICE: undefined.set("border-image-slice"),
        BORDER_IMAGE_SOURCE: undefined.set("border-image-source"),
        BORDER_IMAGE_WIDTH: undefined.set("border-image-width"),
        BORDER_INLINE_END: undefined.set("border-inline-end"),
        BORDER_INLINE_END_COLOR: undefined.set("border-inline-end-color"),
        BORDER_INLINE_END_STYLE: undefined.set("border-inline-end-style"),
        BORDER_INLINE_END_WIDTH: undefined.set("border-inline-end-width"),
        BORDER_INLINE_START: undefined.set("border-inline-start"),
        BORDER_INLINE_START_COLOR: undefined.set("border-inline-start-color"),
        BORDER_INLINE_START_STYLE: undefined.set("border-inline-start-style"),
        BORDER_INLINE_START_WIDTH: undefined.set("border-inline-start-width"),
        BORDER_LEFT: undefined.set("border-left"),
        BORDER_LEFT_COLOR: undefined.set("border-left-color"),
        BORDER_LEFT_STYLE: undefined.set("border-left-style"),
        BORDER_LEFT_WIDTH: undefined.set("border-left-width"),
        BORDER_RADIUS: undefined.set("border-radius"),
        BORDER_RIGHT: undefined.set("border-right"),
        BORDER_RIGHT_COLOR: undefined.set("border-right-color"),
        BORDER_RIGHT_STYLE: undefined.set("border-right-style"),
        BORDER_RIGHT_WIDTH: undefined.set("border-right-width"),
        BORDER_SPACING: undefined.set("border-spacing"),
        BORDER_STYLE: undefined.set("border-style"),
        BORDER_TOP: undefined.set("border-top"),
        BORDER_TOP_COLOR: undefined.set("border-top-color"),
        BORDER_TOP_LEFT_RADIUS: undefined.set("border-top-left-radius"),
        BORDER_TOP_RIGHT_RADIUS: undefined.set("border-top-right-radius"),
        BORDER_TOP_STYLE: undefined.set("border-top-style"),
        BORDER_TOP_WIDTH: undefined.set("border-top-width"),
        BORDER_WIDTH: undefined.set("border-width"),
        BOTTOM: undefined.set("bottom"),
        BOX_ALIGN: undefined.set("box-align"),
        BOX_DECORATION_BREAK: undefined.set("box-decoration-break"),
        BOX_DIRECTION: undefined.set("box-direction"),
        BOX_FLEX: undefined.set("box-flex"),
        BOX_FLEX_GROUP: undefined.set("box-flex-group"),
        BOX_LINES: undefined.set("box-lines"),
        BOX_ORDINAL_GROUP: undefined.set("box-ordinal-group"),
        BOX_ORIENT: undefined.set("box-orient"),
        BOX_PACK: undefined.set("box-pack"),
        BOX_SHADOW: undefined.set("box-shadow"),
        BOX_SIZING: undefined.set("box-sizing"),
        BREAK_AFTER: undefined.set("break-after"),
        BREAK_BEFORE: undefined.set("break-before"),
        BREAK_INSIDE: undefined.set("break-inside"),
        CAPTION_SIDE: undefined.set("caption-side"),
        CARET_COLOR: undefined.set("caret-color"),
        CLEAR: undefined.set("clear"),
        CLIP: undefined.set("clip"),
        CLIP_PATH: undefined.set("clip-path"),
        COLOR: undefined.set("color"),
        COLOR_ADJUST: undefined.set("color-adjust"),
        COLUMN_COUNT: undefined.set("column-count"),
        COLUMN_FILL: undefined.set("column-fill"),
        COLUMN_GAP: undefined.set("column-gap"),
        COLUMN_RULE: undefined.set("column-rule"),
        COLUMN_RULE_COLOR: undefined.set("column-rule-color"),
        COLUMN_RULE_STYLE: undefined.set("column-rule-style"),
        COLUMN_RULE_WIDTH: undefined.set("column-rule-width"),
        COLUMN_SPAN: undefined.set("column-span"),
        COLUMN_WIDTH: undefined.set("column-width"),
        COLUMNS: undefined.set("columns"),
        CONTAIN: undefined.set("contain"),
        CONTENT: undefined.set("content"),
        COUNTER_INCREMENT: undefined.set("counter-increment"),
        COUNTER_RESET: undefined.set("counter-reset"),
        CURSOR: undefined.set("cursor"),
        DIRECTION: undefined.set("direction"),
        DISPLAY: undefined.set("display"),
        EMPTY_CELLS: undefined.set("empty-cells"),
        FILTER: undefined.set("filter"),
        FLEX: undefined.set("flex"),
        FLEX_BASIS: undefined.set("flex-basis"),
        FLEX_DIRECTION: undefined.set("flex-direction"),
        FLEX_FLOW: undefined.set("flex-flow"),
        FLEX_GROW: undefined.set("flex-grow"),
        FLEX_SHRINK: undefined.set("flex-shrink"),
        FLEX_WRAP: undefined.set("flex-wrap"),
        FLOAT: undefined.set("float"),
        FONT: undefined.set("font"),
        FONT_FAMILY: undefined.set("font-family"),
        FONT_FEATURE_SETTINGS: undefined.set("font-feature-settings"),
        FONT_KERNING: undefined.set("font-kerning"),
        FONT_LANGUAGE_OVERRIDE: undefined.set("font-language-override"),
        FONT_OPTICAL_SIZING: undefined.set("font-optical-sizing"),
        FONT_VARIATION_SETTINGS: undefined.set("font-variation-settings"),
        FONT_SIZE: undefined.set("font-size"),
        FONT_SIZE_ADJUST: undefined.set("font-size-adjust"),
        FONT_STRETCH: undefined.set("font-stretch"),
        FONT_STYLE: undefined.set("font-style"),
        FONT_SYNTHESIS: undefined.set("font-synthesis"),
        FONT_VARIANT: undefined.set("font-variant"),
        FONT_VARIANT_ALTERNATES: undefined.set("font-variant-alternates"),
        FONT_VARIANT_CAPS: undefined.set("font-variant-caps"),
        FONT_VARIANT_EAST_ASIAN: undefined.set("font-variant-east-asian"),
        FONT_VARIANT_LIGATURES: undefined.set("font-variant-ligatures"),
        FONT_VARIANT_NUMERIC: undefined.set("font-variant-numeric"),
        FONT_VARIANT_POSITION: undefined.set("font-variant-position"),
        FONT_WEIGHT: undefined.set("font-weight"),
        GAP: undefined.set("gap"),
        GRID: undefined.set("grid"),
        GRID_AREA: undefined.set("grid-area"),
        GRID_AUTO_COLUMNS: undefined.set("grid-auto-columns"),
        GRID_AUTO_FLOW: undefined.set("grid-auto-flow"),
        GRID_AUTO_ROWS: undefined.set("grid-auto-rows"),
        GRID_COLUMN: undefined.set("grid-column"),
        GRID_COLUMN_END: undefined.set("grid-column-end"),
        GRID_COLUMN_GAP: undefined.set("grid-column-gap"),
        GRID_COLUMN_START: undefined.set("grid-column-start"),
        GRID_GAP: undefined.set("grid-gap"),
        GRID_ROW: undefined.set("grid-row"),
        GRID_ROW_END: undefined.set("grid-row-end"),
        GRID_ROW_GAP: undefined.set("grid-row-gap"),
        GRID_ROW_START: undefined.set("grid-row-start"),
        GRID_TEMPLATE: undefined.set("grid-template"),
        GRID_TEMPLATE_AREAS: undefined.set("grid-template-areas"),
        GRID_TEMPLATE_COLUMNS: undefined.set("grid-template-columns"),
        GRID_TEMPLATE_ROWS: undefined.set("grid-template-rows"),
        HANGING_PUNCTUATION: undefined.set("hanging-punctuation"),
        HEIGHT: undefined.set("height"),
        HYPHENS: undefined.set("hyphens"),
        IMAGE_ORIENTATION: undefined.set("image-orientation"),
        IMAGE_RENDERING: undefined.set("image-rendering"),
        IMAGE_RESOLUTION: undefined.set("image-resolution"),
        IME_MODE: undefined.set("ime-mode"),
        INITIAL_LETTER: undefined.set("initial-letter"),
        INITIAL_LETTER_ALIGN: undefined.set("initial-letter-align"),
        INLINE_SIZE: undefined.set("inline-size"),
        INSET_BLOCK_END: undefined.set("inset-block-end"),
        INSET_BLOCK_START: undefined.set("inset-block-start"),
        INSET_INLINE_END: undefined.set("inset-inline-end"),
        INSET_INLINE_START: undefined.set("inset-inline-start"),
        ISOLATION: undefined.set("isolation"),
        JUSTIFY_CONTENT: undefined.set("justify-content"),
        JUSTIFY_ITEMS: undefined.set("justify-items"),
        JUSTIFY_SELF: undefined.set("justify-self"),
        LEFT: undefined.set("left"),
        LETTER_SPACING: undefined.set("letter-spacing"),
        LINE_BREAK: undefined.set("line-break"),
        LINE_CLAMP: undefined.set("line-clamp"),
        LINE_HEIGHT: undefined.set("line-height"),
        LIST_STYLE: undefined.set("list-style"),
        LIST_STYLE_IMAGE: undefined.set("list-style-image"),
        LIST_STYLE_POSITION: undefined.set("list-style-position"),
        LIST_STYLE_TYPE: undefined.set("list-style-type"),
        MARGIN: undefined.set("margin"),
        MARGIN_BLOCK_END: undefined.set("margin-block-end"),
        MARGIN_BLOCK_START: undefined.set("margin-block-start"),
        MARGIN_BOTTOM: undefined.set("margin-bottom"),
        MARGIN_INLINE_END: undefined.set("margin-inline-end"),
        MARGIN_INLINE_START: undefined.set("margin-inline-start"),
        MARGIN_LEFT: undefined.set("margin-left"),
        MARGIN_RIGHT: undefined.set("margin-right"),
        MARGIN_TOP: undefined.set("margin-top"),
        MASK: undefined.set("mask"),
        MASK_BORDER: undefined.set("mask-border"),
        MASK_BORDER_MODE: undefined.set("mask-border-mode"),
        MASK_BORDER_OUTSET: undefined.set("mask-border-outset"),
        MASK_BORDER_REPEAT: undefined.set("mask-border-repeat"),
        MASK_BORDER_SLICE: undefined.set("mask-border-slice"),
        MASK_BORDER_SOURCE: undefined.set("mask-border-source"),
        MASK_BORDER_WIDTH: undefined.set("mask-border-width"),
        MASK_CLIP: undefined.set("mask-clip"),
        MASK_COMPOSITE: undefined.set("mask-composite"),
        MASK_IMAGE: undefined.set("mask-image"),
        MASK_MODE: undefined.set("mask-mode"),
        MASK_ORIGIN: undefined.set("mask-origin"),
        MASK_POSITION: undefined.set("mask-position"),
        MASK_REPEAT: undefined.set("mask-repeat"),
        MASK_SIZE: undefined.set("mask-size"),
        MASK_TYPE: undefined.set("mask-type"),
        MAX_BLOCK_SIZE: undefined.set("max-block-size"),
        MAX_HEIGHT: undefined.set("max-height"),
        MAX_INLINE_SIZE: undefined.set("max-inline-size"),
        MAX_LINES: undefined.set("max-lines"),
        MAX_WIDTH: undefined.set("max-width"),
        MIN_BLOCK_SIZE: undefined.set("min-block-size"),
        MIN_HEIGHT: undefined.set("min-height"),
        MIN_INLINE_SIZE: undefined.set("min-inline-size"),
        MIN_WIDTH: undefined.set("min-width"),
        MIX_BLEND_MODE: undefined.set("mix-blend-mode"),
        MOTION: undefined.set("motion"),
        MOTION_OFFSET: undefined.set("motion-offset"),
        MOTION_PATH: undefined.set("motion-path"),
        MOTION_ROTATION: undefined.set("motion-rotation"),
        OBJECT_FIT: undefined.set("object-fit"),
        OBJECT_POSITION: undefined.set("object-position"),
        OFFSET_POSITION: undefined.set("offset-position"),
        OPACITY: undefined.set("opacity"),
        ORDER: undefined.set("order"),
        ORPHANS: undefined.set("orphans"),
        OUTLINE: undefined.set("outline"),
        OUTLINE_COLOR: undefined.set("outline-color"),
        OUTLINE_OFFSET: undefined.set("outline-offset"),
        OUTLINE_STYLE: undefined.set("outline-style"),
        OUTLINE_WIDTH: undefined.set("outline-width"),
        OVERFLOW: undefined.set("overflow"),
        OVERFLOW_ANCHOR: undefined.set("overflow-anchor"),
        OVERFLOW_BLOCK: undefined.set("overflow-block"),
        OVERFLOW_CLIP_BOX: undefined.set("overflow-clip-box"),
        OVERFLOW_INLINE: undefined.set("overflow-inline"),
        OVERFLOW_WRAP: undefined.set("overflow-wrap"),
        OVERFLOW_X: undefined.set("overflow-x"),
        OVERFLOW_Y: undefined.set("overflow-y"),
        OVERSCROLL_BEHAVIOR: undefined.set("overscroll-behavior"),
        OVERSCROLL_BEHAVIOR_X: undefined.set("overscroll-behavior-x"),
        OVERSCROLL_BEHAVIOR_Y: undefined.set("overscroll-behavior-y"),
        PADDING: undefined.set("padding"),
        PADDING_BLOCK_END: undefined.set("padding-block-end"),
        PADDING_BLOCK_START: undefined.set("padding-block-start"),
        PADDING_BOTTOM: undefined.set("padding-bottom"),
        PADDING_INLINE_END: undefined.set("padding-inline-end"),
        PADDING_INLINE_START: undefined.set("padding-inline-start"),
        PADDING_LEFT: undefined.set("padding-left"),
        PADDING_RIGHT: undefined.set("padding-right"),
        PADDING_TOP: undefined.set("padding-top"),
        PAGE_BREAK_AFTER: undefined.set("page-break-after"),
        PAGE_BREAK_BEFORE: undefined.set("page-break-before"),
        PAGE_BREAK_INSIDE: undefined.set("page-break-inside"),
        PAINT_ORDER: undefined.set("paint-order"),
        PERSPECTIVE: undefined.set("perspective"),
        PERSPECTIVE_ORIGIN: undefined.set("perspective-origin"),
        PLACE_CONTENT: undefined.set("place-content"),
        PLACE_ITEMS: undefined.set("place-items"),
        POINTER_EVENTS: undefined.set("pointer-events"),
        POSITION: undefined.set("position"),
        QUOTES: undefined.set("quotes"),
        RESIZE: undefined.set("resize"),
        RIGHT: undefined.set("right"),
        ROTATE: undefined.set("rotate"),
        ROW_GAP: undefined.set("row-gap"),
        RUBY_ALIGN: undefined.set("ruby-align"),
        RUBY_MERGE: undefined.set("ruby-merge"),
        RUBY_POSITION: undefined.set("ruby-position"),
        SCALE: undefined.set("scale"),
        SCROLL_BEHAVIOR: undefined.set("scroll-behavior"),
        SCROLL_SNAP_COORDINATE: undefined.set("scroll-snap-coordinate"),
        SCROLL_SNAP_DESTINATION: undefined.set("scroll-snap-destination"),
        SCROLL_SNAP_POINTS_X: undefined.set("scroll-snap-points-x"),
        SCROLL_SNAP_POINTS_Y: undefined.set("scroll-snap-points-y"),
        SCROLL_SNAP_TYPE: undefined.set("scroll-snap-type"),
        SCROLL_SNAP_TYPE_X: undefined.set("scroll-snap-type-x"),
        SCROLL_SNAP_TYPE_Y: undefined.set("scroll-snap-type-y"),
        SHAPE_IMAGE_THRESHOLD: undefined.set("shape-image-threshold"),
        SHAPE_MARGIN: undefined.set("shape-margin"),
        SHAPE_OUTSIDE: undefined.set("shape-outside"),
        TAB_SIZE: undefined.set("tab-size"),
        TABLE_LAYOUT: undefined.set("table-layout"),
        TEXT_ALIGN: undefined.set("text-align"),
        TEXT_ALIGN_LAST: undefined.set("text-align-last"),
        TEXT_COMBINE_UPRIGHT: undefined.set("text-combine-upright"),
        TEXT_DECORATION: undefined.set("text-decoration"),
        TEXT_DECORATION_COLOR: undefined.set("text-decoration-color"),
        TEXT_DECORATION_LINE: undefined.set("text-decoration-line"),
        TEXT_DECORATION_SKIP: undefined.set("text-decoration-skip"),
        TEXT_DECORATION_SKIP_INK: undefined.set("text-decoration-skip-ink"),
        TEXT_DECORATION_STYLE: undefined.set("text-decoration-style"),
        TEXT_EMPHASIS: undefined.set("text-emphasis"),
        TEXT_EMPHASIS_COLOR: undefined.set("text-emphasis-color"),
        TEXT_EMPHASIS_POSITION: undefined.set("text-emphasis-position"),
        TEXT_EMPHASIS_STYLE: undefined.set("text-emphasis-style"),
        TEXT_INDENT: undefined.set("text-indent"),
        TEXT_JUSTIFY: undefined.set("text-justify"),
        TEXT_ORIENTATION: undefined.set("text-orientation"),
        TEXT_OVERFLOW: undefined.set("text-overflow"),
        TEXT_RENDERING: undefined.set("text-rendering"),
        TEXT_SHADOW: undefined.set("text-shadow"),
        TEXT_SIZE_ADJUST: undefined.set("text-size-adjust"),
        TEXT_TRANSFORM: undefined.set("text-transform"),
        TEXT_UNDERLINE_POSITION: undefined.set("text-underline-position"),
        TOP: undefined.set("top"),
        TOUCH_ACTION: undefined.set("touch-action"),
        TRANSFORM: undefined.set("transform"),
        TRANSFORM_BOX: undefined.set("transform-box"),
        TRANSFORM_ORIGIN: undefined.set("transform-origin"),
        TRANSFORM_STYLE: undefined.set("transform-style"),
        TRANSITION: undefined.set("transition"),
        TRANSITION_DELAY: undefined.set("transition-delay"),
        TRANSITION_DURATION: undefined.set("transition-duration"),
        TRANSITION_PROPERTY: undefined.set("transition-property"),
        TRANSITION_TIMING_FUNCTION: undefined.set("transition-timing-function"),
        TRANSLATE: undefined.set("translate"),
        UNICODE_BIDI: undefined.set("unicode-bidi"),
        USER_SELECT: undefined.set("user-select"),
        VERTICAL_ALIGN: undefined.set("vertical-align"),
        VISIBILITY: undefined.set("visibility"),
        WHITE_SPACE: undefined.set("white-space"),
        WIDOWS: undefined.set("widows"),
        WIDTH: undefined.set("width"),
        WILL_CHANGE: undefined.set("will-change"),
        WORD_BREAK: undefined.set("word-break"),
        WORD_SPACING: undefined.set("word-spacing"),
        WORD_WRAP: undefined.set("word-wrap"),
        WRITING_MODE: undefined.set("writing-mode"),
        Z_INDEX: undefined.set("z-index"),
        ZOOM: undefined.set("zoom"),
        s: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Time.s.apply(Time, nums));
        },
        ms: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Time.ms.apply(Time, nums));
        },
        LINEAR: undefined.set("linear"),
        EASE: undefined.set("ease"),
        EASE_IN: undefined.set("ease-in"),
        EASE_OUT: undefined.set("ease-out"),
        EASE_IN_OUT: undefined.set("ease-in-out"),
        cubicBezier: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.cubicBezier.apply(Method, params));
        },
        STEP_START: undefined.set("step-start"),
        STEP_END: undefined.set("step-end"),
        steps: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.steps.apply(Method, params));
        },
        frames: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.frames.apply(Method, params));
        }
    };
    var _TransitionDelay = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ transitionDelay: buildProperty(params) });
        },
        s: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Time.s.apply(Time, nums));
        },
        ms: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Time.ms.apply(Time, nums));
        }
    };
    var _TransitionDuration = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ transitionDuration: buildProperty(params) });
        },
        s: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Time.s.apply(Time, nums));
        },
        ms: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Time.ms.apply(Time, nums));
        }
    };
    var _TransitionProperty = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ transitionProperty: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        MS_ACCELERATOR: undefined.set("-ms-accelerator"),
        MS_BLOCK_PROGRESSION: undefined.set("-ms-block-progression"),
        MS_CONTENT_ZOOM_CHAINING: undefined.set("-ms-content-zoom-chaining"),
        MS_CONTENT_ZOOMING: undefined.set("-ms-content-zooming"),
        MS_CONTENT_ZOOM_LIMIT: undefined.set("-ms-content-zoom-limit"),
        MS_CONTENT_ZOOM_LIMIT_MAX: undefined.set("-ms-content-zoom-limit-max"),
        MS_CONTENT_ZOOM_LIMIT_MIN: undefined.set("-ms-content-zoom-limit-min"),
        MS_CONTENT_ZOOM_SNAP: undefined.set("-ms-content-zoom-snap"),
        MS_CONTENT_ZOOM_SNAP_POINTS: undefined.set("-ms-content-zoom-snap-points"),
        MS_CONTENT_ZOOM_SNAP_TYPE: undefined.set("-ms-content-zoom-snap-type"),
        MS_FILTER: undefined.set("-ms-filter"),
        MS_FLOW_FROM: undefined.set("-ms-flow-from"),
        MS_FLOW_INTO: undefined.set("-ms-flow-into"),
        MS_HIGH_CONTRAST_ADJUST: undefined.set("-ms-high-contrast-adjust"),
        MS_HYPHENATE_LIMIT_CHARS: undefined.set("-ms-hyphenate-limit-chars"),
        MS_HYPHENATE_LIMIT_LINES: undefined.set("-ms-hyphenate-limit-lines"),
        MS_HYPHENATE_LIMIT_ZONE: undefined.set("-ms-hyphenate-limit-zone"),
        MS_IME_ALIGN: undefined.set("-ms-ime-align"),
        MS_OVERFLOW_STYLE: undefined.set("-ms-overflow-style"),
        MS_SCROLLBAR_3DLIGHT_COLOR: undefined.set("-ms-scrollbar-3dlight-color"),
        MS_SCROLLBAR_ARROW_COLOR: undefined.set("-ms-scrollbar-arrow-color"),
        MS_SCROLLBAR_BASE_COLOR: undefined.set("-ms-scrollbar-base-color"),
        MS_SCROLLBAR_DARKSHADOW_COLOR: undefined.set("-ms-scrollbar-darkshadow-color"),
        MS_SCROLLBAR_FACE_COLOR: undefined.set("-ms-scrollbar-face-color"),
        MS_SCROLLBAR_HIGHLIGHT_COLOR: undefined.set("-ms-scrollbar-highlight-color"),
        MS_SCROLLBAR_SHADOW_COLOR: undefined.set("-ms-scrollbar-shadow-color"),
        MS_SCROLLBAR_TRACK_COLOR: undefined.set("-ms-scrollbar-track-color"),
        MS_SCROLL_CHAINING: undefined.set("-ms-scroll-chaining"),
        MS_SCROLL_LIMIT: undefined.set("-ms-scroll-limit"),
        MS_SCROLL_LIMIT_X_MAX: undefined.set("-ms-scroll-limit-x-max"),
        MS_SCROLL_LIMIT_X_MIN: undefined.set("-ms-scroll-limit-x-min"),
        MS_SCROLL_LIMIT_Y_MAX: undefined.set("-ms-scroll-limit-y-max"),
        MS_SCROLL_LIMIT_Y_MIN: undefined.set("-ms-scroll-limit-y-min"),
        MS_SCROLL_RAILS: undefined.set("-ms-scroll-rails"),
        MS_SCROLL_SNAP_POINTS_X: undefined.set("-ms-scroll-snap-points-x"),
        MS_SCROLL_SNAP_POINTS_Y: undefined.set("-ms-scroll-snap-points-y"),
        MS_SCROLL_SNAP_TYPE: undefined.set("-ms-scroll-snap-type"),
        MS_SCROLL_SNAP_X: undefined.set("-ms-scroll-snap-x"),
        MS_SCROLL_SNAP_Y: undefined.set("-ms-scroll-snap-y"),
        MS_SCROLL_TRANSLATION: undefined.set("-ms-scroll-translation"),
        MS_TEXT_AUTOSPACE: undefined.set("-ms-text-autospace"),
        MS_TOUCH_SELECT: undefined.set("-ms-touch-select"),
        MS_USER_SELECT: undefined.set("-ms-user-select"),
        MS_WRAP_FLOW: undefined.set("-ms-wrap-flow"),
        MS_WRAP_MARGIN: undefined.set("-ms-wrap-margin"),
        MS_WRAP_THROUGH: undefined.set("-ms-wrap-through"),
        MOZ_APPEARANCE: undefined.set("-moz-appearance"),
        MOZ_BINDING: undefined.set("-moz-binding"),
        MOZ_BORDER_BOTTOM_COLORS: undefined.set("-moz-border-bottom-colors"),
        MOZ_BORDER_LEFT_COLORS: undefined.set("-moz-border-left-colors"),
        MOZ_BORDER_RIGHT_COLORS: undefined.set("-moz-border-right-colors"),
        MOZ_BORDER_TOP_COLORS: undefined.set("-moz-border-top-colors"),
        MOZ_CONTEXT_PROPERTIES: undefined.set("-moz-context-properties"),
        MOZ_FLOAT_EDGE: undefined.set("-moz-float-edge"),
        MOZ_FORCE_BROKEN_IMAGE_ICON: undefined.set("-moz-force-broken-image-icon"),
        MOZ_IMAGE_REGION: undefined.set("-moz-image-region"),
        MOZ_ORIENT: undefined.set("-moz-orient"),
        MOZ_OUTLINE_RADIUS: undefined.set("-moz-outline-radius"),
        MOZ_OUTLINE_RADIUS_BOTTOMLEFT: undefined.set("-moz-outline-radius-bottomleft"),
        MOZ_OUTLINE_RADIUS_BOTTOMRIGHT: undefined.set("-moz-outline-radius-bottomright"),
        MOZ_OUTLINE_RADIUS_TOPLEFT: undefined.set("-moz-outline-radius-topleft"),
        MOZ_OUTLINE_RADIUS_TOPRIGHT: undefined.set("-moz-outline-radius-topright"),
        MOZ_STACK_SIZING: undefined.set("-moz-stack-sizing"),
        MOZ_TEXT_BLINK: undefined.set("-moz-text-blink"),
        MOZ_USER_FOCUS: undefined.set("-moz-user-focus"),
        MOZ_USER_INPUT: undefined.set("-moz-user-input"),
        MOZ_USER_MODIFY: undefined.set("-moz-user-modify"),
        MOZ_WINDOW_DRAGGING: undefined.set("-moz-window-dragging"),
        MOZ_WINDOW_SHADOW: undefined.set("-moz-window-shadow"),
        WEBKIT_APPEARANCE: undefined.set("-webkit-appearance"),
        WEBKIT_BORDER_BEFORE: undefined.set("-webkit-border-before"),
        WEBKIT_BORDER_BEFORE_COLOR: undefined.set("-webkit-border-before-color"),
        WEBKIT_BORDER_BEFORE_STYLE: undefined.set("-webkit-border-before-style"),
        WEBKIT_BORDER_BEFORE_WIDTH: undefined.set("-webkit-border-before-width"),
        WEBKIT_BOX_REFLECT: undefined.set("-webkit-box-reflect"),
        WEBKIT_MASK: undefined.set("-webkit-mask"),
        WEBKIT_MASK_ATTACHMENT: undefined.set("-webkit-mask-attachment"),
        WEBKIT_MASK_CLIP: undefined.set("-webkit-mask-clip"),
        WEBKIT_MASK_COMPOSITE: undefined.set("-webkit-mask-composite"),
        WEBKIT_MASK_IMAGE: undefined.set("-webkit-mask-image"),
        WEBKIT_MASK_ORIGIN: undefined.set("-webkit-mask-origin"),
        WEBKIT_MASK_POSITION: undefined.set("-webkit-mask-position"),
        WEBKIT_MASK_POSITION_X: undefined.set("-webkit-mask-position-x"),
        WEBKIT_MASK_POSITION_Y: undefined.set("-webkit-mask-position-y"),
        WEBKIT_MASK_REPEAT: undefined.set("-webkit-mask-repeat"),
        WEBKIT_MASK_REPEAT_X: undefined.set("-webkit-mask-repeat-x"),
        WEBKIT_MASK_REPEAT_Y: undefined.set("-webkit-mask-repeat-y"),
        WEBKIT_MASK_SIZE: undefined.set("-webkit-mask-size"),
        WEBKIT_OVERFLOW_SCROLLING: undefined.set("-webkit-overflow-scrolling"),
        WEBKIT_TAP_HIGHLIGHT_COLOR: undefined.set("-webkit-tap-highlight-color"),
        WEBKIT_TEXT_FILL_COLOR: undefined.set("-webkit-text-fill-color"),
        WEBKIT_TEXT_STROKE: undefined.set("-webkit-text-stroke"),
        WEBKIT_TEXT_STROKE_COLOR: undefined.set("-webkit-text-stroke-color"),
        WEBKIT_TEXT_STROKE_WIDTH: undefined.set("-webkit-text-stroke-width"),
        WEBKIT_TOUCH_CALLOUT: undefined.set("-webkit-touch-callout"),
        WEBKIT_USER_MODIFY: undefined.set("-webkit-user-modify"),
        ALIGN_CONTENT: undefined.set("align-content"),
        ALIGN_ITEMS: undefined.set("align-items"),
        ALIGN_SELF: undefined.set("align-self"),
        ALL: undefined.set("all"),
        ANIMATION: undefined.set("animation"),
        ANIMATION_DELAY: undefined.set("animation-delay"),
        ANIMATION_DIRECTION: undefined.set("animation-direction"),
        ANIMATION_DURATION: undefined.set("animation-duration"),
        ANIMATION_FILL_MODE: undefined.set("animation-fill-mode"),
        ANIMATION_ITERATION_COUNT: undefined.set("animation-iteration-count"),
        ANIMATION_NAME: undefined.set("animation-name"),
        ANIMATION_PLAY_STATE: undefined.set("animation-play-state"),
        ANIMATION_TIMING_FUNCTION: undefined.set("animation-timing-function"),
        APPEARANCE: undefined.set("appearance"),
        AZIMUTH: undefined.set("azimuth"),
        BACKDROP_FILTER: undefined.set("backdrop-filter"),
        BACKFACE_VISIBILITY: undefined.set("backface-visibility"),
        BACKGROUND: undefined.set("background"),
        BACKGROUND_ATTACHMENT: undefined.set("background-attachment"),
        BACKGROUND_BLEND_MODE: undefined.set("background-blend-mode"),
        BACKGROUND_CLIP: undefined.set("background-clip"),
        BACKGROUND_COLOR: undefined.set("background-color"),
        BACKGROUND_IMAGE: undefined.set("background-image"),
        BACKGROUND_ORIGIN: undefined.set("background-origin"),
        BACKGROUND_POSITION: undefined.set("background-position"),
        BACKGROUND_POSITION_X: undefined.set("background-position-x"),
        BACKGROUND_POSITION_Y: undefined.set("background-position-y"),
        BACKGROUND_REPEAT: undefined.set("background-repeat"),
        BACKGROUND_SIZE: undefined.set("background-size"),
        BLOCK_OVERFLOW: undefined.set("block-overflow"),
        BLOCK_SIZE: undefined.set("block-size"),
        BORDER: undefined.set("border"),
        BORDER_BLOCK_END: undefined.set("border-block-end"),
        BORDER_BLOCK_END_COLOR: undefined.set("border-block-end-color"),
        BORDER_BLOCK_END_STYLE: undefined.set("border-block-end-style"),
        BORDER_BLOCK_END_WIDTH: undefined.set("border-block-end-width"),
        BORDER_BLOCK_START: undefined.set("border-block-start"),
        BORDER_BLOCK_START_COLOR: undefined.set("border-block-start-color"),
        BORDER_BLOCK_START_STYLE: undefined.set("border-block-start-style"),
        BORDER_BLOCK_START_WIDTH: undefined.set("border-block-start-width"),
        BORDER_BOTTOM: undefined.set("border-bottom"),
        BORDER_BOTTOM_COLOR: undefined.set("border-bottom-color"),
        BORDER_BOTTOM_LEFT_RADIUS: undefined.set("border-bottom-left-radius"),
        BORDER_BOTTOM_RIGHT_RADIUS: undefined.set("border-bottom-right-radius"),
        BORDER_BOTTOM_STYLE: undefined.set("border-bottom-style"),
        BORDER_BOTTOM_WIDTH: undefined.set("border-bottom-width"),
        BORDER_COLLAPSE: undefined.set("border-collapse"),
        BORDER_COLOR: undefined.set("border-color"),
        BORDER_IMAGE: undefined.set("border-image"),
        BORDER_IMAGE_OUTSET: undefined.set("border-image-outset"),
        BORDER_IMAGE_REPEAT: undefined.set("border-image-repeat"),
        BORDER_IMAGE_SLICE: undefined.set("border-image-slice"),
        BORDER_IMAGE_SOURCE: undefined.set("border-image-source"),
        BORDER_IMAGE_WIDTH: undefined.set("border-image-width"),
        BORDER_INLINE_END: undefined.set("border-inline-end"),
        BORDER_INLINE_END_COLOR: undefined.set("border-inline-end-color"),
        BORDER_INLINE_END_STYLE: undefined.set("border-inline-end-style"),
        BORDER_INLINE_END_WIDTH: undefined.set("border-inline-end-width"),
        BORDER_INLINE_START: undefined.set("border-inline-start"),
        BORDER_INLINE_START_COLOR: undefined.set("border-inline-start-color"),
        BORDER_INLINE_START_STYLE: undefined.set("border-inline-start-style"),
        BORDER_INLINE_START_WIDTH: undefined.set("border-inline-start-width"),
        BORDER_LEFT: undefined.set("border-left"),
        BORDER_LEFT_COLOR: undefined.set("border-left-color"),
        BORDER_LEFT_STYLE: undefined.set("border-left-style"),
        BORDER_LEFT_WIDTH: undefined.set("border-left-width"),
        BORDER_RADIUS: undefined.set("border-radius"),
        BORDER_RIGHT: undefined.set("border-right"),
        BORDER_RIGHT_COLOR: undefined.set("border-right-color"),
        BORDER_RIGHT_STYLE: undefined.set("border-right-style"),
        BORDER_RIGHT_WIDTH: undefined.set("border-right-width"),
        BORDER_SPACING: undefined.set("border-spacing"),
        BORDER_STYLE: undefined.set("border-style"),
        BORDER_TOP: undefined.set("border-top"),
        BORDER_TOP_COLOR: undefined.set("border-top-color"),
        BORDER_TOP_LEFT_RADIUS: undefined.set("border-top-left-radius"),
        BORDER_TOP_RIGHT_RADIUS: undefined.set("border-top-right-radius"),
        BORDER_TOP_STYLE: undefined.set("border-top-style"),
        BORDER_TOP_WIDTH: undefined.set("border-top-width"),
        BORDER_WIDTH: undefined.set("border-width"),
        BOTTOM: undefined.set("bottom"),
        BOX_ALIGN: undefined.set("box-align"),
        BOX_DECORATION_BREAK: undefined.set("box-decoration-break"),
        BOX_DIRECTION: undefined.set("box-direction"),
        BOX_FLEX: undefined.set("box-flex"),
        BOX_FLEX_GROUP: undefined.set("box-flex-group"),
        BOX_LINES: undefined.set("box-lines"),
        BOX_ORDINAL_GROUP: undefined.set("box-ordinal-group"),
        BOX_ORIENT: undefined.set("box-orient"),
        BOX_PACK: undefined.set("box-pack"),
        BOX_SHADOW: undefined.set("box-shadow"),
        BOX_SIZING: undefined.set("box-sizing"),
        BREAK_AFTER: undefined.set("break-after"),
        BREAK_BEFORE: undefined.set("break-before"),
        BREAK_INSIDE: undefined.set("break-inside"),
        CAPTION_SIDE: undefined.set("caption-side"),
        CARET_COLOR: undefined.set("caret-color"),
        CLEAR: undefined.set("clear"),
        CLIP: undefined.set("clip"),
        CLIP_PATH: undefined.set("clip-path"),
        COLOR: undefined.set("color"),
        COLOR_ADJUST: undefined.set("color-adjust"),
        COLUMN_COUNT: undefined.set("column-count"),
        COLUMN_FILL: undefined.set("column-fill"),
        COLUMN_GAP: undefined.set("column-gap"),
        COLUMN_RULE: undefined.set("column-rule"),
        COLUMN_RULE_COLOR: undefined.set("column-rule-color"),
        COLUMN_RULE_STYLE: undefined.set("column-rule-style"),
        COLUMN_RULE_WIDTH: undefined.set("column-rule-width"),
        COLUMN_SPAN: undefined.set("column-span"),
        COLUMN_WIDTH: undefined.set("column-width"),
        COLUMNS: undefined.set("columns"),
        CONTAIN: undefined.set("contain"),
        CONTENT: undefined.set("content"),
        COUNTER_INCREMENT: undefined.set("counter-increment"),
        COUNTER_RESET: undefined.set("counter-reset"),
        CURSOR: undefined.set("cursor"),
        DIRECTION: undefined.set("direction"),
        DISPLAY: undefined.set("display"),
        EMPTY_CELLS: undefined.set("empty-cells"),
        FILTER: undefined.set("filter"),
        FLEX: undefined.set("flex"),
        FLEX_BASIS: undefined.set("flex-basis"),
        FLEX_DIRECTION: undefined.set("flex-direction"),
        FLEX_FLOW: undefined.set("flex-flow"),
        FLEX_GROW: undefined.set("flex-grow"),
        FLEX_SHRINK: undefined.set("flex-shrink"),
        FLEX_WRAP: undefined.set("flex-wrap"),
        FLOAT: undefined.set("float"),
        FONT: undefined.set("font"),
        FONT_FAMILY: undefined.set("font-family"),
        FONT_FEATURE_SETTINGS: undefined.set("font-feature-settings"),
        FONT_KERNING: undefined.set("font-kerning"),
        FONT_LANGUAGE_OVERRIDE: undefined.set("font-language-override"),
        FONT_OPTICAL_SIZING: undefined.set("font-optical-sizing"),
        FONT_VARIATION_SETTINGS: undefined.set("font-variation-settings"),
        FONT_SIZE: undefined.set("font-size"),
        FONT_SIZE_ADJUST: undefined.set("font-size-adjust"),
        FONT_STRETCH: undefined.set("font-stretch"),
        FONT_STYLE: undefined.set("font-style"),
        FONT_SYNTHESIS: undefined.set("font-synthesis"),
        FONT_VARIANT: undefined.set("font-variant"),
        FONT_VARIANT_ALTERNATES: undefined.set("font-variant-alternates"),
        FONT_VARIANT_CAPS: undefined.set("font-variant-caps"),
        FONT_VARIANT_EAST_ASIAN: undefined.set("font-variant-east-asian"),
        FONT_VARIANT_LIGATURES: undefined.set("font-variant-ligatures"),
        FONT_VARIANT_NUMERIC: undefined.set("font-variant-numeric"),
        FONT_VARIANT_POSITION: undefined.set("font-variant-position"),
        FONT_WEIGHT: undefined.set("font-weight"),
        GAP: undefined.set("gap"),
        GRID: undefined.set("grid"),
        GRID_AREA: undefined.set("grid-area"),
        GRID_AUTO_COLUMNS: undefined.set("grid-auto-columns"),
        GRID_AUTO_FLOW: undefined.set("grid-auto-flow"),
        GRID_AUTO_ROWS: undefined.set("grid-auto-rows"),
        GRID_COLUMN: undefined.set("grid-column"),
        GRID_COLUMN_END: undefined.set("grid-column-end"),
        GRID_COLUMN_GAP: undefined.set("grid-column-gap"),
        GRID_COLUMN_START: undefined.set("grid-column-start"),
        GRID_GAP: undefined.set("grid-gap"),
        GRID_ROW: undefined.set("grid-row"),
        GRID_ROW_END: undefined.set("grid-row-end"),
        GRID_ROW_GAP: undefined.set("grid-row-gap"),
        GRID_ROW_START: undefined.set("grid-row-start"),
        GRID_TEMPLATE: undefined.set("grid-template"),
        GRID_TEMPLATE_AREAS: undefined.set("grid-template-areas"),
        GRID_TEMPLATE_COLUMNS: undefined.set("grid-template-columns"),
        GRID_TEMPLATE_ROWS: undefined.set("grid-template-rows"),
        HANGING_PUNCTUATION: undefined.set("hanging-punctuation"),
        HEIGHT: undefined.set("height"),
        HYPHENS: undefined.set("hyphens"),
        IMAGE_ORIENTATION: undefined.set("image-orientation"),
        IMAGE_RENDERING: undefined.set("image-rendering"),
        IMAGE_RESOLUTION: undefined.set("image-resolution"),
        IME_MODE: undefined.set("ime-mode"),
        INITIAL_LETTER: undefined.set("initial-letter"),
        INITIAL_LETTER_ALIGN: undefined.set("initial-letter-align"),
        INLINE_SIZE: undefined.set("inline-size"),
        INSET_BLOCK_END: undefined.set("inset-block-end"),
        INSET_BLOCK_START: undefined.set("inset-block-start"),
        INSET_INLINE_END: undefined.set("inset-inline-end"),
        INSET_INLINE_START: undefined.set("inset-inline-start"),
        ISOLATION: undefined.set("isolation"),
        JUSTIFY_CONTENT: undefined.set("justify-content"),
        JUSTIFY_ITEMS: undefined.set("justify-items"),
        JUSTIFY_SELF: undefined.set("justify-self"),
        LEFT: undefined.set("left"),
        LETTER_SPACING: undefined.set("letter-spacing"),
        LINE_BREAK: undefined.set("line-break"),
        LINE_CLAMP: undefined.set("line-clamp"),
        LINE_HEIGHT: undefined.set("line-height"),
        LIST_STYLE: undefined.set("list-style"),
        LIST_STYLE_IMAGE: undefined.set("list-style-image"),
        LIST_STYLE_POSITION: undefined.set("list-style-position"),
        LIST_STYLE_TYPE: undefined.set("list-style-type"),
        MARGIN: undefined.set("margin"),
        MARGIN_BLOCK_END: undefined.set("margin-block-end"),
        MARGIN_BLOCK_START: undefined.set("margin-block-start"),
        MARGIN_BOTTOM: undefined.set("margin-bottom"),
        MARGIN_INLINE_END: undefined.set("margin-inline-end"),
        MARGIN_INLINE_START: undefined.set("margin-inline-start"),
        MARGIN_LEFT: undefined.set("margin-left"),
        MARGIN_RIGHT: undefined.set("margin-right"),
        MARGIN_TOP: undefined.set("margin-top"),
        MASK: undefined.set("mask"),
        MASK_BORDER: undefined.set("mask-border"),
        MASK_BORDER_MODE: undefined.set("mask-border-mode"),
        MASK_BORDER_OUTSET: undefined.set("mask-border-outset"),
        MASK_BORDER_REPEAT: undefined.set("mask-border-repeat"),
        MASK_BORDER_SLICE: undefined.set("mask-border-slice"),
        MASK_BORDER_SOURCE: undefined.set("mask-border-source"),
        MASK_BORDER_WIDTH: undefined.set("mask-border-width"),
        MASK_CLIP: undefined.set("mask-clip"),
        MASK_COMPOSITE: undefined.set("mask-composite"),
        MASK_IMAGE: undefined.set("mask-image"),
        MASK_MODE: undefined.set("mask-mode"),
        MASK_ORIGIN: undefined.set("mask-origin"),
        MASK_POSITION: undefined.set("mask-position"),
        MASK_REPEAT: undefined.set("mask-repeat"),
        MASK_SIZE: undefined.set("mask-size"),
        MASK_TYPE: undefined.set("mask-type"),
        MAX_BLOCK_SIZE: undefined.set("max-block-size"),
        MAX_HEIGHT: undefined.set("max-height"),
        MAX_INLINE_SIZE: undefined.set("max-inline-size"),
        MAX_LINES: undefined.set("max-lines"),
        MAX_WIDTH: undefined.set("max-width"),
        MIN_BLOCK_SIZE: undefined.set("min-block-size"),
        MIN_HEIGHT: undefined.set("min-height"),
        MIN_INLINE_SIZE: undefined.set("min-inline-size"),
        MIN_WIDTH: undefined.set("min-width"),
        MIX_BLEND_MODE: undefined.set("mix-blend-mode"),
        MOTION: undefined.set("motion"),
        MOTION_OFFSET: undefined.set("motion-offset"),
        MOTION_PATH: undefined.set("motion-path"),
        MOTION_ROTATION: undefined.set("motion-rotation"),
        OBJECT_FIT: undefined.set("object-fit"),
        OBJECT_POSITION: undefined.set("object-position"),
        OFFSET_POSITION: undefined.set("offset-position"),
        OPACITY: undefined.set("opacity"),
        ORDER: undefined.set("order"),
        ORPHANS: undefined.set("orphans"),
        OUTLINE: undefined.set("outline"),
        OUTLINE_COLOR: undefined.set("outline-color"),
        OUTLINE_OFFSET: undefined.set("outline-offset"),
        OUTLINE_STYLE: undefined.set("outline-style"),
        OUTLINE_WIDTH: undefined.set("outline-width"),
        OVERFLOW: undefined.set("overflow"),
        OVERFLOW_ANCHOR: undefined.set("overflow-anchor"),
        OVERFLOW_BLOCK: undefined.set("overflow-block"),
        OVERFLOW_CLIP_BOX: undefined.set("overflow-clip-box"),
        OVERFLOW_INLINE: undefined.set("overflow-inline"),
        OVERFLOW_WRAP: undefined.set("overflow-wrap"),
        OVERFLOW_X: undefined.set("overflow-x"),
        OVERFLOW_Y: undefined.set("overflow-y"),
        OVERSCROLL_BEHAVIOR: undefined.set("overscroll-behavior"),
        OVERSCROLL_BEHAVIOR_X: undefined.set("overscroll-behavior-x"),
        OVERSCROLL_BEHAVIOR_Y: undefined.set("overscroll-behavior-y"),
        PADDING: undefined.set("padding"),
        PADDING_BLOCK_END: undefined.set("padding-block-end"),
        PADDING_BLOCK_START: undefined.set("padding-block-start"),
        PADDING_BOTTOM: undefined.set("padding-bottom"),
        PADDING_INLINE_END: undefined.set("padding-inline-end"),
        PADDING_INLINE_START: undefined.set("padding-inline-start"),
        PADDING_LEFT: undefined.set("padding-left"),
        PADDING_RIGHT: undefined.set("padding-right"),
        PADDING_TOP: undefined.set("padding-top"),
        PAGE_BREAK_AFTER: undefined.set("page-break-after"),
        PAGE_BREAK_BEFORE: undefined.set("page-break-before"),
        PAGE_BREAK_INSIDE: undefined.set("page-break-inside"),
        PAINT_ORDER: undefined.set("paint-order"),
        PERSPECTIVE: undefined.set("perspective"),
        PERSPECTIVE_ORIGIN: undefined.set("perspective-origin"),
        PLACE_CONTENT: undefined.set("place-content"),
        PLACE_ITEMS: undefined.set("place-items"),
        POINTER_EVENTS: undefined.set("pointer-events"),
        POSITION: undefined.set("position"),
        QUOTES: undefined.set("quotes"),
        RESIZE: undefined.set("resize"),
        RIGHT: undefined.set("right"),
        ROTATE: undefined.set("rotate"),
        ROW_GAP: undefined.set("row-gap"),
        RUBY_ALIGN: undefined.set("ruby-align"),
        RUBY_MERGE: undefined.set("ruby-merge"),
        RUBY_POSITION: undefined.set("ruby-position"),
        SCALE: undefined.set("scale"),
        SCROLL_BEHAVIOR: undefined.set("scroll-behavior"),
        SCROLL_SNAP_COORDINATE: undefined.set("scroll-snap-coordinate"),
        SCROLL_SNAP_DESTINATION: undefined.set("scroll-snap-destination"),
        SCROLL_SNAP_POINTS_X: undefined.set("scroll-snap-points-x"),
        SCROLL_SNAP_POINTS_Y: undefined.set("scroll-snap-points-y"),
        SCROLL_SNAP_TYPE: undefined.set("scroll-snap-type"),
        SCROLL_SNAP_TYPE_X: undefined.set("scroll-snap-type-x"),
        SCROLL_SNAP_TYPE_Y: undefined.set("scroll-snap-type-y"),
        SHAPE_IMAGE_THRESHOLD: undefined.set("shape-image-threshold"),
        SHAPE_MARGIN: undefined.set("shape-margin"),
        SHAPE_OUTSIDE: undefined.set("shape-outside"),
        TAB_SIZE: undefined.set("tab-size"),
        TABLE_LAYOUT: undefined.set("table-layout"),
        TEXT_ALIGN: undefined.set("text-align"),
        TEXT_ALIGN_LAST: undefined.set("text-align-last"),
        TEXT_COMBINE_UPRIGHT: undefined.set("text-combine-upright"),
        TEXT_DECORATION: undefined.set("text-decoration"),
        TEXT_DECORATION_COLOR: undefined.set("text-decoration-color"),
        TEXT_DECORATION_LINE: undefined.set("text-decoration-line"),
        TEXT_DECORATION_SKIP: undefined.set("text-decoration-skip"),
        TEXT_DECORATION_SKIP_INK: undefined.set("text-decoration-skip-ink"),
        TEXT_DECORATION_STYLE: undefined.set("text-decoration-style"),
        TEXT_EMPHASIS: undefined.set("text-emphasis"),
        TEXT_EMPHASIS_COLOR: undefined.set("text-emphasis-color"),
        TEXT_EMPHASIS_POSITION: undefined.set("text-emphasis-position"),
        TEXT_EMPHASIS_STYLE: undefined.set("text-emphasis-style"),
        TEXT_INDENT: undefined.set("text-indent"),
        TEXT_JUSTIFY: undefined.set("text-justify"),
        TEXT_ORIENTATION: undefined.set("text-orientation"),
        TEXT_OVERFLOW: undefined.set("text-overflow"),
        TEXT_RENDERING: undefined.set("text-rendering"),
        TEXT_SHADOW: undefined.set("text-shadow"),
        TEXT_SIZE_ADJUST: undefined.set("text-size-adjust"),
        TEXT_TRANSFORM: undefined.set("text-transform"),
        TEXT_UNDERLINE_POSITION: undefined.set("text-underline-position"),
        TOP: undefined.set("top"),
        TOUCH_ACTION: undefined.set("touch-action"),
        TRANSFORM: undefined.set("transform"),
        TRANSFORM_BOX: undefined.set("transform-box"),
        TRANSFORM_ORIGIN: undefined.set("transform-origin"),
        TRANSFORM_STYLE: undefined.set("transform-style"),
        TRANSITION: undefined.set("transition"),
        TRANSITION_DELAY: undefined.set("transition-delay"),
        TRANSITION_DURATION: undefined.set("transition-duration"),
        TRANSITION_PROPERTY: undefined.set("transition-property"),
        TRANSITION_TIMING_FUNCTION: undefined.set("transition-timing-function"),
        TRANSLATE: undefined.set("translate"),
        UNICODE_BIDI: undefined.set("unicode-bidi"),
        USER_SELECT: undefined.set("user-select"),
        VERTICAL_ALIGN: undefined.set("vertical-align"),
        VISIBILITY: undefined.set("visibility"),
        WHITE_SPACE: undefined.set("white-space"),
        WIDOWS: undefined.set("widows"),
        WIDTH: undefined.set("width"),
        WILL_CHANGE: undefined.set("will-change"),
        WORD_BREAK: undefined.set("word-break"),
        WORD_SPACING: undefined.set("word-spacing"),
        WORD_WRAP: undefined.set("word-wrap"),
        WRITING_MODE: undefined.set("writing-mode"),
        Z_INDEX: undefined.set("z-index"),
        ZOOM: undefined.set("zoom")
    };
    var _TransitionTimingFunction = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ transitionTimingFunction: buildProperty(params) });
        },
        LINEAR: undefined.set("linear"),
        EASE: undefined.set("ease"),
        EASE_IN: undefined.set("ease-in"),
        EASE_OUT: undefined.set("ease-out"),
        EASE_IN_OUT: undefined.set("ease-in-out"),
        cubicBezier: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.cubicBezier.apply(Method, params));
        },
        STEP_START: undefined.set("step-start"),
        STEP_END: undefined.set("step-end"),
        steps: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.steps.apply(Method, params));
        },
        frames: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return _this.set(Method.frames.apply(Method, params));
        }
    };
    var _Translate = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ translate: buildProperty(params) });
        },
        NONE: undefined.set("none"),
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _UnicodeBidi = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ unicodeBidi: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        EMBED: undefined.set("embed"),
        ISOLATE: undefined.set("isolate"),
        BIDI_OVERRIDE: undefined.set("bidi-override"),
        ISOLATE_OVERRIDE: undefined.set("isolate-override"),
        PLAINTEXT: undefined.set("plaintext")
    };
    var _UserSelect = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ userSelect: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        TEXT: undefined.set("text"),
        NONE: undefined.set("none"),
        CONTAIN: undefined.set("contain"),
        ALL: undefined.set("all")
    };
    var _VerticalAlign = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ verticalAlign: buildProperty(params) });
        },
        BASELINE: undefined.set("baseline"),
        SUB: undefined.set("sub"),
        SUPER: undefined.set("super"),
        TEXT_TOP: undefined.set("text-top"),
        TEXT_BOTTOM: undefined.set("text-bottom"),
        MIDDLE: undefined.set("middle"),
        TOP: undefined.set("top"),
        BOTTOM: undefined.set("bottom"),
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        }
    };
    var _Visibility = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ visibility: buildProperty(params) });
        },
        VISIBLE: undefined.set("visible"),
        HIDDEN: undefined.set("hidden"),
        COLLAPSE: undefined.set("collapse")
    };
    var _WhiteSpace = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ whiteSpace: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        PRE: undefined.set("pre"),
        NOWRAP: undefined.set("nowrap"),
        PRE_WRAP: undefined.set("pre-wrap"),
        PRE_LINE: undefined.set("pre-line")
    };
    var _Widows = { set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ widows: buildProperty(params) });
        } };
    var _Width = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ width: buildProperty(params) });
        },
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        },
        BORDER_BOX: undefined.set("border-box"),
        CONTENT_BOX: undefined.set("content-box"),
        AVAILABLE: undefined.set("available"),
        MIN_CONTENT: undefined.set("min-content"),
        MAX_CONTENT: undefined.set("max-content"),
        FIT_CONTENT: undefined.set("fit-content"),
        AUTO: undefined.set("auto")
    };
    var _WillChange = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ willChange: buildProperty(params) });
        },
        AUTO: undefined.set("auto"),
        SCROLL_POSITION: undefined.set("scroll-position"),
        CONTENTS: undefined.set("contents")
    };
    var _WordBreak = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ wordBreak: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        BREAK_ALL: undefined.set("break-all"),
        KEEP_ALL: undefined.set("keep-all"),
        BREAK_WORD: undefined.set("break-word")
    };
    var _WordSpacing = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ wordSpacing: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        cap: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cap.apply(Length, nums));
        },
        ch: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ch.apply(Length, nums));
        },
        em: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.em.apply(Length, nums));
        },
        ex: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ex.apply(Length, nums));
        },
        ic: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.ic.apply(Length, nums));
        },
        lh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.lh.apply(Length, nums));
        },
        rem: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rem.apply(Length, nums));
        },
        rlh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.rlh.apply(Length, nums));
        },
        vh: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vh.apply(Length, nums));
        },
        vw: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vw.apply(Length, nums));
        },
        vi: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vi.apply(Length, nums));
        },
        vb: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vb.apply(Length, nums));
        },
        vmin: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmin.apply(Length, nums));
        },
        vmax: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.vmax.apply(Length, nums));
        },
        px: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.px.apply(Length, nums));
        },
        cm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.cm.apply(Length, nums));
        },
        mm: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.mm.apply(Length, nums));
        },
        Q: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.Q.apply(Length, nums));
        },
        in: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.in.apply(Length, nums));
        },
        pc: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pc.apply(Length, nums));
        },
        pt: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.pt.apply(Length, nums));
        },
        fr: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.fr.apply(Length, nums));
        },
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var _WordWrap = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ wordWrap: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        BREAK_WORD: undefined.set("break-word")
    };
    var _WritingMode = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ writingMode: buildProperty(params) });
        },
        HORIZONTAL_TB: undefined.set("horizontal-tb"),
        VERTICAL_RL: undefined.set("vertical-rl"),
        VERTICAL_LR: undefined.set("vertical-lr"),
        SIDEWAYS_RL: undefined.set("sideways-rl"),
        SIDEWAYS_LR: undefined.set("sideways-lr")
    };
    var _ZIndex = { set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ zIndex: buildProperty(params) });
        }, AUTO: undefined.set("auto") };
    var _Zoom = {
        set: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return ({ zoom: buildProperty(params) });
        },
        NORMAL: undefined.set("normal"),
        RESET: undefined.set("reset"),
        X: function () {
            var nums = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                nums[_i] = arguments[_i];
            }
            return _this.set(Length.X.apply(Length, nums));
        }
    };
    var Css = {
        AlignContent: _AlignContent,
        AlignItems: _AlignItems,
        AlignSelf: _AlignSelf,
        All: _All,
        Animation: _Animation,
        AnimationDelay: _AnimationDelay,
        AnimationDirection: _AnimationDirection,
        AnimationDuration: _AnimationDuration,
        AnimationFillMode: _AnimationFillMode,
        AnimationIterationCount: _AnimationIterationCount,
        AnimationName: _AnimationName,
        AnimationPlayState: _AnimationPlayState,
        AnimationTimingFunction: _AnimationTimingFunction,
        Appearance: _Appearance,
        Azimuth: _Azimuth,
        BackdropFilter: _BackdropFilter,
        BackfaceVisibility: _BackfaceVisibility,
        Background: _Background,
        BackgroundAttachment: _BackgroundAttachment,
        BackgroundBlendMode: _BackgroundBlendMode,
        BackgroundClip: _BackgroundClip,
        BackgroundColor: _BackgroundColor,
        BackgroundImage: _BackgroundImage,
        BackgroundOrigin: _BackgroundOrigin,
        BackgroundPosition: _BackgroundPosition,
        BackgroundPositionX: _BackgroundPositionX,
        BackgroundPositionY: _BackgroundPositionY,
        BackgroundRepeat: _BackgroundRepeat,
        BackgroundSize: _BackgroundSize,
        BlockOverflow: _BlockOverflow,
        BlockSize: _BlockSize,
        Border: _Border,
        BorderBlockEnd: _BorderBlockEnd,
        BorderBlockEndColor: _BorderBlockEndColor,
        BorderBlockEndStyle: _BorderBlockEndStyle,
        BorderBlockEndWidth: _BorderBlockEndWidth,
        BorderBlockStart: _BorderBlockStart,
        BorderBlockStartColor: _BorderBlockStartColor,
        BorderBlockStartStyle: _BorderBlockStartStyle,
        BorderBlockStartWidth: _BorderBlockStartWidth,
        BorderBottom: _BorderBottom,
        BorderBottomColor: _BorderBottomColor,
        BorderBottomLeftRadius: _BorderBottomLeftRadius,
        BorderBottomRightRadius: _BorderBottomRightRadius,
        BorderBottomStyle: _BorderBottomStyle,
        BorderBottomWidth: _BorderBottomWidth,
        BorderCollapse: _BorderCollapse,
        BorderColor: _BorderColor,
        BorderImage: _BorderImage,
        BorderImageOutset: _BorderImageOutset,
        BorderImageRepeat: _BorderImageRepeat,
        BorderImageSlice: _BorderImageSlice,
        BorderImageSource: _BorderImageSource,
        BorderImageWidth: _BorderImageWidth,
        BorderInlineEnd: _BorderInlineEnd,
        BorderInlineEndColor: _BorderInlineEndColor,
        BorderInlineEndStyle: _BorderInlineEndStyle,
        BorderInlineEndWidth: _BorderInlineEndWidth,
        BorderInlineStart: _BorderInlineStart,
        BorderInlineStartColor: _BorderInlineStartColor,
        BorderInlineStartStyle: _BorderInlineStartStyle,
        BorderInlineStartWidth: _BorderInlineStartWidth,
        BorderLeft: _BorderLeft,
        BorderLeftColor: _BorderLeftColor,
        BorderLeftStyle: _BorderLeftStyle,
        BorderLeftWidth: _BorderLeftWidth,
        BorderRadius: _BorderRadius,
        BorderRight: _BorderRight,
        BorderRightColor: _BorderRightColor,
        BorderRightStyle: _BorderRightStyle,
        BorderRightWidth: _BorderRightWidth,
        BorderSpacing: _BorderSpacing,
        BorderStyle: _BorderStyle,
        BorderTop: _BorderTop,
        BorderTopColor: _BorderTopColor,
        BorderTopLeftRadius: _BorderTopLeftRadius,
        BorderTopRightRadius: _BorderTopRightRadius,
        BorderTopStyle: _BorderTopStyle,
        BorderTopWidth: _BorderTopWidth,
        BorderWidth: _BorderWidth,
        Bottom: _Bottom,
        BoxAlign: _BoxAlign,
        BoxDecorationBreak: _BoxDecorationBreak,
        BoxDirection: _BoxDirection,
        BoxFlex: _BoxFlex,
        BoxFlexGroup: _BoxFlexGroup,
        BoxLines: _BoxLines,
        BoxOrdinalGroup: _BoxOrdinalGroup,
        BoxOrient: _BoxOrient,
        BoxPack: _BoxPack,
        BoxShadow: _BoxShadow,
        BoxSizing: _BoxSizing,
        BreakAfter: _BreakAfter,
        BreakBefore: _BreakBefore,
        BreakInside: _BreakInside,
        CaptionSide: _CaptionSide,
        CaretColor: _CaretColor,
        Clear: _Clear,
        Clip: _Clip,
        ClipPath: _ClipPath,
        Color: _Color,
        ColorAdjust: _ColorAdjust,
        ColumnCount: _ColumnCount,
        ColumnFill: _ColumnFill,
        ColumnGap: _ColumnGap,
        ColumnRule: _ColumnRule,
        ColumnRuleColor: _ColumnRuleColor,
        ColumnRuleStyle: _ColumnRuleStyle,
        ColumnRuleWidth: _ColumnRuleWidth,
        ColumnSpan: _ColumnSpan,
        ColumnWidth: _ColumnWidth,
        Columns: _Columns,
        Contain: _Contain,
        Content: _Content,
        CounterIncrement: _CounterIncrement,
        CounterReset: _CounterReset,
        Cursor: _Cursor,
        Direction: _Direction,
        Display: _Display,
        EmptyCells: _EmptyCells,
        Filter: _Filter,
        Flex: _Flex,
        FlexBasis: _FlexBasis,
        FlexDirection: _FlexDirection,
        FlexFlow: _FlexFlow,
        FlexGrow: _FlexGrow,
        FlexShrink: _FlexShrink,
        FlexWrap: _FlexWrap,
        Float: _Float,
        Font: _Font,
        FontFamily: _FontFamily,
        FontFeatureSettings: _FontFeatureSettings,
        FontKerning: _FontKerning,
        FontLanguageOverride: _FontLanguageOverride,
        FontOpticalSizing: _FontOpticalSizing,
        FontSize: _FontSize,
        FontSizeAdjust: _FontSizeAdjust,
        FontStretch: _FontStretch,
        FontStyle: _FontStyle,
        FontSynthesis: _FontSynthesis,
        FontVariant: _FontVariant,
        FontVariantAlternates: _FontVariantAlternates,
        FontVariantCaps: _FontVariantCaps,
        FontVariantEastAsian: _FontVariantEastAsian,
        FontVariantLigatures: _FontVariantLigatures,
        FontVariantNumeric: _FontVariantNumeric,
        FontVariantPosition: _FontVariantPosition,
        FontVariationSettings: _FontVariationSettings,
        FontWeight: _FontWeight,
        Gap: _Gap,
        Grid: _Grid,
        GridArea: _GridArea,
        GridAutoColumns: _GridAutoColumns,
        GridAutoFlow: _GridAutoFlow,
        GridAutoRows: _GridAutoRows,
        GridColumn: _GridColumn,
        GridColumnEnd: _GridColumnEnd,
        GridColumnGap: _GridColumnGap,
        GridColumnStart: _GridColumnStart,
        GridGap: _GridGap,
        GridRow: _GridRow,
        GridRowEnd: _GridRowEnd,
        GridRowGap: _GridRowGap,
        GridRowStart: _GridRowStart,
        GridTemplate: _GridTemplate,
        GridTemplateAreas: _GridTemplateAreas,
        GridTemplateColumns: _GridTemplateColumns,
        GridTemplateRows: _GridTemplateRows,
        HangingPunctuation: _HangingPunctuation,
        Height: _Height,
        Hyphens: _Hyphens,
        ImageOrientation: _ImageOrientation,
        ImageRendering: _ImageRendering,
        ImageResolution: _ImageResolution,
        ImeMode: _ImeMode,
        InitialLetter: _InitialLetter,
        InitialLetterAlign: _InitialLetterAlign,
        InlineSize: _InlineSize,
        InsetBlockEnd: _InsetBlockEnd,
        InsetBlockStart: _InsetBlockStart,
        InsetInlineEnd: _InsetInlineEnd,
        InsetInlineStart: _InsetInlineStart,
        Isolation: _Isolation,
        JustifyContent: _JustifyContent,
        JustifyItems: _JustifyItems,
        JustifySelf: _JustifySelf,
        Left: _Left,
        LetterSpacing: _LetterSpacing,
        LineBreak: _LineBreak,
        LineClamp: _LineClamp,
        LineHeight: _LineHeight,
        ListStyle: _ListStyle,
        ListStyleImage: _ListStyleImage,
        ListStylePosition: _ListStylePosition,
        ListStyleType: _ListStyleType,
        Margin: _Margin,
        MarginBlockEnd: _MarginBlockEnd,
        MarginBlockStart: _MarginBlockStart,
        MarginBottom: _MarginBottom,
        MarginInlineEnd: _MarginInlineEnd,
        MarginInlineStart: _MarginInlineStart,
        MarginLeft: _MarginLeft,
        MarginRight: _MarginRight,
        MarginTop: _MarginTop,
        Mask: _Mask,
        MaskBorder: _MaskBorder,
        MaskBorderMode: _MaskBorderMode,
        MaskBorderOutset: _MaskBorderOutset,
        MaskBorderRepeat: _MaskBorderRepeat,
        MaskBorderSlice: _MaskBorderSlice,
        MaskBorderSource: _MaskBorderSource,
        MaskBorderWidth: _MaskBorderWidth,
        MaskClip: _MaskClip,
        MaskComposite: _MaskComposite,
        MaskImage: _MaskImage,
        MaskMode: _MaskMode,
        MaskOrigin: _MaskOrigin,
        MaskPosition: _MaskPosition,
        MaskRepeat: _MaskRepeat,
        MaskSize: _MaskSize,
        MaskType: _MaskType,
        MaxBlockSize: _MaxBlockSize,
        MaxHeight: _MaxHeight,
        MaxInlineSize: _MaxInlineSize,
        MaxLines: _MaxLines,
        MaxWidth: _MaxWidth,
        MinBlockSize: _MinBlockSize,
        MinHeight: _MinHeight,
        MinInlineSize: _MinInlineSize,
        MinWidth: _MinWidth,
        MixBlendMode: _MixBlendMode,
        Motion: _Motion,
        MotionOffset: _MotionOffset,
        MotionPath: _MotionPath,
        MotionRotation: _MotionRotation,
        MozAppearance: _MozAppearance,
        MozBinding: _MozBinding,
        MozBorderBottomColors: _MozBorderBottomColors,
        MozBorderLeftColors: _MozBorderLeftColors,
        MozBorderRightColors: _MozBorderRightColors,
        MozBorderTopColors: _MozBorderTopColors,
        MozContextProperties: _MozContextProperties,
        MozFloatEdge: _MozFloatEdge,
        MozForceBrokenImageIcon: _MozForceBrokenImageIcon,
        MozImageRegion: _MozImageRegion,
        MozOrient: _MozOrient,
        MozOutlineRadius: _MozOutlineRadius,
        MozOutlineRadiusBottomleft: _MozOutlineRadiusBottomleft,
        MozOutlineRadiusBottomright: _MozOutlineRadiusBottomright,
        MozOutlineRadiusTopleft: _MozOutlineRadiusTopleft,
        MozOutlineRadiusTopright: _MozOutlineRadiusTopright,
        MozStackSizing: _MozStackSizing,
        MozTextBlink: _MozTextBlink,
        MozUserFocus: _MozUserFocus,
        MozUserInput: _MozUserInput,
        MozUserModify: _MozUserModify,
        MozWindowDragging: _MozWindowDragging,
        MozWindowShadow: _MozWindowShadow,
        MsAccelerator: _MsAccelerator,
        MsBlockProgression: _MsBlockProgression,
        MsContentZoomChaining: _MsContentZoomChaining,
        MsContentZoomLimit: _MsContentZoomLimit,
        MsContentZoomLimitMax: _MsContentZoomLimitMax,
        MsContentZoomLimitMin: _MsContentZoomLimitMin,
        MsContentZoomSnap: _MsContentZoomSnap,
        MsContentZoomSnapPoints: _MsContentZoomSnapPoints,
        MsContentZoomSnapType: _MsContentZoomSnapType,
        MsContentZooming: _MsContentZooming,
        MsFilter: _MsFilter,
        MsFlowFrom: _MsFlowFrom,
        MsFlowInto: _MsFlowInto,
        MsHighContrastAdjust: _MsHighContrastAdjust,
        MsHyphenateLimitChars: _MsHyphenateLimitChars,
        MsHyphenateLimitLines: _MsHyphenateLimitLines,
        MsHyphenateLimitZone: _MsHyphenateLimitZone,
        MsImeAlign: _MsImeAlign,
        MsOverflowStyle: _MsOverflowStyle,
        MsScrollChaining: _MsScrollChaining,
        MsScrollLimit: _MsScrollLimit,
        MsScrollLimitXMax: _MsScrollLimitXMax,
        MsScrollLimitXMin: _MsScrollLimitXMin,
        MsScrollLimitYMax: _MsScrollLimitYMax,
        MsScrollLimitYMin: _MsScrollLimitYMin,
        MsScrollRails: _MsScrollRails,
        MsScrollSnapPointsX: _MsScrollSnapPointsX,
        MsScrollSnapPointsY: _MsScrollSnapPointsY,
        MsScrollSnapType: _MsScrollSnapType,
        MsScrollSnapX: _MsScrollSnapX,
        MsScrollSnapY: _MsScrollSnapY,
        MsScrollTranslation: _MsScrollTranslation,
        MsScrollbar3dlightColor: _MsScrollbar3dlightColor,
        MsScrollbarArrowColor: _MsScrollbarArrowColor,
        MsScrollbarBaseColor: _MsScrollbarBaseColor,
        MsScrollbarDarkshadowColor: _MsScrollbarDarkshadowColor,
        MsScrollbarFaceColor: _MsScrollbarFaceColor,
        MsScrollbarHighlightColor: _MsScrollbarHighlightColor,
        MsScrollbarShadowColor: _MsScrollbarShadowColor,
        MsScrollbarTrackColor: _MsScrollbarTrackColor,
        MsTextAutospace: _MsTextAutospace,
        MsTouchSelect: _MsTouchSelect,
        MsUserSelect: _MsUserSelect,
        MsWrapFlow: _MsWrapFlow,
        MsWrapMargin: _MsWrapMargin,
        MsWrapThrough: _MsWrapThrough,
        ObjectFit: _ObjectFit,
        ObjectPosition: _ObjectPosition,
        OffsetPosition: _OffsetPosition,
        Opacity: _Opacity,
        Order: _Order,
        Orphans: _Orphans,
        Outline: _Outline,
        OutlineColor: _OutlineColor,
        OutlineOffset: _OutlineOffset,
        OutlineStyle: _OutlineStyle,
        OutlineWidth: _OutlineWidth,
        Overflow: _Overflow,
        OverflowAnchor: _OverflowAnchor,
        OverflowBlock: _OverflowBlock,
        OverflowClipBox: _OverflowClipBox,
        OverflowInline: _OverflowInline,
        OverflowWrap: _OverflowWrap,
        OverflowX: _OverflowX,
        OverflowY: _OverflowY,
        OverscrollBehavior: _OverscrollBehavior,
        OverscrollBehaviorX: _OverscrollBehaviorX,
        OverscrollBehaviorY: _OverscrollBehaviorY,
        Padding: _Padding,
        PaddingBlockEnd: _PaddingBlockEnd,
        PaddingBlockStart: _PaddingBlockStart,
        PaddingBottom: _PaddingBottom,
        PaddingInlineEnd: _PaddingInlineEnd,
        PaddingInlineStart: _PaddingInlineStart,
        PaddingLeft: _PaddingLeft,
        PaddingRight: _PaddingRight,
        PaddingTop: _PaddingTop,
        PageBreakAfter: _PageBreakAfter,
        PageBreakBefore: _PageBreakBefore,
        PageBreakInside: _PageBreakInside,
        PaintOrder: _PaintOrder,
        Perspective: _Perspective,
        PerspectiveOrigin: _PerspectiveOrigin,
        PlaceContent: _PlaceContent,
        PlaceItems: _PlaceItems,
        PointerEvents: _PointerEvents,
        Position: _Position,
        Quotes: _Quotes,
        Resize: _Resize,
        Right: _Right,
        Rotate: _Rotate,
        RowGap: _RowGap,
        RubyAlign: _RubyAlign,
        RubyMerge: _RubyMerge,
        RubyPosition: _RubyPosition,
        Scale: _Scale,
        ScrollBehavior: _ScrollBehavior,
        ScrollSnapCoordinate: _ScrollSnapCoordinate,
        ScrollSnapDestination: _ScrollSnapDestination,
        ScrollSnapPointsX: _ScrollSnapPointsX,
        ScrollSnapPointsY: _ScrollSnapPointsY,
        ScrollSnapType: _ScrollSnapType,
        ScrollSnapTypeX: _ScrollSnapTypeX,
        ScrollSnapTypeY: _ScrollSnapTypeY,
        ShapeImageThreshold: _ShapeImageThreshold,
        ShapeMargin: _ShapeMargin,
        ShapeOutside: _ShapeOutside,
        TabSize: _TabSize,
        TableLayout: _TableLayout,
        TextAlign: _TextAlign,
        TextAlignLast: _TextAlignLast,
        TextCombineUpright: _TextCombineUpright,
        TextDecoration: _TextDecoration,
        TextDecorationColor: _TextDecorationColor,
        TextDecorationLine: _TextDecorationLine,
        TextDecorationSkip: _TextDecorationSkip,
        TextDecorationSkipInk: _TextDecorationSkipInk,
        TextDecorationStyle: _TextDecorationStyle,
        TextEmphasis: _TextEmphasis,
        TextEmphasisColor: _TextEmphasisColor,
        TextEmphasisPosition: _TextEmphasisPosition,
        TextEmphasisStyle: _TextEmphasisStyle,
        TextIndent: _TextIndent,
        TextJustify: _TextJustify,
        TextOrientation: _TextOrientation,
        TextOverflow: _TextOverflow,
        TextRendering: _TextRendering,
        TextShadow: _TextShadow,
        TextSizeAdjust: _TextSizeAdjust,
        TextTransform: _TextTransform,
        TextUnderlinePosition: _TextUnderlinePosition,
        Top: _Top,
        TouchAction: _TouchAction,
        Transform: _Transform,
        TransformBox: _TransformBox,
        TransformOrigin: _TransformOrigin,
        TransformStyle: _TransformStyle,
        Transition: _Transition,
        TransitionDelay: _TransitionDelay,
        TransitionDuration: _TransitionDuration,
        TransitionProperty: _TransitionProperty,
        TransitionTimingFunction: _TransitionTimingFunction,
        Translate: _Translate,
        UnicodeBidi: _UnicodeBidi,
        UserSelect: _UserSelect,
        VerticalAlign: _VerticalAlign,
        Visibility: _Visibility,
        WebkitAppearance: _WebkitAppearance,
        WebkitBorderBefore: _WebkitBorderBefore,
        WebkitBorderBeforeColor: _WebkitBorderBeforeColor,
        WebkitBorderBeforeStyle: _WebkitBorderBeforeStyle,
        WebkitBorderBeforeWidth: _WebkitBorderBeforeWidth,
        WebkitBoxReflect: _WebkitBoxReflect,
        WebkitMask: _WebkitMask,
        WebkitMaskAttachment: _WebkitMaskAttachment,
        WebkitMaskClip: _WebkitMaskClip,
        WebkitMaskComposite: _WebkitMaskComposite,
        WebkitMaskImage: _WebkitMaskImage,
        WebkitMaskOrigin: _WebkitMaskOrigin,
        WebkitMaskPosition: _WebkitMaskPosition,
        WebkitMaskPositionX: _WebkitMaskPositionX,
        WebkitMaskPositionY: _WebkitMaskPositionY,
        WebkitMaskRepeat: _WebkitMaskRepeat,
        WebkitMaskRepeatX: _WebkitMaskRepeatX,
        WebkitMaskRepeatY: _WebkitMaskRepeatY,
        WebkitMaskSize: _WebkitMaskSize,
        WebkitOverflowScrolling: _WebkitOverflowScrolling,
        WebkitTapHighlightColor: _WebkitTapHighlightColor,
        WebkitTextFillColor: _WebkitTextFillColor,
        WebkitTextStroke: _WebkitTextStroke,
        WebkitTextStrokeColor: _WebkitTextStrokeColor,
        WebkitTextStrokeWidth: _WebkitTextStrokeWidth,
        WebkitTouchCallout: _WebkitTouchCallout,
        WebkitUserModify: _WebkitUserModify,
        WhiteSpace: _WhiteSpace,
        Widows: _Widows,
        Width: _Width,
        WillChange: _WillChange,
        WordBreak: _WordBreak,
        WordSpacing: _WordSpacing,
        WordWrap: _WordWrap,
        WritingMode: _WritingMode,
        ZIndex: _ZIndex,
        Zoom: _Zoom,
        sheet: _sheet
    };

    exports.Keyword = Keyword;
    exports.Property = Property;
    exports.Color = Color;
    exports.Unit = Unit;
    exports.Angle = Angle;
    exports.Frequency = Frequency;
    exports.Length = Length;
    exports.Resolution = Resolution;
    exports.Time = Time;
    exports.Method = Method;
    exports.Css = Css;
    exports.default = Css;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=emotive.js.map
