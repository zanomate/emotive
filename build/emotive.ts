export type Param = number | string | Array<any>;
export type Sheet = { [propertyName: string]: string };

const concatWithSpaces = (values: Param[]): string => values.join(" ");

const concatWithCommas = (values: Param[]): string => values.join(", ");

function addParams(...params: Param[]): string {
    return params
        .map(value => {
            if (Array.isArray(value)) {
                return "(" + mulParams(...value) + ")";
            }
            return value;
        })
        .join(" + ");
}

function mulParams(...params: Param[]): string {
    return params
        .map(value => {
            if (Array.isArray(value)) {
                return "(" + addParams(...value) + ")";
            }
            return value;
        })
        .join(" * ");
}

const buildDatatype = (unit: string, nums: number[]): string => nums.map(num => num + (num ? unit : "")).join(" ");

const buildMethod = (name: string, params: Param[]): string => {
    return (
        "(" +
        concatWithCommas(
            params.map(param => {
                if (Array.isArray(param)) {
                    return concatWithSpaces(
                        param.filter(subParam => {
                            return !Array.isArray(subParam);
                        })
                    );
                }
                return param;
            })
        ) +
        ")"
    );
};

const buildProperty = (values: Param[]): string => {
    return concatWithSpaces(
        values.map(value => {
            if (Array.isArray(value)) {
                return concatWithCommas(
                    value.map(subValue => {
                        if (Array.isArray(subValue)) {
                            return concatWithSpaces(
                                subValue.filter(subSubValue => {
                                    return !Array.isArray(subSubValue);
                                })
                            );
                        }
                        return subValue;
                    })
                );
            }
            return value;
        })
    );
};
function mqSet(name: string, value?: string | number) {
    if (value) {
        return "(" + name + ": " + value + ")";
    }
    return "(" + name + ")";
}

function mqAnd(...values: (string | number)[]) {
    return "(" + values.join(" and ") + ")";
}

function mqOr(...values: (string | number)[]) {
    return "(" + values.join(", ") + ")";
}

function mqNot(value: string | number) {
    return "(not " + value + ")";
}

function mqOnly(value: string | number) {
    return "(only " + value + ")";
}

function mqRange(name: string, min: string | number, max: string | number) {
    const minProp = min ? mqSet("min-" + name, min) : undefined;
    const maxProp = max ? mqSet("max-" + name, max) : undefined;

    if (minProp && maxProp) {
        return mqAnd(minProp, maxProp);
    } else if (minProp) {
        return minProp;
    } else if (maxProp) {
        return maxProp;
    } else return mqSet(name);
}
export const Keyword = {
    _ABOVE: "above",
    _ABSOLUTE: "absolute",
    _ACTIVE: "active",
    _ACTIVEBORDER: "ActiveBorder",
    _ACTIVECAPTION: "ActiveCaption",
    _ADD: "add",
    _AFTER: "after",
    _ALIAS: "alias",
    _ALICEBLUE: "aliceblue",
    _ALL: "all",
    _ALLOW_END: "allow-end",
    _ALL_PETITE_CAPS: "all-petite-caps",
    _ALL_SCROLL: "all-scroll",
    _ALL_SMALL_CAPS: "all-small-caps",
    _ALPHA: "alpha",
    _ALPHABETIC: "alphabetic",
    _ALTERNATE: "alternate",
    _ALTERNATE_REVERSE: "alternate-reverse",
    _ALWAYS: "always",
    _AMP: "amp;",
    _AND: "and",
    _ANGLE: "angle",
    _ANNOTATION: "@annotation",
    _ANTIQUEWHITE: "antiquewhite",
    _APPWORKSPACE: "AppWorkspace",
    _AQUA: "aqua",
    _AQUAMARINE: "aquamarine",
    _AT: "at",
    _AUTO: "auto",
    _AUTO_FILL: "auto-fill",
    _AUTO_FIT: "auto-fit",
    _AUTO_FLOW: "auto-flow",
    _AVAILABLE: "available",
    _AVOID: "avoid",
    _AVOID_COLUMN: "avoid-column",
    _AVOID_PAGE: "avoid-page",
    _AVOID_REGION: "avoid-region",
    _AZURE: "azure",
    _BACKGROUND: "Background",
    _BACKWARDS: "backwards",
    _BALANCE: "balance",
    _BALANCE_ALL: "balance-all",
    _BASELINE: "baseline",
    _BEFORE: "before",
    _BEHIND: "behind",
    _BEIGE: "beige",
    _BELOW: "below",
    _BIDI_OVERRIDE: "bidi-override",
    _BISQUE: "bisque",
    _BLACK: "black",
    _BLANCHEDALMOND: "blanchedalmond",
    _BLANK: "blank",
    _BLINK: "blink",
    _BLOCK: "block",
    _BLOCK_AXIS: "block-axis",
    _BLOCK_END: "block-end",
    _BLOCK_START: "block-start",
    _BLUE: "blue",
    _BLUEVIOLET: "blueviolet",
    _BOLD: "bold",
    _BOLDER: "bolder",
    _BORDER: "border",
    _BORDER_BOX: "border-box",
    _BOTH: "both",
    _BOTTOM: "bottom",
    _BOTTOM_CENTER: "@bottom-center",
    _BOTTOM_LEFT: "@bottom-left",
    _BOTTOM_LEFT_CORNER: "@bottom-left-corner",
    _BOTTOM_RIGHT: "@bottom-right",
    _BOTTOM_RIGHT_CORNER: "@bottom-right-corner",
    _BOX_DECORATION: "box-decoration",
    _BREAK_ALL: "break-all",
    _BREAK_WORD: "break-word",
    _BROWN: "brown",
    _BT: "bt",
    _BURLYWOOD: "burlywood",
    _BUTTON: "button",
    _BUTTONFACE: "ButtonFace",
    _BUTTONHIGHLIGHT: "ButtonHighlight",
    _BUTTONSHADOW: "ButtonShadow",
    _BUTTONTEXT: "ButtonText",
    _BUTTON_ARROW_DOWN: "button-arrow-down",
    _BUTTON_ARROW_NEXT: "button-arrow-next",
    _BUTTON_ARROW_PREVIOUS: "button-arrow-previous",
    _BUTTON_ARROW_UP: "button-arrow-up",
    _BUTTON_BEVEL: "button-bevel",
    _BUTTON_FOCUS: "button-focus",
    _CADETBLUE: "cadetblue",
    _CAPITALIZE: "capitalize",
    _CAPTION: "caption",
    _CAPTIONTEXT: "CaptionText",
    _CARET: "caret",
    _CELL: "cell",
    _CENTER: "center",
    _CENTER_LEFT: "center-left",
    _CENTER_RIGHT: "center-right",
    _CHAINED: "chained",
    _CHARACTER_VARIANT: "@character-variant",
    _CHARTREUSE: "chartreuse",
    _CHECKBOX: "checkbox",
    _CHECKBOX_CONTAINER: "checkbox-container",
    _CHECKBOX_LABEL: "checkbox-label",
    _CHECKMENUITEM: "checkmenuitem",
    _CHOCOLATE: "chocolate",
    _CIRCLE: "circle",
    _CLEAR: "clear",
    _CLIP: "clip",
    _CLONE: "clone",
    _CLOSEST_CORNER: "closest-corner",
    _CLOSEST_SIDE: "closest-side",
    _CLOSE_QUOTE: "close-quote",
    _CM: "cm",
    _COLLAPSE: "collapse",
    _COLOR: "color",
    _COLOR_BURN: "color-burn",
    _COLOR_DODGE: "color-dodge",
    _COLUMN: "column",
    _COLUMN_REVERSE: "column-reverse",
    _COL_RESIZE: "col-resize",
    _COMMON_LIGATURES: "common-ligatures",
    _CONDENSED: "condensed",
    _CONTAIN: "contain",
    _CONTENT: "content",
    _CONTENTS: "contents",
    _CONTENT_BOX: "content-box",
    _CONTEXTUAL: "contextual",
    _CONTEXT_MENU: "context-menu",
    _COPY: "copy",
    _CORAL: "coral",
    _CORNFLOWERBLUE: "cornflowerblue",
    _CORNSILK: "cornsilk",
    _COVER: "cover",
    _CRIMSON: "crimson",
    _CRISP_EDGES: "crisp-edges",
    _CROSSHAIR: "crosshair",
    _CURRENTCOLOR: "currentcolor",
    _CURSIVE: "cursive",
    _CYAN: "cyan",
    _DARKBLUE: "darkblue",
    _DARKCYAN: "darkcyan",
    _DARKEN: "darken",
    _DARKGOLDENROD: "darkgoldenrod",
    _DARKGRAY: "darkgray",
    _DARKGREEN: "darkgreen",
    _DARKGREY: "darkgrey",
    _DARKKHAKI: "darkkhaki",
    _DARKMAGENTA: "darkmagenta",
    _DARKOLIVEGREEN: "darkolivegreen",
    _DARKORANGE: "darkorange",
    _DARKORCHID: "darkorchid",
    _DARKRED: "darkred",
    _DARKSALMON: "darksalmon",
    _DARKSEAGREEN: "darkseagreen",
    _DARKSLATEBLUE: "darkslateblue",
    _DARKSLATEGRAY: "darkslategray",
    _DARKSLATEGREY: "darkslategrey",
    _DARKTURQUOISE: "darkturquoise",
    _DARKVIOLET: "darkviolet",
    _DASHED: "dashed",
    _DECLARATION_LIST: "{\n  <declaration-list>\n}",
    _DEEPPINK: "deeppink",
    _DEEPSKYBLUE: "deepskyblue",
    _DEFAULT: "default",
    _DEFAULT_BUTTON: "default-button",
    _DEG: "deg",
    _DENSE: "dense",
    _DESTINATION_ATOP: "destination-atop",
    _DESTINATION_IN: "destination-in",
    _DESTINATION_OUT: "destination-out",
    _DESTINATION_OVER: "destination-over",
    _DIAGONAL_FRACTIONS: "diagonal-fractions",
    _DIFFERENCE: "difference",
    _DIGITS: "digits",
    _DIMGRAY: "dimgray",
    _DIMGREY: "dimgrey",
    _DISABLED: "disabled",
    _DISCRETIONARY_LIGATURES: "discretionary-ligatures",
    _DODGERBLUE: "dodgerblue",
    _DOT: "dot",
    _DOTTED: "dotted",
    _DOUBLE: "double",
    _DOUBLE_CIRCLE: "double-circle",
    _DRAG: "drag",
    _DUALBUTTON: "dualbutton",
    _EACH_LINE: "each-line",
    _EASE: "ease",
    _EASE_IN: "ease-in",
    _EASE_IN_OUT: "ease-in-out",
    _EASE_OUT: "ease-out",
    _ECONOMY: "economy",
    _EDGES: "edges",
    _ELEMENT: "element",
    _ELLIPSE: "ellipse",
    _ELLIPSIS: "ellipsis",
    _EM: "em",
    _EMBED: "embed",
    _ENABLED: "enabled",
    _END: "end",
    _EVEN: "even",
    _EVENODD: "evenodd",
    _EW_RESIZE: "ew-resize",
    _EX: "ex",
    _EXACT: "exact",
    _EXCLUDE: "exclude",
    _EXCLUSION: "exclusion",
    _EXPANDED: "expanded",
    _EXTRA_CONDENSED: "extra-condensed",
    _EXTRA_EXPANDED: "extra-expanded",
    _E_RESIZE: "e-resize",
    _FALSE: "false",
    _FANTASY: "fantasy",
    _FARTHEST_CORNER: "farthest-corner",
    _FARTHEST_SIDE: "farthest-side",
    _FAR_LEFT: "far-left",
    _FAR_RIGHT: "far-right",
    _FEATURE_VALUE_DECLARATION_LIST: "{\n  <feature-value-declaration-list>\n}",
    _FILL: "fill",
    _FILLED: "filled",
    _FILL_AVAILABLE: "fill-available",
    _FILL_BOX: "fill-box",
    _FILL_OPACITY: "fill-opacity",
    _FIREBRICK: "firebrick",
    _FIRST: "first",
    _FIRST_LETTER: "first-letter",
    _FIT_CONTENT: "fit-content",
    _FIXED: "fixed",
    _FLAT: "flat",
    _FLEX: "flex",
    _FLEX_END: "flex-end",
    _FLEX_START: "flex-start",
    _FLIP: "flip",
    _FLORALWHITE: "floralwhite",
    _FLOW: "flow",
    _FLOW_ROOT: "flow-root",
    _FORCE_END: "force-end",
    _FORESTGREEN: "forestgreen",
    _FORWARDS: "forwards",
    _FREQUENCY: "frequency",
    _FROM: "from",
    _FROM_IMAGE: "from-image",
    _FUCHSIA: "fuchsia",
    _FULL_WIDTH: "full-width",
    _GAINSBORO: "gainsboro",
    _GEOMETRICPRECISION: "geometricPrecision",
    _GHOSTWHITE: "ghostwhite",
    _GOLD: "gold",
    _GOLDENROD: "goldenrod",
    _GRAB: "grab",
    _GRABBING: "grabbing",
    _GRAD: "grad",
    _GRAY: "gray",
    _GRAYTEXT: "GrayText",
    _GREEN: "green",
    _GREENYELLOW: "greenyellow",
    _GREY: "grey",
    _GRID: "grid",
    _GRIPPERS: "grippers",
    _GROOVE: "groove",
    _GROUPBOX: "groupbox",
    _HANGING: "hanging",
    _HARD_LIGHT: "hard-light",
    _HELP: "help",
    _HIDDEN: "hidden",
    _HIDE: "hide",
    _HIGHLIGHT: "Highlight",
    _HIGHLIGHTTEXT: "HighlightText",
    _HISTORICAL_FORMS: "historical-forms",
    _HISTORICAL_LIGATURES: "historical-ligatures",
    _HONEYDEW: "honeydew",
    _HORIZONTAL: "horizontal",
    _HORIZONTAL_TB: "horizontal-tb",
    _HOTPINK: "hotpink",
    _HUE: "hue",
    _HZ: "Hz",
    _I: "i",
    _ICON: "icon",
    _IDEOGRAPHIC: "ideographic",
    _IDEOGRAPH_ALPHA: "ideograph-alpha",
    _IDEOGRAPH_NUMERIC: "ideograph-numeric",
    _IDEOGRAPH_PARENTHESIS: "ideograph-parenthesis",
    _IDEOGRAPH_SPACE: "ideograph-space",
    _IGNORE: "ignore",
    _IN: "in",
    _INACTIVE: "inactive",
    _INACTIVEBORDER: "InactiveBorder",
    _INACTIVECAPTION: "InactiveCaption",
    _INACTIVECAPTIONTEXT: "InactiveCaptionText",
    _INDIANRED: "indianred",
    _INDIGO: "indigo",
    _INFINITE: "infinite",
    _INFOBACKGROUND: "InfoBackground",
    _INFOTEXT: "InfoText",
    _INHERIT: "inherit",
    _INITIAL: "initial",
    _INLINE: "inline",
    _INLINE_AXIS: "inline-axis",
    _INLINE_BLOCK: "inline-block",
    _INLINE_END: "inline-end",
    _INLINE_FLEX: "inline-flex",
    _INLINE_GRID: "inline-grid",
    _INLINE_LIST_ITEM: "inline-list-item",
    _INLINE_START: "inline-start",
    _INLINE_TABLE: "inline-table",
    _INNER_SPIN_BUTTON: "inner-spin-button",
    _INSET: "inset",
    _INSIDE: "inside",
    _INTEGER: "integer",
    _INTERSECT: "intersect",
    _INTER_CHARACTER: "inter-character",
    _INTER_WORD: "inter-word",
    _INVERT: "invert",
    _ISOLATE: "isolate",
    _ISOLATE_OVERRIDE: "isolate-override",
    _ITALIC: "italic",
    _IVORY: "ivory",
    _JIS04: "jis04",
    _JIS78: "jis78",
    _JIS83: "jis83",
    _JIS90: "jis90",
    _JUSTIFY: "justify",
    _KEEP_ALL: "keep-all",
    _KHAKI: "khaki",
    _KHZ: "kHz",
    _LARGE: "large",
    _LARGER: "larger",
    _LAST: "last",
    _LAVENDER: "lavender",
    _LAVENDERBLUSH: "lavenderblush",
    _LAWNGREEN: "lawngreen",
    _LAYOUT: "layout",
    _LEADING_SPACES: "leading-spaces",
    _LEFT: "left",
    _LEFTWARDS: "leftwards",
    _LEFT_BOTTOM: "@left-bottom",
    _LEFT_MIDDLE: "@left-middle",
    _LEFT_SIDE: "left-side",
    _LEFT_TOP: "@left-top",
    _LEGACY: "legacy",
    _LEMONCHIFFON: "lemonchiffon",
    _LENGTH: "length",
    _LIGHTBLUE: "lightblue",
    _LIGHTCORAL: "lightcoral",
    _LIGHTCYAN: "lightcyan",
    _LIGHTEN: "lighten",
    _LIGHTER: "lighter",
    _LIGHTGOLDENRODYELLOW: "lightgoldenrodyellow",
    _LIGHTGRAY: "lightgray",
    _LIGHTGREEN: "lightgreen",
    _LIGHTGREY: "lightgrey",
    _LIGHTPINK: "lightpink",
    _LIGHTSALMON: "lightsalmon",
    _LIGHTSEAGREEN: "lightseagreen",
    _LIGHTSKYBLUE: "lightskyblue",
    _LIGHTSLATEGRAY: "lightslategray",
    _LIGHTSLATEGREY: "lightslategrey",
    _LIGHTSTEELBLUE: "lightsteelblue",
    _LIGHTYELLOW: "lightyellow",
    _LIME: "lime",
    _LIMEGREEN: "limegreen",
    _LINEAR: "linear",
    _LINEN: "linen",
    _LINE_THROUGH: "line-through",
    _LINING_NUMS: "lining-nums",
    _LISTBOX: "listbox",
    _LISTITEM: "listitem",
    _LIST_ITEM: "list-item",
    _LOCAL: "local",
    _LOOSE: "loose",
    _LOWERCASE: "lowercase",
    _LR: "lr",
    _LTR: "ltr",
    _LUMINANCE: "luminance",
    _LUMINOSITY: "luminosity",
    _MAGENTA: "magenta",
    _MANDATORY: "mandatory",
    _MANIPULATION: "manipulation",
    _MANUAL: "manual",
    _MARGIN_BOX: "margin-box",
    _MARKERS: "markers",
    _MAROON: "maroon",
    _MATCH_PARENT: "match-parent",
    _MATCH_SOURCE: "match-source",
    _MAXIMUM: "maximum",
    _MAX_CONTENT: "max-content",
    _MEDIA_CONTROLS_BACKGROUND: "media-controls-background",
    _MEDIA_CONTROLS_FULLSCREEN_BACKGROUND: "media-controls-fullscreen-background",
    _MEDIA_CURRENT_TIME_DISPLAY: "media-current-time-display",
    _MEDIA_ENTER_FULLSCREEN_BUTTON: "media-enter-fullscreen-button",
    _MEDIA_EXIT_FULLSCREEN_BUTTON: "media-exit-fullscreen-button",
    _MEDIA_FULLSCREEN_BUTTON: "media-fullscreen-button",
    _MEDIA_MUTE_BUTTON: "media-mute-button",
    _MEDIA_OVERLAY_PLAY_BUTTON: "media-overlay-play-button",
    _MEDIA_PLAY_BUTTON: "media-play-button",
    _MEDIA_SEEK_BACK_BUTTON: "media-seek-back-button",
    _MEDIA_SEEK_FORWARD_BUTTON: "media-seek-forward-button",
    _MEDIA_SLIDER: "media-slider",
    _MEDIA_SLIDERTHUMB: "media-sliderthumb",
    _MEDIA_TIME_REMAINING_DISPLAY: "media-time-remaining-display",
    _MEDIA_TOGGLE_CLOSED_CAPTIONS_BUTTON: "media-toggle-closed-captions-button",
    _MEDIA_VOLUME_SLIDER: "media-volume-slider",
    _MEDIA_VOLUME_SLIDERTHUMB: "media-volume-sliderthumb",
    _MEDIA_VOLUME_SLIDER_CONTAINER: "media-volume-slider-container",
    _MEDIUM: "medium",
    _MEDIUMAQUAMARINE: "mediumaquamarine",
    _MEDIUMBLUE: "mediumblue",
    _MEDIUMORCHID: "mediumorchid",
    _MEDIUMPURPLE: "mediumpurple",
    _MEDIUMSEAGREEN: "mediumseagreen",
    _MEDIUMSLATEBLUE: "mediumslateblue",
    _MEDIUMSPRINGGREEN: "mediumspringgreen",
    _MEDIUMTURQUOISE: "mediumturquoise",
    _MEDIUMVIOLETRED: "mediumvioletred",
    _MENU: "menu",
    _MENUARROW: "menuarrow",
    _MENUBAR: "menubar",
    _MENUCHECKBOX: "menucheckbox",
    _MENUIMAGE: "menuimage",
    _MENUITEM: "menuitem",
    _MENUITEMTEXT: "menuitemtext",
    _MENULIST: "menulist",
    _MENULIST_BUTTON: "menulist-button",
    _MENULIST_TEXT: "menulist-text",
    _MENULIST_TEXTFIELD: "menulist-textfield",
    _MENUPOPUP: "menupopup",
    _MENURADIO: "menuradio",
    _MENUSEPARATOR: "menuseparator",
    _MENUTEXT: "MenuText",
    _MESSAGE_BOX: "message-box",
    _METER: "meter",
    _METERBAR: "meterbar",
    _METERCHUNK: "meterchunk",
    _MIDDLE: "middle",
    _MIDNIGHTBLUE: "midnightblue",
    _MINTCREAM: "mintcream",
    _MIN_CONTENT: "min-content",
    _MISTYROSE: "mistyrose",
    _MIXED: "mixed",
    _MM: "mm",
    _MOCCASIN: "moccasin",
    _MONOSPACE: "monospace",
    _MOVE: "move",
    _MOZ_MAC_UNIFIED_TOOLBAR: "-moz-mac-unified-toolbar",
    _MOZ_WINDOW_BUTTON_BOX: "-moz-window-button-box",
    _MOZ_WINDOW_BUTTON_BOX_MAXIMIZED: "-moz-window-button-box-maximized",
    _MOZ_WINDOW_BUTTON_CLOSE: "-moz-window-button-close",
    _MOZ_WINDOW_BUTTON_MAXIMIZE: "-moz-window-button-maximize",
    _MOZ_WINDOW_BUTTON_MINIMIZE: "-moz-window-button-minimize",
    _MOZ_WINDOW_BUTTON_RESTORE: "-moz-window-button-restore",
    _MOZ_WINDOW_FRAME_BOTTOM: "-moz-window-frame-bottom",
    _MOZ_WINDOW_FRAME_LEFT: "-moz-window-frame-left",
    _MOZ_WINDOW_FRAME_RIGHT: "-moz-window-frame-right",
    _MOZ_WINDOW_TITLEBAR: "-moz-window-titlebar",
    _MOZ_WINDOW_TITLEBAR_MAXIMIZED: "-moz-window-titlebar-maximized",
    _MOZ_WIN_BORDERLESS_GLASS: "-moz-win-borderless-glass",
    _MOZ_WIN_BROWSERTABBAR_TOOLBOX: "-moz-win-browsertabbar-toolbox",
    _MOZ_WIN_COMMUNICATIONSTEXT: "-moz-win-communicationstext",
    _MOZ_WIN_COMMUNICATIONS_TOOLBOX: "-moz-win-communications-toolbox",
    _MOZ_WIN_EXCLUDE_GLASS: "-moz-win-exclude-glass",
    _MOZ_WIN_GLASS: "-moz-win-glass",
    _MOZ_WIN_MEDIATEXT: "-moz-win-mediatext",
    _MOZ_WIN_MEDIA_TOOLBOX: "-moz-win-media-toolbox",
    _MS: "ms",
    _MS_AUTOHIDING_SCROLLBAR: "-ms-autohiding-scrollbar",
    _MULTIPLE: "multiple",
    _MULTIPLY: "multiply",
    _NAVAJOWHITE: "navajowhite",
    _NAVY: "navy",
    _NESW_RESIZE: "nesw-resize",
    _NE_RESIZE: "ne-resize",
    _NONE: "none",
    _NONZERO: "nonzero",
    _NORMAL: "normal",
    _NOT: "not",
    _NOT_ALLOWED: "not-allowed",
    _NOWRAP: "nowrap",
    _NO_CLIP: "no-clip",
    _NO_CLOSE_QUOTE: "no-close-quote",
    _NO_COMMON_LIGATURES: "no-common-ligatures",
    _NO_CONTEXTUAL: "no-contextual",
    _NO_DISCRETIONARY_LIGATURES: "no-discretionary-ligatures",
    _NO_DRAG: "no-drag",
    _NO_DROP: "no-drop",
    _NO_HISTORICAL_LIGATURES: "no-historical-ligatures",
    _NO_LIMIT: "no-limit",
    _NO_OPEN_QUOTE: "no-open-quote",
    _NO_REPEAT: "no-repeat",
    _NS_RESIZE: "ns-resize",
    _NUMBER: "number",
    _NWSE_RESIZE: "nwse-resize",
    _NW_RESIZE: "nw-resize",
    _N_RESIZE: "n-resize",
    _OBJECTS: "objects",
    _OBLIQUE: "oblique",
    _ODD: "odd",
    _OFF: "off",
    _OLDLACE: "oldlace",
    _OLDSTYLE_NUMS: "oldstyle-nums",
    _OLIVE: "olive",
    _OLIVEDRAB: "olivedrab",
    _ON: "on",
    _ONLY: "only",
    _OPEN: "open",
    _OPEN_QUOTE: "open-quote",
    _OPTIMIZELEGIBILITY: "optimizeLegibility",
    _OPTIMIZESPEED: "optimizeSpeed",
    _OR: "or",
    _ORANGE: "orange",
    _ORANGERED: "orangered",
    _ORCHID: "orchid",
    _ORDINAL: "ordinal",
    _ORNAMENTS: "@ornaments",
    _OUTSET: "outset",
    _OUTSIDE: "outside",
    _OVER: "over",
    _OVERLAY: "overlay",
    _OVERLINE: "overline",
    _PADDING: "padding",
    _PADDING_BOX: "padding-box",
    _PAGE: "page",
    _PAINT: "paint",
    _PAINTED: "painted",
    _PALEGOLDENROD: "palegoldenrod",
    _PALEGREEN: "palegreen",
    _PALETURQUOISE: "paleturquoise",
    _PALEVIOLETRED: "palevioletred",
    _PAN_DOWN: "pan-down",
    _PAN_LEFT: "pan-left",
    _PAN_RIGHT: "pan-right",
    _PAN_UP: "pan-up",
    _PAN_X: "pan-x",
    _PAN_Y: "pan-y",
    _PAPAYAWHIP: "papayawhip",
    _PAUSED: "paused",
    _PC: "pc",
    _PEACHPUFF: "peachpuff",
    _PERU: "peru",
    _PETITE_CAPS: "petite-caps",
    _PINCH_ZOOM: "pinch-zoom",
    _PINK: "pink",
    _PIXELATED: "pixelated",
    _PLAINTEXT: "plaintext",
    _PLUM: "plum",
    _POINTER: "pointer",
    _POWDERBLUE: "powderblue",
    _PRE: "pre",
    _PRESERVE_3D: "preserve-3d",
    _PRE_LINE: "pre-line",
    _PRE_WRAP: "pre-wrap",
    _PROGRESS: "progress",
    _PROGRESSBAR: "progressbar",
    _PROGRESSBAR_VERTICAL: "progressbar-vertical",
    _PROGRESSCHUNK: "progresschunk",
    _PROGRESSCHUNK_VERTICAL: "progresschunk-vertical",
    _PROGRESS_BAR: "progress-bar",
    _PROGRESS_BAR_VALUE: "progress-bar-value",
    _PROPORTIONAL_NUMS: "proportional-nums",
    _PROPORTIONAL_WIDTH: "proportional-width",
    _PROXIMITY: "proximity",
    _PT: "pt",
    _PURPLE: "purple",
    _PUSH_BUTTON: "push-button",
    _PX: "px",
    _Q: "q",
    _RAD: "rad",
    _RADIO: "radio",
    _RADIOMENUITEM: "radiomenuitem",
    _RADIO_CONTAINER: "radio-container",
    _RADIO_LABEL: "radio-label",
    _RAILED: "railed",
    _RANGE: "range",
    _RANGE_THUMB: "range-thumb",
    _READ_ONLY: "read-only",
    _READ_WRITE: "read-write",
    _READ_WRITE_PLAINTEXT_ONLY: "read-write-plaintext-only",
    _REBECCAPURPLE: "rebeccapurple",
    _RECTO: "recto",
    _RED: "red",
    _REGION: "region",
    _RELATIVE: "relative",
    _REM: "rem",
    _REPEAT: "repeat",
    _REPEAT_X: "repeat-x",
    _REPEAT_Y: "repeat-y",
    _RESET: "reset",
    _RESIZER: "resizer",
    _RESIZERPANEL: "resizerpanel",
    _REVERSE: "reverse",
    _REVERT: "revert",
    _RIDGE: "ridge",
    _RIGHT: "right",
    _RIGHTWARDS: "rightwards",
    _RIGHT_BOTTOM: "@right-bottom",
    _RIGHT_MIDDLE: "@right-middle",
    _RIGHT_SIDE: "right-side",
    _RIGHT_TOP: "@right-top",
    _RL: "rl",
    _ROSYBROWN: "rosybrown",
    _ROUND: "round",
    _ROW: "row",
    _ROW_RESIZE: "row-resize",
    _ROW_REVERSE: "row-reverse",
    _ROYALBLUE: "royalblue",
    _RTL: "rtl",
    _RUBY: "ruby",
    _RUBY_BASE: "ruby-base",
    _RUBY_BASE_CONTAINER: "ruby-base-container",
    _RUBY_TEXT: "ruby-text",
    _RUBY_TEXT_CONTAINER: "ruby-text-container",
    _RUNNING: "running",
    _RUN_IN: "run-in",
    _S: "s",
    _SADDLEBROWN: "saddlebrown",
    _SAFE: "safe",
    _SALMON: "salmon",
    _SANDYBROWN: "sandybrown",
    _SANS_SERIF: "sans-serif",
    _SATURATION: "saturation",
    _SCALETHUMBEND: "scalethumbend",
    _SCALETHUMBSTART: "scalethumbstart",
    _SCALETHUMBTICK: "scalethumbtick",
    _SCALETHUMB_HORIZONTAL: "scalethumb-horizontal",
    _SCALETHUMB_VERTICAL: "scalethumb-vertical",
    _SCALE_DOWN: "scale-down",
    _SCALE_HORIZONTAL: "scale-horizontal",
    _SCALE_VERTICAL: "scale-vertical",
    _SCREEN: "screen",
    _SCROLL: "scroll",
    _SCROLLBAR: "scrollbar",
    _SCROLLBARBUTTON_DOWN: "scrollbarbutton-down",
    _SCROLLBARBUTTON_LEFT: "scrollbarbutton-left",
    _SCROLLBARBUTTON_RIGHT: "scrollbarbutton-right",
    _SCROLLBARBUTTON_UP: "scrollbarbutton-up",
    _SCROLLBARTHUMB_HORIZONTAL: "scrollbarthumb-horizontal",
    _SCROLLBARTHUMB_VERTICAL: "scrollbarthumb-vertical",
    _SCROLLBARTRACK_HORIZONTAL: "scrollbartrack-horizontal",
    _SCROLLBARTRACK_VERTICAL: "scrollbartrack-vertical",
    _SCROLL_POSITION: "scroll-position",
    _SEAGREEN: "seagreen",
    _SEARCHFIELD: "searchfield",
    _SEARCHFIELD_CANCEL_BUTTON: "searchfield-cancel-button",
    _SEARCHFIELD_DECORATION: "searchfield-decoration",
    _SEARCHFIELD_RESULTS_BUTTON: "searchfield-results-button",
    _SEARCHFIELD_RESULTS_DECORATION: "searchfield-results-decoration",
    _SEASHELL: "seashell",
    _SELECT_AFTER: "select-after",
    _SELECT_ALL: "select-all",
    _SELECT_BEFORE: "select-before",
    _SELECT_MENU: "select-menu",
    _SELECT_SAME: "select-same",
    _SELF_END: "self-end",
    _SELF_START: "self-start",
    _SEMI_CONDENSED: "semi-condensed",
    _SEMI_EXPANDED: "semi-expanded",
    _SEPARATE: "separate",
    _SEPARATOR: "separator",
    _SERIF: "serif",
    _SESAME: "sesame",
    _SE_RESIZE: "se-resize",
    _SHEET: "sheet",
    _SHOW: "show",
    _SIDEWAYS: "sideways",
    _SIDEWAYS_LR: "sideways-lr",
    _SIDEWAYS_RL: "sideways-rl",
    _SIENNA: "sienna",
    _SILVER: "silver",
    _SIMPLIFIED: "simplified",
    _SINGLE: "single",
    _SIZE: "size",
    _SKYBLUE: "skyblue",
    _SLASHED_ZERO: "slashed-zero",
    _SLATEBLUE: "slateblue",
    _SLATEGRAY: "slategray",
    _SLATEGREY: "slategrey",
    _SLICE: "slice",
    _SLIDERTHUMB_HORIZONTAL: "sliderthumb-horizontal",
    _SLIDERTHUMB_VERTICAL: "sliderthumb-vertical",
    _SLIDER_HORIZONTAL: "slider-horizontal",
    _SLIDER_VERTICAL: "slider-vertical",
    _SMALL: "small",
    _SMALLER: "smaller",
    _SMALL_CAPS: "small-caps",
    _SMALL_CAPTION: "small-caption",
    _SMOOTH: "smooth",
    _SNAP: "snap",
    _SNOW: "snow",
    _SOFT_LIGHT: "soft-light",
    _SOLID: "solid",
    _SOURCE_ATOP: "source-atop",
    _SOURCE_IN: "source-in",
    _SOURCE_OUT: "source-out",
    _SOURCE_OVER: "source-over",
    _SPACE: "space",
    _SPACES: "spaces",
    _SPACE_AROUND: "space-around",
    _SPACE_BETWEEN: "space-between",
    _SPACE_EVENLY: "space-evenly",
    _SPAN: "span",
    _SPINNER: "spinner",
    _SPINNER_DOWNBUTTON: "spinner-downbutton",
    _SPINNER_TEXTFIELD: "spinner-textfield",
    _SPINNER_UPBUTTON: "spinner-upbutton",
    _SPLITTER: "splitter",
    _SPRINGGREEN: "springgreen",
    _SQUARE_BUTTON: "square-button",
    _STACKED_FRACTIONS: "stacked-fractions",
    _START: "start",
    _STATIC: "static",
    _STATUSBAR: "statusbar",
    _STATUSBARPANEL: "statusbarpanel",
    _STATUS_BAR: "status-bar",
    _STEELBLUE: "steelblue",
    _STEP_END: "step-end",
    _STEP_START: "step-start",
    _STICKY: "sticky",
    _STRETCH: "stretch",
    _STRETCH_TO_FIT: "stretch-to-fit",
    _STRICT: "strict",
    _STRING: "string",
    _STROKE: "stroke",
    _STROKE_BOX: "stroke-box",
    _STROKE_OPACITY: "stroke-opacity",
    _STYLE: "style",
    _STYLESET: "@styleset",
    _STYLISTIC: "@stylistic",
    _SUB: "sub",
    _SUBTRACT: "subtract",
    _SUPER: "super",
    _SWASH: "@swash",
    _SW_RESIZE: "sw-resize",
    _S_RESIZE: "s-resize",
    _TAB: "tab",
    _TABLE: "table",
    _TABLE_CAPTION: "table-caption",
    _TABLE_CELL: "table-cell",
    _TABLE_COLUMN: "table-column",
    _TABLE_COLUMN_GROUP: "table-column-group",
    _TABLE_FOOTER_GROUP: "table-footer-group",
    _TABLE_HEADER_GROUP: "table-header-group",
    _TABLE_ROW: "table-row",
    _TABLE_ROW_GROUP: "table-row-group",
    _TABPANEL: "tabpanel",
    _TABPANELS: "tabpanels",
    _TABULAR_NUMS: "tabular-nums",
    _TAB_SCROLL_ARROW_BACK: "tab-scroll-arrow-back",
    _TAB_SCROLL_ARROW_FORWARD: "tab-scroll-arrow-forward",
    _TAN: "tan",
    _TB: "tb",
    _TEAL: "teal",
    _TEXT: "text",
    _TEXTAREA: "textarea",
    _TEXTFIELD: "textfield",
    _TEXTFIELD_MULTILINE: "textfield-multiline",
    _TEXT_BOTTOM: "text-bottom",
    _TEXT_TOP: "text-top",
    _THICK: "thick",
    _THIN: "thin",
    _THISTLE: "thistle",
    _THREEDDARKSHADOW: "ThreeDDarkShadow",
    _THREEDFACE: "ThreeDFace",
    _THREEDHIGHLIGHT: "ThreeDHighlight",
    _THREEDLIGHTSHADOW: "ThreeDLightShadow",
    _THREEDSHADOW: "ThreeDShadow",
    _TIME: "time",
    _TITLING_CAPS: "titling-caps",
    _TO: "to",
    _TOMATO: "tomato",
    _TOOLBAR: "toolbar",
    _TOOLBARBUTTON: "toolbarbutton",
    _TOOLBARBUTTON_DROPDOWN: "toolbarbutton-dropdown",
    _TOOLBARGRIPPER: "toolbargripper",
    _TOOLBOX: "toolbox",
    _TOOLTIP: "tooltip",
    _TOP: "top",
    _TOP_CENTER: "@top-center",
    _TOP_LEFT: "@top-left",
    _TOP_LEFT_CORNER: "@top-left-corner",
    _TOP_RIGHT: "@top-right",
    _TOP_RIGHT_CORNER: "@top-right-corner",
    _TOUCH: "touch",
    _TRADITIONAL: "traditional",
    _TRAILING_SPACES: "trailing-spaces",
    _TRANSPARENT: "transparent",
    _TREEHEADER: "treeheader",
    _TREEHEADERCELL: "treeheadercell",
    _TREEHEADERSORTARROW: "treeheadersortarrow",
    _TREEITEM: "treeitem",
    _TREELINE: "treeline",
    _TREETWISTY: "treetwisty",
    _TREETWISTYOPEN: "treetwistyopen",
    _TREEVIEW: "treeview",
    _TRIANGLE: "triangle",
    _TRUE: "true",
    _TURQUOISE: "turquoise",
    _ULTRA_CONDENSED: "ultra-condensed",
    _ULTRA_EXPANDED: "ultra-expanded",
    _UNDER: "under",
    _UNDERLINE: "underline",
    _UNICASE: "unicase",
    _UNSAFE: "unsafe",
    _UNSET: "unset",
    _UPPERCASE: "uppercase",
    _UPRIGHT: "upright",
    _URL: "url",
    _VERSO: "verso",
    _VERTICAL: "vertical",
    _VERTICAL_LR: "vertical-lr",
    _VERTICAL_RL: "vertical-rl",
    _VERTICAL_TEXT: "vertical-text",
    _VERTICAL_TO_HORIZONTAL: "vertical-to-horizontal",
    _VH: "vh",
    _VIEW_BOX: "view-box",
    _VIOLET: "violet",
    _VISIBLE: "visible",
    _VISIBLEFILL: "visibleFill",
    _VISIBLEPAINTED: "visiblePainted",
    _VISIBLESTROKE: "visibleStroke",
    _VMAX: "vmax",
    _VMIN: "vmin",
    _VW: "vw",
    _WAIT: "wait",
    _WAVY: "wavy",
    _WEIGHT: "weight",
    _WHEAT: "wheat",
    _WHITE: "white",
    _WHITESMOKE: "whitesmoke",
    _WINDOW: "Window",
    _WINDOWFRAME: "WindowFrame",
    _WINDOWTEXT: "WindowText",
    _WRAP: "wrap",
    _WRAP_REVERSE: "wrap-reverse",
    _WRITE_ONLY: "write-only",
    _W_RESIZE: "w-resize",
    _X: "x",
    _XOR: "xor",
    _XX_LARGE: "xx-large",
    _XX_SMALL: "xx-small",
    _X_END: "x-end",
    _X_LARGE: "x-large",
    _X_SMALL: "x-small",
    _X_START: "x-start",
    _Y: "y",
    _YELLOW: "yellow",
    _YELLOWGREEN: "yellowgreen",
    _Y_END: "y-end",
    _Y_START: "y-start",
    _Z: "z",
    _ZOOM: "zoom",
    _ZOOM_IN: "zoom-in",
    _ZOOM_OUT: "zoom-out"
};
export const Property = {
    MOZ_APPEARANCE: "-moz-appearance",
    MOZ_BINDING: "-moz-binding",
    MOZ_BORDER_BOTTOM_COLORS: "-moz-border-bottom-colors",
    MOZ_BORDER_LEFT_COLORS: "-moz-border-left-colors",
    MOZ_BORDER_RIGHT_COLORS: "-moz-border-right-colors",
    MOZ_BORDER_TOP_COLORS: "-moz-border-top-colors",
    MOZ_CONTEXT_PROPERTIES: "-moz-context-properties",
    MOZ_FLOAT_EDGE: "-moz-float-edge",
    MOZ_FORCE_BROKEN_IMAGE_ICON: "-moz-force-broken-image-icon",
    MOZ_IMAGE_REGION: "-moz-image-region",
    MOZ_ORIENT: "-moz-orient",
    MOZ_OUTLINE_RADIUS: "-moz-outline-radius",
    MOZ_OUTLINE_RADIUS_BOTTOMLEFT: "-moz-outline-radius-bottomleft",
    MOZ_OUTLINE_RADIUS_BOTTOMRIGHT: "-moz-outline-radius-bottomright",
    MOZ_OUTLINE_RADIUS_TOPLEFT: "-moz-outline-radius-topleft",
    MOZ_OUTLINE_RADIUS_TOPRIGHT: "-moz-outline-radius-topright",
    MOZ_STACK_SIZING: "-moz-stack-sizing",
    MOZ_TEXT_BLINK: "-moz-text-blink",
    MOZ_USER_FOCUS: "-moz-user-focus",
    MOZ_USER_INPUT: "-moz-user-input",
    MOZ_USER_MODIFY: "-moz-user-modify",
    MOZ_WINDOW_DRAGGING: "-moz-window-dragging",
    MOZ_WINDOW_SHADOW: "-moz-window-shadow",
    MS_ACCELERATOR: "-ms-accelerator",
    MS_BLOCK_PROGRESSION: "-ms-block-progression",
    MS_CONTENT_ZOOM_CHAINING: "-ms-content-zoom-chaining",
    MS_CONTENT_ZOOM_LIMIT: "-ms-content-zoom-limit",
    MS_CONTENT_ZOOM_LIMIT_MAX: "-ms-content-zoom-limit-max",
    MS_CONTENT_ZOOM_LIMIT_MIN: "-ms-content-zoom-limit-min",
    MS_CONTENT_ZOOM_SNAP: "-ms-content-zoom-snap",
    MS_CONTENT_ZOOM_SNAP_POINTS: "-ms-content-zoom-snap-points",
    MS_CONTENT_ZOOM_SNAP_TYPE: "-ms-content-zoom-snap-type",
    MS_CONTENT_ZOOMING: "-ms-content-zooming",
    MS_FILTER: "-ms-filter",
    MS_FLOW_FROM: "-ms-flow-from",
    MS_FLOW_INTO: "-ms-flow-into",
    MS_HIGH_CONTRAST_ADJUST: "-ms-high-contrast-adjust",
    MS_HYPHENATE_LIMIT_CHARS: "-ms-hyphenate-limit-chars",
    MS_HYPHENATE_LIMIT_LINES: "-ms-hyphenate-limit-lines",
    MS_HYPHENATE_LIMIT_ZONE: "-ms-hyphenate-limit-zone",
    MS_IME_ALIGN: "-ms-ime-align",
    MS_OVERFLOW_STYLE: "-ms-overflow-style",
    MS_SCROLL_CHAINING: "-ms-scroll-chaining",
    MS_SCROLL_LIMIT: "-ms-scroll-limit",
    MS_SCROLL_LIMIT_X_MAX: "-ms-scroll-limit-x-max",
    MS_SCROLL_LIMIT_X_MIN: "-ms-scroll-limit-x-min",
    MS_SCROLL_LIMIT_Y_MAX: "-ms-scroll-limit-y-max",
    MS_SCROLL_LIMIT_Y_MIN: "-ms-scroll-limit-y-min",
    MS_SCROLL_RAILS: "-ms-scroll-rails",
    MS_SCROLL_SNAP_POINTS_X: "-ms-scroll-snap-points-x",
    MS_SCROLL_SNAP_POINTS_Y: "-ms-scroll-snap-points-y",
    MS_SCROLL_SNAP_TYPE: "-ms-scroll-snap-type",
    MS_SCROLL_SNAP_X: "-ms-scroll-snap-x",
    MS_SCROLL_SNAP_Y: "-ms-scroll-snap-y",
    MS_SCROLL_TRANSLATION: "-ms-scroll-translation",
    MS_SCROLLBAR_3DLIGHT_COLOR: "-ms-scrollbar-3dlight-color",
    MS_SCROLLBAR_ARROW_COLOR: "-ms-scrollbar-arrow-color",
    MS_SCROLLBAR_BASE_COLOR: "-ms-scrollbar-base-color",
    MS_SCROLLBAR_DARKSHADOW_COLOR: "-ms-scrollbar-darkshadow-color",
    MS_SCROLLBAR_FACE_COLOR: "-ms-scrollbar-face-color",
    MS_SCROLLBAR_HIGHLIGHT_COLOR: "-ms-scrollbar-highlight-color",
    MS_SCROLLBAR_SHADOW_COLOR: "-ms-scrollbar-shadow-color",
    MS_SCROLLBAR_TRACK_COLOR: "-ms-scrollbar-track-color",
    MS_TEXT_AUTOSPACE: "-ms-text-autospace",
    MS_TOUCH_SELECT: "-ms-touch-select",
    MS_USER_SELECT: "-ms-user-select",
    MS_WRAP_FLOW: "-ms-wrap-flow",
    MS_WRAP_MARGIN: "-ms-wrap-margin",
    MS_WRAP_THROUGH: "-ms-wrap-through",
    WEBKIT_APPEARANCE: "-webkit-appearance",
    WEBKIT_BORDER_BEFORE: "-webkit-border-before",
    WEBKIT_BORDER_BEFORE_COLOR: "-webkit-border-before-color",
    WEBKIT_BORDER_BEFORE_STYLE: "-webkit-border-before-style",
    WEBKIT_BORDER_BEFORE_WIDTH: "-webkit-border-before-width",
    WEBKIT_BOX_REFLECT: "-webkit-box-reflect",
    WEBKIT_MASK: "-webkit-mask",
    WEBKIT_MASK_ATTACHMENT: "-webkit-mask-attachment",
    WEBKIT_MASK_CLIP: "-webkit-mask-clip",
    WEBKIT_MASK_COMPOSITE: "-webkit-mask-composite",
    WEBKIT_MASK_IMAGE: "-webkit-mask-image",
    WEBKIT_MASK_ORIGIN: "-webkit-mask-origin",
    WEBKIT_MASK_POSITION: "-webkit-mask-position",
    WEBKIT_MASK_POSITION_X: "-webkit-mask-position-x",
    WEBKIT_MASK_POSITION_Y: "-webkit-mask-position-y",
    WEBKIT_MASK_REPEAT: "-webkit-mask-repeat",
    WEBKIT_MASK_REPEAT_X: "-webkit-mask-repeat-x",
    WEBKIT_MASK_REPEAT_Y: "-webkit-mask-repeat-y",
    WEBKIT_MASK_SIZE: "-webkit-mask-size",
    WEBKIT_OVERFLOW_SCROLLING: "-webkit-overflow-scrolling",
    WEBKIT_TAP_HIGHLIGHT_COLOR: "-webkit-tap-highlight-color",
    WEBKIT_TEXT_FILL_COLOR: "-webkit-text-fill-color",
    WEBKIT_TEXT_STROKE: "-webkit-text-stroke",
    WEBKIT_TEXT_STROKE_COLOR: "-webkit-text-stroke-color",
    WEBKIT_TEXT_STROKE_WIDTH: "-webkit-text-stroke-width",
    WEBKIT_TOUCH_CALLOUT: "-webkit-touch-callout",
    WEBKIT_USER_MODIFY: "-webkit-user-modify",
    ALIGN_CONTENT: "align-content",
    ALIGN_ITEMS: "align-items",
    ALIGN_SELF: "align-self",
    ALL: "all",
    ANIMATION: "animation",
    ANIMATION_DELAY: "animation-delay",
    ANIMATION_DIRECTION: "animation-direction",
    ANIMATION_DURATION: "animation-duration",
    ANIMATION_FILL_MODE: "animation-fill-mode",
    ANIMATION_ITERATION_COUNT: "animation-iteration-count",
    ANIMATION_NAME: "animation-name",
    ANIMATION_PLAY_STATE: "animation-play-state",
    ANIMATION_TIMING_FUNCTION: "animation-timing-function",
    APPEARANCE: "appearance",
    AZIMUTH: "azimuth",
    BACKDROP_FILTER: "backdrop-filter",
    BACKFACE_VISIBILITY: "backface-visibility",
    BACKGROUND: "background",
    BACKGROUND_ATTACHMENT: "background-attachment",
    BACKGROUND_BLEND_MODE: "background-blend-mode",
    BACKGROUND_CLIP: "background-clip",
    BACKGROUND_COLOR: "background-color",
    BACKGROUND_IMAGE: "background-image",
    BACKGROUND_ORIGIN: "background-origin",
    BACKGROUND_POSITION: "background-position",
    BACKGROUND_POSITION_X: "background-position-x",
    BACKGROUND_POSITION_Y: "background-position-y",
    BACKGROUND_REPEAT: "background-repeat",
    BACKGROUND_SIZE: "background-size",
    BLOCK_OVERFLOW: "block-overflow",
    BLOCK_SIZE: "block-size",
    BORDER: "border",
    BORDER_BLOCK_END: "border-block-end",
    BORDER_BLOCK_END_COLOR: "border-block-end-color",
    BORDER_BLOCK_END_STYLE: "border-block-end-style",
    BORDER_BLOCK_END_WIDTH: "border-block-end-width",
    BORDER_BLOCK_START: "border-block-start",
    BORDER_BLOCK_START_COLOR: "border-block-start-color",
    BORDER_BLOCK_START_STYLE: "border-block-start-style",
    BORDER_BLOCK_START_WIDTH: "border-block-start-width",
    BORDER_BOTTOM: "border-bottom",
    BORDER_BOTTOM_COLOR: "border-bottom-color",
    BORDER_BOTTOM_LEFT_RADIUS: "border-bottom-left-radius",
    BORDER_BOTTOM_RIGHT_RADIUS: "border-bottom-right-radius",
    BORDER_BOTTOM_STYLE: "border-bottom-style",
    BORDER_BOTTOM_WIDTH: "border-bottom-width",
    BORDER_COLLAPSE: "border-collapse",
    BORDER_COLOR: "border-color",
    BORDER_IMAGE: "border-image",
    BORDER_IMAGE_OUTSET: "border-image-outset",
    BORDER_IMAGE_REPEAT: "border-image-repeat",
    BORDER_IMAGE_SLICE: "border-image-slice",
    BORDER_IMAGE_SOURCE: "border-image-source",
    BORDER_IMAGE_WIDTH: "border-image-width",
    BORDER_INLINE_END: "border-inline-end",
    BORDER_INLINE_END_COLOR: "border-inline-end-color",
    BORDER_INLINE_END_STYLE: "border-inline-end-style",
    BORDER_INLINE_END_WIDTH: "border-inline-end-width",
    BORDER_INLINE_START: "border-inline-start",
    BORDER_INLINE_START_COLOR: "border-inline-start-color",
    BORDER_INLINE_START_STYLE: "border-inline-start-style",
    BORDER_INLINE_START_WIDTH: "border-inline-start-width",
    BORDER_LEFT: "border-left",
    BORDER_LEFT_COLOR: "border-left-color",
    BORDER_LEFT_STYLE: "border-left-style",
    BORDER_LEFT_WIDTH: "border-left-width",
    BORDER_RADIUS: "border-radius",
    BORDER_RIGHT: "border-right",
    BORDER_RIGHT_COLOR: "border-right-color",
    BORDER_RIGHT_STYLE: "border-right-style",
    BORDER_RIGHT_WIDTH: "border-right-width",
    BORDER_SPACING: "border-spacing",
    BORDER_STYLE: "border-style",
    BORDER_TOP: "border-top",
    BORDER_TOP_COLOR: "border-top-color",
    BORDER_TOP_LEFT_RADIUS: "border-top-left-radius",
    BORDER_TOP_RIGHT_RADIUS: "border-top-right-radius",
    BORDER_TOP_STYLE: "border-top-style",
    BORDER_TOP_WIDTH: "border-top-width",
    BORDER_WIDTH: "border-width",
    BOTTOM: "bottom",
    BOX_ALIGN: "box-align",
    BOX_DECORATION_BREAK: "box-decoration-break",
    BOX_DIRECTION: "box-direction",
    BOX_FLEX: "box-flex",
    BOX_FLEX_GROUP: "box-flex-group",
    BOX_LINES: "box-lines",
    BOX_ORDINAL_GROUP: "box-ordinal-group",
    BOX_ORIENT: "box-orient",
    BOX_PACK: "box-pack",
    BOX_SHADOW: "box-shadow",
    BOX_SIZING: "box-sizing",
    BREAK_AFTER: "break-after",
    BREAK_BEFORE: "break-before",
    BREAK_INSIDE: "break-inside",
    CAPTION_SIDE: "caption-side",
    CARET_COLOR: "caret-color",
    CLEAR: "clear",
    CLIP: "clip",
    CLIP_PATH: "clip-path",
    COLOR: "color",
    COLOR_ADJUST: "color-adjust",
    COLUMN_COUNT: "column-count",
    COLUMN_FILL: "column-fill",
    COLUMN_GAP: "column-gap",
    COLUMN_RULE: "column-rule",
    COLUMN_RULE_COLOR: "column-rule-color",
    COLUMN_RULE_STYLE: "column-rule-style",
    COLUMN_RULE_WIDTH: "column-rule-width",
    COLUMN_SPAN: "column-span",
    COLUMN_WIDTH: "column-width",
    COLUMNS: "columns",
    CONTAIN: "contain",
    CONTENT: "content",
    COUNTER_INCREMENT: "counter-increment",
    COUNTER_RESET: "counter-reset",
    CURSOR: "cursor",
    DIRECTION: "direction",
    DISPLAY: "display",
    EMPTY_CELLS: "empty-cells",
    FILTER: "filter",
    FLEX: "flex",
    FLEX_BASIS: "flex-basis",
    FLEX_DIRECTION: "flex-direction",
    FLEX_FLOW: "flex-flow",
    FLEX_GROW: "flex-grow",
    FLEX_SHRINK: "flex-shrink",
    FLEX_WRAP: "flex-wrap",
    FLOAT: "float",
    FONT: "font",
    FONT_FAMILY: "font-family",
    FONT_FEATURE_SETTINGS: "font-feature-settings",
    FONT_KERNING: "font-kerning",
    FONT_LANGUAGE_OVERRIDE: "font-language-override",
    FONT_OPTICAL_SIZING: "font-optical-sizing",
    FONT_SIZE: "font-size",
    FONT_SIZE_ADJUST: "font-size-adjust",
    FONT_STRETCH: "font-stretch",
    FONT_STYLE: "font-style",
    FONT_SYNTHESIS: "font-synthesis",
    FONT_VARIANT: "font-variant",
    FONT_VARIANT_ALTERNATES: "font-variant-alternates",
    FONT_VARIANT_CAPS: "font-variant-caps",
    FONT_VARIANT_EAST_ASIAN: "font-variant-east-asian",
    FONT_VARIANT_LIGATURES: "font-variant-ligatures",
    FONT_VARIANT_NUMERIC: "font-variant-numeric",
    FONT_VARIANT_POSITION: "font-variant-position",
    FONT_VARIATION_SETTINGS: "font-variation-settings",
    FONT_WEIGHT: "font-weight",
    GAP: "gap",
    GRID: "grid",
    GRID_AREA: "grid-area",
    GRID_AUTO_COLUMNS: "grid-auto-columns",
    GRID_AUTO_FLOW: "grid-auto-flow",
    GRID_AUTO_ROWS: "grid-auto-rows",
    GRID_COLUMN: "grid-column",
    GRID_COLUMN_END: "grid-column-end",
    GRID_COLUMN_GAP: "grid-column-gap",
    GRID_COLUMN_START: "grid-column-start",
    GRID_GAP: "grid-gap",
    GRID_ROW: "grid-row",
    GRID_ROW_END: "grid-row-end",
    GRID_ROW_GAP: "grid-row-gap",
    GRID_ROW_START: "grid-row-start",
    GRID_TEMPLATE: "grid-template",
    GRID_TEMPLATE_AREAS: "grid-template-areas",
    GRID_TEMPLATE_COLUMNS: "grid-template-columns",
    GRID_TEMPLATE_ROWS: "grid-template-rows",
    HANGING_PUNCTUATION: "hanging-punctuation",
    HEIGHT: "height",
    HYPHENS: "hyphens",
    IMAGE_ORIENTATION: "image-orientation",
    IMAGE_RENDERING: "image-rendering",
    IMAGE_RESOLUTION: "image-resolution",
    IME_MODE: "ime-mode",
    INITIAL_LETTER: "initial-letter",
    INITIAL_LETTER_ALIGN: "initial-letter-align",
    INLINE_SIZE: "inline-size",
    INSET_BLOCK_END: "inset-block-end",
    INSET_BLOCK_START: "inset-block-start",
    INSET_INLINE_END: "inset-inline-end",
    INSET_INLINE_START: "inset-inline-start",
    ISOLATION: "isolation",
    JUSTIFY_CONTENT: "justify-content",
    JUSTIFY_ITEMS: "justify-items",
    JUSTIFY_SELF: "justify-self",
    LEFT: "left",
    LETTER_SPACING: "letter-spacing",
    LINE_BREAK: "line-break",
    LINE_CLAMP: "line-clamp",
    LINE_HEIGHT: "line-height",
    LIST_STYLE: "list-style",
    LIST_STYLE_IMAGE: "list-style-image",
    LIST_STYLE_POSITION: "list-style-position",
    LIST_STYLE_TYPE: "list-style-type",
    MARGIN: "margin",
    MARGIN_BLOCK_END: "margin-block-end",
    MARGIN_BLOCK_START: "margin-block-start",
    MARGIN_BOTTOM: "margin-bottom",
    MARGIN_INLINE_END: "margin-inline-end",
    MARGIN_INLINE_START: "margin-inline-start",
    MARGIN_LEFT: "margin-left",
    MARGIN_RIGHT: "margin-right",
    MARGIN_TOP: "margin-top",
    MASK: "mask",
    MASK_BORDER: "mask-border",
    MASK_BORDER_MODE: "mask-border-mode",
    MASK_BORDER_OUTSET: "mask-border-outset",
    MASK_BORDER_REPEAT: "mask-border-repeat",
    MASK_BORDER_SLICE: "mask-border-slice",
    MASK_BORDER_SOURCE: "mask-border-source",
    MASK_BORDER_WIDTH: "mask-border-width",
    MASK_CLIP: "mask-clip",
    MASK_COMPOSITE: "mask-composite",
    MASK_IMAGE: "mask-image",
    MASK_MODE: "mask-mode",
    MASK_ORIGIN: "mask-origin",
    MASK_POSITION: "mask-position",
    MASK_REPEAT: "mask-repeat",
    MASK_SIZE: "mask-size",
    MASK_TYPE: "mask-type",
    MAX_BLOCK_SIZE: "max-block-size",
    MAX_HEIGHT: "max-height",
    MAX_INLINE_SIZE: "max-inline-size",
    MAX_LINES: "max-lines",
    MAX_WIDTH: "max-width",
    MIN_BLOCK_SIZE: "min-block-size",
    MIN_HEIGHT: "min-height",
    MIN_INLINE_SIZE: "min-inline-size",
    MIN_WIDTH: "min-width",
    MIX_BLEND_MODE: "mix-blend-mode",
    MOTION: "motion",
    MOTION_OFFSET: "motion-offset",
    MOTION_PATH: "motion-path",
    MOTION_ROTATION: "motion-rotation",
    OBJECT_FIT: "object-fit",
    OBJECT_POSITION: "object-position",
    OFFSET_POSITION: "offset-position",
    OPACITY: "opacity",
    ORDER: "order",
    ORPHANS: "orphans",
    OUTLINE: "outline",
    OUTLINE_COLOR: "outline-color",
    OUTLINE_OFFSET: "outline-offset",
    OUTLINE_STYLE: "outline-style",
    OUTLINE_WIDTH: "outline-width",
    OVERFLOW: "overflow",
    OVERFLOW_ANCHOR: "overflow-anchor",
    OVERFLOW_BLOCK: "overflow-block",
    OVERFLOW_CLIP_BOX: "overflow-clip-box",
    OVERFLOW_INLINE: "overflow-inline",
    OVERFLOW_WRAP: "overflow-wrap",
    OVERFLOW_X: "overflow-x",
    OVERFLOW_Y: "overflow-y",
    OVERSCROLL_BEHAVIOR: "overscroll-behavior",
    OVERSCROLL_BEHAVIOR_X: "overscroll-behavior-x",
    OVERSCROLL_BEHAVIOR_Y: "overscroll-behavior-y",
    PADDING: "padding",
    PADDING_BLOCK_END: "padding-block-end",
    PADDING_BLOCK_START: "padding-block-start",
    PADDING_BOTTOM: "padding-bottom",
    PADDING_INLINE_END: "padding-inline-end",
    PADDING_INLINE_START: "padding-inline-start",
    PADDING_LEFT: "padding-left",
    PADDING_RIGHT: "padding-right",
    PADDING_TOP: "padding-top",
    PAGE_BREAK_AFTER: "page-break-after",
    PAGE_BREAK_BEFORE: "page-break-before",
    PAGE_BREAK_INSIDE: "page-break-inside",
    PAINT_ORDER: "paint-order",
    PERSPECTIVE: "perspective",
    PERSPECTIVE_ORIGIN: "perspective-origin",
    PLACE_CONTENT: "place-content",
    PLACE_ITEMS: "place-items",
    POINTER_EVENTS: "pointer-events",
    POSITION: "position",
    QUOTES: "quotes",
    RESIZE: "resize",
    RIGHT: "right",
    ROTATE: "rotate",
    ROW_GAP: "row-gap",
    RUBY_ALIGN: "ruby-align",
    RUBY_MERGE: "ruby-merge",
    RUBY_POSITION: "ruby-position",
    SCALE: "scale",
    SCROLL_BEHAVIOR: "scroll-behavior",
    SCROLL_SNAP_COORDINATE: "scroll-snap-coordinate",
    SCROLL_SNAP_DESTINATION: "scroll-snap-destination",
    SCROLL_SNAP_POINTS_X: "scroll-snap-points-x",
    SCROLL_SNAP_POINTS_Y: "scroll-snap-points-y",
    SCROLL_SNAP_TYPE: "scroll-snap-type",
    SCROLL_SNAP_TYPE_X: "scroll-snap-type-x",
    SCROLL_SNAP_TYPE_Y: "scroll-snap-type-y",
    SHAPE_IMAGE_THRESHOLD: "shape-image-threshold",
    SHAPE_MARGIN: "shape-margin",
    SHAPE_OUTSIDE: "shape-outside",
    TAB_SIZE: "tab-size",
    TABLE_LAYOUT: "table-layout",
    TEXT_ALIGN: "text-align",
    TEXT_ALIGN_LAST: "text-align-last",
    TEXT_COMBINE_UPRIGHT: "text-combine-upright",
    TEXT_DECORATION: "text-decoration",
    TEXT_DECORATION_COLOR: "text-decoration-color",
    TEXT_DECORATION_LINE: "text-decoration-line",
    TEXT_DECORATION_SKIP: "text-decoration-skip",
    TEXT_DECORATION_SKIP_INK: "text-decoration-skip-ink",
    TEXT_DECORATION_STYLE: "text-decoration-style",
    TEXT_EMPHASIS: "text-emphasis",
    TEXT_EMPHASIS_COLOR: "text-emphasis-color",
    TEXT_EMPHASIS_POSITION: "text-emphasis-position",
    TEXT_EMPHASIS_STYLE: "text-emphasis-style",
    TEXT_INDENT: "text-indent",
    TEXT_JUSTIFY: "text-justify",
    TEXT_ORIENTATION: "text-orientation",
    TEXT_OVERFLOW: "text-overflow",
    TEXT_RENDERING: "text-rendering",
    TEXT_SHADOW: "text-shadow",
    TEXT_SIZE_ADJUST: "text-size-adjust",
    TEXT_TRANSFORM: "text-transform",
    TEXT_UNDERLINE_POSITION: "text-underline-position",
    TOP: "top",
    TOUCH_ACTION: "touch-action",
    TRANSFORM: "transform",
    TRANSFORM_BOX: "transform-box",
    TRANSFORM_ORIGIN: "transform-origin",
    TRANSFORM_STYLE: "transform-style",
    TRANSITION: "transition",
    TRANSITION_DELAY: "transition-delay",
    TRANSITION_DURATION: "transition-duration",
    TRANSITION_PROPERTY: "transition-property",
    TRANSITION_TIMING_FUNCTION: "transition-timing-function",
    TRANSLATE: "translate",
    UNICODE_BIDI: "unicode-bidi",
    USER_SELECT: "user-select",
    VERTICAL_ALIGN: "vertical-align",
    VISIBILITY: "visibility",
    WHITE_SPACE: "white-space",
    WIDOWS: "widows",
    WIDTH: "width",
    WILL_CHANGE: "will-change",
    WORD_BREAK: "word-break",
    WORD_SPACING: "word-spacing",
    WORD_WRAP: "word-wrap",
    WRITING_MODE: "writing-mode",
    Z_INDEX: "z-index",
    ZOOM: "zoom"
};
const _hex = (code: string): string => {
    return code[0] === "#" ? code : "#" + code;
};

const _hexa = (code: string, alpha: number): string => {
    return _hex(code) + ((alpha - 1) * 255).toString(16);
};
export const Color = {
    ALICEBLUE: "aliceblue",
    ANTIQUEWHITE: "antiquewhite",
    AQUA: "aqua",
    AQUAMARINE: "aquamarine",
    AZURE: "azure",
    BEIGE: "beige",
    BISQUE: "bisque",
    BLACK: "black",
    BLANCHEDALMOND: "blanchedalmond",
    BLUE: "blue",
    BLUEVIOLET: "blueviolet",
    BROWN: "brown",
    BURLYWOOD: "burlywood",
    CADETBLUE: "cadetblue",
    CHARTREUSE: "chartreuse",
    CHOCOLATE: "chocolate",
    CORAL: "coral",
    CORNFLOWERBLUE: "cornflowerblue",
    CORNSILK: "cornsilk",
    CRIMSON: "crimson",
    CYAN: "cyan",
    DARKBLUE: "darkblue",
    DARKCYAN: "darkcyan",
    DARKGOLDENROD: "darkgoldenrod",
    DARKGRAY: "darkgray",
    DARKGREEN: "darkgreen",
    DARKGREY: "darkgrey",
    DARKKHAKI: "darkkhaki",
    DARKMAGENTA: "darkmagenta",
    DARKOLIVEGREEN: "darkolivegreen",
    DARKORANGE: "darkorange",
    DARKORCHID: "darkorchid",
    DARKRED: "darkred",
    DARKSALMON: "darksalmon",
    DARKSEAGREEN: "darkseagreen",
    DARKSLATEBLUE: "darkslateblue",
    DARKSLATEGRAY: "darkslategray",
    DARKSLATEGREY: "darkslategrey",
    DARKTURQUOISE: "darkturquoise",
    DARKVIOLET: "darkviolet",
    DEEPPINK: "deeppink",
    DEEPSKYBLUE: "deepskyblue",
    DIMGRAY: "dimgray",
    DIMGREY: "dimgrey",
    DODGERBLUE: "dodgerblue",
    FIREBRICK: "firebrick",
    FLORALWHITE: "floralwhite",
    FORESTGREEN: "forestgreen",
    FUCHSIA: "fuchsia",
    GAINSBORO: "gainsboro",
    GHOSTWHITE: "ghostwhite",
    GOLD: "gold",
    GOLDENROD: "goldenrod",
    GRAY: "gray",
    GREEN: "green",
    GREENYELLOW: "greenyellow",
    GREY: "grey",
    HONEYDEW: "honeydew",
    HOTPINK: "hotpink",
    INDIANRED: "indianred",
    INDIGO: "indigo",
    IVORY: "ivory",
    KHAKI: "khaki",
    LAVENDER: "lavender",
    LAVENDERBLUSH: "lavenderblush",
    LAWNGREEN: "lawngreen",
    LEMONCHIFFON: "lemonchiffon",
    LIGHTBLUE: "lightblue",
    LIGHTCORAL: "lightcoral",
    LIGHTCYAN: "lightcyan",
    LIGHTGOLDENRODYELLOW: "lightgoldenrodyellow",
    LIGHTGRAY: "lightgray",
    LIGHTGREEN: "lightgreen",
    LIGHTGREY: "lightgrey",
    LIGHTPINK: "lightpink",
    LIGHTSALMON: "lightsalmon",
    LIGHTSEAGREEN: "lightseagreen",
    LIGHTSKYBLUE: "lightskyblue",
    LIGHTSLATEGRAY: "lightslategray",
    LIGHTSLATEGREY: "lightslategrey",
    LIGHTSTEELBLUE: "lightsteelblue",
    LIGHTYELLOW: "lightyellow",
    LIME: "lime",
    LIMEGREEN: "limegreen",
    LINEN: "linen",
    MAGENTA: "magenta",
    MAROON: "maroon",
    MEDIUMAQUAMARINE: "mediumaquamarine",
    MEDIUMBLUE: "mediumblue",
    MEDIUMORCHID: "mediumorchid",
    MEDIUMPURPLE: "mediumpurple",
    MEDIUMSEAGREEN: "mediumseagreen",
    MEDIUMSLATEBLUE: "mediumslateblue",
    MEDIUMSPRINGGREEN: "mediumspringgreen",
    MEDIUMTURQUOISE: "mediumturquoise",
    MEDIUMVIOLETRED: "mediumvioletred",
    MIDNIGHTBLUE: "midnightblue",
    MINTCREAM: "mintcream",
    MISTYROSE: "mistyrose",
    MOCCASIN: "moccasin",
    NAVAJOWHITE: "navajowhite",
    NAVY: "navy",
    OLDLACE: "oldlace",
    OLIVE: "olive",
    OLIVEDRAB: "olivedrab",
    ORANGE: "orange",
    ORANGERED: "orangered",
    ORCHID: "orchid",
    PALEGOLDENROD: "palegoldenrod",
    PALEGREEN: "palegreen",
    PALETURQUOISE: "paleturquoise",
    PALEVIOLETRED: "palevioletred",
    PAPAYAWHIP: "papayawhip",
    PEACHPUFF: "peachpuff",
    PERU: "peru",
    PINK: "pink",
    PLUM: "plum",
    POWDERBLUE: "powderblue",
    PURPLE: "purple",
    REBECCAPURPLE: "rebeccapurple",
    RED: "red",
    ROSYBROWN: "rosybrown",
    ROYALBLUE: "royalblue",
    SADDLEBROWN: "saddlebrown",
    SALMON: "salmon",
    SANDYBROWN: "sandybrown",
    SEAGREEN: "seagreen",
    SEASHELL: "seashell",
    SIENNA: "sienna",
    SILVER: "silver",
    SKYBLUE: "skyblue",
    SLATEBLUE: "slateblue",
    SLATEGRAY: "slategray",
    SLATEGREY: "slategrey",
    SNOW: "snow",
    SPRINGGREEN: "springgreen",
    STEELBLUE: "steelblue",
    TAN: "tan",
    TEAL: "teal",
    THISTLE: "thistle",
    TOMATO: "tomato",
    TRANSPARENT: "transparent",
    TURQUOISE: "turquoise",
    VIOLET: "violet",
    WHEAT: "wheat",
    WHITE: "white",
    WHITESMOKE: "whitesmoke",
    YELLOW: "yellow",
    YELLOWGREEN: "yellowgreen",
    hex: _hex,
    hexa: _hexa
};
export const Unit = {
    HZ: "Hz",
    Q: "Q",
    CAP: "cap",
    CH: "ch",
    CM: "cm",
    DEG: "deg",
    DPCM: "dpcm",
    DPI: "dpi",
    DPPX: "dppx",
    EM: "em",
    EX: "ex",
    FR: "fr",
    GRAD: "grad",
    IC: "ic",
    IN: "in",
    KHZ: "kHz",
    LH: "lh",
    MM: "mm",
    MS: "ms",
    PC: "pc",
    PERCENTAGE: "%",
    PT: "pt",
    PX: "px",
    RAD: "rad",
    REM: "rem",
    RLH: "rlh",
    S: "s",
    TURN: "turn",
    VB: "vb",
    VH: "vh",
    VI: "vi",
    VMAX: "vmax",
    VMIN: "vmin",
    VW: "vw",
    X: "x"
};
export const Angle = {
    deg: (...params: number[]): string => {
        return buildDatatype("deg", params);
    },
    grad: (...params: number[]): string => {
        return buildDatatype("grad", params);
    },
    rad: (...params: number[]): string => {
        return buildDatatype("rad", params);
    },
    turn: (...params: number[]): string => {
        return buildDatatype("turn", params);
    }
};
export const Frequency = {
    Hz: (...params: number[]): string => {
        return buildDatatype("Hz", params);
    },
    kHz: (...params: number[]): string => {
        return buildDatatype("kHz", params);
    }
};
export const Length = {
    Q: (...params: number[]): string => {
        return buildDatatype("Q", params);
    },
    X: (...params: number[]): string => {
        return buildDatatype("%", params);
    },
    cap: (...params: number[]): string => {
        return buildDatatype("cap", params);
    },
    ch: (...params: number[]): string => {
        return buildDatatype("ch", params);
    },
    cm: (...params: number[]): string => {
        return buildDatatype("cm", params);
    },
    em: (...params: number[]): string => {
        return buildDatatype("em", params);
    },
    ex: (...params: number[]): string => {
        return buildDatatype("ex", params);
    },
    fr: (...params: number[]): string => {
        return buildDatatype("fr", params);
    },
    ic: (...params: number[]): string => {
        return buildDatatype("ic", params);
    },
    in: (...params: number[]): string => {
        return buildDatatype("in", params);
    },
    lh: (...params: number[]): string => {
        return buildDatatype("lh", params);
    },
    mm: (...params: number[]): string => {
        return buildDatatype("mm", params);
    },
    pc: (...params: number[]): string => {
        return buildDatatype("pc", params);
    },
    pt: (...params: number[]): string => {
        return buildDatatype("pt", params);
    },
    px: (...params: number[]): string => {
        return buildDatatype("px", params);
    },
    rem: (...params: number[]): string => {
        return buildDatatype("rem", params);
    },
    rlh: (...params: number[]): string => {
        return buildDatatype("rlh", params);
    },
    vb: (...params: number[]): string => {
        return buildDatatype("vb", params);
    },
    vh: (...params: number[]): string => {
        return buildDatatype("vh", params);
    },
    vi: (...params: number[]): string => {
        return buildDatatype("vi", params);
    },
    vmax: (...params: number[]): string => {
        return buildDatatype("vmax", params);
    },
    vmin: (...params: number[]): string => {
        return buildDatatype("vmin", params);
    },
    vw: (...params: number[]): string => {
        return buildDatatype("vw", params);
    }
};
export const Resolution = {
    dpcm: (...params: number[]): string => {
        return buildDatatype("dpcm", params);
    },
    dpi: (...params: number[]): string => {
        return buildDatatype("dpi", params);
    },
    dppx: (...params: number[]): string => {
        return buildDatatype("dppx", params);
    },
    x: (...params: number[]): string => {
        return buildDatatype("x", params);
    }
};
export const Time = {
    ms: (...params: number[]): string => {
        return buildDatatype("ms", params);
    },
    s: (...params: number[]): string => {
        return buildDatatype("s", params);
    }
};
const _snapInterval = (...params: Param[]): string => {
    return buildMethod("snapInterval", params);
};
const _snapList = (...params: Param[]): string => {
    return buildMethod("snapList", params);
};
const _stylistic = (...params: Param[]): string => {
    return buildMethod("stylistic", params);
};
const _styleset = (...params: Param[]): string => {
    return buildMethod("styleset", params);
};
const _characterVariant = (...params: Param[]): string => {
    return buildMethod("character-variant", params);
};
const _swash = (...params: Param[]): string => {
    return buildMethod("swash", params);
};
const _ornaments = (...params: Param[]): string => {
    return buildMethod("ornaments", params);
};
const _annotation = (...params: Param[]): string => {
    return buildMethod("annotation", params);
};
const _repeat = (...params: Param[]): string => {
    return buildMethod("repeat", params);
};
const _attr = (...params: Param[]): string => {
    return buildMethod("attr", params);
};
const _blur = (...params: Param[]): string => {
    return buildMethod("blur", params);
};
const _brightness = (...params: Param[]): string => {
    return buildMethod("brightness", params);
};
const _circle = (...params: Param[]): string => {
    return buildMethod("circle", params);
};
const _contrast = (...params: Param[]): string => {
    return buildMethod("contrast", params);
};
const _symbols = (...params: Param[]): string => {
    return buildMethod("symbols", params);
};
const _crossFade = (...params: Param[]): string => {
    return buildMethod("cross-fade", params);
};
const _cubicBezier = (...params: Param[]): string => {
    return buildMethod("cubic-bezier", params);
};
const _dropShadow = (...params: Param[]): string => {
    return buildMethod("drop-shadow", params);
};
const _element = (...params: Param[]): string => {
    return buildMethod("element", params);
};
const _ellipse = (...params: Param[]): string => {
    return buildMethod("ellipse", params);
};
const _fitContent = (...params: Param[]): string => {
    return buildMethod("fit-content", params);
};
const _minmax = (...params: Param[]): string => {
    return buildMethod("minmax", params);
};
const _frames = (...params: Param[]): string => {
    return buildMethod("frames", params);
};
const _grayscale = (...params: Param[]): string => {
    return buildMethod("grayscale", params);
};
const _hsl = (...params: Param[]): string => {
    return buildMethod("hsl", params);
};
const _hsla = (...params: Param[]): string => {
    return buildMethod("hsla", params);
};
const _hueRotate = (...params: Param[]): string => {
    return buildMethod("hue-rotate", params);
};
const _image = (...params: Param[]): string => {
    return buildMethod("image", params);
};
const _imageSet = (...params: Param[]): string => {
    return buildMethod("image-set", params);
};
const _inset = (...params: Param[]): string => {
    return buildMethod("inset", params);
};
const _invert = (...params: Param[]): string => {
    return buildMethod("invert", params);
};
const _leader = (...params: Param[]): string => {
    return buildMethod("leader", params);
};
const _linearGradient = (...params: Param[]): string => {
    return buildMethod("linear-gradient", params);
};
const _matrix = (...params: Param[]): string => {
    return buildMethod("matrix", params);
};
const _matrix3d = (...params: Param[]): string => {
    return buildMethod("matrix3d", params);
};
const _opacity = (...params: Param[]): string => {
    return buildMethod("opacity", params);
};
const _perspective = (...params: Param[]): string => {
    return buildMethod("perspective", params);
};
const _polygon = (...params: Param[]): string => {
    return buildMethod("polygon", params);
};
const _radialGradient = (...params: Param[]): string => {
    return buildMethod("radial-gradient", params);
};
const _repeatingLinearGradient = (...params: Param[]): string => {
    return buildMethod("repeating-linear-gradient", params);
};
const _repeatingRadialGradient = (...params: Param[]): string => {
    return buildMethod("repeating-radial-gradient", params);
};
const _rgb = (...params: Param[]): string => {
    return buildMethod("rgb", params);
};
const _rgba = (...params: Param[]): string => {
    return buildMethod("rgba", params);
};
const _rotate = (...params: Param[]): string => {
    return buildMethod("rotate", params);
};
const _rotate3d = (...params: Param[]): string => {
    return buildMethod("rotate3d", params);
};
const _rotateX = (...params: Param[]): string => {
    return buildMethod("rotateX", params);
};
const _rotateY = (...params: Param[]): string => {
    return buildMethod("rotateY", params);
};
const _rotateZ = (...params: Param[]): string => {
    return buildMethod("rotateZ", params);
};
const _saturate = (...params: Param[]): string => {
    return buildMethod("saturate", params);
};
const _scale = (...params: Param[]): string => {
    return buildMethod("scale", params);
};
const _scale3d = (...params: Param[]): string => {
    return buildMethod("scale3d", params);
};
const _scaleX = (...params: Param[]): string => {
    return buildMethod("scaleX", params);
};
const _scaleY = (...params: Param[]): string => {
    return buildMethod("scaleY", params);
};
const _scaleZ = (...params: Param[]): string => {
    return buildMethod("scaleZ", params);
};
const _skew = (...params: Param[]): string => {
    return buildMethod("skew", params);
};
const _skewX = (...params: Param[]): string => {
    return buildMethod("skewX", params);
};
const _skewY = (...params: Param[]): string => {
    return buildMethod("skewY", params);
};
const _sepia = (...params: Param[]): string => {
    return buildMethod("sepia", params);
};
const _rect = (...params: Param[]): string => {
    return buildMethod("rect", params);
};
const _steps = (...params: Param[]): string => {
    return buildMethod("steps", params);
};
const _targetCounter = (...params: Param[]): string => {
    return buildMethod("target-counter", params);
};
const _targetCounters = (...params: Param[]): string => {
    return buildMethod("target-counters", params);
};
const _targetText = (...params: Param[]): string => {
    return buildMethod("target-text", params);
};
const _translate = (...params: Param[]): string => {
    return buildMethod("translate", params);
};
const _translate3d = (...params: Param[]): string => {
    return buildMethod("translate3d", params);
};
const _translateX = (...params: Param[]): string => {
    return buildMethod("translateX", params);
};
const _translateY = (...params: Param[]): string => {
    return buildMethod("translateY", params);
};
const _translateZ = (...params: Param[]): string => {
    return buildMethod("translateZ", params);
};
const _var = (...params: Param[]): string => {
    return buildMethod("var", params);
};
const _addParams = (...params: Param[]): string => {
    return params
        .map(value => {
            if (Array.isArray(value)) {
                return "(" + _mulParams(...value) + ")";
            }
            return value;
        })
        .join(" + ");
};

const _mulParams = (...params: Param[]): string => {
    return params
        .map(value => {
            if (Array.isArray(value)) {
                return "(" + _addParams(...value) + ")";
            }
            return value;
        })
        .join(" * ");
};

const _calc = (...params: Param[]): string => {
    return "calc(" + _addParams(...params) + ")";
};
export const Method = {
    annotation: _annotation,
    attr: _attr,
    blur: _blur,
    brightness: _brightness,
    calc: _calc,
    characterVariant: _characterVariant,
    circle: _circle,
    contrast: _contrast,
    crossFade: _crossFade,
    cubicBezier: _cubicBezier,
    dropShadow: _dropShadow,
    element: _element,
    ellipse: _ellipse,
    fitContent: _fitContent,
    frames: _frames,
    grayscale: _grayscale,
    hsl: _hsl,
    hsla: _hsla,
    hueRotate: _hueRotate,
    image: _image,
    imageSet: _imageSet,
    inset: _inset,
    invert: _invert,
    leader: _leader,
    linearGradient: _linearGradient,
    matrix: _matrix,
    matrix3d: _matrix3d,
    minmax: _minmax,
    opacity: _opacity,
    ornaments: _ornaments,
    perspective: _perspective,
    polygon: _polygon,
    radialGradient: _radialGradient,
    rect: _rect,
    repeat: _repeat,
    repeatingLinearGradient: _repeatingLinearGradient,
    repeatingRadialGradient: _repeatingRadialGradient,
    rgb: _rgb,
    rgba: _rgba,
    rotate: _rotate,
    rotate3d: _rotate3d,
    rotateX: _rotateX,
    rotateY: _rotateY,
    rotateZ: _rotateZ,
    saturate: _saturate,
    scale: _scale,
    scale3d: _scale3d,
    scaleX: _scaleX,
    scaleY: _scaleY,
    scaleZ: _scaleZ,
    sepia: _sepia,
    skew: _skew,
    skewX: _skewX,
    skewY: _skewY,
    snapInterval: _snapInterval,
    snapList: _snapList,
    steps: _steps,
    styleset: _styleset,
    stylistic: _stylistic,
    swash: _swash,
    symbols: _symbols,
    targetCounter: _targetCounter,
    targetCounters: _targetCounters,
    targetText: _targetText,
    translate: _translate,
    translate3d: _translate3d,
    translateX: _translateX,
    translateY: _translateY,
    translateZ: _translateZ,
    var: _var
};
const _sheet = (...properties: Sheet[]): Sheet => {
    let sheet: Sheet = {};
    for (let property of properties) {
        (<any>Object).assign(sheet, property);
    }
    return sheet;
};
const _MsAccelerator = {
    set: (...params: Param[]): Sheet => ({ msAccelerator: buildProperty(params) }),
    FALSE: { msAccelerator: "false" },
    TRUE: { msAccelerator: "true" }
};
const _MsBlockProgression = {
    set: (...params: Param[]): Sheet => ({ msBlockProgression: buildProperty(params) }),
    TB: { msBlockProgression: "tb" },
    RL: { msBlockProgression: "rl" },
    BT: { msBlockProgression: "bt" },
    LR: { msBlockProgression: "lr" }
};
const _MsContentZoomChaining = {
    set: (...params: Param[]): Sheet => ({ msContentZoomChaining: buildProperty(params) }),
    NONE: { msContentZoomChaining: "none" },
    CHAINED: { msContentZoomChaining: "chained" }
};
const _MsContentZooming = {
    set: (...params: Param[]): Sheet => ({ msContentZooming: buildProperty(params) }),
    NONE: { msContentZooming: "none" },
    ZOOM: { msContentZooming: "zoom" }
};
const _MsContentZoomLimit = {
    set: (...params: Param[]): Sheet => ({ msContentZoomLimit: buildProperty(params) }),
    X: (...nums: number[]): Sheet => ({ msContentZoomLimit: Length.X(...nums) })
};
const _MsContentZoomLimitMax = {
    set: (...params: Param[]): Sheet => ({ msContentZoomLimitMax: buildProperty(params) }),
    X: (...nums: number[]): Sheet => ({ msContentZoomLimitMax: Length.X(...nums) })
};
const _MsContentZoomLimitMin = {
    set: (...params: Param[]): Sheet => ({ msContentZoomLimitMin: buildProperty(params) }),
    X: (...nums: number[]): Sheet => ({ msContentZoomLimitMin: Length.X(...nums) })
};
const _MsContentZoomSnap = {
    set: (...params: Param[]): Sheet => ({ msContentZoomSnap: buildProperty(params) }),
    NONE: { msContentZoomSnap: "none" },
    PROXIMITY: { msContentZoomSnap: "proximity" },
    MANDATORY: { msContentZoomSnap: "mandatory" },
    snapInterval: (...params: Param[]): Sheet => ({ msContentZoomSnap: Method.snapInterval(...params) }),
    snapList: (...params: Param[]): Sheet => ({ msContentZoomSnap: Method.snapList(...params) })
};
const _MsContentZoomSnapPoints = {
    set: (...params: Param[]): Sheet => ({ msContentZoomSnapPoints: buildProperty(params) }),
    snapInterval: (...params: Param[]): Sheet => ({ msContentZoomSnapPoints: Method.snapInterval(...params) }),
    snapList: (...params: Param[]): Sheet => ({ msContentZoomSnapPoints: Method.snapList(...params) })
};
const _MsContentZoomSnapType = {
    set: (...params: Param[]): Sheet => ({ msContentZoomSnapType: buildProperty(params) }),
    NONE: { msContentZoomSnapType: "none" },
    PROXIMITY: { msContentZoomSnapType: "proximity" },
    MANDATORY: { msContentZoomSnapType: "mandatory" }
};
const _MsFilter = { set: (...params: Param[]): Sheet => ({ msFilter: buildProperty(params) }) };
const _MsFlowFrom = {
    set: (...params: Param[]): Sheet => ({ msFlowFrom: buildProperty(params) }),
    NONE: { msFlowFrom: "none" }
};
const _MsFlowInto = {
    set: (...params: Param[]): Sheet => ({ msFlowInto: buildProperty(params) }),
    NONE: { msFlowInto: "none" }
};
const _MsHighContrastAdjust = {
    set: (...params: Param[]): Sheet => ({ msHighContrastAdjust: buildProperty(params) }),
    AUTO: { msHighContrastAdjust: "auto" },
    NONE: { msHighContrastAdjust: "none" }
};
const _MsHyphenateLimitChars = {
    set: (...params: Param[]): Sheet => ({ msHyphenateLimitChars: buildProperty(params) }),
    AUTO: { msHyphenateLimitChars: "auto" }
};
const _MsHyphenateLimitLines = {
    set: (...params: Param[]): Sheet => ({ msHyphenateLimitLines: buildProperty(params) }),
    NO_LIMIT: { msHyphenateLimitLines: "no-limit" }
};
const _MsHyphenateLimitZone = {
    set: (...params: Param[]): Sheet => ({ msHyphenateLimitZone: buildProperty(params) }),
    X: (...nums: number[]): Sheet => ({ msHyphenateLimitZone: Length.X(...nums) }),
    cap: (...nums: number[]): Sheet => ({ msHyphenateLimitZone: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ msHyphenateLimitZone: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ msHyphenateLimitZone: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ msHyphenateLimitZone: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ msHyphenateLimitZone: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ msHyphenateLimitZone: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ msHyphenateLimitZone: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ msHyphenateLimitZone: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ msHyphenateLimitZone: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ msHyphenateLimitZone: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ msHyphenateLimitZone: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ msHyphenateLimitZone: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ msHyphenateLimitZone: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ msHyphenateLimitZone: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ msHyphenateLimitZone: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ msHyphenateLimitZone: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ msHyphenateLimitZone: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ msHyphenateLimitZone: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ msHyphenateLimitZone: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ msHyphenateLimitZone: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ msHyphenateLimitZone: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ msHyphenateLimitZone: Length.fr(...nums) })
};
const _MsImeAlign = {
    set: (...params: Param[]): Sheet => ({ msImeAlign: buildProperty(params) }),
    AUTO: { msImeAlign: "auto" },
    AFTER: { msImeAlign: "after" }
};
const _MsOverflowStyle = {
    set: (...params: Param[]): Sheet => ({ msOverflowStyle: buildProperty(params) }),
    AUTO: { msOverflowStyle: "auto" },
    NONE: { msOverflowStyle: "none" },
    SCROLLBAR: { msOverflowStyle: "scrollbar" },
    MS_AUTOHIDING_SCROLLBAR: { msOverflowStyle: "-ms-autohiding-scrollbar" }
};
const _MsScrollbar3dlightColor = {
    set: (...params: Param[]): Sheet => ({ msScrollbar3dlightColor: buildProperty(params) }),
    rgb: (...params: Param[]): Sheet => ({ msScrollbar3dlightColor: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ msScrollbar3dlightColor: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ msScrollbar3dlightColor: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ msScrollbar3dlightColor: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ msScrollbar3dlightColor: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ msScrollbar3dlightColor: Method.hsla(...params) }),
    BLACK: { msScrollbar3dlightColor: "black" },
    SILVER: { msScrollbar3dlightColor: "silver" },
    GRAY: { msScrollbar3dlightColor: "gray" },
    WHITE: { msScrollbar3dlightColor: "white" },
    MAROON: { msScrollbar3dlightColor: "maroon" },
    RED: { msScrollbar3dlightColor: "red" },
    PURPLE: { msScrollbar3dlightColor: "purple" },
    FUCHSIA: { msScrollbar3dlightColor: "fuchsia" },
    GREEN: { msScrollbar3dlightColor: "green" },
    LIME: { msScrollbar3dlightColor: "lime" },
    OLIVE: { msScrollbar3dlightColor: "olive" },
    YELLOW: { msScrollbar3dlightColor: "yellow" },
    NAVY: { msScrollbar3dlightColor: "navy" },
    BLUE: { msScrollbar3dlightColor: "blue" },
    TEAL: { msScrollbar3dlightColor: "teal" },
    AQUA: { msScrollbar3dlightColor: "aqua" },
    CURRENTCOLOR: { msScrollbar3dlightColor: "currentcolor" },
    ACTIVEBORDER: { msScrollbar3dlightColor: "ActiveBorder" },
    ACTIVECAPTION: { msScrollbar3dlightColor: "ActiveCaption" },
    APPWORKSPACE: { msScrollbar3dlightColor: "AppWorkspace" },
    BACKGROUND: { msScrollbar3dlightColor: "Background" },
    BUTTONFACE: { msScrollbar3dlightColor: "ButtonFace" },
    BUTTONHIGHLIGHT: { msScrollbar3dlightColor: "ButtonHighlight" },
    BUTTONSHADOW: { msScrollbar3dlightColor: "ButtonShadow" },
    BUTTONTEXT: { msScrollbar3dlightColor: "ButtonText" },
    CAPTIONTEXT: { msScrollbar3dlightColor: "CaptionText" },
    GRAYTEXT: { msScrollbar3dlightColor: "GrayText" },
    HIGHLIGHT: { msScrollbar3dlightColor: "Highlight" },
    HIGHLIGHTTEXT: { msScrollbar3dlightColor: "HighlightText" },
    INACTIVEBORDER: { msScrollbar3dlightColor: "InactiveBorder" },
    INACTIVECAPTION: { msScrollbar3dlightColor: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { msScrollbar3dlightColor: "InactiveCaptionText" },
    INFOBACKGROUND: { msScrollbar3dlightColor: "InfoBackground" },
    INFOTEXT: { msScrollbar3dlightColor: "InfoText" },
    MENU: { msScrollbar3dlightColor: "Menu" },
    MENUTEXT: { msScrollbar3dlightColor: "MenuText" },
    SCROLLBAR: { msScrollbar3dlightColor: "Scrollbar" },
    THREEDDARKSHADOW: { msScrollbar3dlightColor: "ThreeDDarkShadow" },
    THREEDFACE: { msScrollbar3dlightColor: "ThreeDFace" },
    THREEDHIGHLIGHT: { msScrollbar3dlightColor: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { msScrollbar3dlightColor: "ThreeDLightShadow" },
    THREEDSHADOW: { msScrollbar3dlightColor: "ThreeDShadow" },
    WINDOW: { msScrollbar3dlightColor: "Window" },
    WINDOWFRAME: { msScrollbar3dlightColor: "WindowFrame" },
    WINDOWTEXT: { msScrollbar3dlightColor: "WindowText" }
};
const _MsScrollbarArrowColor = {
    set: (...params: Param[]): Sheet => ({ msScrollbarArrowColor: buildProperty(params) }),
    rgb: (...params: Param[]): Sheet => ({ msScrollbarArrowColor: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ msScrollbarArrowColor: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ msScrollbarArrowColor: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ msScrollbarArrowColor: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ msScrollbarArrowColor: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ msScrollbarArrowColor: Method.hsla(...params) }),
    BLACK: { msScrollbarArrowColor: "black" },
    SILVER: { msScrollbarArrowColor: "silver" },
    GRAY: { msScrollbarArrowColor: "gray" },
    WHITE: { msScrollbarArrowColor: "white" },
    MAROON: { msScrollbarArrowColor: "maroon" },
    RED: { msScrollbarArrowColor: "red" },
    PURPLE: { msScrollbarArrowColor: "purple" },
    FUCHSIA: { msScrollbarArrowColor: "fuchsia" },
    GREEN: { msScrollbarArrowColor: "green" },
    LIME: { msScrollbarArrowColor: "lime" },
    OLIVE: { msScrollbarArrowColor: "olive" },
    YELLOW: { msScrollbarArrowColor: "yellow" },
    NAVY: { msScrollbarArrowColor: "navy" },
    BLUE: { msScrollbarArrowColor: "blue" },
    TEAL: { msScrollbarArrowColor: "teal" },
    AQUA: { msScrollbarArrowColor: "aqua" },
    CURRENTCOLOR: { msScrollbarArrowColor: "currentcolor" },
    ACTIVEBORDER: { msScrollbarArrowColor: "ActiveBorder" },
    ACTIVECAPTION: { msScrollbarArrowColor: "ActiveCaption" },
    APPWORKSPACE: { msScrollbarArrowColor: "AppWorkspace" },
    BACKGROUND: { msScrollbarArrowColor: "Background" },
    BUTTONFACE: { msScrollbarArrowColor: "ButtonFace" },
    BUTTONHIGHLIGHT: { msScrollbarArrowColor: "ButtonHighlight" },
    BUTTONSHADOW: { msScrollbarArrowColor: "ButtonShadow" },
    BUTTONTEXT: { msScrollbarArrowColor: "ButtonText" },
    CAPTIONTEXT: { msScrollbarArrowColor: "CaptionText" },
    GRAYTEXT: { msScrollbarArrowColor: "GrayText" },
    HIGHLIGHT: { msScrollbarArrowColor: "Highlight" },
    HIGHLIGHTTEXT: { msScrollbarArrowColor: "HighlightText" },
    INACTIVEBORDER: { msScrollbarArrowColor: "InactiveBorder" },
    INACTIVECAPTION: { msScrollbarArrowColor: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { msScrollbarArrowColor: "InactiveCaptionText" },
    INFOBACKGROUND: { msScrollbarArrowColor: "InfoBackground" },
    INFOTEXT: { msScrollbarArrowColor: "InfoText" },
    MENU: { msScrollbarArrowColor: "Menu" },
    MENUTEXT: { msScrollbarArrowColor: "MenuText" },
    SCROLLBAR: { msScrollbarArrowColor: "Scrollbar" },
    THREEDDARKSHADOW: { msScrollbarArrowColor: "ThreeDDarkShadow" },
    THREEDFACE: { msScrollbarArrowColor: "ThreeDFace" },
    THREEDHIGHLIGHT: { msScrollbarArrowColor: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { msScrollbarArrowColor: "ThreeDLightShadow" },
    THREEDSHADOW: { msScrollbarArrowColor: "ThreeDShadow" },
    WINDOW: { msScrollbarArrowColor: "Window" },
    WINDOWFRAME: { msScrollbarArrowColor: "WindowFrame" },
    WINDOWTEXT: { msScrollbarArrowColor: "WindowText" }
};
const _MsScrollbarBaseColor = {
    set: (...params: Param[]): Sheet => ({ msScrollbarBaseColor: buildProperty(params) }),
    rgb: (...params: Param[]): Sheet => ({ msScrollbarBaseColor: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ msScrollbarBaseColor: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ msScrollbarBaseColor: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ msScrollbarBaseColor: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ msScrollbarBaseColor: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ msScrollbarBaseColor: Method.hsla(...params) }),
    BLACK: { msScrollbarBaseColor: "black" },
    SILVER: { msScrollbarBaseColor: "silver" },
    GRAY: { msScrollbarBaseColor: "gray" },
    WHITE: { msScrollbarBaseColor: "white" },
    MAROON: { msScrollbarBaseColor: "maroon" },
    RED: { msScrollbarBaseColor: "red" },
    PURPLE: { msScrollbarBaseColor: "purple" },
    FUCHSIA: { msScrollbarBaseColor: "fuchsia" },
    GREEN: { msScrollbarBaseColor: "green" },
    LIME: { msScrollbarBaseColor: "lime" },
    OLIVE: { msScrollbarBaseColor: "olive" },
    YELLOW: { msScrollbarBaseColor: "yellow" },
    NAVY: { msScrollbarBaseColor: "navy" },
    BLUE: { msScrollbarBaseColor: "blue" },
    TEAL: { msScrollbarBaseColor: "teal" },
    AQUA: { msScrollbarBaseColor: "aqua" },
    CURRENTCOLOR: { msScrollbarBaseColor: "currentcolor" },
    ACTIVEBORDER: { msScrollbarBaseColor: "ActiveBorder" },
    ACTIVECAPTION: { msScrollbarBaseColor: "ActiveCaption" },
    APPWORKSPACE: { msScrollbarBaseColor: "AppWorkspace" },
    BACKGROUND: { msScrollbarBaseColor: "Background" },
    BUTTONFACE: { msScrollbarBaseColor: "ButtonFace" },
    BUTTONHIGHLIGHT: { msScrollbarBaseColor: "ButtonHighlight" },
    BUTTONSHADOW: { msScrollbarBaseColor: "ButtonShadow" },
    BUTTONTEXT: { msScrollbarBaseColor: "ButtonText" },
    CAPTIONTEXT: { msScrollbarBaseColor: "CaptionText" },
    GRAYTEXT: { msScrollbarBaseColor: "GrayText" },
    HIGHLIGHT: { msScrollbarBaseColor: "Highlight" },
    HIGHLIGHTTEXT: { msScrollbarBaseColor: "HighlightText" },
    INACTIVEBORDER: { msScrollbarBaseColor: "InactiveBorder" },
    INACTIVECAPTION: { msScrollbarBaseColor: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { msScrollbarBaseColor: "InactiveCaptionText" },
    INFOBACKGROUND: { msScrollbarBaseColor: "InfoBackground" },
    INFOTEXT: { msScrollbarBaseColor: "InfoText" },
    MENU: { msScrollbarBaseColor: "Menu" },
    MENUTEXT: { msScrollbarBaseColor: "MenuText" },
    SCROLLBAR: { msScrollbarBaseColor: "Scrollbar" },
    THREEDDARKSHADOW: { msScrollbarBaseColor: "ThreeDDarkShadow" },
    THREEDFACE: { msScrollbarBaseColor: "ThreeDFace" },
    THREEDHIGHLIGHT: { msScrollbarBaseColor: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { msScrollbarBaseColor: "ThreeDLightShadow" },
    THREEDSHADOW: { msScrollbarBaseColor: "ThreeDShadow" },
    WINDOW: { msScrollbarBaseColor: "Window" },
    WINDOWFRAME: { msScrollbarBaseColor: "WindowFrame" },
    WINDOWTEXT: { msScrollbarBaseColor: "WindowText" }
};
const _MsScrollbarDarkshadowColor = {
    set: (...params: Param[]): Sheet => ({ msScrollbarDarkshadowColor: buildProperty(params) }),
    rgb: (...params: Param[]): Sheet => ({ msScrollbarDarkshadowColor: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ msScrollbarDarkshadowColor: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ msScrollbarDarkshadowColor: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ msScrollbarDarkshadowColor: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ msScrollbarDarkshadowColor: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ msScrollbarDarkshadowColor: Method.hsla(...params) }),
    BLACK: { msScrollbarDarkshadowColor: "black" },
    SILVER: { msScrollbarDarkshadowColor: "silver" },
    GRAY: { msScrollbarDarkshadowColor: "gray" },
    WHITE: { msScrollbarDarkshadowColor: "white" },
    MAROON: { msScrollbarDarkshadowColor: "maroon" },
    RED: { msScrollbarDarkshadowColor: "red" },
    PURPLE: { msScrollbarDarkshadowColor: "purple" },
    FUCHSIA: { msScrollbarDarkshadowColor: "fuchsia" },
    GREEN: { msScrollbarDarkshadowColor: "green" },
    LIME: { msScrollbarDarkshadowColor: "lime" },
    OLIVE: { msScrollbarDarkshadowColor: "olive" },
    YELLOW: { msScrollbarDarkshadowColor: "yellow" },
    NAVY: { msScrollbarDarkshadowColor: "navy" },
    BLUE: { msScrollbarDarkshadowColor: "blue" },
    TEAL: { msScrollbarDarkshadowColor: "teal" },
    AQUA: { msScrollbarDarkshadowColor: "aqua" },
    CURRENTCOLOR: { msScrollbarDarkshadowColor: "currentcolor" },
    ACTIVEBORDER: { msScrollbarDarkshadowColor: "ActiveBorder" },
    ACTIVECAPTION: { msScrollbarDarkshadowColor: "ActiveCaption" },
    APPWORKSPACE: { msScrollbarDarkshadowColor: "AppWorkspace" },
    BACKGROUND: { msScrollbarDarkshadowColor: "Background" },
    BUTTONFACE: { msScrollbarDarkshadowColor: "ButtonFace" },
    BUTTONHIGHLIGHT: { msScrollbarDarkshadowColor: "ButtonHighlight" },
    BUTTONSHADOW: { msScrollbarDarkshadowColor: "ButtonShadow" },
    BUTTONTEXT: { msScrollbarDarkshadowColor: "ButtonText" },
    CAPTIONTEXT: { msScrollbarDarkshadowColor: "CaptionText" },
    GRAYTEXT: { msScrollbarDarkshadowColor: "GrayText" },
    HIGHLIGHT: { msScrollbarDarkshadowColor: "Highlight" },
    HIGHLIGHTTEXT: { msScrollbarDarkshadowColor: "HighlightText" },
    INACTIVEBORDER: { msScrollbarDarkshadowColor: "InactiveBorder" },
    INACTIVECAPTION: { msScrollbarDarkshadowColor: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { msScrollbarDarkshadowColor: "InactiveCaptionText" },
    INFOBACKGROUND: { msScrollbarDarkshadowColor: "InfoBackground" },
    INFOTEXT: { msScrollbarDarkshadowColor: "InfoText" },
    MENU: { msScrollbarDarkshadowColor: "Menu" },
    MENUTEXT: { msScrollbarDarkshadowColor: "MenuText" },
    SCROLLBAR: { msScrollbarDarkshadowColor: "Scrollbar" },
    THREEDDARKSHADOW: { msScrollbarDarkshadowColor: "ThreeDDarkShadow" },
    THREEDFACE: { msScrollbarDarkshadowColor: "ThreeDFace" },
    THREEDHIGHLIGHT: { msScrollbarDarkshadowColor: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { msScrollbarDarkshadowColor: "ThreeDLightShadow" },
    THREEDSHADOW: { msScrollbarDarkshadowColor: "ThreeDShadow" },
    WINDOW: { msScrollbarDarkshadowColor: "Window" },
    WINDOWFRAME: { msScrollbarDarkshadowColor: "WindowFrame" },
    WINDOWTEXT: { msScrollbarDarkshadowColor: "WindowText" }
};
const _MsScrollbarFaceColor = {
    set: (...params: Param[]): Sheet => ({ msScrollbarFaceColor: buildProperty(params) }),
    rgb: (...params: Param[]): Sheet => ({ msScrollbarFaceColor: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ msScrollbarFaceColor: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ msScrollbarFaceColor: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ msScrollbarFaceColor: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ msScrollbarFaceColor: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ msScrollbarFaceColor: Method.hsla(...params) }),
    BLACK: { msScrollbarFaceColor: "black" },
    SILVER: { msScrollbarFaceColor: "silver" },
    GRAY: { msScrollbarFaceColor: "gray" },
    WHITE: { msScrollbarFaceColor: "white" },
    MAROON: { msScrollbarFaceColor: "maroon" },
    RED: { msScrollbarFaceColor: "red" },
    PURPLE: { msScrollbarFaceColor: "purple" },
    FUCHSIA: { msScrollbarFaceColor: "fuchsia" },
    GREEN: { msScrollbarFaceColor: "green" },
    LIME: { msScrollbarFaceColor: "lime" },
    OLIVE: { msScrollbarFaceColor: "olive" },
    YELLOW: { msScrollbarFaceColor: "yellow" },
    NAVY: { msScrollbarFaceColor: "navy" },
    BLUE: { msScrollbarFaceColor: "blue" },
    TEAL: { msScrollbarFaceColor: "teal" },
    AQUA: { msScrollbarFaceColor: "aqua" },
    CURRENTCOLOR: { msScrollbarFaceColor: "currentcolor" },
    ACTIVEBORDER: { msScrollbarFaceColor: "ActiveBorder" },
    ACTIVECAPTION: { msScrollbarFaceColor: "ActiveCaption" },
    APPWORKSPACE: { msScrollbarFaceColor: "AppWorkspace" },
    BACKGROUND: { msScrollbarFaceColor: "Background" },
    BUTTONFACE: { msScrollbarFaceColor: "ButtonFace" },
    BUTTONHIGHLIGHT: { msScrollbarFaceColor: "ButtonHighlight" },
    BUTTONSHADOW: { msScrollbarFaceColor: "ButtonShadow" },
    BUTTONTEXT: { msScrollbarFaceColor: "ButtonText" },
    CAPTIONTEXT: { msScrollbarFaceColor: "CaptionText" },
    GRAYTEXT: { msScrollbarFaceColor: "GrayText" },
    HIGHLIGHT: { msScrollbarFaceColor: "Highlight" },
    HIGHLIGHTTEXT: { msScrollbarFaceColor: "HighlightText" },
    INACTIVEBORDER: { msScrollbarFaceColor: "InactiveBorder" },
    INACTIVECAPTION: { msScrollbarFaceColor: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { msScrollbarFaceColor: "InactiveCaptionText" },
    INFOBACKGROUND: { msScrollbarFaceColor: "InfoBackground" },
    INFOTEXT: { msScrollbarFaceColor: "InfoText" },
    MENU: { msScrollbarFaceColor: "Menu" },
    MENUTEXT: { msScrollbarFaceColor: "MenuText" },
    SCROLLBAR: { msScrollbarFaceColor: "Scrollbar" },
    THREEDDARKSHADOW: { msScrollbarFaceColor: "ThreeDDarkShadow" },
    THREEDFACE: { msScrollbarFaceColor: "ThreeDFace" },
    THREEDHIGHLIGHT: { msScrollbarFaceColor: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { msScrollbarFaceColor: "ThreeDLightShadow" },
    THREEDSHADOW: { msScrollbarFaceColor: "ThreeDShadow" },
    WINDOW: { msScrollbarFaceColor: "Window" },
    WINDOWFRAME: { msScrollbarFaceColor: "WindowFrame" },
    WINDOWTEXT: { msScrollbarFaceColor: "WindowText" }
};
const _MsScrollbarHighlightColor = {
    set: (...params: Param[]): Sheet => ({ msScrollbarHighlightColor: buildProperty(params) }),
    rgb: (...params: Param[]): Sheet => ({ msScrollbarHighlightColor: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ msScrollbarHighlightColor: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ msScrollbarHighlightColor: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ msScrollbarHighlightColor: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ msScrollbarHighlightColor: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ msScrollbarHighlightColor: Method.hsla(...params) }),
    BLACK: { msScrollbarHighlightColor: "black" },
    SILVER: { msScrollbarHighlightColor: "silver" },
    GRAY: { msScrollbarHighlightColor: "gray" },
    WHITE: { msScrollbarHighlightColor: "white" },
    MAROON: { msScrollbarHighlightColor: "maroon" },
    RED: { msScrollbarHighlightColor: "red" },
    PURPLE: { msScrollbarHighlightColor: "purple" },
    FUCHSIA: { msScrollbarHighlightColor: "fuchsia" },
    GREEN: { msScrollbarHighlightColor: "green" },
    LIME: { msScrollbarHighlightColor: "lime" },
    OLIVE: { msScrollbarHighlightColor: "olive" },
    YELLOW: { msScrollbarHighlightColor: "yellow" },
    NAVY: { msScrollbarHighlightColor: "navy" },
    BLUE: { msScrollbarHighlightColor: "blue" },
    TEAL: { msScrollbarHighlightColor: "teal" },
    AQUA: { msScrollbarHighlightColor: "aqua" },
    CURRENTCOLOR: { msScrollbarHighlightColor: "currentcolor" },
    ACTIVEBORDER: { msScrollbarHighlightColor: "ActiveBorder" },
    ACTIVECAPTION: { msScrollbarHighlightColor: "ActiveCaption" },
    APPWORKSPACE: { msScrollbarHighlightColor: "AppWorkspace" },
    BACKGROUND: { msScrollbarHighlightColor: "Background" },
    BUTTONFACE: { msScrollbarHighlightColor: "ButtonFace" },
    BUTTONHIGHLIGHT: { msScrollbarHighlightColor: "ButtonHighlight" },
    BUTTONSHADOW: { msScrollbarHighlightColor: "ButtonShadow" },
    BUTTONTEXT: { msScrollbarHighlightColor: "ButtonText" },
    CAPTIONTEXT: { msScrollbarHighlightColor: "CaptionText" },
    GRAYTEXT: { msScrollbarHighlightColor: "GrayText" },
    HIGHLIGHT: { msScrollbarHighlightColor: "Highlight" },
    HIGHLIGHTTEXT: { msScrollbarHighlightColor: "HighlightText" },
    INACTIVEBORDER: { msScrollbarHighlightColor: "InactiveBorder" },
    INACTIVECAPTION: { msScrollbarHighlightColor: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { msScrollbarHighlightColor: "InactiveCaptionText" },
    INFOBACKGROUND: { msScrollbarHighlightColor: "InfoBackground" },
    INFOTEXT: { msScrollbarHighlightColor: "InfoText" },
    MENU: { msScrollbarHighlightColor: "Menu" },
    MENUTEXT: { msScrollbarHighlightColor: "MenuText" },
    SCROLLBAR: { msScrollbarHighlightColor: "Scrollbar" },
    THREEDDARKSHADOW: { msScrollbarHighlightColor: "ThreeDDarkShadow" },
    THREEDFACE: { msScrollbarHighlightColor: "ThreeDFace" },
    THREEDHIGHLIGHT: { msScrollbarHighlightColor: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { msScrollbarHighlightColor: "ThreeDLightShadow" },
    THREEDSHADOW: { msScrollbarHighlightColor: "ThreeDShadow" },
    WINDOW: { msScrollbarHighlightColor: "Window" },
    WINDOWFRAME: { msScrollbarHighlightColor: "WindowFrame" },
    WINDOWTEXT: { msScrollbarHighlightColor: "WindowText" }
};
const _MsScrollbarShadowColor = {
    set: (...params: Param[]): Sheet => ({ msScrollbarShadowColor: buildProperty(params) }),
    rgb: (...params: Param[]): Sheet => ({ msScrollbarShadowColor: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ msScrollbarShadowColor: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ msScrollbarShadowColor: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ msScrollbarShadowColor: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ msScrollbarShadowColor: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ msScrollbarShadowColor: Method.hsla(...params) }),
    BLACK: { msScrollbarShadowColor: "black" },
    SILVER: { msScrollbarShadowColor: "silver" },
    GRAY: { msScrollbarShadowColor: "gray" },
    WHITE: { msScrollbarShadowColor: "white" },
    MAROON: { msScrollbarShadowColor: "maroon" },
    RED: { msScrollbarShadowColor: "red" },
    PURPLE: { msScrollbarShadowColor: "purple" },
    FUCHSIA: { msScrollbarShadowColor: "fuchsia" },
    GREEN: { msScrollbarShadowColor: "green" },
    LIME: { msScrollbarShadowColor: "lime" },
    OLIVE: { msScrollbarShadowColor: "olive" },
    YELLOW: { msScrollbarShadowColor: "yellow" },
    NAVY: { msScrollbarShadowColor: "navy" },
    BLUE: { msScrollbarShadowColor: "blue" },
    TEAL: { msScrollbarShadowColor: "teal" },
    AQUA: { msScrollbarShadowColor: "aqua" },
    CURRENTCOLOR: { msScrollbarShadowColor: "currentcolor" },
    ACTIVEBORDER: { msScrollbarShadowColor: "ActiveBorder" },
    ACTIVECAPTION: { msScrollbarShadowColor: "ActiveCaption" },
    APPWORKSPACE: { msScrollbarShadowColor: "AppWorkspace" },
    BACKGROUND: { msScrollbarShadowColor: "Background" },
    BUTTONFACE: { msScrollbarShadowColor: "ButtonFace" },
    BUTTONHIGHLIGHT: { msScrollbarShadowColor: "ButtonHighlight" },
    BUTTONSHADOW: { msScrollbarShadowColor: "ButtonShadow" },
    BUTTONTEXT: { msScrollbarShadowColor: "ButtonText" },
    CAPTIONTEXT: { msScrollbarShadowColor: "CaptionText" },
    GRAYTEXT: { msScrollbarShadowColor: "GrayText" },
    HIGHLIGHT: { msScrollbarShadowColor: "Highlight" },
    HIGHLIGHTTEXT: { msScrollbarShadowColor: "HighlightText" },
    INACTIVEBORDER: { msScrollbarShadowColor: "InactiveBorder" },
    INACTIVECAPTION: { msScrollbarShadowColor: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { msScrollbarShadowColor: "InactiveCaptionText" },
    INFOBACKGROUND: { msScrollbarShadowColor: "InfoBackground" },
    INFOTEXT: { msScrollbarShadowColor: "InfoText" },
    MENU: { msScrollbarShadowColor: "Menu" },
    MENUTEXT: { msScrollbarShadowColor: "MenuText" },
    SCROLLBAR: { msScrollbarShadowColor: "Scrollbar" },
    THREEDDARKSHADOW: { msScrollbarShadowColor: "ThreeDDarkShadow" },
    THREEDFACE: { msScrollbarShadowColor: "ThreeDFace" },
    THREEDHIGHLIGHT: { msScrollbarShadowColor: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { msScrollbarShadowColor: "ThreeDLightShadow" },
    THREEDSHADOW: { msScrollbarShadowColor: "ThreeDShadow" },
    WINDOW: { msScrollbarShadowColor: "Window" },
    WINDOWFRAME: { msScrollbarShadowColor: "WindowFrame" },
    WINDOWTEXT: { msScrollbarShadowColor: "WindowText" }
};
const _MsScrollbarTrackColor = {
    set: (...params: Param[]): Sheet => ({ msScrollbarTrackColor: buildProperty(params) }),
    rgb: (...params: Param[]): Sheet => ({ msScrollbarTrackColor: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ msScrollbarTrackColor: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ msScrollbarTrackColor: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ msScrollbarTrackColor: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ msScrollbarTrackColor: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ msScrollbarTrackColor: Method.hsla(...params) }),
    BLACK: { msScrollbarTrackColor: "black" },
    SILVER: { msScrollbarTrackColor: "silver" },
    GRAY: { msScrollbarTrackColor: "gray" },
    WHITE: { msScrollbarTrackColor: "white" },
    MAROON: { msScrollbarTrackColor: "maroon" },
    RED: { msScrollbarTrackColor: "red" },
    PURPLE: { msScrollbarTrackColor: "purple" },
    FUCHSIA: { msScrollbarTrackColor: "fuchsia" },
    GREEN: { msScrollbarTrackColor: "green" },
    LIME: { msScrollbarTrackColor: "lime" },
    OLIVE: { msScrollbarTrackColor: "olive" },
    YELLOW: { msScrollbarTrackColor: "yellow" },
    NAVY: { msScrollbarTrackColor: "navy" },
    BLUE: { msScrollbarTrackColor: "blue" },
    TEAL: { msScrollbarTrackColor: "teal" },
    AQUA: { msScrollbarTrackColor: "aqua" },
    CURRENTCOLOR: { msScrollbarTrackColor: "currentcolor" },
    ACTIVEBORDER: { msScrollbarTrackColor: "ActiveBorder" },
    ACTIVECAPTION: { msScrollbarTrackColor: "ActiveCaption" },
    APPWORKSPACE: { msScrollbarTrackColor: "AppWorkspace" },
    BACKGROUND: { msScrollbarTrackColor: "Background" },
    BUTTONFACE: { msScrollbarTrackColor: "ButtonFace" },
    BUTTONHIGHLIGHT: { msScrollbarTrackColor: "ButtonHighlight" },
    BUTTONSHADOW: { msScrollbarTrackColor: "ButtonShadow" },
    BUTTONTEXT: { msScrollbarTrackColor: "ButtonText" },
    CAPTIONTEXT: { msScrollbarTrackColor: "CaptionText" },
    GRAYTEXT: { msScrollbarTrackColor: "GrayText" },
    HIGHLIGHT: { msScrollbarTrackColor: "Highlight" },
    HIGHLIGHTTEXT: { msScrollbarTrackColor: "HighlightText" },
    INACTIVEBORDER: { msScrollbarTrackColor: "InactiveBorder" },
    INACTIVECAPTION: { msScrollbarTrackColor: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { msScrollbarTrackColor: "InactiveCaptionText" },
    INFOBACKGROUND: { msScrollbarTrackColor: "InfoBackground" },
    INFOTEXT: { msScrollbarTrackColor: "InfoText" },
    MENU: { msScrollbarTrackColor: "Menu" },
    MENUTEXT: { msScrollbarTrackColor: "MenuText" },
    SCROLLBAR: { msScrollbarTrackColor: "Scrollbar" },
    THREEDDARKSHADOW: { msScrollbarTrackColor: "ThreeDDarkShadow" },
    THREEDFACE: { msScrollbarTrackColor: "ThreeDFace" },
    THREEDHIGHLIGHT: { msScrollbarTrackColor: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { msScrollbarTrackColor: "ThreeDLightShadow" },
    THREEDSHADOW: { msScrollbarTrackColor: "ThreeDShadow" },
    WINDOW: { msScrollbarTrackColor: "Window" },
    WINDOWFRAME: { msScrollbarTrackColor: "WindowFrame" },
    WINDOWTEXT: { msScrollbarTrackColor: "WindowText" }
};
const _MsScrollChaining = {
    set: (...params: Param[]): Sheet => ({ msScrollChaining: buildProperty(params) }),
    CHAINED: { msScrollChaining: "chained" },
    NONE: { msScrollChaining: "none" }
};
const _MsScrollLimit = {
    set: (...params: Param[]): Sheet => ({ msScrollLimit: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ msScrollLimit: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ msScrollLimit: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ msScrollLimit: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ msScrollLimit: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ msScrollLimit: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ msScrollLimit: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ msScrollLimit: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ msScrollLimit: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ msScrollLimit: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ msScrollLimit: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ msScrollLimit: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ msScrollLimit: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ msScrollLimit: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ msScrollLimit: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ msScrollLimit: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ msScrollLimit: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ msScrollLimit: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ msScrollLimit: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ msScrollLimit: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ msScrollLimit: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ msScrollLimit: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ msScrollLimit: Length.fr(...nums) }),
    AUTO: { msScrollLimit: "auto" }
};
const _MsScrollLimitXMax = {
    set: (...params: Param[]): Sheet => ({ msScrollLimitXMax: buildProperty(params) }),
    AUTO: { msScrollLimitXMax: "auto" },
    cap: (...nums: number[]): Sheet => ({ msScrollLimitXMax: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ msScrollLimitXMax: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ msScrollLimitXMax: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ msScrollLimitXMax: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ msScrollLimitXMax: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ msScrollLimitXMax: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ msScrollLimitXMax: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ msScrollLimitXMax: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ msScrollLimitXMax: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ msScrollLimitXMax: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ msScrollLimitXMax: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ msScrollLimitXMax: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ msScrollLimitXMax: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ msScrollLimitXMax: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ msScrollLimitXMax: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ msScrollLimitXMax: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ msScrollLimitXMax: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ msScrollLimitXMax: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ msScrollLimitXMax: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ msScrollLimitXMax: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ msScrollLimitXMax: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ msScrollLimitXMax: Length.fr(...nums) })
};
const _MsScrollLimitXMin = {
    set: (...params: Param[]): Sheet => ({ msScrollLimitXMin: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ msScrollLimitXMin: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ msScrollLimitXMin: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ msScrollLimitXMin: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ msScrollLimitXMin: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ msScrollLimitXMin: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ msScrollLimitXMin: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ msScrollLimitXMin: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ msScrollLimitXMin: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ msScrollLimitXMin: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ msScrollLimitXMin: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ msScrollLimitXMin: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ msScrollLimitXMin: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ msScrollLimitXMin: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ msScrollLimitXMin: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ msScrollLimitXMin: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ msScrollLimitXMin: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ msScrollLimitXMin: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ msScrollLimitXMin: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ msScrollLimitXMin: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ msScrollLimitXMin: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ msScrollLimitXMin: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ msScrollLimitXMin: Length.fr(...nums) })
};
const _MsScrollLimitYMax = {
    set: (...params: Param[]): Sheet => ({ msScrollLimitYMax: buildProperty(params) }),
    AUTO: { msScrollLimitYMax: "auto" },
    cap: (...nums: number[]): Sheet => ({ msScrollLimitYMax: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ msScrollLimitYMax: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ msScrollLimitYMax: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ msScrollLimitYMax: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ msScrollLimitYMax: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ msScrollLimitYMax: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ msScrollLimitYMax: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ msScrollLimitYMax: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ msScrollLimitYMax: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ msScrollLimitYMax: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ msScrollLimitYMax: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ msScrollLimitYMax: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ msScrollLimitYMax: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ msScrollLimitYMax: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ msScrollLimitYMax: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ msScrollLimitYMax: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ msScrollLimitYMax: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ msScrollLimitYMax: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ msScrollLimitYMax: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ msScrollLimitYMax: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ msScrollLimitYMax: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ msScrollLimitYMax: Length.fr(...nums) })
};
const _MsScrollLimitYMin = {
    set: (...params: Param[]): Sheet => ({ msScrollLimitYMin: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ msScrollLimitYMin: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ msScrollLimitYMin: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ msScrollLimitYMin: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ msScrollLimitYMin: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ msScrollLimitYMin: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ msScrollLimitYMin: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ msScrollLimitYMin: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ msScrollLimitYMin: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ msScrollLimitYMin: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ msScrollLimitYMin: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ msScrollLimitYMin: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ msScrollLimitYMin: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ msScrollLimitYMin: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ msScrollLimitYMin: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ msScrollLimitYMin: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ msScrollLimitYMin: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ msScrollLimitYMin: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ msScrollLimitYMin: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ msScrollLimitYMin: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ msScrollLimitYMin: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ msScrollLimitYMin: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ msScrollLimitYMin: Length.fr(...nums) })
};
const _MsScrollRails = {
    set: (...params: Param[]): Sheet => ({ msScrollRails: buildProperty(params) }),
    NONE: { msScrollRails: "none" },
    RAILED: { msScrollRails: "railed" }
};
const _MsScrollSnapPointsX = {
    set: (...params: Param[]): Sheet => ({ msScrollSnapPointsX: buildProperty(params) }),
    snapInterval: (...params: Param[]): Sheet => ({ msScrollSnapPointsX: Method.snapInterval(...params) }),
    snapList: (...params: Param[]): Sheet => ({ msScrollSnapPointsX: Method.snapList(...params) })
};
const _MsScrollSnapPointsY = {
    set: (...params: Param[]): Sheet => ({ msScrollSnapPointsY: buildProperty(params) }),
    snapInterval: (...params: Param[]): Sheet => ({ msScrollSnapPointsY: Method.snapInterval(...params) }),
    snapList: (...params: Param[]): Sheet => ({ msScrollSnapPointsY: Method.snapList(...params) })
};
const _MsScrollSnapType = {
    set: (...params: Param[]): Sheet => ({ msScrollSnapType: buildProperty(params) }),
    NONE: { msScrollSnapType: "none" },
    PROXIMITY: { msScrollSnapType: "proximity" },
    MANDATORY: { msScrollSnapType: "mandatory" }
};
const _MsScrollSnapX = {
    set: (...params: Param[]): Sheet => ({ msScrollSnapX: buildProperty(params) }),
    NONE: { msScrollSnapX: "none" },
    PROXIMITY: { msScrollSnapX: "proximity" },
    MANDATORY: { msScrollSnapX: "mandatory" },
    snapInterval: (...params: Param[]): Sheet => ({ msScrollSnapX: Method.snapInterval(...params) }),
    snapList: (...params: Param[]): Sheet => ({ msScrollSnapX: Method.snapList(...params) })
};
const _MsScrollSnapY = {
    set: (...params: Param[]): Sheet => ({ msScrollSnapY: buildProperty(params) }),
    NONE: { msScrollSnapY: "none" },
    PROXIMITY: { msScrollSnapY: "proximity" },
    MANDATORY: { msScrollSnapY: "mandatory" },
    snapInterval: (...params: Param[]): Sheet => ({ msScrollSnapY: Method.snapInterval(...params) }),
    snapList: (...params: Param[]): Sheet => ({ msScrollSnapY: Method.snapList(...params) })
};
const _MsScrollTranslation = {
    set: (...params: Param[]): Sheet => ({ msScrollTranslation: buildProperty(params) }),
    NONE: { msScrollTranslation: "none" },
    VERTICAL_TO_HORIZONTAL: { msScrollTranslation: "vertical-to-horizontal" }
};
const _MsTextAutospace = {
    set: (...params: Param[]): Sheet => ({ msTextAutospace: buildProperty(params) }),
    NONE: { msTextAutospace: "none" },
    IDEOGRAPH_ALPHA: { msTextAutospace: "ideograph-alpha" },
    IDEOGRAPH_NUMERIC: { msTextAutospace: "ideograph-numeric" },
    IDEOGRAPH_PARENTHESIS: { msTextAutospace: "ideograph-parenthesis" },
    IDEOGRAPH_SPACE: { msTextAutospace: "ideograph-space" }
};
const _MsTouchSelect = {
    set: (...params: Param[]): Sheet => ({ msTouchSelect: buildProperty(params) }),
    GRIPPERS: { msTouchSelect: "grippers" },
    NONE: { msTouchSelect: "none" }
};
const _MsUserSelect = {
    set: (...params: Param[]): Sheet => ({ msUserSelect: buildProperty(params) }),
    NONE: { msUserSelect: "none" },
    ELEMENT: { msUserSelect: "element" },
    TEXT: { msUserSelect: "text" }
};
const _MsWrapFlow = {
    set: (...params: Param[]): Sheet => ({ msWrapFlow: buildProperty(params) }),
    AUTO: { msWrapFlow: "auto" },
    BOTH: { msWrapFlow: "both" },
    START: { msWrapFlow: "start" },
    END: { msWrapFlow: "end" },
    MAXIMUM: { msWrapFlow: "maximum" },
    CLEAR: { msWrapFlow: "clear" }
};
const _MsWrapMargin = {
    set: (...params: Param[]): Sheet => ({ msWrapMargin: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ msWrapMargin: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ msWrapMargin: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ msWrapMargin: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ msWrapMargin: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ msWrapMargin: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ msWrapMargin: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ msWrapMargin: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ msWrapMargin: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ msWrapMargin: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ msWrapMargin: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ msWrapMargin: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ msWrapMargin: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ msWrapMargin: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ msWrapMargin: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ msWrapMargin: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ msWrapMargin: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ msWrapMargin: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ msWrapMargin: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ msWrapMargin: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ msWrapMargin: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ msWrapMargin: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ msWrapMargin: Length.fr(...nums) })
};
const _MsWrapThrough = {
    set: (...params: Param[]): Sheet => ({ msWrapThrough: buildProperty(params) }),
    WRAP: { msWrapThrough: "wrap" },
    NONE: { msWrapThrough: "none" }
};
const _MozAppearance = {
    set: (...params: Param[]): Sheet => ({ mozAppearance: buildProperty(params) }),
    NONE: { mozAppearance: "none" },
    BUTTON: { mozAppearance: "button" },
    BUTTON_ARROW_DOWN: { mozAppearance: "button-arrow-down" },
    BUTTON_ARROW_NEXT: { mozAppearance: "button-arrow-next" },
    BUTTON_ARROW_PREVIOUS: { mozAppearance: "button-arrow-previous" },
    BUTTON_ARROW_UP: { mozAppearance: "button-arrow-up" },
    BUTTON_BEVEL: { mozAppearance: "button-bevel" },
    BUTTON_FOCUS: { mozAppearance: "button-focus" },
    CARET: { mozAppearance: "caret" },
    CHECKBOX: { mozAppearance: "checkbox" },
    CHECKBOX_CONTAINER: { mozAppearance: "checkbox-container" },
    CHECKBOX_LABEL: { mozAppearance: "checkbox-label" },
    CHECKMENUITEM: { mozAppearance: "checkmenuitem" },
    DUALBUTTON: { mozAppearance: "dualbutton" },
    GROUPBOX: { mozAppearance: "groupbox" },
    LISTBOX: { mozAppearance: "listbox" },
    LISTITEM: { mozAppearance: "listitem" },
    MENUARROW: { mozAppearance: "menuarrow" },
    MENUBAR: { mozAppearance: "menubar" },
    MENUCHECKBOX: { mozAppearance: "menucheckbox" },
    MENUIMAGE: { mozAppearance: "menuimage" },
    MENUITEM: { mozAppearance: "menuitem" },
    MENUITEMTEXT: { mozAppearance: "menuitemtext" },
    MENULIST: { mozAppearance: "menulist" },
    MENULIST_BUTTON: { mozAppearance: "menulist-button" },
    MENULIST_TEXT: { mozAppearance: "menulist-text" },
    MENULIST_TEXTFIELD: { mozAppearance: "menulist-textfield" },
    MENUPOPUP: { mozAppearance: "menupopup" },
    MENURADIO: { mozAppearance: "menuradio" },
    MENUSEPARATOR: { mozAppearance: "menuseparator" },
    METERBAR: { mozAppearance: "meterbar" },
    METERCHUNK: { mozAppearance: "meterchunk" },
    PROGRESSBAR: { mozAppearance: "progressbar" },
    PROGRESSBAR_VERTICAL: { mozAppearance: "progressbar-vertical" },
    PROGRESSCHUNK: { mozAppearance: "progresschunk" },
    PROGRESSCHUNK_VERTICAL: { mozAppearance: "progresschunk-vertical" },
    RADIO: { mozAppearance: "radio" },
    RADIO_CONTAINER: { mozAppearance: "radio-container" },
    RADIO_LABEL: { mozAppearance: "radio-label" },
    RADIOMENUITEM: { mozAppearance: "radiomenuitem" },
    RANGE: { mozAppearance: "range" },
    RANGE_THUMB: { mozAppearance: "range-thumb" },
    RESIZER: { mozAppearance: "resizer" },
    RESIZERPANEL: { mozAppearance: "resizerpanel" },
    SCALE_HORIZONTAL: { mozAppearance: "scale-horizontal" },
    SCALETHUMBEND: { mozAppearance: "scalethumbend" },
    SCALETHUMB_HORIZONTAL: { mozAppearance: "scalethumb-horizontal" },
    SCALETHUMBSTART: { mozAppearance: "scalethumbstart" },
    SCALETHUMBTICK: { mozAppearance: "scalethumbtick" },
    SCALETHUMB_VERTICAL: { mozAppearance: "scalethumb-vertical" },
    SCALE_VERTICAL: { mozAppearance: "scale-vertical" },
    SCROLLBARBUTTON_DOWN: { mozAppearance: "scrollbarbutton-down" },
    SCROLLBARBUTTON_LEFT: { mozAppearance: "scrollbarbutton-left" },
    SCROLLBARBUTTON_RIGHT: { mozAppearance: "scrollbarbutton-right" },
    SCROLLBARBUTTON_UP: { mozAppearance: "scrollbarbutton-up" },
    SCROLLBARTHUMB_HORIZONTAL: { mozAppearance: "scrollbarthumb-horizontal" },
    SCROLLBARTHUMB_VERTICAL: { mozAppearance: "scrollbarthumb-vertical" },
    SCROLLBARTRACK_HORIZONTAL: { mozAppearance: "scrollbartrack-horizontal" },
    SCROLLBARTRACK_VERTICAL: { mozAppearance: "scrollbartrack-vertical" },
    SEARCHFIELD: { mozAppearance: "searchfield" },
    SEPARATOR: { mozAppearance: "separator" },
    SHEET: { mozAppearance: "sheet" },
    SPINNER: { mozAppearance: "spinner" },
    SPINNER_DOWNBUTTON: { mozAppearance: "spinner-downbutton" },
    SPINNER_TEXTFIELD: { mozAppearance: "spinner-textfield" },
    SPINNER_UPBUTTON: { mozAppearance: "spinner-upbutton" },
    SPLITTER: { mozAppearance: "splitter" },
    STATUSBAR: { mozAppearance: "statusbar" },
    STATUSBARPANEL: { mozAppearance: "statusbarpanel" },
    TAB: { mozAppearance: "tab" },
    TABPANEL: { mozAppearance: "tabpanel" },
    TABPANELS: { mozAppearance: "tabpanels" },
    TAB_SCROLL_ARROW_BACK: { mozAppearance: "tab-scroll-arrow-back" },
    TAB_SCROLL_ARROW_FORWARD: { mozAppearance: "tab-scroll-arrow-forward" },
    TEXTFIELD: { mozAppearance: "textfield" },
    TEXTFIELD_MULTILINE: { mozAppearance: "textfield-multiline" },
    TOOLBAR: { mozAppearance: "toolbar" },
    TOOLBARBUTTON: { mozAppearance: "toolbarbutton" },
    TOOLBARBUTTON_DROPDOWN: { mozAppearance: "toolbarbutton-dropdown" },
    TOOLBARGRIPPER: { mozAppearance: "toolbargripper" },
    TOOLBOX: { mozAppearance: "toolbox" },
    TOOLTIP: { mozAppearance: "tooltip" },
    TREEHEADER: { mozAppearance: "treeheader" },
    TREEHEADERCELL: { mozAppearance: "treeheadercell" },
    TREEHEADERSORTARROW: { mozAppearance: "treeheadersortarrow" },
    TREEITEM: { mozAppearance: "treeitem" },
    TREELINE: { mozAppearance: "treeline" },
    TREETWISTY: { mozAppearance: "treetwisty" },
    TREETWISTYOPEN: { mozAppearance: "treetwistyopen" },
    TREEVIEW: { mozAppearance: "treeview" },
    MOZ_MAC_UNIFIED_TOOLBAR: { mozAppearance: "-moz-mac-unified-toolbar" },
    MOZ_WIN_BORDERLESS_GLASS: { mozAppearance: "-moz-win-borderless-glass" },
    MOZ_WIN_BROWSERTABBAR_TOOLBOX: { mozAppearance: "-moz-win-browsertabbar-toolbox" },
    MOZ_WIN_COMMUNICATIONSTEXT: { mozAppearance: "-moz-win-communicationstext" },
    MOZ_WIN_COMMUNICATIONS_TOOLBOX: { mozAppearance: "-moz-win-communications-toolbox" },
    MOZ_WIN_EXCLUDE_GLASS: { mozAppearance: "-moz-win-exclude-glass" },
    MOZ_WIN_GLASS: { mozAppearance: "-moz-win-glass" },
    MOZ_WIN_MEDIATEXT: { mozAppearance: "-moz-win-mediatext" },
    MOZ_WIN_MEDIA_TOOLBOX: { mozAppearance: "-moz-win-media-toolbox" },
    MOZ_WINDOW_BUTTON_BOX: { mozAppearance: "-moz-window-button-box" },
    MOZ_WINDOW_BUTTON_BOX_MAXIMIZED: { mozAppearance: "-moz-window-button-box-maximized" },
    MOZ_WINDOW_BUTTON_CLOSE: { mozAppearance: "-moz-window-button-close" },
    MOZ_WINDOW_BUTTON_MAXIMIZE: { mozAppearance: "-moz-window-button-maximize" },
    MOZ_WINDOW_BUTTON_MINIMIZE: { mozAppearance: "-moz-window-button-minimize" },
    MOZ_WINDOW_BUTTON_RESTORE: { mozAppearance: "-moz-window-button-restore" },
    MOZ_WINDOW_FRAME_BOTTOM: { mozAppearance: "-moz-window-frame-bottom" },
    MOZ_WINDOW_FRAME_LEFT: { mozAppearance: "-moz-window-frame-left" },
    MOZ_WINDOW_FRAME_RIGHT: { mozAppearance: "-moz-window-frame-right" },
    MOZ_WINDOW_TITLEBAR: { mozAppearance: "-moz-window-titlebar" },
    MOZ_WINDOW_TITLEBAR_MAXIMIZED: { mozAppearance: "-moz-window-titlebar-maximized" }
};
const _MozBinding = {
    set: (...params: Param[]): Sheet => ({ mozBinding: buildProperty(params) }),
    NONE: { mozBinding: "none" }
};
const _MozBorderBottomColors = {
    set: (...params: Param[]): Sheet => ({ mozBorderBottomColors: buildProperty(params) }),
    rgb: (...params: Param[]): Sheet => ({ mozBorderBottomColors: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ mozBorderBottomColors: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ mozBorderBottomColors: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ mozBorderBottomColors: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ mozBorderBottomColors: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ mozBorderBottomColors: Method.hsla(...params) }),
    BLACK: { mozBorderBottomColors: "black" },
    SILVER: { mozBorderBottomColors: "silver" },
    GRAY: { mozBorderBottomColors: "gray" },
    WHITE: { mozBorderBottomColors: "white" },
    MAROON: { mozBorderBottomColors: "maroon" },
    RED: { mozBorderBottomColors: "red" },
    PURPLE: { mozBorderBottomColors: "purple" },
    FUCHSIA: { mozBorderBottomColors: "fuchsia" },
    GREEN: { mozBorderBottomColors: "green" },
    LIME: { mozBorderBottomColors: "lime" },
    OLIVE: { mozBorderBottomColors: "olive" },
    YELLOW: { mozBorderBottomColors: "yellow" },
    NAVY: { mozBorderBottomColors: "navy" },
    BLUE: { mozBorderBottomColors: "blue" },
    TEAL: { mozBorderBottomColors: "teal" },
    AQUA: { mozBorderBottomColors: "aqua" },
    CURRENTCOLOR: { mozBorderBottomColors: "currentcolor" },
    ACTIVEBORDER: { mozBorderBottomColors: "ActiveBorder" },
    ACTIVECAPTION: { mozBorderBottomColors: "ActiveCaption" },
    APPWORKSPACE: { mozBorderBottomColors: "AppWorkspace" },
    BACKGROUND: { mozBorderBottomColors: "Background" },
    BUTTONFACE: { mozBorderBottomColors: "ButtonFace" },
    BUTTONHIGHLIGHT: { mozBorderBottomColors: "ButtonHighlight" },
    BUTTONSHADOW: { mozBorderBottomColors: "ButtonShadow" },
    BUTTONTEXT: { mozBorderBottomColors: "ButtonText" },
    CAPTIONTEXT: { mozBorderBottomColors: "CaptionText" },
    GRAYTEXT: { mozBorderBottomColors: "GrayText" },
    HIGHLIGHT: { mozBorderBottomColors: "Highlight" },
    HIGHLIGHTTEXT: { mozBorderBottomColors: "HighlightText" },
    INACTIVEBORDER: { mozBorderBottomColors: "InactiveBorder" },
    INACTIVECAPTION: { mozBorderBottomColors: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { mozBorderBottomColors: "InactiveCaptionText" },
    INFOBACKGROUND: { mozBorderBottomColors: "InfoBackground" },
    INFOTEXT: { mozBorderBottomColors: "InfoText" },
    MENU: { mozBorderBottomColors: "Menu" },
    MENUTEXT: { mozBorderBottomColors: "MenuText" },
    SCROLLBAR: { mozBorderBottomColors: "Scrollbar" },
    THREEDDARKSHADOW: { mozBorderBottomColors: "ThreeDDarkShadow" },
    THREEDFACE: { mozBorderBottomColors: "ThreeDFace" },
    THREEDHIGHLIGHT: { mozBorderBottomColors: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { mozBorderBottomColors: "ThreeDLightShadow" },
    THREEDSHADOW: { mozBorderBottomColors: "ThreeDShadow" },
    WINDOW: { mozBorderBottomColors: "Window" },
    WINDOWFRAME: { mozBorderBottomColors: "WindowFrame" },
    WINDOWTEXT: { mozBorderBottomColors: "WindowText" },
    NONE: { mozBorderBottomColors: "none" }
};
const _MozBorderLeftColors = {
    set: (...params: Param[]): Sheet => ({ mozBorderLeftColors: buildProperty(params) }),
    rgb: (...params: Param[]): Sheet => ({ mozBorderLeftColors: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ mozBorderLeftColors: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ mozBorderLeftColors: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ mozBorderLeftColors: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ mozBorderLeftColors: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ mozBorderLeftColors: Method.hsla(...params) }),
    BLACK: { mozBorderLeftColors: "black" },
    SILVER: { mozBorderLeftColors: "silver" },
    GRAY: { mozBorderLeftColors: "gray" },
    WHITE: { mozBorderLeftColors: "white" },
    MAROON: { mozBorderLeftColors: "maroon" },
    RED: { mozBorderLeftColors: "red" },
    PURPLE: { mozBorderLeftColors: "purple" },
    FUCHSIA: { mozBorderLeftColors: "fuchsia" },
    GREEN: { mozBorderLeftColors: "green" },
    LIME: { mozBorderLeftColors: "lime" },
    OLIVE: { mozBorderLeftColors: "olive" },
    YELLOW: { mozBorderLeftColors: "yellow" },
    NAVY: { mozBorderLeftColors: "navy" },
    BLUE: { mozBorderLeftColors: "blue" },
    TEAL: { mozBorderLeftColors: "teal" },
    AQUA: { mozBorderLeftColors: "aqua" },
    CURRENTCOLOR: { mozBorderLeftColors: "currentcolor" },
    ACTIVEBORDER: { mozBorderLeftColors: "ActiveBorder" },
    ACTIVECAPTION: { mozBorderLeftColors: "ActiveCaption" },
    APPWORKSPACE: { mozBorderLeftColors: "AppWorkspace" },
    BACKGROUND: { mozBorderLeftColors: "Background" },
    BUTTONFACE: { mozBorderLeftColors: "ButtonFace" },
    BUTTONHIGHLIGHT: { mozBorderLeftColors: "ButtonHighlight" },
    BUTTONSHADOW: { mozBorderLeftColors: "ButtonShadow" },
    BUTTONTEXT: { mozBorderLeftColors: "ButtonText" },
    CAPTIONTEXT: { mozBorderLeftColors: "CaptionText" },
    GRAYTEXT: { mozBorderLeftColors: "GrayText" },
    HIGHLIGHT: { mozBorderLeftColors: "Highlight" },
    HIGHLIGHTTEXT: { mozBorderLeftColors: "HighlightText" },
    INACTIVEBORDER: { mozBorderLeftColors: "InactiveBorder" },
    INACTIVECAPTION: { mozBorderLeftColors: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { mozBorderLeftColors: "InactiveCaptionText" },
    INFOBACKGROUND: { mozBorderLeftColors: "InfoBackground" },
    INFOTEXT: { mozBorderLeftColors: "InfoText" },
    MENU: { mozBorderLeftColors: "Menu" },
    MENUTEXT: { mozBorderLeftColors: "MenuText" },
    SCROLLBAR: { mozBorderLeftColors: "Scrollbar" },
    THREEDDARKSHADOW: { mozBorderLeftColors: "ThreeDDarkShadow" },
    THREEDFACE: { mozBorderLeftColors: "ThreeDFace" },
    THREEDHIGHLIGHT: { mozBorderLeftColors: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { mozBorderLeftColors: "ThreeDLightShadow" },
    THREEDSHADOW: { mozBorderLeftColors: "ThreeDShadow" },
    WINDOW: { mozBorderLeftColors: "Window" },
    WINDOWFRAME: { mozBorderLeftColors: "WindowFrame" },
    WINDOWTEXT: { mozBorderLeftColors: "WindowText" },
    NONE: { mozBorderLeftColors: "none" }
};
const _MozBorderRightColors = {
    set: (...params: Param[]): Sheet => ({ mozBorderRightColors: buildProperty(params) }),
    rgb: (...params: Param[]): Sheet => ({ mozBorderRightColors: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ mozBorderRightColors: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ mozBorderRightColors: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ mozBorderRightColors: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ mozBorderRightColors: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ mozBorderRightColors: Method.hsla(...params) }),
    BLACK: { mozBorderRightColors: "black" },
    SILVER: { mozBorderRightColors: "silver" },
    GRAY: { mozBorderRightColors: "gray" },
    WHITE: { mozBorderRightColors: "white" },
    MAROON: { mozBorderRightColors: "maroon" },
    RED: { mozBorderRightColors: "red" },
    PURPLE: { mozBorderRightColors: "purple" },
    FUCHSIA: { mozBorderRightColors: "fuchsia" },
    GREEN: { mozBorderRightColors: "green" },
    LIME: { mozBorderRightColors: "lime" },
    OLIVE: { mozBorderRightColors: "olive" },
    YELLOW: { mozBorderRightColors: "yellow" },
    NAVY: { mozBorderRightColors: "navy" },
    BLUE: { mozBorderRightColors: "blue" },
    TEAL: { mozBorderRightColors: "teal" },
    AQUA: { mozBorderRightColors: "aqua" },
    CURRENTCOLOR: { mozBorderRightColors: "currentcolor" },
    ACTIVEBORDER: { mozBorderRightColors: "ActiveBorder" },
    ACTIVECAPTION: { mozBorderRightColors: "ActiveCaption" },
    APPWORKSPACE: { mozBorderRightColors: "AppWorkspace" },
    BACKGROUND: { mozBorderRightColors: "Background" },
    BUTTONFACE: { mozBorderRightColors: "ButtonFace" },
    BUTTONHIGHLIGHT: { mozBorderRightColors: "ButtonHighlight" },
    BUTTONSHADOW: { mozBorderRightColors: "ButtonShadow" },
    BUTTONTEXT: { mozBorderRightColors: "ButtonText" },
    CAPTIONTEXT: { mozBorderRightColors: "CaptionText" },
    GRAYTEXT: { mozBorderRightColors: "GrayText" },
    HIGHLIGHT: { mozBorderRightColors: "Highlight" },
    HIGHLIGHTTEXT: { mozBorderRightColors: "HighlightText" },
    INACTIVEBORDER: { mozBorderRightColors: "InactiveBorder" },
    INACTIVECAPTION: { mozBorderRightColors: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { mozBorderRightColors: "InactiveCaptionText" },
    INFOBACKGROUND: { mozBorderRightColors: "InfoBackground" },
    INFOTEXT: { mozBorderRightColors: "InfoText" },
    MENU: { mozBorderRightColors: "Menu" },
    MENUTEXT: { mozBorderRightColors: "MenuText" },
    SCROLLBAR: { mozBorderRightColors: "Scrollbar" },
    THREEDDARKSHADOW: { mozBorderRightColors: "ThreeDDarkShadow" },
    THREEDFACE: { mozBorderRightColors: "ThreeDFace" },
    THREEDHIGHLIGHT: { mozBorderRightColors: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { mozBorderRightColors: "ThreeDLightShadow" },
    THREEDSHADOW: { mozBorderRightColors: "ThreeDShadow" },
    WINDOW: { mozBorderRightColors: "Window" },
    WINDOWFRAME: { mozBorderRightColors: "WindowFrame" },
    WINDOWTEXT: { mozBorderRightColors: "WindowText" },
    NONE: { mozBorderRightColors: "none" }
};
const _MozBorderTopColors = {
    set: (...params: Param[]): Sheet => ({ mozBorderTopColors: buildProperty(params) }),
    rgb: (...params: Param[]): Sheet => ({ mozBorderTopColors: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ mozBorderTopColors: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ mozBorderTopColors: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ mozBorderTopColors: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ mozBorderTopColors: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ mozBorderTopColors: Method.hsla(...params) }),
    BLACK: { mozBorderTopColors: "black" },
    SILVER: { mozBorderTopColors: "silver" },
    GRAY: { mozBorderTopColors: "gray" },
    WHITE: { mozBorderTopColors: "white" },
    MAROON: { mozBorderTopColors: "maroon" },
    RED: { mozBorderTopColors: "red" },
    PURPLE: { mozBorderTopColors: "purple" },
    FUCHSIA: { mozBorderTopColors: "fuchsia" },
    GREEN: { mozBorderTopColors: "green" },
    LIME: { mozBorderTopColors: "lime" },
    OLIVE: { mozBorderTopColors: "olive" },
    YELLOW: { mozBorderTopColors: "yellow" },
    NAVY: { mozBorderTopColors: "navy" },
    BLUE: { mozBorderTopColors: "blue" },
    TEAL: { mozBorderTopColors: "teal" },
    AQUA: { mozBorderTopColors: "aqua" },
    CURRENTCOLOR: { mozBorderTopColors: "currentcolor" },
    ACTIVEBORDER: { mozBorderTopColors: "ActiveBorder" },
    ACTIVECAPTION: { mozBorderTopColors: "ActiveCaption" },
    APPWORKSPACE: { mozBorderTopColors: "AppWorkspace" },
    BACKGROUND: { mozBorderTopColors: "Background" },
    BUTTONFACE: { mozBorderTopColors: "ButtonFace" },
    BUTTONHIGHLIGHT: { mozBorderTopColors: "ButtonHighlight" },
    BUTTONSHADOW: { mozBorderTopColors: "ButtonShadow" },
    BUTTONTEXT: { mozBorderTopColors: "ButtonText" },
    CAPTIONTEXT: { mozBorderTopColors: "CaptionText" },
    GRAYTEXT: { mozBorderTopColors: "GrayText" },
    HIGHLIGHT: { mozBorderTopColors: "Highlight" },
    HIGHLIGHTTEXT: { mozBorderTopColors: "HighlightText" },
    INACTIVEBORDER: { mozBorderTopColors: "InactiveBorder" },
    INACTIVECAPTION: { mozBorderTopColors: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { mozBorderTopColors: "InactiveCaptionText" },
    INFOBACKGROUND: { mozBorderTopColors: "InfoBackground" },
    INFOTEXT: { mozBorderTopColors: "InfoText" },
    MENU: { mozBorderTopColors: "Menu" },
    MENUTEXT: { mozBorderTopColors: "MenuText" },
    SCROLLBAR: { mozBorderTopColors: "Scrollbar" },
    THREEDDARKSHADOW: { mozBorderTopColors: "ThreeDDarkShadow" },
    THREEDFACE: { mozBorderTopColors: "ThreeDFace" },
    THREEDHIGHLIGHT: { mozBorderTopColors: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { mozBorderTopColors: "ThreeDLightShadow" },
    THREEDSHADOW: { mozBorderTopColors: "ThreeDShadow" },
    WINDOW: { mozBorderTopColors: "Window" },
    WINDOWFRAME: { mozBorderTopColors: "WindowFrame" },
    WINDOWTEXT: { mozBorderTopColors: "WindowText" },
    NONE: { mozBorderTopColors: "none" }
};
const _MozContextProperties = {
    set: (...params: Param[]): Sheet => ({ mozContextProperties: buildProperty(params) }),
    NONE: { mozContextProperties: "none" },
    FILL: { mozContextProperties: "fill" },
    FILL_OPACITY: { mozContextProperties: "fill-opacity" },
    STROKE: { mozContextProperties: "stroke" },
    STROKE_OPACITY: { mozContextProperties: "stroke-opacity" }
};
const _MozFloatEdge = {
    set: (...params: Param[]): Sheet => ({ mozFloatEdge: buildProperty(params) }),
    BORDER_BOX: { mozFloatEdge: "border-box" },
    CONTENT_BOX: { mozFloatEdge: "content-box" },
    MARGIN_BOX: { mozFloatEdge: "margin-box" },
    PADDING_BOX: { mozFloatEdge: "padding-box" }
};
const _MozForceBrokenImageIcon = {
    set: (...params: Param[]): Sheet => ({ mozForceBrokenImageIcon: buildProperty(params) })
};
const _MozImageRegion = {
    set: (...params: Param[]): Sheet => ({ mozImageRegion: buildProperty(params) }),
    rect: (...params: Param[]): Sheet => ({ mozImageRegion: Method.rect(...params) }),
    AUTO: { mozImageRegion: "auto" }
};
const _MozOrient = {
    set: (...params: Param[]): Sheet => ({ mozOrient: buildProperty(params) }),
    INLINE: { mozOrient: "inline" },
    BLOCK: { mozOrient: "block" },
    HORIZONTAL: { mozOrient: "horizontal" },
    VERTICAL: { mozOrient: "vertical" }
};
const _MozOutlineRadius = {
    set: (...params: Param[]): Sheet => ({ mozOutlineRadius: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ mozOutlineRadius: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ mozOutlineRadius: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ mozOutlineRadius: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ mozOutlineRadius: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ mozOutlineRadius: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ mozOutlineRadius: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ mozOutlineRadius: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ mozOutlineRadius: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ mozOutlineRadius: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ mozOutlineRadius: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ mozOutlineRadius: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ mozOutlineRadius: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ mozOutlineRadius: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ mozOutlineRadius: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ mozOutlineRadius: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ mozOutlineRadius: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ mozOutlineRadius: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ mozOutlineRadius: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ mozOutlineRadius: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ mozOutlineRadius: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ mozOutlineRadius: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ mozOutlineRadius: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ mozOutlineRadius: Length.X(...nums) })
};
const _MozOutlineRadiusBottomleft = {
    set: (...params: Param[]): Sheet => ({ mozOutlineRadiusBottomleft: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomleft: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomleft: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomleft: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomleft: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomleft: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomleft: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomleft: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomleft: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomleft: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomleft: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomleft: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomleft: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomleft: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomleft: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomleft: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomleft: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomleft: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomleft: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomleft: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomleft: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomleft: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomleft: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomleft: Length.X(...nums) })
};
const _MozOutlineRadiusBottomright = {
    set: (...params: Param[]): Sheet => ({ mozOutlineRadiusBottomright: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomright: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomright: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomright: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomright: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomright: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomright: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomright: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomright: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomright: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomright: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomright: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomright: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomright: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomright: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomright: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomright: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomright: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomright: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomright: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomright: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomright: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomright: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ mozOutlineRadiusBottomright: Length.X(...nums) })
};
const _MozOutlineRadiusTopleft = {
    set: (...params: Param[]): Sheet => ({ mozOutlineRadiusTopleft: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopleft: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopleft: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopleft: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopleft: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopleft: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopleft: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopleft: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopleft: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopleft: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopleft: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopleft: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopleft: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopleft: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopleft: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopleft: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopleft: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopleft: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopleft: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopleft: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopleft: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopleft: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopleft: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopleft: Length.X(...nums) })
};
const _MozOutlineRadiusTopright = {
    set: (...params: Param[]): Sheet => ({ mozOutlineRadiusTopright: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopright: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopright: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopright: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopright: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopright: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopright: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopright: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopright: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopright: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopright: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopright: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopright: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopright: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopright: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopright: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopright: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopright: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopright: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopright: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopright: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopright: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopright: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ mozOutlineRadiusTopright: Length.X(...nums) })
};
const _MozStackSizing = {
    set: (...params: Param[]): Sheet => ({ mozStackSizing: buildProperty(params) }),
    IGNORE: { mozStackSizing: "ignore" },
    STRETCH_TO_FIT: { mozStackSizing: "stretch-to-fit" }
};
const _MozTextBlink = {
    set: (...params: Param[]): Sheet => ({ mozTextBlink: buildProperty(params) }),
    NONE: { mozTextBlink: "none" },
    BLINK: { mozTextBlink: "blink" }
};
const _MozUserFocus = {
    set: (...params: Param[]): Sheet => ({ mozUserFocus: buildProperty(params) }),
    IGNORE: { mozUserFocus: "ignore" },
    NORMAL: { mozUserFocus: "normal" },
    SELECT_AFTER: { mozUserFocus: "select-after" },
    SELECT_BEFORE: { mozUserFocus: "select-before" },
    SELECT_MENU: { mozUserFocus: "select-menu" },
    SELECT_SAME: { mozUserFocus: "select-same" },
    SELECT_ALL: { mozUserFocus: "select-all" },
    NONE: { mozUserFocus: "none" }
};
const _MozUserInput = {
    set: (...params: Param[]): Sheet => ({ mozUserInput: buildProperty(params) }),
    AUTO: { mozUserInput: "auto" },
    NONE: { mozUserInput: "none" },
    ENABLED: { mozUserInput: "enabled" },
    DISABLED: { mozUserInput: "disabled" }
};
const _MozUserModify = {
    set: (...params: Param[]): Sheet => ({ mozUserModify: buildProperty(params) }),
    READ_ONLY: { mozUserModify: "read-only" },
    READ_WRITE: { mozUserModify: "read-write" },
    WRITE_ONLY: { mozUserModify: "write-only" }
};
const _MozWindowDragging = {
    set: (...params: Param[]): Sheet => ({ mozWindowDragging: buildProperty(params) }),
    DRAG: { mozWindowDragging: "drag" },
    NO_DRAG: { mozWindowDragging: "no-drag" }
};
const _MozWindowShadow = {
    set: (...params: Param[]): Sheet => ({ mozWindowShadow: buildProperty(params) }),
    DEFAULT: { mozWindowShadow: "default" },
    MENU: { mozWindowShadow: "menu" },
    TOOLTIP: { mozWindowShadow: "tooltip" },
    SHEET: { mozWindowShadow: "sheet" },
    NONE: { mozWindowShadow: "none" }
};
const _WebkitAppearance = {
    set: (...params: Param[]): Sheet => ({ webkitAppearance: buildProperty(params) }),
    NONE: { webkitAppearance: "none" },
    BUTTON: { webkitAppearance: "button" },
    BUTTON_BEVEL: { webkitAppearance: "button-bevel" },
    CARET: { webkitAppearance: "caret" },
    CHECKBOX: { webkitAppearance: "checkbox" },
    DEFAULT_BUTTON: { webkitAppearance: "default-button" },
    INNER_SPIN_BUTTON: { webkitAppearance: "inner-spin-button" },
    LISTBOX: { webkitAppearance: "listbox" },
    LISTITEM: { webkitAppearance: "listitem" },
    MEDIA_CONTROLS_BACKGROUND: { webkitAppearance: "media-controls-background" },
    MEDIA_CONTROLS_FULLSCREEN_BACKGROUND: { webkitAppearance: "media-controls-fullscreen-background" },
    MEDIA_CURRENT_TIME_DISPLAY: { webkitAppearance: "media-current-time-display" },
    MEDIA_ENTER_FULLSCREEN_BUTTON: { webkitAppearance: "media-enter-fullscreen-button" },
    MEDIA_EXIT_FULLSCREEN_BUTTON: { webkitAppearance: "media-exit-fullscreen-button" },
    MEDIA_FULLSCREEN_BUTTON: { webkitAppearance: "media-fullscreen-button" },
    MEDIA_MUTE_BUTTON: { webkitAppearance: "media-mute-button" },
    MEDIA_OVERLAY_PLAY_BUTTON: { webkitAppearance: "media-overlay-play-button" },
    MEDIA_PLAY_BUTTON: { webkitAppearance: "media-play-button" },
    MEDIA_SEEK_BACK_BUTTON: { webkitAppearance: "media-seek-back-button" },
    MEDIA_SEEK_FORWARD_BUTTON: { webkitAppearance: "media-seek-forward-button" },
    MEDIA_SLIDER: { webkitAppearance: "media-slider" },
    MEDIA_SLIDERTHUMB: { webkitAppearance: "media-sliderthumb" },
    MEDIA_TIME_REMAINING_DISPLAY: { webkitAppearance: "media-time-remaining-display" },
    MEDIA_TOGGLE_CLOSED_CAPTIONS_BUTTON: { webkitAppearance: "media-toggle-closed-captions-button" },
    MEDIA_VOLUME_SLIDER: { webkitAppearance: "media-volume-slider" },
    MEDIA_VOLUME_SLIDER_CONTAINER: { webkitAppearance: "media-volume-slider-container" },
    MEDIA_VOLUME_SLIDERTHUMB: { webkitAppearance: "media-volume-sliderthumb" },
    MENULIST: { webkitAppearance: "menulist" },
    MENULIST_BUTTON: { webkitAppearance: "menulist-button" },
    MENULIST_TEXT: { webkitAppearance: "menulist-text" },
    MENULIST_TEXTFIELD: { webkitAppearance: "menulist-textfield" },
    METER: { webkitAppearance: "meter" },
    PROGRESS_BAR: { webkitAppearance: "progress-bar" },
    PROGRESS_BAR_VALUE: { webkitAppearance: "progress-bar-value" },
    PUSH_BUTTON: { webkitAppearance: "push-button" },
    RADIO: { webkitAppearance: "radio" },
    SEARCHFIELD: { webkitAppearance: "searchfield" },
    SEARCHFIELD_CANCEL_BUTTON: { webkitAppearance: "searchfield-cancel-button" },
    SEARCHFIELD_DECORATION: { webkitAppearance: "searchfield-decoration" },
    SEARCHFIELD_RESULTS_BUTTON: { webkitAppearance: "searchfield-results-button" },
    SEARCHFIELD_RESULTS_DECORATION: { webkitAppearance: "searchfield-results-decoration" },
    SLIDER_HORIZONTAL: { webkitAppearance: "slider-horizontal" },
    SLIDER_VERTICAL: { webkitAppearance: "slider-vertical" },
    SLIDERTHUMB_HORIZONTAL: { webkitAppearance: "sliderthumb-horizontal" },
    SLIDERTHUMB_VERTICAL: { webkitAppearance: "sliderthumb-vertical" },
    SQUARE_BUTTON: { webkitAppearance: "square-button" },
    TEXTAREA: { webkitAppearance: "textarea" },
    TEXTFIELD: { webkitAppearance: "textfield" }
};
const _WebkitBorderBefore = {
    set: (...params: Param[]): Sheet => ({ webkitBorderBefore: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ webkitBorderBefore: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ webkitBorderBefore: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ webkitBorderBefore: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ webkitBorderBefore: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ webkitBorderBefore: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ webkitBorderBefore: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ webkitBorderBefore: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ webkitBorderBefore: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ webkitBorderBefore: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ webkitBorderBefore: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ webkitBorderBefore: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ webkitBorderBefore: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ webkitBorderBefore: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ webkitBorderBefore: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ webkitBorderBefore: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ webkitBorderBefore: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ webkitBorderBefore: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ webkitBorderBefore: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ webkitBorderBefore: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ webkitBorderBefore: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ webkitBorderBefore: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ webkitBorderBefore: Length.fr(...nums) }),
    THIN: { webkitBorderBefore: "thin" },
    MEDIUM: { webkitBorderBefore: "medium" },
    THICK: { webkitBorderBefore: "thick" },
    NONE: { webkitBorderBefore: "none" },
    HIDDEN: { webkitBorderBefore: "hidden" },
    DOTTED: { webkitBorderBefore: "dotted" },
    DASHED: { webkitBorderBefore: "dashed" },
    SOLID: { webkitBorderBefore: "solid" },
    DOUBLE: { webkitBorderBefore: "double" },
    GROOVE: { webkitBorderBefore: "groove" },
    RIDGE: { webkitBorderBefore: "ridge" },
    INSET: { webkitBorderBefore: "inset" },
    OUTSET: { webkitBorderBefore: "outset" }
};
const _WebkitBorderBeforeColor = {
    set: (...params: Param[]): Sheet => ({ webkitBorderBeforeColor: buildProperty(params) })
};
const _WebkitBorderBeforeStyle = {
    set: (...params: Param[]): Sheet => ({ webkitBorderBeforeStyle: buildProperty(params) }),
    NONE: { webkitBorderBeforeStyle: "none" },
    HIDDEN: { webkitBorderBeforeStyle: "hidden" },
    DOTTED: { webkitBorderBeforeStyle: "dotted" },
    DASHED: { webkitBorderBeforeStyle: "dashed" },
    SOLID: { webkitBorderBeforeStyle: "solid" },
    DOUBLE: { webkitBorderBeforeStyle: "double" },
    GROOVE: { webkitBorderBeforeStyle: "groove" },
    RIDGE: { webkitBorderBeforeStyle: "ridge" },
    INSET: { webkitBorderBeforeStyle: "inset" },
    OUTSET: { webkitBorderBeforeStyle: "outset" }
};
const _WebkitBorderBeforeWidth = {
    set: (...params: Param[]): Sheet => ({ webkitBorderBeforeWidth: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ webkitBorderBeforeWidth: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ webkitBorderBeforeWidth: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ webkitBorderBeforeWidth: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ webkitBorderBeforeWidth: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ webkitBorderBeforeWidth: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ webkitBorderBeforeWidth: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ webkitBorderBeforeWidth: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ webkitBorderBeforeWidth: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ webkitBorderBeforeWidth: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ webkitBorderBeforeWidth: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ webkitBorderBeforeWidth: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ webkitBorderBeforeWidth: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ webkitBorderBeforeWidth: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ webkitBorderBeforeWidth: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ webkitBorderBeforeWidth: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ webkitBorderBeforeWidth: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ webkitBorderBeforeWidth: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ webkitBorderBeforeWidth: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ webkitBorderBeforeWidth: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ webkitBorderBeforeWidth: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ webkitBorderBeforeWidth: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ webkitBorderBeforeWidth: Length.fr(...nums) }),
    THIN: { webkitBorderBeforeWidth: "thin" },
    MEDIUM: { webkitBorderBeforeWidth: "medium" },
    THICK: { webkitBorderBeforeWidth: "thick" }
};
const _WebkitBoxReflect = {
    set: (...params: Param[]): Sheet => ({ webkitBoxReflect: buildProperty(params) }),
    ABOVE: { webkitBoxReflect: "above" },
    BELOW: { webkitBoxReflect: "below" },
    RIGHT: { webkitBoxReflect: "right" },
    LEFT: { webkitBoxReflect: "left" },
    cap: (...nums: number[]): Sheet => ({ webkitBoxReflect: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ webkitBoxReflect: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ webkitBoxReflect: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ webkitBoxReflect: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ webkitBoxReflect: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ webkitBoxReflect: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ webkitBoxReflect: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ webkitBoxReflect: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ webkitBoxReflect: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ webkitBoxReflect: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ webkitBoxReflect: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ webkitBoxReflect: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ webkitBoxReflect: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ webkitBoxReflect: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ webkitBoxReflect: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ webkitBoxReflect: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ webkitBoxReflect: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ webkitBoxReflect: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ webkitBoxReflect: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ webkitBoxReflect: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ webkitBoxReflect: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ webkitBoxReflect: Length.fr(...nums) }),
    image: (...params: Param[]): Sheet => ({ webkitBoxReflect: Method.image(...params) }),
    imageSet: (...params: Param[]): Sheet => ({ webkitBoxReflect: Method.imageSet(...params) }),
    element: (...params: Param[]): Sheet => ({ webkitBoxReflect: Method.element(...params) }),
    crossFade: (...params: Param[]): Sheet => ({ webkitBoxReflect: Method.crossFade(...params) }),
    linearGradient: (...params: Param[]): Sheet => ({ webkitBoxReflect: Method.linearGradient(...params) }),
    repeatingLinearGradient: (...params: Param[]): Sheet => ({
        webkitBoxReflect: Method.repeatingLinearGradient(...params)
    }),
    radialGradient: (...params: Param[]): Sheet => ({ webkitBoxReflect: Method.radialGradient(...params) }),
    repeatingRadialGradient: (...params: Param[]): Sheet => ({
        webkitBoxReflect: Method.repeatingRadialGradient(...params)
    })
};
const _WebkitMask = {
    set: (...params: Param[]): Sheet => ({ webkitMask: buildProperty(params) }),
    NONE: { webkitMask: "none" },
    image: (...params: Param[]): Sheet => ({ webkitMask: Method.image(...params) }),
    imageSet: (...params: Param[]): Sheet => ({ webkitMask: Method.imageSet(...params) }),
    element: (...params: Param[]): Sheet => ({ webkitMask: Method.element(...params) }),
    crossFade: (...params: Param[]): Sheet => ({ webkitMask: Method.crossFade(...params) }),
    linearGradient: (...params: Param[]): Sheet => ({ webkitMask: Method.linearGradient(...params) }),
    repeatingLinearGradient: (...params: Param[]): Sheet => ({ webkitMask: Method.repeatingLinearGradient(...params) }),
    radialGradient: (...params: Param[]): Sheet => ({ webkitMask: Method.radialGradient(...params) }),
    repeatingRadialGradient: (...params: Param[]): Sheet => ({ webkitMask: Method.repeatingRadialGradient(...params) }),
    AUTO: { webkitMask: "auto" },
    COVER: { webkitMask: "cover" },
    CONTAIN: { webkitMask: "contain" },
    REPEAT_X: { webkitMask: "repeat-x" },
    REPEAT_Y: { webkitMask: "repeat-y" },
    REPEAT: { webkitMask: "repeat" },
    SPACE: { webkitMask: "space" },
    ROUND: { webkitMask: "round" },
    NO_REPEAT: { webkitMask: "no-repeat" },
    BORDER_BOX: { webkitMask: "border-box" },
    PADDING_BOX: { webkitMask: "padding-box" },
    CONTENT_BOX: { webkitMask: "content-box" },
    BORDER: { webkitMask: "border" },
    PADDING: { webkitMask: "padding" },
    CONTENT: { webkitMask: "content" },
    TEXT: { webkitMask: "text" }
};
const _WebkitMaskAttachment = {
    set: (...params: Param[]): Sheet => ({ webkitMaskAttachment: buildProperty(params) }),
    SCROLL: { webkitMaskAttachment: "scroll" },
    FIXED: { webkitMaskAttachment: "fixed" },
    LOCAL: { webkitMaskAttachment: "local" }
};
const _WebkitMaskClip = {
    set: (...params: Param[]): Sheet => ({ webkitMaskClip: buildProperty(params) }),
    BORDER_BOX: { webkitMaskClip: "border-box" },
    PADDING_BOX: { webkitMaskClip: "padding-box" },
    CONTENT_BOX: { webkitMaskClip: "content-box" },
    BORDER: { webkitMaskClip: "border" },
    PADDING: { webkitMaskClip: "padding" },
    CONTENT: { webkitMaskClip: "content" },
    TEXT: { webkitMaskClip: "text" }
};
const _WebkitMaskComposite = {
    set: (...params: Param[]): Sheet => ({ webkitMaskComposite: buildProperty(params) }),
    CLEAR: { webkitMaskComposite: "clear" },
    COPY: { webkitMaskComposite: "copy" },
    SOURCE_OVER: { webkitMaskComposite: "source-over" },
    SOURCE_IN: { webkitMaskComposite: "source-in" },
    SOURCE_OUT: { webkitMaskComposite: "source-out" },
    SOURCE_ATOP: { webkitMaskComposite: "source-atop" },
    DESTINATION_OVER: { webkitMaskComposite: "destination-over" },
    DESTINATION_IN: { webkitMaskComposite: "destination-in" },
    DESTINATION_OUT: { webkitMaskComposite: "destination-out" },
    DESTINATION_ATOP: { webkitMaskComposite: "destination-atop" },
    XOR: { webkitMaskComposite: "xor" }
};
const _WebkitMaskImage = {
    set: (...params: Param[]): Sheet => ({ webkitMaskImage: buildProperty(params) }),
    NONE: { webkitMaskImage: "none" },
    image: (...params: Param[]): Sheet => ({ webkitMaskImage: Method.image(...params) }),
    imageSet: (...params: Param[]): Sheet => ({ webkitMaskImage: Method.imageSet(...params) }),
    element: (...params: Param[]): Sheet => ({ webkitMaskImage: Method.element(...params) }),
    crossFade: (...params: Param[]): Sheet => ({ webkitMaskImage: Method.crossFade(...params) }),
    linearGradient: (...params: Param[]): Sheet => ({ webkitMaskImage: Method.linearGradient(...params) }),
    repeatingLinearGradient: (...params: Param[]): Sheet => ({
        webkitMaskImage: Method.repeatingLinearGradient(...params)
    }),
    radialGradient: (...params: Param[]): Sheet => ({ webkitMaskImage: Method.radialGradient(...params) }),
    repeatingRadialGradient: (...params: Param[]): Sheet => ({
        webkitMaskImage: Method.repeatingRadialGradient(...params)
    })
};
const _WebkitMaskOrigin = {
    set: (...params: Param[]): Sheet => ({ webkitMaskOrigin: buildProperty(params) }),
    BORDER_BOX: { webkitMaskOrigin: "border-box" },
    PADDING_BOX: { webkitMaskOrigin: "padding-box" },
    CONTENT_BOX: { webkitMaskOrigin: "content-box" },
    BORDER: { webkitMaskOrigin: "border" },
    PADDING: { webkitMaskOrigin: "padding" },
    CONTENT: { webkitMaskOrigin: "content" }
};
const _WebkitMaskPosition = {
    set: (...params: Param[]): Sheet => ({ webkitMaskPosition: buildProperty(params) }),
    LEFT: { webkitMaskPosition: "left" },
    CENTER: { webkitMaskPosition: "center" },
    RIGHT: { webkitMaskPosition: "right" },
    TOP: { webkitMaskPosition: "top" },
    BOTTOM: { webkitMaskPosition: "bottom" },
    cap: (...nums: number[]): Sheet => ({ webkitMaskPosition: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ webkitMaskPosition: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ webkitMaskPosition: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ webkitMaskPosition: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ webkitMaskPosition: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ webkitMaskPosition: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ webkitMaskPosition: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ webkitMaskPosition: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ webkitMaskPosition: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ webkitMaskPosition: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ webkitMaskPosition: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ webkitMaskPosition: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ webkitMaskPosition: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ webkitMaskPosition: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ webkitMaskPosition: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ webkitMaskPosition: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ webkitMaskPosition: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ webkitMaskPosition: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ webkitMaskPosition: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ webkitMaskPosition: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ webkitMaskPosition: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ webkitMaskPosition: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ webkitMaskPosition: Length.X(...nums) })
};
const _WebkitMaskPositionX = {
    set: (...params: Param[]): Sheet => ({ webkitMaskPositionX: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ webkitMaskPositionX: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ webkitMaskPositionX: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ webkitMaskPositionX: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ webkitMaskPositionX: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ webkitMaskPositionX: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ webkitMaskPositionX: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ webkitMaskPositionX: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ webkitMaskPositionX: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ webkitMaskPositionX: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ webkitMaskPositionX: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ webkitMaskPositionX: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ webkitMaskPositionX: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ webkitMaskPositionX: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ webkitMaskPositionX: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ webkitMaskPositionX: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ webkitMaskPositionX: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ webkitMaskPositionX: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ webkitMaskPositionX: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ webkitMaskPositionX: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ webkitMaskPositionX: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ webkitMaskPositionX: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ webkitMaskPositionX: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ webkitMaskPositionX: Length.X(...nums) }),
    LEFT: { webkitMaskPositionX: "left" },
    CENTER: { webkitMaskPositionX: "center" },
    RIGHT: { webkitMaskPositionX: "right" }
};
const _WebkitMaskPositionY = {
    set: (...params: Param[]): Sheet => ({ webkitMaskPositionY: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ webkitMaskPositionY: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ webkitMaskPositionY: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ webkitMaskPositionY: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ webkitMaskPositionY: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ webkitMaskPositionY: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ webkitMaskPositionY: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ webkitMaskPositionY: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ webkitMaskPositionY: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ webkitMaskPositionY: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ webkitMaskPositionY: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ webkitMaskPositionY: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ webkitMaskPositionY: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ webkitMaskPositionY: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ webkitMaskPositionY: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ webkitMaskPositionY: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ webkitMaskPositionY: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ webkitMaskPositionY: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ webkitMaskPositionY: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ webkitMaskPositionY: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ webkitMaskPositionY: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ webkitMaskPositionY: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ webkitMaskPositionY: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ webkitMaskPositionY: Length.X(...nums) }),
    TOP: { webkitMaskPositionY: "top" },
    CENTER: { webkitMaskPositionY: "center" },
    BOTTOM: { webkitMaskPositionY: "bottom" }
};
const _WebkitMaskRepeat = {
    set: (...params: Param[]): Sheet => ({ webkitMaskRepeat: buildProperty(params) }),
    REPEAT_X: { webkitMaskRepeat: "repeat-x" },
    REPEAT_Y: { webkitMaskRepeat: "repeat-y" },
    REPEAT: { webkitMaskRepeat: "repeat" },
    SPACE: { webkitMaskRepeat: "space" },
    ROUND: { webkitMaskRepeat: "round" },
    NO_REPEAT: { webkitMaskRepeat: "no-repeat" }
};
const _WebkitMaskRepeatX = {
    set: (...params: Param[]): Sheet => ({ webkitMaskRepeatX: buildProperty(params) }),
    REPEAT: { webkitMaskRepeatX: "repeat" },
    NO_REPEAT: { webkitMaskRepeatX: "no-repeat" },
    SPACE: { webkitMaskRepeatX: "space" },
    ROUND: { webkitMaskRepeatX: "round" }
};
const _WebkitMaskRepeatY = {
    set: (...params: Param[]): Sheet => ({ webkitMaskRepeatY: buildProperty(params) }),
    REPEAT: { webkitMaskRepeatY: "repeat" },
    NO_REPEAT: { webkitMaskRepeatY: "no-repeat" },
    SPACE: { webkitMaskRepeatY: "space" },
    ROUND: { webkitMaskRepeatY: "round" }
};
const _WebkitMaskSize = {
    set: (...params: Param[]): Sheet => ({ webkitMaskSize: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ webkitMaskSize: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ webkitMaskSize: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ webkitMaskSize: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ webkitMaskSize: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ webkitMaskSize: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ webkitMaskSize: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ webkitMaskSize: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ webkitMaskSize: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ webkitMaskSize: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ webkitMaskSize: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ webkitMaskSize: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ webkitMaskSize: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ webkitMaskSize: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ webkitMaskSize: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ webkitMaskSize: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ webkitMaskSize: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ webkitMaskSize: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ webkitMaskSize: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ webkitMaskSize: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ webkitMaskSize: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ webkitMaskSize: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ webkitMaskSize: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ webkitMaskSize: Length.X(...nums) }),
    AUTO: { webkitMaskSize: "auto" },
    COVER: { webkitMaskSize: "cover" },
    CONTAIN: { webkitMaskSize: "contain" }
};
const _WebkitOverflowScrolling = {
    set: (...params: Param[]): Sheet => ({ webkitOverflowScrolling: buildProperty(params) }),
    AUTO: { webkitOverflowScrolling: "auto" },
    TOUCH: { webkitOverflowScrolling: "touch" }
};
const _WebkitTapHighlightColor = {
    set: (...params: Param[]): Sheet => ({ webkitTapHighlightColor: buildProperty(params) }),
    rgb: (...params: Param[]): Sheet => ({ webkitTapHighlightColor: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ webkitTapHighlightColor: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ webkitTapHighlightColor: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ webkitTapHighlightColor: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ webkitTapHighlightColor: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ webkitTapHighlightColor: Method.hsla(...params) }),
    BLACK: { webkitTapHighlightColor: "black" },
    SILVER: { webkitTapHighlightColor: "silver" },
    GRAY: { webkitTapHighlightColor: "gray" },
    WHITE: { webkitTapHighlightColor: "white" },
    MAROON: { webkitTapHighlightColor: "maroon" },
    RED: { webkitTapHighlightColor: "red" },
    PURPLE: { webkitTapHighlightColor: "purple" },
    FUCHSIA: { webkitTapHighlightColor: "fuchsia" },
    GREEN: { webkitTapHighlightColor: "green" },
    LIME: { webkitTapHighlightColor: "lime" },
    OLIVE: { webkitTapHighlightColor: "olive" },
    YELLOW: { webkitTapHighlightColor: "yellow" },
    NAVY: { webkitTapHighlightColor: "navy" },
    BLUE: { webkitTapHighlightColor: "blue" },
    TEAL: { webkitTapHighlightColor: "teal" },
    AQUA: { webkitTapHighlightColor: "aqua" },
    CURRENTCOLOR: { webkitTapHighlightColor: "currentcolor" },
    ACTIVEBORDER: { webkitTapHighlightColor: "ActiveBorder" },
    ACTIVECAPTION: { webkitTapHighlightColor: "ActiveCaption" },
    APPWORKSPACE: { webkitTapHighlightColor: "AppWorkspace" },
    BACKGROUND: { webkitTapHighlightColor: "Background" },
    BUTTONFACE: { webkitTapHighlightColor: "ButtonFace" },
    BUTTONHIGHLIGHT: { webkitTapHighlightColor: "ButtonHighlight" },
    BUTTONSHADOW: { webkitTapHighlightColor: "ButtonShadow" },
    BUTTONTEXT: { webkitTapHighlightColor: "ButtonText" },
    CAPTIONTEXT: { webkitTapHighlightColor: "CaptionText" },
    GRAYTEXT: { webkitTapHighlightColor: "GrayText" },
    HIGHLIGHT: { webkitTapHighlightColor: "Highlight" },
    HIGHLIGHTTEXT: { webkitTapHighlightColor: "HighlightText" },
    INACTIVEBORDER: { webkitTapHighlightColor: "InactiveBorder" },
    INACTIVECAPTION: { webkitTapHighlightColor: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { webkitTapHighlightColor: "InactiveCaptionText" },
    INFOBACKGROUND: { webkitTapHighlightColor: "InfoBackground" },
    INFOTEXT: { webkitTapHighlightColor: "InfoText" },
    MENU: { webkitTapHighlightColor: "Menu" },
    MENUTEXT: { webkitTapHighlightColor: "MenuText" },
    SCROLLBAR: { webkitTapHighlightColor: "Scrollbar" },
    THREEDDARKSHADOW: { webkitTapHighlightColor: "ThreeDDarkShadow" },
    THREEDFACE: { webkitTapHighlightColor: "ThreeDFace" },
    THREEDHIGHLIGHT: { webkitTapHighlightColor: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { webkitTapHighlightColor: "ThreeDLightShadow" },
    THREEDSHADOW: { webkitTapHighlightColor: "ThreeDShadow" },
    WINDOW: { webkitTapHighlightColor: "Window" },
    WINDOWFRAME: { webkitTapHighlightColor: "WindowFrame" },
    WINDOWTEXT: { webkitTapHighlightColor: "WindowText" }
};
const _WebkitTextFillColor = {
    set: (...params: Param[]): Sheet => ({ webkitTextFillColor: buildProperty(params) }),
    rgb: (...params: Param[]): Sheet => ({ webkitTextFillColor: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ webkitTextFillColor: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ webkitTextFillColor: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ webkitTextFillColor: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ webkitTextFillColor: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ webkitTextFillColor: Method.hsla(...params) }),
    BLACK: { webkitTextFillColor: "black" },
    SILVER: { webkitTextFillColor: "silver" },
    GRAY: { webkitTextFillColor: "gray" },
    WHITE: { webkitTextFillColor: "white" },
    MAROON: { webkitTextFillColor: "maroon" },
    RED: { webkitTextFillColor: "red" },
    PURPLE: { webkitTextFillColor: "purple" },
    FUCHSIA: { webkitTextFillColor: "fuchsia" },
    GREEN: { webkitTextFillColor: "green" },
    LIME: { webkitTextFillColor: "lime" },
    OLIVE: { webkitTextFillColor: "olive" },
    YELLOW: { webkitTextFillColor: "yellow" },
    NAVY: { webkitTextFillColor: "navy" },
    BLUE: { webkitTextFillColor: "blue" },
    TEAL: { webkitTextFillColor: "teal" },
    AQUA: { webkitTextFillColor: "aqua" },
    CURRENTCOLOR: { webkitTextFillColor: "currentcolor" },
    ACTIVEBORDER: { webkitTextFillColor: "ActiveBorder" },
    ACTIVECAPTION: { webkitTextFillColor: "ActiveCaption" },
    APPWORKSPACE: { webkitTextFillColor: "AppWorkspace" },
    BACKGROUND: { webkitTextFillColor: "Background" },
    BUTTONFACE: { webkitTextFillColor: "ButtonFace" },
    BUTTONHIGHLIGHT: { webkitTextFillColor: "ButtonHighlight" },
    BUTTONSHADOW: { webkitTextFillColor: "ButtonShadow" },
    BUTTONTEXT: { webkitTextFillColor: "ButtonText" },
    CAPTIONTEXT: { webkitTextFillColor: "CaptionText" },
    GRAYTEXT: { webkitTextFillColor: "GrayText" },
    HIGHLIGHT: { webkitTextFillColor: "Highlight" },
    HIGHLIGHTTEXT: { webkitTextFillColor: "HighlightText" },
    INACTIVEBORDER: { webkitTextFillColor: "InactiveBorder" },
    INACTIVECAPTION: { webkitTextFillColor: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { webkitTextFillColor: "InactiveCaptionText" },
    INFOBACKGROUND: { webkitTextFillColor: "InfoBackground" },
    INFOTEXT: { webkitTextFillColor: "InfoText" },
    MENU: { webkitTextFillColor: "Menu" },
    MENUTEXT: { webkitTextFillColor: "MenuText" },
    SCROLLBAR: { webkitTextFillColor: "Scrollbar" },
    THREEDDARKSHADOW: { webkitTextFillColor: "ThreeDDarkShadow" },
    THREEDFACE: { webkitTextFillColor: "ThreeDFace" },
    THREEDHIGHLIGHT: { webkitTextFillColor: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { webkitTextFillColor: "ThreeDLightShadow" },
    THREEDSHADOW: { webkitTextFillColor: "ThreeDShadow" },
    WINDOW: { webkitTextFillColor: "Window" },
    WINDOWFRAME: { webkitTextFillColor: "WindowFrame" },
    WINDOWTEXT: { webkitTextFillColor: "WindowText" }
};
const _WebkitTextStroke = {
    set: (...params: Param[]): Sheet => ({ webkitTextStroke: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ webkitTextStroke: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ webkitTextStroke: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ webkitTextStroke: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ webkitTextStroke: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ webkitTextStroke: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ webkitTextStroke: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ webkitTextStroke: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ webkitTextStroke: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ webkitTextStroke: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ webkitTextStroke: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ webkitTextStroke: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ webkitTextStroke: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ webkitTextStroke: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ webkitTextStroke: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ webkitTextStroke: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ webkitTextStroke: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ webkitTextStroke: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ webkitTextStroke: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ webkitTextStroke: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ webkitTextStroke: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ webkitTextStroke: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ webkitTextStroke: Length.fr(...nums) }),
    rgb: (...params: Param[]): Sheet => ({ webkitTextStroke: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ webkitTextStroke: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ webkitTextStroke: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ webkitTextStroke: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ webkitTextStroke: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ webkitTextStroke: Method.hsla(...params) }),
    BLACK: { webkitTextStroke: "black" },
    SILVER: { webkitTextStroke: "silver" },
    GRAY: { webkitTextStroke: "gray" },
    WHITE: { webkitTextStroke: "white" },
    MAROON: { webkitTextStroke: "maroon" },
    RED: { webkitTextStroke: "red" },
    PURPLE: { webkitTextStroke: "purple" },
    FUCHSIA: { webkitTextStroke: "fuchsia" },
    GREEN: { webkitTextStroke: "green" },
    LIME: { webkitTextStroke: "lime" },
    OLIVE: { webkitTextStroke: "olive" },
    YELLOW: { webkitTextStroke: "yellow" },
    NAVY: { webkitTextStroke: "navy" },
    BLUE: { webkitTextStroke: "blue" },
    TEAL: { webkitTextStroke: "teal" },
    AQUA: { webkitTextStroke: "aqua" },
    CURRENTCOLOR: { webkitTextStroke: "currentcolor" },
    ACTIVEBORDER: { webkitTextStroke: "ActiveBorder" },
    ACTIVECAPTION: { webkitTextStroke: "ActiveCaption" },
    APPWORKSPACE: { webkitTextStroke: "AppWorkspace" },
    BACKGROUND: { webkitTextStroke: "Background" },
    BUTTONFACE: { webkitTextStroke: "ButtonFace" },
    BUTTONHIGHLIGHT: { webkitTextStroke: "ButtonHighlight" },
    BUTTONSHADOW: { webkitTextStroke: "ButtonShadow" },
    BUTTONTEXT: { webkitTextStroke: "ButtonText" },
    CAPTIONTEXT: { webkitTextStroke: "CaptionText" },
    GRAYTEXT: { webkitTextStroke: "GrayText" },
    HIGHLIGHT: { webkitTextStroke: "Highlight" },
    HIGHLIGHTTEXT: { webkitTextStroke: "HighlightText" },
    INACTIVEBORDER: { webkitTextStroke: "InactiveBorder" },
    INACTIVECAPTION: { webkitTextStroke: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { webkitTextStroke: "InactiveCaptionText" },
    INFOBACKGROUND: { webkitTextStroke: "InfoBackground" },
    INFOTEXT: { webkitTextStroke: "InfoText" },
    MENU: { webkitTextStroke: "Menu" },
    MENUTEXT: { webkitTextStroke: "MenuText" },
    SCROLLBAR: { webkitTextStroke: "Scrollbar" },
    THREEDDARKSHADOW: { webkitTextStroke: "ThreeDDarkShadow" },
    THREEDFACE: { webkitTextStroke: "ThreeDFace" },
    THREEDHIGHLIGHT: { webkitTextStroke: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { webkitTextStroke: "ThreeDLightShadow" },
    THREEDSHADOW: { webkitTextStroke: "ThreeDShadow" },
    WINDOW: { webkitTextStroke: "Window" },
    WINDOWFRAME: { webkitTextStroke: "WindowFrame" },
    WINDOWTEXT: { webkitTextStroke: "WindowText" }
};
const _WebkitTextStrokeColor = {
    set: (...params: Param[]): Sheet => ({ webkitTextStrokeColor: buildProperty(params) }),
    rgb: (...params: Param[]): Sheet => ({ webkitTextStrokeColor: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ webkitTextStrokeColor: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ webkitTextStrokeColor: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ webkitTextStrokeColor: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ webkitTextStrokeColor: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ webkitTextStrokeColor: Method.hsla(...params) }),
    BLACK: { webkitTextStrokeColor: "black" },
    SILVER: { webkitTextStrokeColor: "silver" },
    GRAY: { webkitTextStrokeColor: "gray" },
    WHITE: { webkitTextStrokeColor: "white" },
    MAROON: { webkitTextStrokeColor: "maroon" },
    RED: { webkitTextStrokeColor: "red" },
    PURPLE: { webkitTextStrokeColor: "purple" },
    FUCHSIA: { webkitTextStrokeColor: "fuchsia" },
    GREEN: { webkitTextStrokeColor: "green" },
    LIME: { webkitTextStrokeColor: "lime" },
    OLIVE: { webkitTextStrokeColor: "olive" },
    YELLOW: { webkitTextStrokeColor: "yellow" },
    NAVY: { webkitTextStrokeColor: "navy" },
    BLUE: { webkitTextStrokeColor: "blue" },
    TEAL: { webkitTextStrokeColor: "teal" },
    AQUA: { webkitTextStrokeColor: "aqua" },
    CURRENTCOLOR: { webkitTextStrokeColor: "currentcolor" },
    ACTIVEBORDER: { webkitTextStrokeColor: "ActiveBorder" },
    ACTIVECAPTION: { webkitTextStrokeColor: "ActiveCaption" },
    APPWORKSPACE: { webkitTextStrokeColor: "AppWorkspace" },
    BACKGROUND: { webkitTextStrokeColor: "Background" },
    BUTTONFACE: { webkitTextStrokeColor: "ButtonFace" },
    BUTTONHIGHLIGHT: { webkitTextStrokeColor: "ButtonHighlight" },
    BUTTONSHADOW: { webkitTextStrokeColor: "ButtonShadow" },
    BUTTONTEXT: { webkitTextStrokeColor: "ButtonText" },
    CAPTIONTEXT: { webkitTextStrokeColor: "CaptionText" },
    GRAYTEXT: { webkitTextStrokeColor: "GrayText" },
    HIGHLIGHT: { webkitTextStrokeColor: "Highlight" },
    HIGHLIGHTTEXT: { webkitTextStrokeColor: "HighlightText" },
    INACTIVEBORDER: { webkitTextStrokeColor: "InactiveBorder" },
    INACTIVECAPTION: { webkitTextStrokeColor: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { webkitTextStrokeColor: "InactiveCaptionText" },
    INFOBACKGROUND: { webkitTextStrokeColor: "InfoBackground" },
    INFOTEXT: { webkitTextStrokeColor: "InfoText" },
    MENU: { webkitTextStrokeColor: "Menu" },
    MENUTEXT: { webkitTextStrokeColor: "MenuText" },
    SCROLLBAR: { webkitTextStrokeColor: "Scrollbar" },
    THREEDDARKSHADOW: { webkitTextStrokeColor: "ThreeDDarkShadow" },
    THREEDFACE: { webkitTextStrokeColor: "ThreeDFace" },
    THREEDHIGHLIGHT: { webkitTextStrokeColor: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { webkitTextStrokeColor: "ThreeDLightShadow" },
    THREEDSHADOW: { webkitTextStrokeColor: "ThreeDShadow" },
    WINDOW: { webkitTextStrokeColor: "Window" },
    WINDOWFRAME: { webkitTextStrokeColor: "WindowFrame" },
    WINDOWTEXT: { webkitTextStrokeColor: "WindowText" }
};
const _WebkitTextStrokeWidth = {
    set: (...params: Param[]): Sheet => ({ webkitTextStrokeWidth: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ webkitTextStrokeWidth: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ webkitTextStrokeWidth: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ webkitTextStrokeWidth: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ webkitTextStrokeWidth: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ webkitTextStrokeWidth: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ webkitTextStrokeWidth: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ webkitTextStrokeWidth: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ webkitTextStrokeWidth: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ webkitTextStrokeWidth: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ webkitTextStrokeWidth: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ webkitTextStrokeWidth: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ webkitTextStrokeWidth: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ webkitTextStrokeWidth: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ webkitTextStrokeWidth: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ webkitTextStrokeWidth: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ webkitTextStrokeWidth: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ webkitTextStrokeWidth: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ webkitTextStrokeWidth: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ webkitTextStrokeWidth: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ webkitTextStrokeWidth: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ webkitTextStrokeWidth: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ webkitTextStrokeWidth: Length.fr(...nums) })
};
const _WebkitTouchCallout = {
    set: (...params: Param[]): Sheet => ({ webkitTouchCallout: buildProperty(params) }),
    DEFAULT: { webkitTouchCallout: "default" },
    NONE: { webkitTouchCallout: "none" }
};
const _WebkitUserModify = {
    set: (...params: Param[]): Sheet => ({ webkitUserModify: buildProperty(params) }),
    READ_ONLY: { webkitUserModify: "read-only" },
    READ_WRITE: { webkitUserModify: "read-write" },
    READ_WRITE_PLAINTEXT_ONLY: { webkitUserModify: "read-write-plaintext-only" }
};
const _AlignContent = {
    set: (...params: Param[]): Sheet => ({ alignContent: buildProperty(params) }),
    NORMAL: { alignContent: "normal" },
    FIRST: { alignContent: "first" },
    LAST: { alignContent: "last" },
    BASELINE: { alignContent: "baseline" },
    SPACE_BETWEEN: { alignContent: "space-between" },
    SPACE_AROUND: { alignContent: "space-around" },
    SPACE_EVENLY: { alignContent: "space-evenly" },
    STRETCH: { alignContent: "stretch" },
    UNSAFE: { alignContent: "unsafe" },
    SAFE: { alignContent: "safe" },
    CENTER: { alignContent: "center" },
    START: { alignContent: "start" },
    END: { alignContent: "end" },
    FLEX_START: { alignContent: "flex-start" },
    FLEX_END: { alignContent: "flex-end" }
};
const _AlignItems = {
    set: (...params: Param[]): Sheet => ({ alignItems: buildProperty(params) }),
    NORMAL: { alignItems: "normal" },
    STRETCH: { alignItems: "stretch" },
    FIRST: { alignItems: "first" },
    LAST: { alignItems: "last" },
    BASELINE: { alignItems: "baseline" },
    UNSAFE: { alignItems: "unsafe" },
    SAFE: { alignItems: "safe" },
    CENTER: { alignItems: "center" },
    START: { alignItems: "start" },
    END: { alignItems: "end" },
    SELF_START: { alignItems: "self-start" },
    SELF_END: { alignItems: "self-end" },
    FLEX_START: { alignItems: "flex-start" },
    FLEX_END: { alignItems: "flex-end" }
};
const _AlignSelf = {
    set: (...params: Param[]): Sheet => ({ alignSelf: buildProperty(params) }),
    AUTO: { alignSelf: "auto" },
    NORMAL: { alignSelf: "normal" },
    STRETCH: { alignSelf: "stretch" },
    FIRST: { alignSelf: "first" },
    LAST: { alignSelf: "last" },
    BASELINE: { alignSelf: "baseline" },
    UNSAFE: { alignSelf: "unsafe" },
    SAFE: { alignSelf: "safe" },
    CENTER: { alignSelf: "center" },
    START: { alignSelf: "start" },
    END: { alignSelf: "end" },
    SELF_START: { alignSelf: "self-start" },
    SELF_END: { alignSelf: "self-end" },
    FLEX_START: { alignSelf: "flex-start" },
    FLEX_END: { alignSelf: "flex-end" }
};
const _All = {
    set: (...params: Param[]): Sheet => ({ all: buildProperty(params) }),
    INITIAL: { all: "initial" },
    INHERIT: { all: "inherit" },
    UNSET: { all: "unset" },
    REVERT: { all: "revert" }
};
const _Animation = {
    set: (...params: Param[]): Sheet => ({ animation: buildProperty(params) }),
    s: (...nums: number[]): Sheet => ({ animation: Time.s(...nums) }),
    ms: (...nums: number[]): Sheet => ({ animation: Time.ms(...nums) }),
    LINEAR: { animation: "linear" },
    EASE: { animation: "ease" },
    EASE_IN: { animation: "ease-in" },
    EASE_OUT: { animation: "ease-out" },
    EASE_IN_OUT: { animation: "ease-in-out" },
    cubicBezier: (...params: Param[]): Sheet => ({ animation: Method.cubicBezier(...params) }),
    STEP_START: { animation: "step-start" },
    STEP_END: { animation: "step-end" },
    steps: (...params: Param[]): Sheet => ({ animation: Method.steps(...params) }),
    frames: (...params: Param[]): Sheet => ({ animation: Method.frames(...params) }),
    INFINITE: { animation: "infinite" },
    NORMAL: { animation: "normal" },
    REVERSE: { animation: "reverse" },
    ALTERNATE: { animation: "alternate" },
    ALTERNATE_REVERSE: { animation: "alternate-reverse" },
    NONE: { animation: "none" },
    FORWARDS: { animation: "forwards" },
    BACKWARDS: { animation: "backwards" },
    BOTH: { animation: "both" },
    RUNNING: { animation: "running" },
    PAUSED: { animation: "paused" }
};
const _AnimationDelay = {
    set: (...params: Param[]): Sheet => ({ animationDelay: buildProperty(params) }),
    s: (...nums: number[]): Sheet => ({ animationDelay: Time.s(...nums) }),
    ms: (...nums: number[]): Sheet => ({ animationDelay: Time.ms(...nums) })
};
const _AnimationDirection = {
    set: (...params: Param[]): Sheet => ({ animationDirection: buildProperty(params) }),
    NORMAL: { animationDirection: "normal" },
    REVERSE: { animationDirection: "reverse" },
    ALTERNATE: { animationDirection: "alternate" },
    ALTERNATE_REVERSE: { animationDirection: "alternate-reverse" }
};
const _AnimationDuration = {
    set: (...params: Param[]): Sheet => ({ animationDuration: buildProperty(params) }),
    s: (...nums: number[]): Sheet => ({ animationDuration: Time.s(...nums) }),
    ms: (...nums: number[]): Sheet => ({ animationDuration: Time.ms(...nums) })
};
const _AnimationFillMode = {
    set: (...params: Param[]): Sheet => ({ animationFillMode: buildProperty(params) }),
    NONE: { animationFillMode: "none" },
    FORWARDS: { animationFillMode: "forwards" },
    BACKWARDS: { animationFillMode: "backwards" },
    BOTH: { animationFillMode: "both" }
};
const _AnimationIterationCount = {
    set: (...params: Param[]): Sheet => ({ animationIterationCount: buildProperty(params) }),
    INFINITE: { animationIterationCount: "infinite" }
};
const _AnimationName = {
    set: (...params: Param[]): Sheet => ({ animationName: buildProperty(params) }),
    NONE: { animationName: "none" }
};
const _AnimationPlayState = {
    set: (...params: Param[]): Sheet => ({ animationPlayState: buildProperty(params) }),
    RUNNING: { animationPlayState: "running" },
    PAUSED: { animationPlayState: "paused" }
};
const _AnimationTimingFunction = {
    set: (...params: Param[]): Sheet => ({ animationTimingFunction: buildProperty(params) }),
    LINEAR: { animationTimingFunction: "linear" },
    EASE: { animationTimingFunction: "ease" },
    EASE_IN: { animationTimingFunction: "ease-in" },
    EASE_OUT: { animationTimingFunction: "ease-out" },
    EASE_IN_OUT: { animationTimingFunction: "ease-in-out" },
    cubicBezier: (...params: Param[]): Sheet => ({ animationTimingFunction: Method.cubicBezier(...params) }),
    STEP_START: { animationTimingFunction: "step-start" },
    STEP_END: { animationTimingFunction: "step-end" },
    steps: (...params: Param[]): Sheet => ({ animationTimingFunction: Method.steps(...params) }),
    frames: (...params: Param[]): Sheet => ({ animationTimingFunction: Method.frames(...params) })
};
const _Appearance = {
    set: (...params: Param[]): Sheet => ({ appearance: buildProperty(params) }),
    AUTO: { appearance: "auto" },
    NONE: { appearance: "none" }
};
const _Azimuth = {
    set: (...params: Param[]): Sheet => ({ azimuth: buildProperty(params) }),
    deg: (...nums: number[]): Sheet => ({ azimuth: Angle.deg(...nums) }),
    rad: (...nums: number[]): Sheet => ({ azimuth: Angle.rad(...nums) }),
    grad: (...nums: number[]): Sheet => ({ azimuth: Angle.grad(...nums) }),
    turn: (...nums: number[]): Sheet => ({ azimuth: Angle.turn(...nums) }),
    LEFT_SIDE: { azimuth: "left-side" },
    FAR_LEFT: { azimuth: "far-left" },
    LEFT: { azimuth: "left" },
    CENTER_LEFT: { azimuth: "center-left" },
    CENTER: { azimuth: "center" },
    CENTER_RIGHT: { azimuth: "center-right" },
    RIGHT: { azimuth: "right" },
    FAR_RIGHT: { azimuth: "far-right" },
    RIGHT_SIDE: { azimuth: "right-side" },
    BEHIND: { azimuth: "behind" },
    LEFTWARDS: { azimuth: "leftwards" },
    RIGHTWARDS: { azimuth: "rightwards" }
};
const _BackdropFilter = {
    set: (...params: Param[]): Sheet => ({ backdropFilter: buildProperty(params) }),
    NONE: { backdropFilter: "none" },
    blur: (...params: Param[]): Sheet => ({ backdropFilter: Method.blur(...params) }),
    brightness: (...params: Param[]): Sheet => ({ backdropFilter: Method.brightness(...params) }),
    contrast: (...params: Param[]): Sheet => ({ backdropFilter: Method.contrast(...params) }),
    dropShadow: (...params: Param[]): Sheet => ({ backdropFilter: Method.dropShadow(...params) }),
    grayscale: (...params: Param[]): Sheet => ({ backdropFilter: Method.grayscale(...params) }),
    hueRotate: (...params: Param[]): Sheet => ({ backdropFilter: Method.hueRotate(...params) }),
    invert: (...params: Param[]): Sheet => ({ backdropFilter: Method.invert(...params) }),
    opacity: (...params: Param[]): Sheet => ({ backdropFilter: Method.opacity(...params) }),
    saturate: (...params: Param[]): Sheet => ({ backdropFilter: Method.saturate(...params) }),
    sepia: (...params: Param[]): Sheet => ({ backdropFilter: Method.sepia(...params) })
};
const _BackfaceVisibility = {
    set: (...params: Param[]): Sheet => ({ backfaceVisibility: buildProperty(params) }),
    VISIBLE: { backfaceVisibility: "visible" },
    HIDDEN: { backfaceVisibility: "hidden" }
};
const _Background = {
    set: (...params: Param[]): Sheet => ({ background: buildProperty(params) }),
    NONE: { background: "none" },
    image: (...params: Param[]): Sheet => ({ background: Method.image(...params) }),
    imageSet: (...params: Param[]): Sheet => ({ background: Method.imageSet(...params) }),
    element: (...params: Param[]): Sheet => ({ background: Method.element(...params) }),
    crossFade: (...params: Param[]): Sheet => ({ background: Method.crossFade(...params) }),
    linearGradient: (...params: Param[]): Sheet => ({ background: Method.linearGradient(...params) }),
    repeatingLinearGradient: (...params: Param[]): Sheet => ({ background: Method.repeatingLinearGradient(...params) }),
    radialGradient: (...params: Param[]): Sheet => ({ background: Method.radialGradient(...params) }),
    repeatingRadialGradient: (...params: Param[]): Sheet => ({ background: Method.repeatingRadialGradient(...params) }),
    LEFT: { background: "left" },
    CENTER: { background: "center" },
    RIGHT: { background: "right" },
    TOP: { background: "top" },
    BOTTOM: { background: "bottom" },
    AUTO: { background: "auto" },
    COVER: { background: "cover" },
    CONTAIN: { background: "contain" },
    REPEAT_X: { background: "repeat-x" },
    REPEAT_Y: { background: "repeat-y" },
    REPEAT: { background: "repeat" },
    SPACE: { background: "space" },
    ROUND: { background: "round" },
    NO_REPEAT: { background: "no-repeat" },
    SCROLL: { background: "scroll" },
    FIXED: { background: "fixed" },
    LOCAL: { background: "local" },
    BORDER_BOX: { background: "border-box" },
    PADDING_BOX: { background: "padding-box" },
    CONTENT_BOX: { background: "content-box" }
};
const _BackgroundAttachment = {
    set: (...params: Param[]): Sheet => ({ backgroundAttachment: buildProperty(params) }),
    SCROLL: { backgroundAttachment: "scroll" },
    FIXED: { backgroundAttachment: "fixed" },
    LOCAL: { backgroundAttachment: "local" }
};
const _BackgroundBlendMode = {
    set: (...params: Param[]): Sheet => ({ backgroundBlendMode: buildProperty(params) }),
    NORMAL: { backgroundBlendMode: "normal" },
    MULTIPLY: { backgroundBlendMode: "multiply" },
    SCREEN: { backgroundBlendMode: "screen" },
    OVERLAY: { backgroundBlendMode: "overlay" },
    DARKEN: { backgroundBlendMode: "darken" },
    LIGHTEN: { backgroundBlendMode: "lighten" },
    COLOR_DODGE: { backgroundBlendMode: "color-dodge" },
    COLOR_BURN: { backgroundBlendMode: "color-burn" },
    HARD_LIGHT: { backgroundBlendMode: "hard-light" },
    SOFT_LIGHT: { backgroundBlendMode: "soft-light" },
    DIFFERENCE: { backgroundBlendMode: "difference" },
    EXCLUSION: { backgroundBlendMode: "exclusion" },
    HUE: { backgroundBlendMode: "hue" },
    SATURATION: { backgroundBlendMode: "saturation" },
    COLOR: { backgroundBlendMode: "color" },
    LUMINOSITY: { backgroundBlendMode: "luminosity" }
};
const _BackgroundClip = {
    set: (...params: Param[]): Sheet => ({ backgroundClip: buildProperty(params) }),
    BORDER_BOX: { backgroundClip: "border-box" },
    PADDING_BOX: { backgroundClip: "padding-box" },
    CONTENT_BOX: { backgroundClip: "content-box" }
};
const _BackgroundColor = {
    set: (...params: Param[]): Sheet => ({ backgroundColor: buildProperty(params) }),
    rgb: (...params: Param[]): Sheet => ({ backgroundColor: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ backgroundColor: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ backgroundColor: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ backgroundColor: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ backgroundColor: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ backgroundColor: Method.hsla(...params) }),
    BLACK: { backgroundColor: "black" },
    SILVER: { backgroundColor: "silver" },
    GRAY: { backgroundColor: "gray" },
    WHITE: { backgroundColor: "white" },
    MAROON: { backgroundColor: "maroon" },
    RED: { backgroundColor: "red" },
    PURPLE: { backgroundColor: "purple" },
    FUCHSIA: { backgroundColor: "fuchsia" },
    GREEN: { backgroundColor: "green" },
    LIME: { backgroundColor: "lime" },
    OLIVE: { backgroundColor: "olive" },
    YELLOW: { backgroundColor: "yellow" },
    NAVY: { backgroundColor: "navy" },
    BLUE: { backgroundColor: "blue" },
    TEAL: { backgroundColor: "teal" },
    AQUA: { backgroundColor: "aqua" },
    CURRENTCOLOR: { backgroundColor: "currentcolor" },
    ACTIVEBORDER: { backgroundColor: "ActiveBorder" },
    ACTIVECAPTION: { backgroundColor: "ActiveCaption" },
    APPWORKSPACE: { backgroundColor: "AppWorkspace" },
    BACKGROUND: { backgroundColor: "Background" },
    BUTTONFACE: { backgroundColor: "ButtonFace" },
    BUTTONHIGHLIGHT: { backgroundColor: "ButtonHighlight" },
    BUTTONSHADOW: { backgroundColor: "ButtonShadow" },
    BUTTONTEXT: { backgroundColor: "ButtonText" },
    CAPTIONTEXT: { backgroundColor: "CaptionText" },
    GRAYTEXT: { backgroundColor: "GrayText" },
    HIGHLIGHT: { backgroundColor: "Highlight" },
    HIGHLIGHTTEXT: { backgroundColor: "HighlightText" },
    INACTIVEBORDER: { backgroundColor: "InactiveBorder" },
    INACTIVECAPTION: { backgroundColor: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { backgroundColor: "InactiveCaptionText" },
    INFOBACKGROUND: { backgroundColor: "InfoBackground" },
    INFOTEXT: { backgroundColor: "InfoText" },
    MENU: { backgroundColor: "Menu" },
    MENUTEXT: { backgroundColor: "MenuText" },
    SCROLLBAR: { backgroundColor: "Scrollbar" },
    THREEDDARKSHADOW: { backgroundColor: "ThreeDDarkShadow" },
    THREEDFACE: { backgroundColor: "ThreeDFace" },
    THREEDHIGHLIGHT: { backgroundColor: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { backgroundColor: "ThreeDLightShadow" },
    THREEDSHADOW: { backgroundColor: "ThreeDShadow" },
    WINDOW: { backgroundColor: "Window" },
    WINDOWFRAME: { backgroundColor: "WindowFrame" },
    WINDOWTEXT: { backgroundColor: "WindowText" }
};
const _BackgroundImage = {
    set: (...params: Param[]): Sheet => ({ backgroundImage: buildProperty(params) }),
    NONE: { backgroundImage: "none" },
    image: (...params: Param[]): Sheet => ({ backgroundImage: Method.image(...params) }),
    imageSet: (...params: Param[]): Sheet => ({ backgroundImage: Method.imageSet(...params) }),
    element: (...params: Param[]): Sheet => ({ backgroundImage: Method.element(...params) }),
    crossFade: (...params: Param[]): Sheet => ({ backgroundImage: Method.crossFade(...params) }),
    linearGradient: (...params: Param[]): Sheet => ({ backgroundImage: Method.linearGradient(...params) }),
    repeatingLinearGradient: (...params: Param[]): Sheet => ({
        backgroundImage: Method.repeatingLinearGradient(...params)
    }),
    radialGradient: (...params: Param[]): Sheet => ({ backgroundImage: Method.radialGradient(...params) }),
    repeatingRadialGradient: (...params: Param[]): Sheet => ({
        backgroundImage: Method.repeatingRadialGradient(...params)
    })
};
const _BackgroundOrigin = {
    set: (...params: Param[]): Sheet => ({ backgroundOrigin: buildProperty(params) }),
    BORDER_BOX: { backgroundOrigin: "border-box" },
    PADDING_BOX: { backgroundOrigin: "padding-box" },
    CONTENT_BOX: { backgroundOrigin: "content-box" }
};
const _BackgroundPosition = {
    set: (...params: Param[]): Sheet => ({ backgroundPosition: buildProperty(params) }),
    LEFT: { backgroundPosition: "left" },
    CENTER: { backgroundPosition: "center" },
    RIGHT: { backgroundPosition: "right" },
    TOP: { backgroundPosition: "top" },
    BOTTOM: { backgroundPosition: "bottom" },
    cap: (...nums: number[]): Sheet => ({ backgroundPosition: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ backgroundPosition: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ backgroundPosition: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ backgroundPosition: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ backgroundPosition: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ backgroundPosition: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ backgroundPosition: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ backgroundPosition: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ backgroundPosition: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ backgroundPosition: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ backgroundPosition: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ backgroundPosition: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ backgroundPosition: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ backgroundPosition: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ backgroundPosition: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ backgroundPosition: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ backgroundPosition: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ backgroundPosition: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ backgroundPosition: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ backgroundPosition: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ backgroundPosition: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ backgroundPosition: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ backgroundPosition: Length.X(...nums) })
};
const _BackgroundPositionX = {
    set: (...params: Param[]): Sheet => ({ backgroundPositionX: buildProperty(params) }),
    CENTER: { backgroundPositionX: "center" },
    LEFT: { backgroundPositionX: "left" },
    RIGHT: { backgroundPositionX: "right" },
    X_START: { backgroundPositionX: "x-start" },
    X_END: { backgroundPositionX: "x-end" },
    cap: (...nums: number[]): Sheet => ({ backgroundPositionX: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ backgroundPositionX: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ backgroundPositionX: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ backgroundPositionX: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ backgroundPositionX: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ backgroundPositionX: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ backgroundPositionX: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ backgroundPositionX: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ backgroundPositionX: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ backgroundPositionX: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ backgroundPositionX: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ backgroundPositionX: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ backgroundPositionX: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ backgroundPositionX: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ backgroundPositionX: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ backgroundPositionX: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ backgroundPositionX: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ backgroundPositionX: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ backgroundPositionX: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ backgroundPositionX: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ backgroundPositionX: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ backgroundPositionX: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ backgroundPositionX: Length.X(...nums) })
};
const _BackgroundPositionY = {
    set: (...params: Param[]): Sheet => ({ backgroundPositionY: buildProperty(params) }),
    CENTER: { backgroundPositionY: "center" },
    TOP: { backgroundPositionY: "top" },
    BOTTOM: { backgroundPositionY: "bottom" },
    Y_START: { backgroundPositionY: "y-start" },
    Y_END: { backgroundPositionY: "y-end" },
    cap: (...nums: number[]): Sheet => ({ backgroundPositionY: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ backgroundPositionY: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ backgroundPositionY: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ backgroundPositionY: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ backgroundPositionY: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ backgroundPositionY: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ backgroundPositionY: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ backgroundPositionY: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ backgroundPositionY: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ backgroundPositionY: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ backgroundPositionY: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ backgroundPositionY: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ backgroundPositionY: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ backgroundPositionY: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ backgroundPositionY: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ backgroundPositionY: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ backgroundPositionY: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ backgroundPositionY: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ backgroundPositionY: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ backgroundPositionY: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ backgroundPositionY: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ backgroundPositionY: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ backgroundPositionY: Length.X(...nums) })
};
const _BackgroundRepeat = {
    set: (...params: Param[]): Sheet => ({ backgroundRepeat: buildProperty(params) }),
    REPEAT_X: { backgroundRepeat: "repeat-x" },
    REPEAT_Y: { backgroundRepeat: "repeat-y" },
    REPEAT: { backgroundRepeat: "repeat" },
    SPACE: { backgroundRepeat: "space" },
    ROUND: { backgroundRepeat: "round" },
    NO_REPEAT: { backgroundRepeat: "no-repeat" }
};
const _BackgroundSize = {
    set: (...params: Param[]): Sheet => ({ backgroundSize: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ backgroundSize: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ backgroundSize: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ backgroundSize: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ backgroundSize: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ backgroundSize: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ backgroundSize: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ backgroundSize: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ backgroundSize: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ backgroundSize: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ backgroundSize: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ backgroundSize: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ backgroundSize: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ backgroundSize: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ backgroundSize: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ backgroundSize: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ backgroundSize: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ backgroundSize: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ backgroundSize: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ backgroundSize: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ backgroundSize: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ backgroundSize: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ backgroundSize: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ backgroundSize: Length.X(...nums) }),
    AUTO: { backgroundSize: "auto" },
    COVER: { backgroundSize: "cover" },
    CONTAIN: { backgroundSize: "contain" }
};
const _BlockOverflow = {
    set: (...params: Param[]): Sheet => ({ blockOverflow: buildProperty(params) }),
    CLIP: { blockOverflow: "clip" },
    ELLIPSIS: { blockOverflow: "ellipsis" }
};
const _BlockSize = {
    set: (...params: Param[]): Sheet => ({ blockSize: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ blockSize: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ blockSize: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ blockSize: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ blockSize: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ blockSize: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ blockSize: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ blockSize: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ blockSize: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ blockSize: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ blockSize: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ blockSize: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ blockSize: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ blockSize: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ blockSize: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ blockSize: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ blockSize: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ blockSize: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ blockSize: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ blockSize: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ blockSize: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ blockSize: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ blockSize: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ blockSize: Length.X(...nums) }),
    BORDER_BOX: { blockSize: "border-box" },
    CONTENT_BOX: { blockSize: "content-box" },
    AVAILABLE: { blockSize: "available" },
    MIN_CONTENT: { blockSize: "min-content" },
    MAX_CONTENT: { blockSize: "max-content" },
    FIT_CONTENT: { blockSize: "fit-content" },
    AUTO: { blockSize: "auto" }
};
const _Border = {
    set: (...params: Param[]): Sheet => ({ border: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ border: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ border: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ border: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ border: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ border: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ border: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ border: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ border: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ border: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ border: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ border: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ border: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ border: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ border: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ border: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ border: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ border: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ border: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ border: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ border: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ border: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ border: Length.fr(...nums) }),
    THIN: { border: "thin" },
    MEDIUM: { border: "medium" },
    THICK: { border: "thick" },
    NONE: { border: "none" },
    HIDDEN: { border: "hidden" },
    DOTTED: { border: "dotted" },
    DASHED: { border: "dashed" },
    SOLID: { border: "solid" },
    DOUBLE: { border: "double" },
    GROOVE: { border: "groove" },
    RIDGE: { border: "ridge" },
    INSET: { border: "inset" },
    OUTSET: { border: "outset" },
    rgb: (...params: Param[]): Sheet => ({ border: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ border: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ border: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ border: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ border: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ border: Method.hsla(...params) }),
    BLACK: { border: "black" },
    SILVER: { border: "silver" },
    GRAY: { border: "gray" },
    WHITE: { border: "white" },
    MAROON: { border: "maroon" },
    RED: { border: "red" },
    PURPLE: { border: "purple" },
    FUCHSIA: { border: "fuchsia" },
    GREEN: { border: "green" },
    LIME: { border: "lime" },
    OLIVE: { border: "olive" },
    YELLOW: { border: "yellow" },
    NAVY: { border: "navy" },
    BLUE: { border: "blue" },
    TEAL: { border: "teal" },
    AQUA: { border: "aqua" },
    CURRENTCOLOR: { border: "currentcolor" },
    ACTIVEBORDER: { border: "ActiveBorder" },
    ACTIVECAPTION: { border: "ActiveCaption" },
    APPWORKSPACE: { border: "AppWorkspace" },
    BACKGROUND: { border: "Background" },
    BUTTONFACE: { border: "ButtonFace" },
    BUTTONHIGHLIGHT: { border: "ButtonHighlight" },
    BUTTONSHADOW: { border: "ButtonShadow" },
    BUTTONTEXT: { border: "ButtonText" },
    CAPTIONTEXT: { border: "CaptionText" },
    GRAYTEXT: { border: "GrayText" },
    HIGHLIGHT: { border: "Highlight" },
    HIGHLIGHTTEXT: { border: "HighlightText" },
    INACTIVEBORDER: { border: "InactiveBorder" },
    INACTIVECAPTION: { border: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { border: "InactiveCaptionText" },
    INFOBACKGROUND: { border: "InfoBackground" },
    INFOTEXT: { border: "InfoText" },
    MENU: { border: "Menu" },
    MENUTEXT: { border: "MenuText" },
    SCROLLBAR: { border: "Scrollbar" },
    THREEDDARKSHADOW: { border: "ThreeDDarkShadow" },
    THREEDFACE: { border: "ThreeDFace" },
    THREEDHIGHLIGHT: { border: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { border: "ThreeDLightShadow" },
    THREEDSHADOW: { border: "ThreeDShadow" },
    WINDOW: { border: "Window" },
    WINDOWFRAME: { border: "WindowFrame" },
    WINDOWTEXT: { border: "WindowText" }
};
const _BorderBlockEnd = {
    set: (...params: Param[]): Sheet => ({ borderBlockEnd: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ borderBlockEnd: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ borderBlockEnd: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ borderBlockEnd: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ borderBlockEnd: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ borderBlockEnd: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ borderBlockEnd: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ borderBlockEnd: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ borderBlockEnd: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ borderBlockEnd: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ borderBlockEnd: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ borderBlockEnd: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ borderBlockEnd: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ borderBlockEnd: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ borderBlockEnd: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ borderBlockEnd: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ borderBlockEnd: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ borderBlockEnd: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ borderBlockEnd: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ borderBlockEnd: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ borderBlockEnd: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ borderBlockEnd: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ borderBlockEnd: Length.fr(...nums) }),
    THIN: { borderBlockEnd: "thin" },
    MEDIUM: { borderBlockEnd: "medium" },
    THICK: { borderBlockEnd: "thick" },
    NONE: { borderBlockEnd: "none" },
    HIDDEN: { borderBlockEnd: "hidden" },
    DOTTED: { borderBlockEnd: "dotted" },
    DASHED: { borderBlockEnd: "dashed" },
    SOLID: { borderBlockEnd: "solid" },
    DOUBLE: { borderBlockEnd: "double" },
    GROOVE: { borderBlockEnd: "groove" },
    RIDGE: { borderBlockEnd: "ridge" },
    INSET: { borderBlockEnd: "inset" },
    OUTSET: { borderBlockEnd: "outset" }
};
const _BorderBlockEndColor = { set: (...params: Param[]): Sheet => ({ borderBlockEndColor: buildProperty(params) }) };
const _BorderBlockEndStyle = {
    set: (...params: Param[]): Sheet => ({ borderBlockEndStyle: buildProperty(params) }),
    NONE: { borderBlockEndStyle: "none" },
    HIDDEN: { borderBlockEndStyle: "hidden" },
    DOTTED: { borderBlockEndStyle: "dotted" },
    DASHED: { borderBlockEndStyle: "dashed" },
    SOLID: { borderBlockEndStyle: "solid" },
    DOUBLE: { borderBlockEndStyle: "double" },
    GROOVE: { borderBlockEndStyle: "groove" },
    RIDGE: { borderBlockEndStyle: "ridge" },
    INSET: { borderBlockEndStyle: "inset" },
    OUTSET: { borderBlockEndStyle: "outset" }
};
const _BorderBlockEndWidth = {
    set: (...params: Param[]): Sheet => ({ borderBlockEndWidth: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ borderBlockEndWidth: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ borderBlockEndWidth: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ borderBlockEndWidth: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ borderBlockEndWidth: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ borderBlockEndWidth: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ borderBlockEndWidth: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ borderBlockEndWidth: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ borderBlockEndWidth: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ borderBlockEndWidth: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ borderBlockEndWidth: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ borderBlockEndWidth: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ borderBlockEndWidth: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ borderBlockEndWidth: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ borderBlockEndWidth: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ borderBlockEndWidth: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ borderBlockEndWidth: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ borderBlockEndWidth: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ borderBlockEndWidth: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ borderBlockEndWidth: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ borderBlockEndWidth: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ borderBlockEndWidth: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ borderBlockEndWidth: Length.fr(...nums) }),
    THIN: { borderBlockEndWidth: "thin" },
    MEDIUM: { borderBlockEndWidth: "medium" },
    THICK: { borderBlockEndWidth: "thick" }
};
const _BorderBlockStart = {
    set: (...params: Param[]): Sheet => ({ borderBlockStart: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ borderBlockStart: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ borderBlockStart: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ borderBlockStart: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ borderBlockStart: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ borderBlockStart: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ borderBlockStart: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ borderBlockStart: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ borderBlockStart: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ borderBlockStart: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ borderBlockStart: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ borderBlockStart: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ borderBlockStart: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ borderBlockStart: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ borderBlockStart: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ borderBlockStart: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ borderBlockStart: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ borderBlockStart: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ borderBlockStart: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ borderBlockStart: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ borderBlockStart: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ borderBlockStart: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ borderBlockStart: Length.fr(...nums) }),
    THIN: { borderBlockStart: "thin" },
    MEDIUM: { borderBlockStart: "medium" },
    THICK: { borderBlockStart: "thick" },
    NONE: { borderBlockStart: "none" },
    HIDDEN: { borderBlockStart: "hidden" },
    DOTTED: { borderBlockStart: "dotted" },
    DASHED: { borderBlockStart: "dashed" },
    SOLID: { borderBlockStart: "solid" },
    DOUBLE: { borderBlockStart: "double" },
    GROOVE: { borderBlockStart: "groove" },
    RIDGE: { borderBlockStart: "ridge" },
    INSET: { borderBlockStart: "inset" },
    OUTSET: { borderBlockStart: "outset" }
};
const _BorderBlockStartColor = {
    set: (...params: Param[]): Sheet => ({ borderBlockStartColor: buildProperty(params) })
};
const _BorderBlockStartStyle = {
    set: (...params: Param[]): Sheet => ({ borderBlockStartStyle: buildProperty(params) }),
    NONE: { borderBlockStartStyle: "none" },
    HIDDEN: { borderBlockStartStyle: "hidden" },
    DOTTED: { borderBlockStartStyle: "dotted" },
    DASHED: { borderBlockStartStyle: "dashed" },
    SOLID: { borderBlockStartStyle: "solid" },
    DOUBLE: { borderBlockStartStyle: "double" },
    GROOVE: { borderBlockStartStyle: "groove" },
    RIDGE: { borderBlockStartStyle: "ridge" },
    INSET: { borderBlockStartStyle: "inset" },
    OUTSET: { borderBlockStartStyle: "outset" }
};
const _BorderBlockStartWidth = {
    set: (...params: Param[]): Sheet => ({ borderBlockStartWidth: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ borderBlockStartWidth: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ borderBlockStartWidth: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ borderBlockStartWidth: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ borderBlockStartWidth: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ borderBlockStartWidth: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ borderBlockStartWidth: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ borderBlockStartWidth: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ borderBlockStartWidth: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ borderBlockStartWidth: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ borderBlockStartWidth: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ borderBlockStartWidth: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ borderBlockStartWidth: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ borderBlockStartWidth: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ borderBlockStartWidth: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ borderBlockStartWidth: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ borderBlockStartWidth: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ borderBlockStartWidth: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ borderBlockStartWidth: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ borderBlockStartWidth: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ borderBlockStartWidth: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ borderBlockStartWidth: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ borderBlockStartWidth: Length.fr(...nums) }),
    THIN: { borderBlockStartWidth: "thin" },
    MEDIUM: { borderBlockStartWidth: "medium" },
    THICK: { borderBlockStartWidth: "thick" }
};
const _BorderBottom = {
    set: (...params: Param[]): Sheet => ({ borderBottom: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ borderBottom: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ borderBottom: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ borderBottom: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ borderBottom: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ borderBottom: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ borderBottom: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ borderBottom: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ borderBottom: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ borderBottom: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ borderBottom: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ borderBottom: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ borderBottom: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ borderBottom: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ borderBottom: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ borderBottom: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ borderBottom: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ borderBottom: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ borderBottom: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ borderBottom: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ borderBottom: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ borderBottom: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ borderBottom: Length.fr(...nums) }),
    THIN: { borderBottom: "thin" },
    MEDIUM: { borderBottom: "medium" },
    THICK: { borderBottom: "thick" },
    NONE: { borderBottom: "none" },
    HIDDEN: { borderBottom: "hidden" },
    DOTTED: { borderBottom: "dotted" },
    DASHED: { borderBottom: "dashed" },
    SOLID: { borderBottom: "solid" },
    DOUBLE: { borderBottom: "double" },
    GROOVE: { borderBottom: "groove" },
    RIDGE: { borderBottom: "ridge" },
    INSET: { borderBottom: "inset" },
    OUTSET: { borderBottom: "outset" },
    rgb: (...params: Param[]): Sheet => ({ borderBottom: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ borderBottom: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ borderBottom: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ borderBottom: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ borderBottom: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ borderBottom: Method.hsla(...params) }),
    BLACK: { borderBottom: "black" },
    SILVER: { borderBottom: "silver" },
    GRAY: { borderBottom: "gray" },
    WHITE: { borderBottom: "white" },
    MAROON: { borderBottom: "maroon" },
    RED: { borderBottom: "red" },
    PURPLE: { borderBottom: "purple" },
    FUCHSIA: { borderBottom: "fuchsia" },
    GREEN: { borderBottom: "green" },
    LIME: { borderBottom: "lime" },
    OLIVE: { borderBottom: "olive" },
    YELLOW: { borderBottom: "yellow" },
    NAVY: { borderBottom: "navy" },
    BLUE: { borderBottom: "blue" },
    TEAL: { borderBottom: "teal" },
    AQUA: { borderBottom: "aqua" },
    CURRENTCOLOR: { borderBottom: "currentcolor" },
    ACTIVEBORDER: { borderBottom: "ActiveBorder" },
    ACTIVECAPTION: { borderBottom: "ActiveCaption" },
    APPWORKSPACE: { borderBottom: "AppWorkspace" },
    BACKGROUND: { borderBottom: "Background" },
    BUTTONFACE: { borderBottom: "ButtonFace" },
    BUTTONHIGHLIGHT: { borderBottom: "ButtonHighlight" },
    BUTTONSHADOW: { borderBottom: "ButtonShadow" },
    BUTTONTEXT: { borderBottom: "ButtonText" },
    CAPTIONTEXT: { borderBottom: "CaptionText" },
    GRAYTEXT: { borderBottom: "GrayText" },
    HIGHLIGHT: { borderBottom: "Highlight" },
    HIGHLIGHTTEXT: { borderBottom: "HighlightText" },
    INACTIVEBORDER: { borderBottom: "InactiveBorder" },
    INACTIVECAPTION: { borderBottom: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { borderBottom: "InactiveCaptionText" },
    INFOBACKGROUND: { borderBottom: "InfoBackground" },
    INFOTEXT: { borderBottom: "InfoText" },
    MENU: { borderBottom: "Menu" },
    MENUTEXT: { borderBottom: "MenuText" },
    SCROLLBAR: { borderBottom: "Scrollbar" },
    THREEDDARKSHADOW: { borderBottom: "ThreeDDarkShadow" },
    THREEDFACE: { borderBottom: "ThreeDFace" },
    THREEDHIGHLIGHT: { borderBottom: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { borderBottom: "ThreeDLightShadow" },
    THREEDSHADOW: { borderBottom: "ThreeDShadow" },
    WINDOW: { borderBottom: "Window" },
    WINDOWFRAME: { borderBottom: "WindowFrame" },
    WINDOWTEXT: { borderBottom: "WindowText" }
};
const _BorderBottomColor = {
    set: (...params: Param[]): Sheet => ({ borderBottomColor: buildProperty(params) }),
    rgb: (...params: Param[]): Sheet => ({ borderBottomColor: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ borderBottomColor: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ borderBottomColor: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ borderBottomColor: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ borderBottomColor: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ borderBottomColor: Method.hsla(...params) }),
    BLACK: { borderBottomColor: "black" },
    SILVER: { borderBottomColor: "silver" },
    GRAY: { borderBottomColor: "gray" },
    WHITE: { borderBottomColor: "white" },
    MAROON: { borderBottomColor: "maroon" },
    RED: { borderBottomColor: "red" },
    PURPLE: { borderBottomColor: "purple" },
    FUCHSIA: { borderBottomColor: "fuchsia" },
    GREEN: { borderBottomColor: "green" },
    LIME: { borderBottomColor: "lime" },
    OLIVE: { borderBottomColor: "olive" },
    YELLOW: { borderBottomColor: "yellow" },
    NAVY: { borderBottomColor: "navy" },
    BLUE: { borderBottomColor: "blue" },
    TEAL: { borderBottomColor: "teal" },
    AQUA: { borderBottomColor: "aqua" },
    CURRENTCOLOR: { borderBottomColor: "currentcolor" },
    ACTIVEBORDER: { borderBottomColor: "ActiveBorder" },
    ACTIVECAPTION: { borderBottomColor: "ActiveCaption" },
    APPWORKSPACE: { borderBottomColor: "AppWorkspace" },
    BACKGROUND: { borderBottomColor: "Background" },
    BUTTONFACE: { borderBottomColor: "ButtonFace" },
    BUTTONHIGHLIGHT: { borderBottomColor: "ButtonHighlight" },
    BUTTONSHADOW: { borderBottomColor: "ButtonShadow" },
    BUTTONTEXT: { borderBottomColor: "ButtonText" },
    CAPTIONTEXT: { borderBottomColor: "CaptionText" },
    GRAYTEXT: { borderBottomColor: "GrayText" },
    HIGHLIGHT: { borderBottomColor: "Highlight" },
    HIGHLIGHTTEXT: { borderBottomColor: "HighlightText" },
    INACTIVEBORDER: { borderBottomColor: "InactiveBorder" },
    INACTIVECAPTION: { borderBottomColor: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { borderBottomColor: "InactiveCaptionText" },
    INFOBACKGROUND: { borderBottomColor: "InfoBackground" },
    INFOTEXT: { borderBottomColor: "InfoText" },
    MENU: { borderBottomColor: "Menu" },
    MENUTEXT: { borderBottomColor: "MenuText" },
    SCROLLBAR: { borderBottomColor: "Scrollbar" },
    THREEDDARKSHADOW: { borderBottomColor: "ThreeDDarkShadow" },
    THREEDFACE: { borderBottomColor: "ThreeDFace" },
    THREEDHIGHLIGHT: { borderBottomColor: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { borderBottomColor: "ThreeDLightShadow" },
    THREEDSHADOW: { borderBottomColor: "ThreeDShadow" },
    WINDOW: { borderBottomColor: "Window" },
    WINDOWFRAME: { borderBottomColor: "WindowFrame" },
    WINDOWTEXT: { borderBottomColor: "WindowText" }
};
const _BorderBottomLeftRadius = {
    set: (...params: Param[]): Sheet => ({ borderBottomLeftRadius: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ borderBottomLeftRadius: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ borderBottomLeftRadius: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ borderBottomLeftRadius: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ borderBottomLeftRadius: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ borderBottomLeftRadius: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ borderBottomLeftRadius: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ borderBottomLeftRadius: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ borderBottomLeftRadius: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ borderBottomLeftRadius: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ borderBottomLeftRadius: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ borderBottomLeftRadius: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ borderBottomLeftRadius: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ borderBottomLeftRadius: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ borderBottomLeftRadius: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ borderBottomLeftRadius: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ borderBottomLeftRadius: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ borderBottomLeftRadius: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ borderBottomLeftRadius: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ borderBottomLeftRadius: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ borderBottomLeftRadius: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ borderBottomLeftRadius: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ borderBottomLeftRadius: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ borderBottomLeftRadius: Length.X(...nums) })
};
const _BorderBottomRightRadius = {
    set: (...params: Param[]): Sheet => ({ borderBottomRightRadius: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ borderBottomRightRadius: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ borderBottomRightRadius: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ borderBottomRightRadius: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ borderBottomRightRadius: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ borderBottomRightRadius: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ borderBottomRightRadius: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ borderBottomRightRadius: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ borderBottomRightRadius: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ borderBottomRightRadius: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ borderBottomRightRadius: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ borderBottomRightRadius: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ borderBottomRightRadius: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ borderBottomRightRadius: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ borderBottomRightRadius: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ borderBottomRightRadius: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ borderBottomRightRadius: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ borderBottomRightRadius: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ borderBottomRightRadius: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ borderBottomRightRadius: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ borderBottomRightRadius: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ borderBottomRightRadius: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ borderBottomRightRadius: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ borderBottomRightRadius: Length.X(...nums) })
};
const _BorderBottomStyle = {
    set: (...params: Param[]): Sheet => ({ borderBottomStyle: buildProperty(params) }),
    NONE: { borderBottomStyle: "none" },
    HIDDEN: { borderBottomStyle: "hidden" },
    DOTTED: { borderBottomStyle: "dotted" },
    DASHED: { borderBottomStyle: "dashed" },
    SOLID: { borderBottomStyle: "solid" },
    DOUBLE: { borderBottomStyle: "double" },
    GROOVE: { borderBottomStyle: "groove" },
    RIDGE: { borderBottomStyle: "ridge" },
    INSET: { borderBottomStyle: "inset" },
    OUTSET: { borderBottomStyle: "outset" }
};
const _BorderBottomWidth = {
    set: (...params: Param[]): Sheet => ({ borderBottomWidth: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ borderBottomWidth: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ borderBottomWidth: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ borderBottomWidth: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ borderBottomWidth: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ borderBottomWidth: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ borderBottomWidth: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ borderBottomWidth: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ borderBottomWidth: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ borderBottomWidth: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ borderBottomWidth: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ borderBottomWidth: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ borderBottomWidth: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ borderBottomWidth: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ borderBottomWidth: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ borderBottomWidth: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ borderBottomWidth: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ borderBottomWidth: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ borderBottomWidth: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ borderBottomWidth: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ borderBottomWidth: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ borderBottomWidth: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ borderBottomWidth: Length.fr(...nums) }),
    THIN: { borderBottomWidth: "thin" },
    MEDIUM: { borderBottomWidth: "medium" },
    THICK: { borderBottomWidth: "thick" }
};
const _BorderCollapse = {
    set: (...params: Param[]): Sheet => ({ borderCollapse: buildProperty(params) }),
    COLLAPSE: { borderCollapse: "collapse" },
    SEPARATE: { borderCollapse: "separate" }
};
const _BorderColor = {
    set: (...params: Param[]): Sheet => ({ borderColor: buildProperty(params) }),
    rgb: (...params: Param[]): Sheet => ({ borderColor: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ borderColor: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ borderColor: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ borderColor: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ borderColor: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ borderColor: Method.hsla(...params) }),
    BLACK: { borderColor: "black" },
    SILVER: { borderColor: "silver" },
    GRAY: { borderColor: "gray" },
    WHITE: { borderColor: "white" },
    MAROON: { borderColor: "maroon" },
    RED: { borderColor: "red" },
    PURPLE: { borderColor: "purple" },
    FUCHSIA: { borderColor: "fuchsia" },
    GREEN: { borderColor: "green" },
    LIME: { borderColor: "lime" },
    OLIVE: { borderColor: "olive" },
    YELLOW: { borderColor: "yellow" },
    NAVY: { borderColor: "navy" },
    BLUE: { borderColor: "blue" },
    TEAL: { borderColor: "teal" },
    AQUA: { borderColor: "aqua" },
    CURRENTCOLOR: { borderColor: "currentcolor" },
    ACTIVEBORDER: { borderColor: "ActiveBorder" },
    ACTIVECAPTION: { borderColor: "ActiveCaption" },
    APPWORKSPACE: { borderColor: "AppWorkspace" },
    BACKGROUND: { borderColor: "Background" },
    BUTTONFACE: { borderColor: "ButtonFace" },
    BUTTONHIGHLIGHT: { borderColor: "ButtonHighlight" },
    BUTTONSHADOW: { borderColor: "ButtonShadow" },
    BUTTONTEXT: { borderColor: "ButtonText" },
    CAPTIONTEXT: { borderColor: "CaptionText" },
    GRAYTEXT: { borderColor: "GrayText" },
    HIGHLIGHT: { borderColor: "Highlight" },
    HIGHLIGHTTEXT: { borderColor: "HighlightText" },
    INACTIVEBORDER: { borderColor: "InactiveBorder" },
    INACTIVECAPTION: { borderColor: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { borderColor: "InactiveCaptionText" },
    INFOBACKGROUND: { borderColor: "InfoBackground" },
    INFOTEXT: { borderColor: "InfoText" },
    MENU: { borderColor: "Menu" },
    MENUTEXT: { borderColor: "MenuText" },
    SCROLLBAR: { borderColor: "Scrollbar" },
    THREEDDARKSHADOW: { borderColor: "ThreeDDarkShadow" },
    THREEDFACE: { borderColor: "ThreeDFace" },
    THREEDHIGHLIGHT: { borderColor: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { borderColor: "ThreeDLightShadow" },
    THREEDSHADOW: { borderColor: "ThreeDShadow" },
    WINDOW: { borderColor: "Window" },
    WINDOWFRAME: { borderColor: "WindowFrame" },
    WINDOWTEXT: { borderColor: "WindowText" }
};
const _BorderImage = {
    set: (...params: Param[]): Sheet => ({ borderImage: buildProperty(params) }),
    NONE: { borderImage: "none" },
    image: (...params: Param[]): Sheet => ({ borderImage: Method.image(...params) }),
    imageSet: (...params: Param[]): Sheet => ({ borderImage: Method.imageSet(...params) }),
    element: (...params: Param[]): Sheet => ({ borderImage: Method.element(...params) }),
    crossFade: (...params: Param[]): Sheet => ({ borderImage: Method.crossFade(...params) }),
    linearGradient: (...params: Param[]): Sheet => ({ borderImage: Method.linearGradient(...params) }),
    repeatingLinearGradient: (...params: Param[]): Sheet => ({
        borderImage: Method.repeatingLinearGradient(...params)
    }),
    radialGradient: (...params: Param[]): Sheet => ({ borderImage: Method.radialGradient(...params) }),
    repeatingRadialGradient: (...params: Param[]): Sheet => ({
        borderImage: Method.repeatingRadialGradient(...params)
    }),
    X: (...nums: number[]): Sheet => ({ borderImage: Length.X(...nums) }),
    FILL: { borderImage: "fill" },
    AUTO: { borderImage: "auto" },
    cap: (...nums: number[]): Sheet => ({ borderImage: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ borderImage: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ borderImage: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ borderImage: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ borderImage: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ borderImage: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ borderImage: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ borderImage: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ borderImage: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ borderImage: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ borderImage: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ borderImage: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ borderImage: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ borderImage: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ borderImage: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ borderImage: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ borderImage: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ borderImage: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ borderImage: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ borderImage: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ borderImage: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ borderImage: Length.fr(...nums) }),
    STRETCH: { borderImage: "stretch" },
    REPEAT: { borderImage: "repeat" },
    ROUND: { borderImage: "round" },
    SPACE: { borderImage: "space" }
};
const _BorderImageOutset = {
    set: (...params: Param[]): Sheet => ({ borderImageOutset: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ borderImageOutset: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ borderImageOutset: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ borderImageOutset: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ borderImageOutset: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ borderImageOutset: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ borderImageOutset: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ borderImageOutset: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ borderImageOutset: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ borderImageOutset: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ borderImageOutset: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ borderImageOutset: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ borderImageOutset: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ borderImageOutset: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ borderImageOutset: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ borderImageOutset: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ borderImageOutset: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ borderImageOutset: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ borderImageOutset: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ borderImageOutset: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ borderImageOutset: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ borderImageOutset: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ borderImageOutset: Length.fr(...nums) })
};
const _BorderImageRepeat = {
    set: (...params: Param[]): Sheet => ({ borderImageRepeat: buildProperty(params) }),
    STRETCH: { borderImageRepeat: "stretch" },
    REPEAT: { borderImageRepeat: "repeat" },
    ROUND: { borderImageRepeat: "round" },
    SPACE: { borderImageRepeat: "space" }
};
const _BorderImageSlice = {
    set: (...params: Param[]): Sheet => ({ borderImageSlice: buildProperty(params) }),
    X: (...nums: number[]): Sheet => ({ borderImageSlice: Length.X(...nums) }),
    FILL: { borderImageSlice: "fill" }
};
const _BorderImageSource = {
    set: (...params: Param[]): Sheet => ({ borderImageSource: buildProperty(params) }),
    NONE: { borderImageSource: "none" },
    image: (...params: Param[]): Sheet => ({ borderImageSource: Method.image(...params) }),
    imageSet: (...params: Param[]): Sheet => ({ borderImageSource: Method.imageSet(...params) }),
    element: (...params: Param[]): Sheet => ({ borderImageSource: Method.element(...params) }),
    crossFade: (...params: Param[]): Sheet => ({ borderImageSource: Method.crossFade(...params) }),
    linearGradient: (...params: Param[]): Sheet => ({ borderImageSource: Method.linearGradient(...params) }),
    repeatingLinearGradient: (...params: Param[]): Sheet => ({
        borderImageSource: Method.repeatingLinearGradient(...params)
    }),
    radialGradient: (...params: Param[]): Sheet => ({ borderImageSource: Method.radialGradient(...params) }),
    repeatingRadialGradient: (...params: Param[]): Sheet => ({
        borderImageSource: Method.repeatingRadialGradient(...params)
    })
};
const _BorderImageWidth = {
    set: (...params: Param[]): Sheet => ({ borderImageWidth: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ borderImageWidth: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ borderImageWidth: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ borderImageWidth: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ borderImageWidth: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ borderImageWidth: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ borderImageWidth: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ borderImageWidth: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ borderImageWidth: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ borderImageWidth: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ borderImageWidth: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ borderImageWidth: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ borderImageWidth: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ borderImageWidth: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ borderImageWidth: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ borderImageWidth: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ borderImageWidth: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ borderImageWidth: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ borderImageWidth: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ borderImageWidth: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ borderImageWidth: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ borderImageWidth: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ borderImageWidth: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ borderImageWidth: Length.X(...nums) }),
    AUTO: { borderImageWidth: "auto" }
};
const _BorderInlineEnd = {
    set: (...params: Param[]): Sheet => ({ borderInlineEnd: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ borderInlineEnd: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ borderInlineEnd: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ borderInlineEnd: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ borderInlineEnd: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ borderInlineEnd: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ borderInlineEnd: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ borderInlineEnd: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ borderInlineEnd: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ borderInlineEnd: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ borderInlineEnd: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ borderInlineEnd: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ borderInlineEnd: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ borderInlineEnd: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ borderInlineEnd: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ borderInlineEnd: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ borderInlineEnd: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ borderInlineEnd: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ borderInlineEnd: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ borderInlineEnd: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ borderInlineEnd: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ borderInlineEnd: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ borderInlineEnd: Length.fr(...nums) }),
    THIN: { borderInlineEnd: "thin" },
    MEDIUM: { borderInlineEnd: "medium" },
    THICK: { borderInlineEnd: "thick" },
    NONE: { borderInlineEnd: "none" },
    HIDDEN: { borderInlineEnd: "hidden" },
    DOTTED: { borderInlineEnd: "dotted" },
    DASHED: { borderInlineEnd: "dashed" },
    SOLID: { borderInlineEnd: "solid" },
    DOUBLE: { borderInlineEnd: "double" },
    GROOVE: { borderInlineEnd: "groove" },
    RIDGE: { borderInlineEnd: "ridge" },
    INSET: { borderInlineEnd: "inset" },
    OUTSET: { borderInlineEnd: "outset" }
};
const _BorderInlineEndColor = { set: (...params: Param[]): Sheet => ({ borderInlineEndColor: buildProperty(params) }) };
const _BorderInlineEndStyle = {
    set: (...params: Param[]): Sheet => ({ borderInlineEndStyle: buildProperty(params) }),
    NONE: { borderInlineEndStyle: "none" },
    HIDDEN: { borderInlineEndStyle: "hidden" },
    DOTTED: { borderInlineEndStyle: "dotted" },
    DASHED: { borderInlineEndStyle: "dashed" },
    SOLID: { borderInlineEndStyle: "solid" },
    DOUBLE: { borderInlineEndStyle: "double" },
    GROOVE: { borderInlineEndStyle: "groove" },
    RIDGE: { borderInlineEndStyle: "ridge" },
    INSET: { borderInlineEndStyle: "inset" },
    OUTSET: { borderInlineEndStyle: "outset" }
};
const _BorderInlineEndWidth = {
    set: (...params: Param[]): Sheet => ({ borderInlineEndWidth: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ borderInlineEndWidth: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ borderInlineEndWidth: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ borderInlineEndWidth: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ borderInlineEndWidth: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ borderInlineEndWidth: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ borderInlineEndWidth: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ borderInlineEndWidth: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ borderInlineEndWidth: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ borderInlineEndWidth: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ borderInlineEndWidth: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ borderInlineEndWidth: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ borderInlineEndWidth: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ borderInlineEndWidth: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ borderInlineEndWidth: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ borderInlineEndWidth: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ borderInlineEndWidth: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ borderInlineEndWidth: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ borderInlineEndWidth: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ borderInlineEndWidth: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ borderInlineEndWidth: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ borderInlineEndWidth: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ borderInlineEndWidth: Length.fr(...nums) }),
    THIN: { borderInlineEndWidth: "thin" },
    MEDIUM: { borderInlineEndWidth: "medium" },
    THICK: { borderInlineEndWidth: "thick" }
};
const _BorderInlineStart = {
    set: (...params: Param[]): Sheet => ({ borderInlineStart: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ borderInlineStart: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ borderInlineStart: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ borderInlineStart: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ borderInlineStart: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ borderInlineStart: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ borderInlineStart: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ borderInlineStart: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ borderInlineStart: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ borderInlineStart: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ borderInlineStart: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ borderInlineStart: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ borderInlineStart: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ borderInlineStart: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ borderInlineStart: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ borderInlineStart: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ borderInlineStart: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ borderInlineStart: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ borderInlineStart: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ borderInlineStart: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ borderInlineStart: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ borderInlineStart: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ borderInlineStart: Length.fr(...nums) }),
    THIN: { borderInlineStart: "thin" },
    MEDIUM: { borderInlineStart: "medium" },
    THICK: { borderInlineStart: "thick" },
    NONE: { borderInlineStart: "none" },
    HIDDEN: { borderInlineStart: "hidden" },
    DOTTED: { borderInlineStart: "dotted" },
    DASHED: { borderInlineStart: "dashed" },
    SOLID: { borderInlineStart: "solid" },
    DOUBLE: { borderInlineStart: "double" },
    GROOVE: { borderInlineStart: "groove" },
    RIDGE: { borderInlineStart: "ridge" },
    INSET: { borderInlineStart: "inset" },
    OUTSET: { borderInlineStart: "outset" }
};
const _BorderInlineStartColor = {
    set: (...params: Param[]): Sheet => ({ borderInlineStartColor: buildProperty(params) })
};
const _BorderInlineStartStyle = {
    set: (...params: Param[]): Sheet => ({ borderInlineStartStyle: buildProperty(params) }),
    NONE: { borderInlineStartStyle: "none" },
    HIDDEN: { borderInlineStartStyle: "hidden" },
    DOTTED: { borderInlineStartStyle: "dotted" },
    DASHED: { borderInlineStartStyle: "dashed" },
    SOLID: { borderInlineStartStyle: "solid" },
    DOUBLE: { borderInlineStartStyle: "double" },
    GROOVE: { borderInlineStartStyle: "groove" },
    RIDGE: { borderInlineStartStyle: "ridge" },
    INSET: { borderInlineStartStyle: "inset" },
    OUTSET: { borderInlineStartStyle: "outset" }
};
const _BorderInlineStartWidth = {
    set: (...params: Param[]): Sheet => ({ borderInlineStartWidth: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ borderInlineStartWidth: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ borderInlineStartWidth: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ borderInlineStartWidth: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ borderInlineStartWidth: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ borderInlineStartWidth: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ borderInlineStartWidth: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ borderInlineStartWidth: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ borderInlineStartWidth: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ borderInlineStartWidth: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ borderInlineStartWidth: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ borderInlineStartWidth: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ borderInlineStartWidth: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ borderInlineStartWidth: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ borderInlineStartWidth: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ borderInlineStartWidth: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ borderInlineStartWidth: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ borderInlineStartWidth: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ borderInlineStartWidth: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ borderInlineStartWidth: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ borderInlineStartWidth: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ borderInlineStartWidth: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ borderInlineStartWidth: Length.fr(...nums) }),
    THIN: { borderInlineStartWidth: "thin" },
    MEDIUM: { borderInlineStartWidth: "medium" },
    THICK: { borderInlineStartWidth: "thick" }
};
const _BorderLeft = {
    set: (...params: Param[]): Sheet => ({ borderLeft: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ borderLeft: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ borderLeft: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ borderLeft: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ borderLeft: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ borderLeft: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ borderLeft: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ borderLeft: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ borderLeft: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ borderLeft: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ borderLeft: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ borderLeft: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ borderLeft: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ borderLeft: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ borderLeft: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ borderLeft: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ borderLeft: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ borderLeft: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ borderLeft: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ borderLeft: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ borderLeft: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ borderLeft: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ borderLeft: Length.fr(...nums) }),
    THIN: { borderLeft: "thin" },
    MEDIUM: { borderLeft: "medium" },
    THICK: { borderLeft: "thick" },
    NONE: { borderLeft: "none" },
    HIDDEN: { borderLeft: "hidden" },
    DOTTED: { borderLeft: "dotted" },
    DASHED: { borderLeft: "dashed" },
    SOLID: { borderLeft: "solid" },
    DOUBLE: { borderLeft: "double" },
    GROOVE: { borderLeft: "groove" },
    RIDGE: { borderLeft: "ridge" },
    INSET: { borderLeft: "inset" },
    OUTSET: { borderLeft: "outset" },
    rgb: (...params: Param[]): Sheet => ({ borderLeft: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ borderLeft: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ borderLeft: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ borderLeft: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ borderLeft: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ borderLeft: Method.hsla(...params) }),
    BLACK: { borderLeft: "black" },
    SILVER: { borderLeft: "silver" },
    GRAY: { borderLeft: "gray" },
    WHITE: { borderLeft: "white" },
    MAROON: { borderLeft: "maroon" },
    RED: { borderLeft: "red" },
    PURPLE: { borderLeft: "purple" },
    FUCHSIA: { borderLeft: "fuchsia" },
    GREEN: { borderLeft: "green" },
    LIME: { borderLeft: "lime" },
    OLIVE: { borderLeft: "olive" },
    YELLOW: { borderLeft: "yellow" },
    NAVY: { borderLeft: "navy" },
    BLUE: { borderLeft: "blue" },
    TEAL: { borderLeft: "teal" },
    AQUA: { borderLeft: "aqua" },
    CURRENTCOLOR: { borderLeft: "currentcolor" },
    ACTIVEBORDER: { borderLeft: "ActiveBorder" },
    ACTIVECAPTION: { borderLeft: "ActiveCaption" },
    APPWORKSPACE: { borderLeft: "AppWorkspace" },
    BACKGROUND: { borderLeft: "Background" },
    BUTTONFACE: { borderLeft: "ButtonFace" },
    BUTTONHIGHLIGHT: { borderLeft: "ButtonHighlight" },
    BUTTONSHADOW: { borderLeft: "ButtonShadow" },
    BUTTONTEXT: { borderLeft: "ButtonText" },
    CAPTIONTEXT: { borderLeft: "CaptionText" },
    GRAYTEXT: { borderLeft: "GrayText" },
    HIGHLIGHT: { borderLeft: "Highlight" },
    HIGHLIGHTTEXT: { borderLeft: "HighlightText" },
    INACTIVEBORDER: { borderLeft: "InactiveBorder" },
    INACTIVECAPTION: { borderLeft: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { borderLeft: "InactiveCaptionText" },
    INFOBACKGROUND: { borderLeft: "InfoBackground" },
    INFOTEXT: { borderLeft: "InfoText" },
    MENU: { borderLeft: "Menu" },
    MENUTEXT: { borderLeft: "MenuText" },
    SCROLLBAR: { borderLeft: "Scrollbar" },
    THREEDDARKSHADOW: { borderLeft: "ThreeDDarkShadow" },
    THREEDFACE: { borderLeft: "ThreeDFace" },
    THREEDHIGHLIGHT: { borderLeft: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { borderLeft: "ThreeDLightShadow" },
    THREEDSHADOW: { borderLeft: "ThreeDShadow" },
    WINDOW: { borderLeft: "Window" },
    WINDOWFRAME: { borderLeft: "WindowFrame" },
    WINDOWTEXT: { borderLeft: "WindowText" }
};
const _BorderLeftColor = {
    set: (...params: Param[]): Sheet => ({ borderLeftColor: buildProperty(params) }),
    rgb: (...params: Param[]): Sheet => ({ borderLeftColor: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ borderLeftColor: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ borderLeftColor: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ borderLeftColor: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ borderLeftColor: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ borderLeftColor: Method.hsla(...params) }),
    BLACK: { borderLeftColor: "black" },
    SILVER: { borderLeftColor: "silver" },
    GRAY: { borderLeftColor: "gray" },
    WHITE: { borderLeftColor: "white" },
    MAROON: { borderLeftColor: "maroon" },
    RED: { borderLeftColor: "red" },
    PURPLE: { borderLeftColor: "purple" },
    FUCHSIA: { borderLeftColor: "fuchsia" },
    GREEN: { borderLeftColor: "green" },
    LIME: { borderLeftColor: "lime" },
    OLIVE: { borderLeftColor: "olive" },
    YELLOW: { borderLeftColor: "yellow" },
    NAVY: { borderLeftColor: "navy" },
    BLUE: { borderLeftColor: "blue" },
    TEAL: { borderLeftColor: "teal" },
    AQUA: { borderLeftColor: "aqua" },
    CURRENTCOLOR: { borderLeftColor: "currentcolor" },
    ACTIVEBORDER: { borderLeftColor: "ActiveBorder" },
    ACTIVECAPTION: { borderLeftColor: "ActiveCaption" },
    APPWORKSPACE: { borderLeftColor: "AppWorkspace" },
    BACKGROUND: { borderLeftColor: "Background" },
    BUTTONFACE: { borderLeftColor: "ButtonFace" },
    BUTTONHIGHLIGHT: { borderLeftColor: "ButtonHighlight" },
    BUTTONSHADOW: { borderLeftColor: "ButtonShadow" },
    BUTTONTEXT: { borderLeftColor: "ButtonText" },
    CAPTIONTEXT: { borderLeftColor: "CaptionText" },
    GRAYTEXT: { borderLeftColor: "GrayText" },
    HIGHLIGHT: { borderLeftColor: "Highlight" },
    HIGHLIGHTTEXT: { borderLeftColor: "HighlightText" },
    INACTIVEBORDER: { borderLeftColor: "InactiveBorder" },
    INACTIVECAPTION: { borderLeftColor: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { borderLeftColor: "InactiveCaptionText" },
    INFOBACKGROUND: { borderLeftColor: "InfoBackground" },
    INFOTEXT: { borderLeftColor: "InfoText" },
    MENU: { borderLeftColor: "Menu" },
    MENUTEXT: { borderLeftColor: "MenuText" },
    SCROLLBAR: { borderLeftColor: "Scrollbar" },
    THREEDDARKSHADOW: { borderLeftColor: "ThreeDDarkShadow" },
    THREEDFACE: { borderLeftColor: "ThreeDFace" },
    THREEDHIGHLIGHT: { borderLeftColor: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { borderLeftColor: "ThreeDLightShadow" },
    THREEDSHADOW: { borderLeftColor: "ThreeDShadow" },
    WINDOW: { borderLeftColor: "Window" },
    WINDOWFRAME: { borderLeftColor: "WindowFrame" },
    WINDOWTEXT: { borderLeftColor: "WindowText" }
};
const _BorderLeftStyle = {
    set: (...params: Param[]): Sheet => ({ borderLeftStyle: buildProperty(params) }),
    NONE: { borderLeftStyle: "none" },
    HIDDEN: { borderLeftStyle: "hidden" },
    DOTTED: { borderLeftStyle: "dotted" },
    DASHED: { borderLeftStyle: "dashed" },
    SOLID: { borderLeftStyle: "solid" },
    DOUBLE: { borderLeftStyle: "double" },
    GROOVE: { borderLeftStyle: "groove" },
    RIDGE: { borderLeftStyle: "ridge" },
    INSET: { borderLeftStyle: "inset" },
    OUTSET: { borderLeftStyle: "outset" }
};
const _BorderLeftWidth = {
    set: (...params: Param[]): Sheet => ({ borderLeftWidth: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ borderLeftWidth: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ borderLeftWidth: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ borderLeftWidth: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ borderLeftWidth: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ borderLeftWidth: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ borderLeftWidth: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ borderLeftWidth: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ borderLeftWidth: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ borderLeftWidth: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ borderLeftWidth: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ borderLeftWidth: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ borderLeftWidth: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ borderLeftWidth: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ borderLeftWidth: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ borderLeftWidth: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ borderLeftWidth: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ borderLeftWidth: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ borderLeftWidth: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ borderLeftWidth: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ borderLeftWidth: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ borderLeftWidth: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ borderLeftWidth: Length.fr(...nums) }),
    THIN: { borderLeftWidth: "thin" },
    MEDIUM: { borderLeftWidth: "medium" },
    THICK: { borderLeftWidth: "thick" }
};
const _BorderRadius = {
    set: (...params: Param[]): Sheet => ({ borderRadius: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ borderRadius: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ borderRadius: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ borderRadius: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ borderRadius: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ borderRadius: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ borderRadius: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ borderRadius: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ borderRadius: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ borderRadius: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ borderRadius: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ borderRadius: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ borderRadius: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ borderRadius: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ borderRadius: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ borderRadius: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ borderRadius: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ borderRadius: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ borderRadius: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ borderRadius: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ borderRadius: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ borderRadius: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ borderRadius: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ borderRadius: Length.X(...nums) })
};
const _BorderRight = {
    set: (...params: Param[]): Sheet => ({ borderRight: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ borderRight: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ borderRight: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ borderRight: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ borderRight: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ borderRight: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ borderRight: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ borderRight: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ borderRight: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ borderRight: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ borderRight: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ borderRight: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ borderRight: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ borderRight: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ borderRight: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ borderRight: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ borderRight: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ borderRight: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ borderRight: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ borderRight: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ borderRight: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ borderRight: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ borderRight: Length.fr(...nums) }),
    THIN: { borderRight: "thin" },
    MEDIUM: { borderRight: "medium" },
    THICK: { borderRight: "thick" },
    NONE: { borderRight: "none" },
    HIDDEN: { borderRight: "hidden" },
    DOTTED: { borderRight: "dotted" },
    DASHED: { borderRight: "dashed" },
    SOLID: { borderRight: "solid" },
    DOUBLE: { borderRight: "double" },
    GROOVE: { borderRight: "groove" },
    RIDGE: { borderRight: "ridge" },
    INSET: { borderRight: "inset" },
    OUTSET: { borderRight: "outset" },
    rgb: (...params: Param[]): Sheet => ({ borderRight: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ borderRight: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ borderRight: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ borderRight: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ borderRight: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ borderRight: Method.hsla(...params) }),
    BLACK: { borderRight: "black" },
    SILVER: { borderRight: "silver" },
    GRAY: { borderRight: "gray" },
    WHITE: { borderRight: "white" },
    MAROON: { borderRight: "maroon" },
    RED: { borderRight: "red" },
    PURPLE: { borderRight: "purple" },
    FUCHSIA: { borderRight: "fuchsia" },
    GREEN: { borderRight: "green" },
    LIME: { borderRight: "lime" },
    OLIVE: { borderRight: "olive" },
    YELLOW: { borderRight: "yellow" },
    NAVY: { borderRight: "navy" },
    BLUE: { borderRight: "blue" },
    TEAL: { borderRight: "teal" },
    AQUA: { borderRight: "aqua" },
    CURRENTCOLOR: { borderRight: "currentcolor" },
    ACTIVEBORDER: { borderRight: "ActiveBorder" },
    ACTIVECAPTION: { borderRight: "ActiveCaption" },
    APPWORKSPACE: { borderRight: "AppWorkspace" },
    BACKGROUND: { borderRight: "Background" },
    BUTTONFACE: { borderRight: "ButtonFace" },
    BUTTONHIGHLIGHT: { borderRight: "ButtonHighlight" },
    BUTTONSHADOW: { borderRight: "ButtonShadow" },
    BUTTONTEXT: { borderRight: "ButtonText" },
    CAPTIONTEXT: { borderRight: "CaptionText" },
    GRAYTEXT: { borderRight: "GrayText" },
    HIGHLIGHT: { borderRight: "Highlight" },
    HIGHLIGHTTEXT: { borderRight: "HighlightText" },
    INACTIVEBORDER: { borderRight: "InactiveBorder" },
    INACTIVECAPTION: { borderRight: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { borderRight: "InactiveCaptionText" },
    INFOBACKGROUND: { borderRight: "InfoBackground" },
    INFOTEXT: { borderRight: "InfoText" },
    MENU: { borderRight: "Menu" },
    MENUTEXT: { borderRight: "MenuText" },
    SCROLLBAR: { borderRight: "Scrollbar" },
    THREEDDARKSHADOW: { borderRight: "ThreeDDarkShadow" },
    THREEDFACE: { borderRight: "ThreeDFace" },
    THREEDHIGHLIGHT: { borderRight: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { borderRight: "ThreeDLightShadow" },
    THREEDSHADOW: { borderRight: "ThreeDShadow" },
    WINDOW: { borderRight: "Window" },
    WINDOWFRAME: { borderRight: "WindowFrame" },
    WINDOWTEXT: { borderRight: "WindowText" }
};
const _BorderRightColor = {
    set: (...params: Param[]): Sheet => ({ borderRightColor: buildProperty(params) }),
    rgb: (...params: Param[]): Sheet => ({ borderRightColor: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ borderRightColor: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ borderRightColor: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ borderRightColor: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ borderRightColor: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ borderRightColor: Method.hsla(...params) }),
    BLACK: { borderRightColor: "black" },
    SILVER: { borderRightColor: "silver" },
    GRAY: { borderRightColor: "gray" },
    WHITE: { borderRightColor: "white" },
    MAROON: { borderRightColor: "maroon" },
    RED: { borderRightColor: "red" },
    PURPLE: { borderRightColor: "purple" },
    FUCHSIA: { borderRightColor: "fuchsia" },
    GREEN: { borderRightColor: "green" },
    LIME: { borderRightColor: "lime" },
    OLIVE: { borderRightColor: "olive" },
    YELLOW: { borderRightColor: "yellow" },
    NAVY: { borderRightColor: "navy" },
    BLUE: { borderRightColor: "blue" },
    TEAL: { borderRightColor: "teal" },
    AQUA: { borderRightColor: "aqua" },
    CURRENTCOLOR: { borderRightColor: "currentcolor" },
    ACTIVEBORDER: { borderRightColor: "ActiveBorder" },
    ACTIVECAPTION: { borderRightColor: "ActiveCaption" },
    APPWORKSPACE: { borderRightColor: "AppWorkspace" },
    BACKGROUND: { borderRightColor: "Background" },
    BUTTONFACE: { borderRightColor: "ButtonFace" },
    BUTTONHIGHLIGHT: { borderRightColor: "ButtonHighlight" },
    BUTTONSHADOW: { borderRightColor: "ButtonShadow" },
    BUTTONTEXT: { borderRightColor: "ButtonText" },
    CAPTIONTEXT: { borderRightColor: "CaptionText" },
    GRAYTEXT: { borderRightColor: "GrayText" },
    HIGHLIGHT: { borderRightColor: "Highlight" },
    HIGHLIGHTTEXT: { borderRightColor: "HighlightText" },
    INACTIVEBORDER: { borderRightColor: "InactiveBorder" },
    INACTIVECAPTION: { borderRightColor: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { borderRightColor: "InactiveCaptionText" },
    INFOBACKGROUND: { borderRightColor: "InfoBackground" },
    INFOTEXT: { borderRightColor: "InfoText" },
    MENU: { borderRightColor: "Menu" },
    MENUTEXT: { borderRightColor: "MenuText" },
    SCROLLBAR: { borderRightColor: "Scrollbar" },
    THREEDDARKSHADOW: { borderRightColor: "ThreeDDarkShadow" },
    THREEDFACE: { borderRightColor: "ThreeDFace" },
    THREEDHIGHLIGHT: { borderRightColor: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { borderRightColor: "ThreeDLightShadow" },
    THREEDSHADOW: { borderRightColor: "ThreeDShadow" },
    WINDOW: { borderRightColor: "Window" },
    WINDOWFRAME: { borderRightColor: "WindowFrame" },
    WINDOWTEXT: { borderRightColor: "WindowText" }
};
const _BorderRightStyle = {
    set: (...params: Param[]): Sheet => ({ borderRightStyle: buildProperty(params) }),
    NONE: { borderRightStyle: "none" },
    HIDDEN: { borderRightStyle: "hidden" },
    DOTTED: { borderRightStyle: "dotted" },
    DASHED: { borderRightStyle: "dashed" },
    SOLID: { borderRightStyle: "solid" },
    DOUBLE: { borderRightStyle: "double" },
    GROOVE: { borderRightStyle: "groove" },
    RIDGE: { borderRightStyle: "ridge" },
    INSET: { borderRightStyle: "inset" },
    OUTSET: { borderRightStyle: "outset" }
};
const _BorderRightWidth = {
    set: (...params: Param[]): Sheet => ({ borderRightWidth: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ borderRightWidth: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ borderRightWidth: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ borderRightWidth: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ borderRightWidth: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ borderRightWidth: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ borderRightWidth: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ borderRightWidth: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ borderRightWidth: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ borderRightWidth: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ borderRightWidth: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ borderRightWidth: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ borderRightWidth: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ borderRightWidth: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ borderRightWidth: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ borderRightWidth: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ borderRightWidth: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ borderRightWidth: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ borderRightWidth: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ borderRightWidth: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ borderRightWidth: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ borderRightWidth: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ borderRightWidth: Length.fr(...nums) }),
    THIN: { borderRightWidth: "thin" },
    MEDIUM: { borderRightWidth: "medium" },
    THICK: { borderRightWidth: "thick" }
};
const _BorderSpacing = {
    set: (...params: Param[]): Sheet => ({ borderSpacing: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ borderSpacing: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ borderSpacing: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ borderSpacing: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ borderSpacing: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ borderSpacing: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ borderSpacing: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ borderSpacing: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ borderSpacing: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ borderSpacing: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ borderSpacing: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ borderSpacing: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ borderSpacing: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ borderSpacing: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ borderSpacing: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ borderSpacing: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ borderSpacing: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ borderSpacing: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ borderSpacing: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ borderSpacing: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ borderSpacing: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ borderSpacing: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ borderSpacing: Length.fr(...nums) })
};
const _BorderStyle = {
    set: (...params: Param[]): Sheet => ({ borderStyle: buildProperty(params) }),
    NONE: { borderStyle: "none" },
    HIDDEN: { borderStyle: "hidden" },
    DOTTED: { borderStyle: "dotted" },
    DASHED: { borderStyle: "dashed" },
    SOLID: { borderStyle: "solid" },
    DOUBLE: { borderStyle: "double" },
    GROOVE: { borderStyle: "groove" },
    RIDGE: { borderStyle: "ridge" },
    INSET: { borderStyle: "inset" },
    OUTSET: { borderStyle: "outset" }
};
const _BorderTop = {
    set: (...params: Param[]): Sheet => ({ borderTop: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ borderTop: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ borderTop: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ borderTop: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ borderTop: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ borderTop: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ borderTop: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ borderTop: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ borderTop: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ borderTop: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ borderTop: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ borderTop: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ borderTop: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ borderTop: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ borderTop: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ borderTop: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ borderTop: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ borderTop: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ borderTop: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ borderTop: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ borderTop: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ borderTop: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ borderTop: Length.fr(...nums) }),
    THIN: { borderTop: "thin" },
    MEDIUM: { borderTop: "medium" },
    THICK: { borderTop: "thick" },
    NONE: { borderTop: "none" },
    HIDDEN: { borderTop: "hidden" },
    DOTTED: { borderTop: "dotted" },
    DASHED: { borderTop: "dashed" },
    SOLID: { borderTop: "solid" },
    DOUBLE: { borderTop: "double" },
    GROOVE: { borderTop: "groove" },
    RIDGE: { borderTop: "ridge" },
    INSET: { borderTop: "inset" },
    OUTSET: { borderTop: "outset" },
    rgb: (...params: Param[]): Sheet => ({ borderTop: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ borderTop: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ borderTop: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ borderTop: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ borderTop: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ borderTop: Method.hsla(...params) }),
    BLACK: { borderTop: "black" },
    SILVER: { borderTop: "silver" },
    GRAY: { borderTop: "gray" },
    WHITE: { borderTop: "white" },
    MAROON: { borderTop: "maroon" },
    RED: { borderTop: "red" },
    PURPLE: { borderTop: "purple" },
    FUCHSIA: { borderTop: "fuchsia" },
    GREEN: { borderTop: "green" },
    LIME: { borderTop: "lime" },
    OLIVE: { borderTop: "olive" },
    YELLOW: { borderTop: "yellow" },
    NAVY: { borderTop: "navy" },
    BLUE: { borderTop: "blue" },
    TEAL: { borderTop: "teal" },
    AQUA: { borderTop: "aqua" },
    CURRENTCOLOR: { borderTop: "currentcolor" },
    ACTIVEBORDER: { borderTop: "ActiveBorder" },
    ACTIVECAPTION: { borderTop: "ActiveCaption" },
    APPWORKSPACE: { borderTop: "AppWorkspace" },
    BACKGROUND: { borderTop: "Background" },
    BUTTONFACE: { borderTop: "ButtonFace" },
    BUTTONHIGHLIGHT: { borderTop: "ButtonHighlight" },
    BUTTONSHADOW: { borderTop: "ButtonShadow" },
    BUTTONTEXT: { borderTop: "ButtonText" },
    CAPTIONTEXT: { borderTop: "CaptionText" },
    GRAYTEXT: { borderTop: "GrayText" },
    HIGHLIGHT: { borderTop: "Highlight" },
    HIGHLIGHTTEXT: { borderTop: "HighlightText" },
    INACTIVEBORDER: { borderTop: "InactiveBorder" },
    INACTIVECAPTION: { borderTop: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { borderTop: "InactiveCaptionText" },
    INFOBACKGROUND: { borderTop: "InfoBackground" },
    INFOTEXT: { borderTop: "InfoText" },
    MENU: { borderTop: "Menu" },
    MENUTEXT: { borderTop: "MenuText" },
    SCROLLBAR: { borderTop: "Scrollbar" },
    THREEDDARKSHADOW: { borderTop: "ThreeDDarkShadow" },
    THREEDFACE: { borderTop: "ThreeDFace" },
    THREEDHIGHLIGHT: { borderTop: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { borderTop: "ThreeDLightShadow" },
    THREEDSHADOW: { borderTop: "ThreeDShadow" },
    WINDOW: { borderTop: "Window" },
    WINDOWFRAME: { borderTop: "WindowFrame" },
    WINDOWTEXT: { borderTop: "WindowText" }
};
const _BorderTopColor = {
    set: (...params: Param[]): Sheet => ({ borderTopColor: buildProperty(params) }),
    rgb: (...params: Param[]): Sheet => ({ borderTopColor: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ borderTopColor: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ borderTopColor: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ borderTopColor: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ borderTopColor: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ borderTopColor: Method.hsla(...params) }),
    BLACK: { borderTopColor: "black" },
    SILVER: { borderTopColor: "silver" },
    GRAY: { borderTopColor: "gray" },
    WHITE: { borderTopColor: "white" },
    MAROON: { borderTopColor: "maroon" },
    RED: { borderTopColor: "red" },
    PURPLE: { borderTopColor: "purple" },
    FUCHSIA: { borderTopColor: "fuchsia" },
    GREEN: { borderTopColor: "green" },
    LIME: { borderTopColor: "lime" },
    OLIVE: { borderTopColor: "olive" },
    YELLOW: { borderTopColor: "yellow" },
    NAVY: { borderTopColor: "navy" },
    BLUE: { borderTopColor: "blue" },
    TEAL: { borderTopColor: "teal" },
    AQUA: { borderTopColor: "aqua" },
    CURRENTCOLOR: { borderTopColor: "currentcolor" },
    ACTIVEBORDER: { borderTopColor: "ActiveBorder" },
    ACTIVECAPTION: { borderTopColor: "ActiveCaption" },
    APPWORKSPACE: { borderTopColor: "AppWorkspace" },
    BACKGROUND: { borderTopColor: "Background" },
    BUTTONFACE: { borderTopColor: "ButtonFace" },
    BUTTONHIGHLIGHT: { borderTopColor: "ButtonHighlight" },
    BUTTONSHADOW: { borderTopColor: "ButtonShadow" },
    BUTTONTEXT: { borderTopColor: "ButtonText" },
    CAPTIONTEXT: { borderTopColor: "CaptionText" },
    GRAYTEXT: { borderTopColor: "GrayText" },
    HIGHLIGHT: { borderTopColor: "Highlight" },
    HIGHLIGHTTEXT: { borderTopColor: "HighlightText" },
    INACTIVEBORDER: { borderTopColor: "InactiveBorder" },
    INACTIVECAPTION: { borderTopColor: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { borderTopColor: "InactiveCaptionText" },
    INFOBACKGROUND: { borderTopColor: "InfoBackground" },
    INFOTEXT: { borderTopColor: "InfoText" },
    MENU: { borderTopColor: "Menu" },
    MENUTEXT: { borderTopColor: "MenuText" },
    SCROLLBAR: { borderTopColor: "Scrollbar" },
    THREEDDARKSHADOW: { borderTopColor: "ThreeDDarkShadow" },
    THREEDFACE: { borderTopColor: "ThreeDFace" },
    THREEDHIGHLIGHT: { borderTopColor: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { borderTopColor: "ThreeDLightShadow" },
    THREEDSHADOW: { borderTopColor: "ThreeDShadow" },
    WINDOW: { borderTopColor: "Window" },
    WINDOWFRAME: { borderTopColor: "WindowFrame" },
    WINDOWTEXT: { borderTopColor: "WindowText" }
};
const _BorderTopLeftRadius = {
    set: (...params: Param[]): Sheet => ({ borderTopLeftRadius: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ borderTopLeftRadius: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ borderTopLeftRadius: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ borderTopLeftRadius: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ borderTopLeftRadius: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ borderTopLeftRadius: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ borderTopLeftRadius: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ borderTopLeftRadius: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ borderTopLeftRadius: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ borderTopLeftRadius: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ borderTopLeftRadius: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ borderTopLeftRadius: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ borderTopLeftRadius: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ borderTopLeftRadius: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ borderTopLeftRadius: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ borderTopLeftRadius: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ borderTopLeftRadius: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ borderTopLeftRadius: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ borderTopLeftRadius: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ borderTopLeftRadius: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ borderTopLeftRadius: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ borderTopLeftRadius: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ borderTopLeftRadius: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ borderTopLeftRadius: Length.X(...nums) })
};
const _BorderTopRightRadius = {
    set: (...params: Param[]): Sheet => ({ borderTopRightRadius: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ borderTopRightRadius: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ borderTopRightRadius: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ borderTopRightRadius: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ borderTopRightRadius: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ borderTopRightRadius: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ borderTopRightRadius: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ borderTopRightRadius: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ borderTopRightRadius: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ borderTopRightRadius: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ borderTopRightRadius: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ borderTopRightRadius: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ borderTopRightRadius: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ borderTopRightRadius: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ borderTopRightRadius: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ borderTopRightRadius: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ borderTopRightRadius: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ borderTopRightRadius: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ borderTopRightRadius: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ borderTopRightRadius: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ borderTopRightRadius: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ borderTopRightRadius: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ borderTopRightRadius: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ borderTopRightRadius: Length.X(...nums) })
};
const _BorderTopStyle = {
    set: (...params: Param[]): Sheet => ({ borderTopStyle: buildProperty(params) }),
    NONE: { borderTopStyle: "none" },
    HIDDEN: { borderTopStyle: "hidden" },
    DOTTED: { borderTopStyle: "dotted" },
    DASHED: { borderTopStyle: "dashed" },
    SOLID: { borderTopStyle: "solid" },
    DOUBLE: { borderTopStyle: "double" },
    GROOVE: { borderTopStyle: "groove" },
    RIDGE: { borderTopStyle: "ridge" },
    INSET: { borderTopStyle: "inset" },
    OUTSET: { borderTopStyle: "outset" }
};
const _BorderTopWidth = {
    set: (...params: Param[]): Sheet => ({ borderTopWidth: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ borderTopWidth: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ borderTopWidth: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ borderTopWidth: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ borderTopWidth: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ borderTopWidth: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ borderTopWidth: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ borderTopWidth: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ borderTopWidth: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ borderTopWidth: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ borderTopWidth: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ borderTopWidth: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ borderTopWidth: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ borderTopWidth: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ borderTopWidth: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ borderTopWidth: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ borderTopWidth: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ borderTopWidth: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ borderTopWidth: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ borderTopWidth: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ borderTopWidth: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ borderTopWidth: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ borderTopWidth: Length.fr(...nums) }),
    THIN: { borderTopWidth: "thin" },
    MEDIUM: { borderTopWidth: "medium" },
    THICK: { borderTopWidth: "thick" }
};
const _BorderWidth = {
    set: (...params: Param[]): Sheet => ({ borderWidth: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ borderWidth: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ borderWidth: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ borderWidth: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ borderWidth: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ borderWidth: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ borderWidth: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ borderWidth: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ borderWidth: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ borderWidth: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ borderWidth: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ borderWidth: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ borderWidth: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ borderWidth: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ borderWidth: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ borderWidth: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ borderWidth: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ borderWidth: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ borderWidth: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ borderWidth: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ borderWidth: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ borderWidth: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ borderWidth: Length.fr(...nums) }),
    THIN: { borderWidth: "thin" },
    MEDIUM: { borderWidth: "medium" },
    THICK: { borderWidth: "thick" }
};
const _Bottom = {
    set: (...params: Param[]): Sheet => ({ bottom: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ bottom: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ bottom: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ bottom: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ bottom: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ bottom: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ bottom: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ bottom: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ bottom: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ bottom: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ bottom: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ bottom: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ bottom: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ bottom: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ bottom: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ bottom: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ bottom: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ bottom: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ bottom: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ bottom: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ bottom: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ bottom: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ bottom: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ bottom: Length.X(...nums) }),
    AUTO: { bottom: "auto" }
};
const _BoxAlign = {
    set: (...params: Param[]): Sheet => ({ boxAlign: buildProperty(params) }),
    START: { boxAlign: "start" },
    CENTER: { boxAlign: "center" },
    END: { boxAlign: "end" },
    BASELINE: { boxAlign: "baseline" },
    STRETCH: { boxAlign: "stretch" }
};
const _BoxDecorationBreak = {
    set: (...params: Param[]): Sheet => ({ boxDecorationBreak: buildProperty(params) }),
    SLICE: { boxDecorationBreak: "slice" },
    CLONE: { boxDecorationBreak: "clone" }
};
const _BoxDirection = {
    set: (...params: Param[]): Sheet => ({ boxDirection: buildProperty(params) }),
    NORMAL: { boxDirection: "normal" },
    REVERSE: { boxDirection: "reverse" },
    INHERIT: { boxDirection: "inherit" }
};
const _BoxFlex = { set: (...params: Param[]): Sheet => ({ boxFlex: buildProperty(params) }) };
const _BoxFlexGroup = { set: (...params: Param[]): Sheet => ({ boxFlexGroup: buildProperty(params) }) };
const _BoxLines = {
    set: (...params: Param[]): Sheet => ({ boxLines: buildProperty(params) }),
    SINGLE: { boxLines: "single" },
    MULTIPLE: { boxLines: "multiple" }
};
const _BoxOrdinalGroup = { set: (...params: Param[]): Sheet => ({ boxOrdinalGroup: buildProperty(params) }) };
const _BoxOrient = {
    set: (...params: Param[]): Sheet => ({ boxOrient: buildProperty(params) }),
    HORIZONTAL: { boxOrient: "horizontal" },
    VERTICAL: { boxOrient: "vertical" },
    INLINE_AXIS: { boxOrient: "inline-axis" },
    BLOCK_AXIS: { boxOrient: "block-axis" },
    INHERIT: { boxOrient: "inherit" }
};
const _BoxPack = {
    set: (...params: Param[]): Sheet => ({ boxPack: buildProperty(params) }),
    START: { boxPack: "start" },
    CENTER: { boxPack: "center" },
    END: { boxPack: "end" },
    JUSTIFY: { boxPack: "justify" }
};
const _BoxShadow = {
    set: (...params: Param[]): Sheet => ({ boxShadow: buildProperty(params) }),
    NONE: { boxShadow: "none" },
    INSET: { boxShadow: "inset" },
    cap: (...nums: number[]): Sheet => ({ boxShadow: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ boxShadow: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ boxShadow: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ boxShadow: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ boxShadow: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ boxShadow: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ boxShadow: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ boxShadow: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ boxShadow: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ boxShadow: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ boxShadow: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ boxShadow: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ boxShadow: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ boxShadow: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ boxShadow: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ boxShadow: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ boxShadow: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ boxShadow: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ boxShadow: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ boxShadow: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ boxShadow: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ boxShadow: Length.fr(...nums) }),
    rgb: (...params: Param[]): Sheet => ({ boxShadow: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ boxShadow: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ boxShadow: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ boxShadow: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ boxShadow: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ boxShadow: Method.hsla(...params) }),
    BLACK: { boxShadow: "black" },
    SILVER: { boxShadow: "silver" },
    GRAY: { boxShadow: "gray" },
    WHITE: { boxShadow: "white" },
    MAROON: { boxShadow: "maroon" },
    RED: { boxShadow: "red" },
    PURPLE: { boxShadow: "purple" },
    FUCHSIA: { boxShadow: "fuchsia" },
    GREEN: { boxShadow: "green" },
    LIME: { boxShadow: "lime" },
    OLIVE: { boxShadow: "olive" },
    YELLOW: { boxShadow: "yellow" },
    NAVY: { boxShadow: "navy" },
    BLUE: { boxShadow: "blue" },
    TEAL: { boxShadow: "teal" },
    AQUA: { boxShadow: "aqua" },
    CURRENTCOLOR: { boxShadow: "currentcolor" },
    ACTIVEBORDER: { boxShadow: "ActiveBorder" },
    ACTIVECAPTION: { boxShadow: "ActiveCaption" },
    APPWORKSPACE: { boxShadow: "AppWorkspace" },
    BACKGROUND: { boxShadow: "Background" },
    BUTTONFACE: { boxShadow: "ButtonFace" },
    BUTTONHIGHLIGHT: { boxShadow: "ButtonHighlight" },
    BUTTONSHADOW: { boxShadow: "ButtonShadow" },
    BUTTONTEXT: { boxShadow: "ButtonText" },
    CAPTIONTEXT: { boxShadow: "CaptionText" },
    GRAYTEXT: { boxShadow: "GrayText" },
    HIGHLIGHT: { boxShadow: "Highlight" },
    HIGHLIGHTTEXT: { boxShadow: "HighlightText" },
    INACTIVEBORDER: { boxShadow: "InactiveBorder" },
    INACTIVECAPTION: { boxShadow: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { boxShadow: "InactiveCaptionText" },
    INFOBACKGROUND: { boxShadow: "InfoBackground" },
    INFOTEXT: { boxShadow: "InfoText" },
    MENU: { boxShadow: "Menu" },
    MENUTEXT: { boxShadow: "MenuText" },
    SCROLLBAR: { boxShadow: "Scrollbar" },
    THREEDDARKSHADOW: { boxShadow: "ThreeDDarkShadow" },
    THREEDFACE: { boxShadow: "ThreeDFace" },
    THREEDHIGHLIGHT: { boxShadow: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { boxShadow: "ThreeDLightShadow" },
    THREEDSHADOW: { boxShadow: "ThreeDShadow" },
    WINDOW: { boxShadow: "Window" },
    WINDOWFRAME: { boxShadow: "WindowFrame" },
    WINDOWTEXT: { boxShadow: "WindowText" }
};
const _BoxSizing = {
    set: (...params: Param[]): Sheet => ({ boxSizing: buildProperty(params) }),
    CONTENT_BOX: { boxSizing: "content-box" },
    BORDER_BOX: { boxSizing: "border-box" }
};
const _BreakAfter = {
    set: (...params: Param[]): Sheet => ({ breakAfter: buildProperty(params) }),
    AUTO: { breakAfter: "auto" },
    AVOID: { breakAfter: "avoid" },
    AVOID_PAGE: { breakAfter: "avoid-page" },
    PAGE: { breakAfter: "page" },
    LEFT: { breakAfter: "left" },
    RIGHT: { breakAfter: "right" },
    RECTO: { breakAfter: "recto" },
    VERSO: { breakAfter: "verso" },
    AVOID_COLUMN: { breakAfter: "avoid-column" },
    COLUMN: { breakAfter: "column" },
    AVOID_REGION: { breakAfter: "avoid-region" },
    REGION: { breakAfter: "region" }
};
const _BreakBefore = {
    set: (...params: Param[]): Sheet => ({ breakBefore: buildProperty(params) }),
    AUTO: { breakBefore: "auto" },
    AVOID: { breakBefore: "avoid" },
    AVOID_PAGE: { breakBefore: "avoid-page" },
    PAGE: { breakBefore: "page" },
    LEFT: { breakBefore: "left" },
    RIGHT: { breakBefore: "right" },
    RECTO: { breakBefore: "recto" },
    VERSO: { breakBefore: "verso" },
    AVOID_COLUMN: { breakBefore: "avoid-column" },
    COLUMN: { breakBefore: "column" },
    AVOID_REGION: { breakBefore: "avoid-region" },
    REGION: { breakBefore: "region" }
};
const _BreakInside = {
    set: (...params: Param[]): Sheet => ({ breakInside: buildProperty(params) }),
    AUTO: { breakInside: "auto" },
    AVOID: { breakInside: "avoid" },
    AVOID_PAGE: { breakInside: "avoid-page" },
    AVOID_COLUMN: { breakInside: "avoid-column" },
    AVOID_REGION: { breakInside: "avoid-region" }
};
const _CaptionSide = {
    set: (...params: Param[]): Sheet => ({ captionSide: buildProperty(params) }),
    TOP: { captionSide: "top" },
    BOTTOM: { captionSide: "bottom" },
    BLOCK_START: { captionSide: "block-start" },
    BLOCK_END: { captionSide: "block-end" },
    INLINE_START: { captionSide: "inline-start" },
    INLINE_END: { captionSide: "inline-end" }
};
const _CaretColor = {
    set: (...params: Param[]): Sheet => ({ caretColor: buildProperty(params) }),
    AUTO: { caretColor: "auto" },
    rgb: (...params: Param[]): Sheet => ({ caretColor: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ caretColor: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ caretColor: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ caretColor: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ caretColor: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ caretColor: Method.hsla(...params) }),
    BLACK: { caretColor: "black" },
    SILVER: { caretColor: "silver" },
    GRAY: { caretColor: "gray" },
    WHITE: { caretColor: "white" },
    MAROON: { caretColor: "maroon" },
    RED: { caretColor: "red" },
    PURPLE: { caretColor: "purple" },
    FUCHSIA: { caretColor: "fuchsia" },
    GREEN: { caretColor: "green" },
    LIME: { caretColor: "lime" },
    OLIVE: { caretColor: "olive" },
    YELLOW: { caretColor: "yellow" },
    NAVY: { caretColor: "navy" },
    BLUE: { caretColor: "blue" },
    TEAL: { caretColor: "teal" },
    AQUA: { caretColor: "aqua" },
    CURRENTCOLOR: { caretColor: "currentcolor" },
    ACTIVEBORDER: { caretColor: "ActiveBorder" },
    ACTIVECAPTION: { caretColor: "ActiveCaption" },
    APPWORKSPACE: { caretColor: "AppWorkspace" },
    BACKGROUND: { caretColor: "Background" },
    BUTTONFACE: { caretColor: "ButtonFace" },
    BUTTONHIGHLIGHT: { caretColor: "ButtonHighlight" },
    BUTTONSHADOW: { caretColor: "ButtonShadow" },
    BUTTONTEXT: { caretColor: "ButtonText" },
    CAPTIONTEXT: { caretColor: "CaptionText" },
    GRAYTEXT: { caretColor: "GrayText" },
    HIGHLIGHT: { caretColor: "Highlight" },
    HIGHLIGHTTEXT: { caretColor: "HighlightText" },
    INACTIVEBORDER: { caretColor: "InactiveBorder" },
    INACTIVECAPTION: { caretColor: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { caretColor: "InactiveCaptionText" },
    INFOBACKGROUND: { caretColor: "InfoBackground" },
    INFOTEXT: { caretColor: "InfoText" },
    MENU: { caretColor: "Menu" },
    MENUTEXT: { caretColor: "MenuText" },
    SCROLLBAR: { caretColor: "Scrollbar" },
    THREEDDARKSHADOW: { caretColor: "ThreeDDarkShadow" },
    THREEDFACE: { caretColor: "ThreeDFace" },
    THREEDHIGHLIGHT: { caretColor: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { caretColor: "ThreeDLightShadow" },
    THREEDSHADOW: { caretColor: "ThreeDShadow" },
    WINDOW: { caretColor: "Window" },
    WINDOWFRAME: { caretColor: "WindowFrame" },
    WINDOWTEXT: { caretColor: "WindowText" }
};
const _Clear = {
    set: (...params: Param[]): Sheet => ({ clear: buildProperty(params) }),
    NONE: { clear: "none" },
    LEFT: { clear: "left" },
    RIGHT: { clear: "right" },
    BOTH: { clear: "both" },
    INLINE_START: { clear: "inline-start" },
    INLINE_END: { clear: "inline-end" }
};
const _Clip = {
    set: (...params: Param[]): Sheet => ({ clip: buildProperty(params) }),
    rect: (...params: Param[]): Sheet => ({ clip: Method.rect(...params) }),
    AUTO: { clip: "auto" }
};
const _ClipPath = {
    set: (...params: Param[]): Sheet => ({ clipPath: buildProperty(params) }),
    inset: (...params: Param[]): Sheet => ({ clipPath: Method.inset(...params) }),
    circle: (...params: Param[]): Sheet => ({ clipPath: Method.circle(...params) }),
    ellipse: (...params: Param[]): Sheet => ({ clipPath: Method.ellipse(...params) }),
    polygon: (...params: Param[]): Sheet => ({ clipPath: Method.polygon(...params) }),
    BORDER_BOX: { clipPath: "border-box" },
    PADDING_BOX: { clipPath: "padding-box" },
    CONTENT_BOX: { clipPath: "content-box" },
    MARGIN_BOX: { clipPath: "margin-box" },
    FILL_BOX: { clipPath: "fill-box" },
    STROKE_BOX: { clipPath: "stroke-box" },
    VIEW_BOX: { clipPath: "view-box" },
    NONE: { clipPath: "none" }
};
const _Color = {
    set: (...params: Param[]): Sheet => ({ color: buildProperty(params) }),
    rgb: (...params: Param[]): Sheet => ({ color: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ color: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ color: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ color: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ color: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ color: Method.hsla(...params) }),
    BLACK: { color: "black" },
    SILVER: { color: "silver" },
    GRAY: { color: "gray" },
    WHITE: { color: "white" },
    MAROON: { color: "maroon" },
    RED: { color: "red" },
    PURPLE: { color: "purple" },
    FUCHSIA: { color: "fuchsia" },
    GREEN: { color: "green" },
    LIME: { color: "lime" },
    OLIVE: { color: "olive" },
    YELLOW: { color: "yellow" },
    NAVY: { color: "navy" },
    BLUE: { color: "blue" },
    TEAL: { color: "teal" },
    AQUA: { color: "aqua" },
    CURRENTCOLOR: { color: "currentcolor" },
    ACTIVEBORDER: { color: "ActiveBorder" },
    ACTIVECAPTION: { color: "ActiveCaption" },
    APPWORKSPACE: { color: "AppWorkspace" },
    BACKGROUND: { color: "Background" },
    BUTTONFACE: { color: "ButtonFace" },
    BUTTONHIGHLIGHT: { color: "ButtonHighlight" },
    BUTTONSHADOW: { color: "ButtonShadow" },
    BUTTONTEXT: { color: "ButtonText" },
    CAPTIONTEXT: { color: "CaptionText" },
    GRAYTEXT: { color: "GrayText" },
    HIGHLIGHT: { color: "Highlight" },
    HIGHLIGHTTEXT: { color: "HighlightText" },
    INACTIVEBORDER: { color: "InactiveBorder" },
    INACTIVECAPTION: { color: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { color: "InactiveCaptionText" },
    INFOBACKGROUND: { color: "InfoBackground" },
    INFOTEXT: { color: "InfoText" },
    MENU: { color: "Menu" },
    MENUTEXT: { color: "MenuText" },
    SCROLLBAR: { color: "Scrollbar" },
    THREEDDARKSHADOW: { color: "ThreeDDarkShadow" },
    THREEDFACE: { color: "ThreeDFace" },
    THREEDHIGHLIGHT: { color: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { color: "ThreeDLightShadow" },
    THREEDSHADOW: { color: "ThreeDShadow" },
    WINDOW: { color: "Window" },
    WINDOWFRAME: { color: "WindowFrame" },
    WINDOWTEXT: { color: "WindowText" }
};
const _ColorAdjust = {
    set: (...params: Param[]): Sheet => ({ colorAdjust: buildProperty(params) }),
    ECONOMY: { colorAdjust: "economy" },
    EXACT: { colorAdjust: "exact" }
};
const _ColumnCount = {
    set: (...params: Param[]): Sheet => ({ columnCount: buildProperty(params) }),
    AUTO: { columnCount: "auto" }
};
const _ColumnFill = {
    set: (...params: Param[]): Sheet => ({ columnFill: buildProperty(params) }),
    AUTO: { columnFill: "auto" },
    BALANCE: { columnFill: "balance" },
    BALANCE_ALL: { columnFill: "balance-all" }
};
const _ColumnGap = {
    set: (...params: Param[]): Sheet => ({ columnGap: buildProperty(params) }),
    NORMAL: { columnGap: "normal" },
    cap: (...nums: number[]): Sheet => ({ columnGap: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ columnGap: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ columnGap: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ columnGap: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ columnGap: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ columnGap: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ columnGap: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ columnGap: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ columnGap: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ columnGap: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ columnGap: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ columnGap: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ columnGap: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ columnGap: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ columnGap: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ columnGap: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ columnGap: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ columnGap: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ columnGap: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ columnGap: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ columnGap: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ columnGap: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ columnGap: Length.X(...nums) })
};
const _ColumnRule = {
    set: (...params: Param[]): Sheet => ({ columnRule: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ columnRule: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ columnRule: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ columnRule: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ columnRule: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ columnRule: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ columnRule: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ columnRule: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ columnRule: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ columnRule: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ columnRule: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ columnRule: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ columnRule: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ columnRule: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ columnRule: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ columnRule: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ columnRule: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ columnRule: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ columnRule: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ columnRule: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ columnRule: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ columnRule: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ columnRule: Length.fr(...nums) }),
    THIN: { columnRule: "thin" },
    MEDIUM: { columnRule: "medium" },
    THICK: { columnRule: "thick" },
    NONE: { columnRule: "none" },
    HIDDEN: { columnRule: "hidden" },
    DOTTED: { columnRule: "dotted" },
    DASHED: { columnRule: "dashed" },
    SOLID: { columnRule: "solid" },
    DOUBLE: { columnRule: "double" },
    GROOVE: { columnRule: "groove" },
    RIDGE: { columnRule: "ridge" },
    INSET: { columnRule: "inset" },
    OUTSET: { columnRule: "outset" },
    rgb: (...params: Param[]): Sheet => ({ columnRule: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ columnRule: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ columnRule: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ columnRule: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ columnRule: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ columnRule: Method.hsla(...params) }),
    BLACK: { columnRule: "black" },
    SILVER: { columnRule: "silver" },
    GRAY: { columnRule: "gray" },
    WHITE: { columnRule: "white" },
    MAROON: { columnRule: "maroon" },
    RED: { columnRule: "red" },
    PURPLE: { columnRule: "purple" },
    FUCHSIA: { columnRule: "fuchsia" },
    GREEN: { columnRule: "green" },
    LIME: { columnRule: "lime" },
    OLIVE: { columnRule: "olive" },
    YELLOW: { columnRule: "yellow" },
    NAVY: { columnRule: "navy" },
    BLUE: { columnRule: "blue" },
    TEAL: { columnRule: "teal" },
    AQUA: { columnRule: "aqua" },
    CURRENTCOLOR: { columnRule: "currentcolor" },
    ACTIVEBORDER: { columnRule: "ActiveBorder" },
    ACTIVECAPTION: { columnRule: "ActiveCaption" },
    APPWORKSPACE: { columnRule: "AppWorkspace" },
    BACKGROUND: { columnRule: "Background" },
    BUTTONFACE: { columnRule: "ButtonFace" },
    BUTTONHIGHLIGHT: { columnRule: "ButtonHighlight" },
    BUTTONSHADOW: { columnRule: "ButtonShadow" },
    BUTTONTEXT: { columnRule: "ButtonText" },
    CAPTIONTEXT: { columnRule: "CaptionText" },
    GRAYTEXT: { columnRule: "GrayText" },
    HIGHLIGHT: { columnRule: "Highlight" },
    HIGHLIGHTTEXT: { columnRule: "HighlightText" },
    INACTIVEBORDER: { columnRule: "InactiveBorder" },
    INACTIVECAPTION: { columnRule: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { columnRule: "InactiveCaptionText" },
    INFOBACKGROUND: { columnRule: "InfoBackground" },
    INFOTEXT: { columnRule: "InfoText" },
    MENU: { columnRule: "Menu" },
    MENUTEXT: { columnRule: "MenuText" },
    SCROLLBAR: { columnRule: "Scrollbar" },
    THREEDDARKSHADOW: { columnRule: "ThreeDDarkShadow" },
    THREEDFACE: { columnRule: "ThreeDFace" },
    THREEDHIGHLIGHT: { columnRule: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { columnRule: "ThreeDLightShadow" },
    THREEDSHADOW: { columnRule: "ThreeDShadow" },
    WINDOW: { columnRule: "Window" },
    WINDOWFRAME: { columnRule: "WindowFrame" },
    WINDOWTEXT: { columnRule: "WindowText" }
};
const _ColumnRuleColor = {
    set: (...params: Param[]): Sheet => ({ columnRuleColor: buildProperty(params) }),
    rgb: (...params: Param[]): Sheet => ({ columnRuleColor: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ columnRuleColor: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ columnRuleColor: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ columnRuleColor: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ columnRuleColor: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ columnRuleColor: Method.hsla(...params) }),
    BLACK: { columnRuleColor: "black" },
    SILVER: { columnRuleColor: "silver" },
    GRAY: { columnRuleColor: "gray" },
    WHITE: { columnRuleColor: "white" },
    MAROON: { columnRuleColor: "maroon" },
    RED: { columnRuleColor: "red" },
    PURPLE: { columnRuleColor: "purple" },
    FUCHSIA: { columnRuleColor: "fuchsia" },
    GREEN: { columnRuleColor: "green" },
    LIME: { columnRuleColor: "lime" },
    OLIVE: { columnRuleColor: "olive" },
    YELLOW: { columnRuleColor: "yellow" },
    NAVY: { columnRuleColor: "navy" },
    BLUE: { columnRuleColor: "blue" },
    TEAL: { columnRuleColor: "teal" },
    AQUA: { columnRuleColor: "aqua" },
    CURRENTCOLOR: { columnRuleColor: "currentcolor" },
    ACTIVEBORDER: { columnRuleColor: "ActiveBorder" },
    ACTIVECAPTION: { columnRuleColor: "ActiveCaption" },
    APPWORKSPACE: { columnRuleColor: "AppWorkspace" },
    BACKGROUND: { columnRuleColor: "Background" },
    BUTTONFACE: { columnRuleColor: "ButtonFace" },
    BUTTONHIGHLIGHT: { columnRuleColor: "ButtonHighlight" },
    BUTTONSHADOW: { columnRuleColor: "ButtonShadow" },
    BUTTONTEXT: { columnRuleColor: "ButtonText" },
    CAPTIONTEXT: { columnRuleColor: "CaptionText" },
    GRAYTEXT: { columnRuleColor: "GrayText" },
    HIGHLIGHT: { columnRuleColor: "Highlight" },
    HIGHLIGHTTEXT: { columnRuleColor: "HighlightText" },
    INACTIVEBORDER: { columnRuleColor: "InactiveBorder" },
    INACTIVECAPTION: { columnRuleColor: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { columnRuleColor: "InactiveCaptionText" },
    INFOBACKGROUND: { columnRuleColor: "InfoBackground" },
    INFOTEXT: { columnRuleColor: "InfoText" },
    MENU: { columnRuleColor: "Menu" },
    MENUTEXT: { columnRuleColor: "MenuText" },
    SCROLLBAR: { columnRuleColor: "Scrollbar" },
    THREEDDARKSHADOW: { columnRuleColor: "ThreeDDarkShadow" },
    THREEDFACE: { columnRuleColor: "ThreeDFace" },
    THREEDHIGHLIGHT: { columnRuleColor: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { columnRuleColor: "ThreeDLightShadow" },
    THREEDSHADOW: { columnRuleColor: "ThreeDShadow" },
    WINDOW: { columnRuleColor: "Window" },
    WINDOWFRAME: { columnRuleColor: "WindowFrame" },
    WINDOWTEXT: { columnRuleColor: "WindowText" }
};
const _ColumnRuleStyle = {
    set: (...params: Param[]): Sheet => ({ columnRuleStyle: buildProperty(params) }),
    NONE: { columnRuleStyle: "none" },
    HIDDEN: { columnRuleStyle: "hidden" },
    DOTTED: { columnRuleStyle: "dotted" },
    DASHED: { columnRuleStyle: "dashed" },
    SOLID: { columnRuleStyle: "solid" },
    DOUBLE: { columnRuleStyle: "double" },
    GROOVE: { columnRuleStyle: "groove" },
    RIDGE: { columnRuleStyle: "ridge" },
    INSET: { columnRuleStyle: "inset" },
    OUTSET: { columnRuleStyle: "outset" }
};
const _ColumnRuleWidth = {
    set: (...params: Param[]): Sheet => ({ columnRuleWidth: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ columnRuleWidth: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ columnRuleWidth: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ columnRuleWidth: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ columnRuleWidth: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ columnRuleWidth: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ columnRuleWidth: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ columnRuleWidth: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ columnRuleWidth: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ columnRuleWidth: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ columnRuleWidth: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ columnRuleWidth: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ columnRuleWidth: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ columnRuleWidth: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ columnRuleWidth: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ columnRuleWidth: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ columnRuleWidth: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ columnRuleWidth: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ columnRuleWidth: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ columnRuleWidth: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ columnRuleWidth: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ columnRuleWidth: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ columnRuleWidth: Length.fr(...nums) }),
    THIN: { columnRuleWidth: "thin" },
    MEDIUM: { columnRuleWidth: "medium" },
    THICK: { columnRuleWidth: "thick" }
};
const _ColumnSpan = {
    set: (...params: Param[]): Sheet => ({ columnSpan: buildProperty(params) }),
    NONE: { columnSpan: "none" },
    ALL: { columnSpan: "all" }
};
const _ColumnWidth = {
    set: (...params: Param[]): Sheet => ({ columnWidth: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ columnWidth: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ columnWidth: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ columnWidth: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ columnWidth: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ columnWidth: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ columnWidth: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ columnWidth: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ columnWidth: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ columnWidth: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ columnWidth: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ columnWidth: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ columnWidth: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ columnWidth: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ columnWidth: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ columnWidth: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ columnWidth: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ columnWidth: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ columnWidth: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ columnWidth: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ columnWidth: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ columnWidth: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ columnWidth: Length.fr(...nums) }),
    AUTO: { columnWidth: "auto" }
};
const _Columns = {
    set: (...params: Param[]): Sheet => ({ columns: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ columns: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ columns: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ columns: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ columns: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ columns: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ columns: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ columns: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ columns: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ columns: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ columns: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ columns: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ columns: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ columns: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ columns: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ columns: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ columns: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ columns: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ columns: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ columns: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ columns: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ columns: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ columns: Length.fr(...nums) }),
    AUTO: { columns: "auto" }
};
const _Contain = {
    set: (...params: Param[]): Sheet => ({ contain: buildProperty(params) }),
    NONE: { contain: "none" },
    STRICT: { contain: "strict" },
    CONTENT: { contain: "content" },
    SIZE: { contain: "size" },
    LAYOUT: { contain: "layout" },
    STYLE: { contain: "style" },
    PAINT: { contain: "paint" }
};
const _Content = {
    set: (...params: Param[]): Sheet => ({ content: buildProperty(params) }),
    NORMAL: { content: "normal" },
    NONE: { content: "none" },
    image: (...params: Param[]): Sheet => ({ content: Method.image(...params) }),
    imageSet: (...params: Param[]): Sheet => ({ content: Method.imageSet(...params) }),
    element: (...params: Param[]): Sheet => ({ content: Method.element(...params) }),
    crossFade: (...params: Param[]): Sheet => ({ content: Method.crossFade(...params) }),
    linearGradient: (...params: Param[]): Sheet => ({ content: Method.linearGradient(...params) }),
    repeatingLinearGradient: (...params: Param[]): Sheet => ({ content: Method.repeatingLinearGradient(...params) }),
    radialGradient: (...params: Param[]): Sheet => ({ content: Method.radialGradient(...params) }),
    repeatingRadialGradient: (...params: Param[]): Sheet => ({ content: Method.repeatingRadialGradient(...params) }),
    CONTENTS: { content: "contents" },
    OPEN_QUOTE: { content: "open-quote" },
    CLOSE_QUOTE: { content: "close-quote" },
    NO_OPEN_QUOTE: { content: "no-open-quote" },
    NO_CLOSE_QUOTE: { content: "no-close-quote" },
    targetCounter: (...params: Param[]): Sheet => ({ content: Method.targetCounter(...params) }),
    targetCounters: (...params: Param[]): Sheet => ({ content: Method.targetCounters(...params) }),
    targetText: (...params: Param[]): Sheet => ({ content: Method.targetText(...params) }),
    leader: (...params: Param[]): Sheet => ({ content: Method.leader(...params) })
};
const _CounterIncrement = {
    set: (...params: Param[]): Sheet => ({ counterIncrement: buildProperty(params) }),
    NONE: { counterIncrement: "none" }
};
const _CounterReset = {
    set: (...params: Param[]): Sheet => ({ counterReset: buildProperty(params) }),
    NONE: { counterReset: "none" }
};
const _Cursor = {
    set: (...params: Param[]): Sheet => ({ cursor: buildProperty(params) }),
    AUTO: { cursor: "auto" },
    DEFAULT: { cursor: "default" },
    NONE: { cursor: "none" },
    CONTEXT_MENU: { cursor: "context-menu" },
    HELP: { cursor: "help" },
    POINTER: { cursor: "pointer" },
    PROGRESS: { cursor: "progress" },
    WAIT: { cursor: "wait" },
    CELL: { cursor: "cell" },
    CROSSHAIR: { cursor: "crosshair" },
    TEXT: { cursor: "text" },
    VERTICAL_TEXT: { cursor: "vertical-text" },
    ALIAS: { cursor: "alias" },
    COPY: { cursor: "copy" },
    MOVE: { cursor: "move" },
    NO_DROP: { cursor: "no-drop" },
    NOT_ALLOWED: { cursor: "not-allowed" },
    E_RESIZE: { cursor: "e-resize" },
    N_RESIZE: { cursor: "n-resize" },
    NE_RESIZE: { cursor: "ne-resize" },
    NW_RESIZE: { cursor: "nw-resize" },
    S_RESIZE: { cursor: "s-resize" },
    SE_RESIZE: { cursor: "se-resize" },
    SW_RESIZE: { cursor: "sw-resize" },
    W_RESIZE: { cursor: "w-resize" },
    EW_RESIZE: { cursor: "ew-resize" },
    NS_RESIZE: { cursor: "ns-resize" },
    NESW_RESIZE: { cursor: "nesw-resize" },
    NWSE_RESIZE: { cursor: "nwse-resize" },
    COL_RESIZE: { cursor: "col-resize" },
    ROW_RESIZE: { cursor: "row-resize" },
    ALL_SCROLL: { cursor: "all-scroll" },
    ZOOM_IN: { cursor: "zoom-in" },
    ZOOM_OUT: { cursor: "zoom-out" },
    GRAB: { cursor: "grab" },
    GRABBING: { cursor: "grabbing" }
};
const _Direction = {
    set: (...params: Param[]): Sheet => ({ direction: buildProperty(params) }),
    LTR: { direction: "ltr" },
    RTL: { direction: "rtl" }
};
const _Display = {
    set: (...params: Param[]): Sheet => ({ display: buildProperty(params) }),
    BLOCK: { display: "block" },
    INLINE: { display: "inline" },
    RUN_IN: { display: "run-in" },
    FLOW: { display: "flow" },
    FLOW_ROOT: { display: "flow-root" },
    TABLE: { display: "table" },
    FLEX: { display: "flex" },
    GRID: { display: "grid" },
    RUBY: { display: "ruby" },
    LIST_ITEM: { display: "list-item" },
    TABLE_ROW_GROUP: { display: "table-row-group" },
    TABLE_HEADER_GROUP: { display: "table-header-group" },
    TABLE_FOOTER_GROUP: { display: "table-footer-group" },
    TABLE_ROW: { display: "table-row" },
    TABLE_CELL: { display: "table-cell" },
    TABLE_COLUMN_GROUP: { display: "table-column-group" },
    TABLE_COLUMN: { display: "table-column" },
    TABLE_CAPTION: { display: "table-caption" },
    RUBY_BASE: { display: "ruby-base" },
    RUBY_TEXT: { display: "ruby-text" },
    RUBY_BASE_CONTAINER: { display: "ruby-base-container" },
    RUBY_TEXT_CONTAINER: { display: "ruby-text-container" },
    CONTENTS: { display: "contents" },
    NONE: { display: "none" },
    INLINE_BLOCK: { display: "inline-block" },
    INLINE_LIST_ITEM: { display: "inline-list-item" },
    INLINE_TABLE: { display: "inline-table" },
    INLINE_FLEX: { display: "inline-flex" },
    INLINE_GRID: { display: "inline-grid" }
};
const _EmptyCells = {
    set: (...params: Param[]): Sheet => ({ emptyCells: buildProperty(params) }),
    SHOW: { emptyCells: "show" },
    HIDE: { emptyCells: "hide" }
};
const _Filter = {
    set: (...params: Param[]): Sheet => ({ filter: buildProperty(params) }),
    NONE: { filter: "none" },
    blur: (...params: Param[]): Sheet => ({ filter: Method.blur(...params) }),
    brightness: (...params: Param[]): Sheet => ({ filter: Method.brightness(...params) }),
    contrast: (...params: Param[]): Sheet => ({ filter: Method.contrast(...params) }),
    dropShadow: (...params: Param[]): Sheet => ({ filter: Method.dropShadow(...params) }),
    grayscale: (...params: Param[]): Sheet => ({ filter: Method.grayscale(...params) }),
    hueRotate: (...params: Param[]): Sheet => ({ filter: Method.hueRotate(...params) }),
    invert: (...params: Param[]): Sheet => ({ filter: Method.invert(...params) }),
    opacity: (...params: Param[]): Sheet => ({ filter: Method.opacity(...params) }),
    saturate: (...params: Param[]): Sheet => ({ filter: Method.saturate(...params) }),
    sepia: (...params: Param[]): Sheet => ({ filter: Method.sepia(...params) })
};
const _Flex = {
    set: (...params: Param[]): Sheet => ({ flex: buildProperty(params) }),
    NONE: { flex: "none" },
    CONTENT: { flex: "content" },
    cap: (...nums: number[]): Sheet => ({ flex: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ flex: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ flex: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ flex: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ flex: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ flex: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ flex: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ flex: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ flex: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ flex: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ flex: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ flex: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ flex: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ flex: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ flex: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ flex: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ flex: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ flex: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ flex: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ flex: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ flex: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ flex: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ flex: Length.X(...nums) }),
    BORDER_BOX: { flex: "border-box" },
    CONTENT_BOX: { flex: "content-box" },
    AVAILABLE: { flex: "available" },
    MIN_CONTENT: { flex: "min-content" },
    MAX_CONTENT: { flex: "max-content" },
    FIT_CONTENT: { flex: "fit-content" },
    AUTO: { flex: "auto" }
};
const _FlexBasis = {
    set: (...params: Param[]): Sheet => ({ flexBasis: buildProperty(params) }),
    CONTENT: { flexBasis: "content" },
    cap: (...nums: number[]): Sheet => ({ flexBasis: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ flexBasis: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ flexBasis: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ flexBasis: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ flexBasis: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ flexBasis: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ flexBasis: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ flexBasis: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ flexBasis: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ flexBasis: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ flexBasis: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ flexBasis: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ flexBasis: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ flexBasis: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ flexBasis: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ flexBasis: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ flexBasis: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ flexBasis: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ flexBasis: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ flexBasis: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ flexBasis: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ flexBasis: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ flexBasis: Length.X(...nums) }),
    BORDER_BOX: { flexBasis: "border-box" },
    CONTENT_BOX: { flexBasis: "content-box" },
    AVAILABLE: { flexBasis: "available" },
    MIN_CONTENT: { flexBasis: "min-content" },
    MAX_CONTENT: { flexBasis: "max-content" },
    FIT_CONTENT: { flexBasis: "fit-content" },
    AUTO: { flexBasis: "auto" }
};
const _FlexDirection = {
    set: (...params: Param[]): Sheet => ({ flexDirection: buildProperty(params) }),
    ROW: { flexDirection: "row" },
    ROW_REVERSE: { flexDirection: "row-reverse" },
    COLUMN: { flexDirection: "column" },
    COLUMN_REVERSE: { flexDirection: "column-reverse" }
};
const _FlexFlow = {
    set: (...params: Param[]): Sheet => ({ flexFlow: buildProperty(params) }),
    ROW: { flexFlow: "row" },
    ROW_REVERSE: { flexFlow: "row-reverse" },
    COLUMN: { flexFlow: "column" },
    COLUMN_REVERSE: { flexFlow: "column-reverse" },
    NOWRAP: { flexFlow: "nowrap" },
    WRAP: { flexFlow: "wrap" },
    WRAP_REVERSE: { flexFlow: "wrap-reverse" }
};
const _FlexGrow = { set: (...params: Param[]): Sheet => ({ flexGrow: buildProperty(params) }) };
const _FlexShrink = { set: (...params: Param[]): Sheet => ({ flexShrink: buildProperty(params) }) };
const _FlexWrap = {
    set: (...params: Param[]): Sheet => ({ flexWrap: buildProperty(params) }),
    NOWRAP: { flexWrap: "nowrap" },
    WRAP: { flexWrap: "wrap" },
    WRAP_REVERSE: { flexWrap: "wrap-reverse" }
};
const _Float = {
    set: (...params: Param[]): Sheet => ({ float: buildProperty(params) }),
    LEFT: { float: "left" },
    RIGHT: { float: "right" },
    NONE: { float: "none" },
    INLINE_START: { float: "inline-start" },
    INLINE_END: { float: "inline-end" }
};
const _Font = {
    set: (...params: Param[]): Sheet => ({ font: buildProperty(params) }),
    NORMAL: { font: "normal" },
    ITALIC: { font: "italic" },
    OBLIQUE: { font: "oblique" },
    deg: (...nums: number[]): Sheet => ({ font: Angle.deg(...nums) }),
    rad: (...nums: number[]): Sheet => ({ font: Angle.rad(...nums) }),
    grad: (...nums: number[]): Sheet => ({ font: Angle.grad(...nums) }),
    turn: (...nums: number[]): Sheet => ({ font: Angle.turn(...nums) }),
    SMALL_CAPS: { font: "small-caps" },
    BOLD: { font: "bold" },
    BOLDER: { font: "bolder" },
    LIGHTER: { font: "lighter" },
    ULTRA_CONDENSED: { font: "ultra-condensed" },
    EXTRA_CONDENSED: { font: "extra-condensed" },
    CONDENSED: { font: "condensed" },
    SEMI_CONDENSED: { font: "semi-condensed" },
    SEMI_EXPANDED: { font: "semi-expanded" },
    EXPANDED: { font: "expanded" },
    EXTRA_EXPANDED: { font: "extra-expanded" },
    ULTRA_EXPANDED: { font: "ultra-expanded" },
    X: (...nums: number[]): Sheet => ({ font: Length.X(...nums) }),
    XX_SMALL: { font: "xx-small" },
    X_SMALL: { font: "x-small" },
    SMALL: { font: "small" },
    MEDIUM: { font: "medium" },
    LARGE: { font: "large" },
    X_LARGE: { font: "x-large" },
    XX_LARGE: { font: "xx-large" },
    LARGER: { font: "larger" },
    SMALLER: { font: "smaller" },
    cap: (...nums: number[]): Sheet => ({ font: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ font: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ font: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ font: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ font: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ font: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ font: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ font: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ font: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ font: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ font: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ font: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ font: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ font: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ font: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ font: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ font: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ font: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ font: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ font: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ font: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ font: Length.fr(...nums) }),
    SERIF: { font: "serif" },
    SANS_SERIF: { font: "sans-serif" },
    CURSIVE: { font: "cursive" },
    FANTASY: { font: "fantasy" },
    MONOSPACE: { font: "monospace" },
    CAPTION: { font: "caption" },
    ICON: { font: "icon" },
    MENU: { font: "menu" },
    MESSAGE_BOX: { font: "message-box" },
    SMALL_CAPTION: { font: "small-caption" },
    STATUS_BAR: { font: "status-bar" }
};
const _FontFamily = {
    set: (...params: Param[]): Sheet => ({ fontFamily: buildProperty(params) }),
    SERIF: { fontFamily: "serif" },
    SANS_SERIF: { fontFamily: "sans-serif" },
    CURSIVE: { fontFamily: "cursive" },
    FANTASY: { fontFamily: "fantasy" },
    MONOSPACE: { fontFamily: "monospace" }
};
const _FontFeatureSettings = {
    set: (...params: Param[]): Sheet => ({ fontFeatureSettings: buildProperty(params) }),
    NORMAL: { fontFeatureSettings: "normal" },
    ON: { fontFeatureSettings: "on" },
    OFF: { fontFeatureSettings: "off" }
};
const _FontKerning = {
    set: (...params: Param[]): Sheet => ({ fontKerning: buildProperty(params) }),
    AUTO: { fontKerning: "auto" },
    NORMAL: { fontKerning: "normal" },
    NONE: { fontKerning: "none" }
};
const _FontLanguageOverride = {
    set: (...params: Param[]): Sheet => ({ fontLanguageOverride: buildProperty(params) }),
    NORMAL: { fontLanguageOverride: "normal" }
};
const _FontOpticalSizing = {
    set: (...params: Param[]): Sheet => ({ fontOpticalSizing: buildProperty(params) }),
    AUTO: { fontOpticalSizing: "auto" },
    NONE: { fontOpticalSizing: "none" }
};
const _FontVariationSettings = {
    set: (...params: Param[]): Sheet => ({ fontVariationSettings: buildProperty(params) }),
    NORMAL: { fontVariationSettings: "normal" }
};
const _FontSize = {
    set: (...params: Param[]): Sheet => ({ fontSize: buildProperty(params) }),
    XX_SMALL: { fontSize: "xx-small" },
    X_SMALL: { fontSize: "x-small" },
    SMALL: { fontSize: "small" },
    MEDIUM: { fontSize: "medium" },
    LARGE: { fontSize: "large" },
    X_LARGE: { fontSize: "x-large" },
    XX_LARGE: { fontSize: "xx-large" },
    LARGER: { fontSize: "larger" },
    SMALLER: { fontSize: "smaller" },
    cap: (...nums: number[]): Sheet => ({ fontSize: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ fontSize: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ fontSize: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ fontSize: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ fontSize: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ fontSize: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ fontSize: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ fontSize: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ fontSize: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ fontSize: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ fontSize: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ fontSize: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ fontSize: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ fontSize: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ fontSize: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ fontSize: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ fontSize: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ fontSize: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ fontSize: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ fontSize: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ fontSize: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ fontSize: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ fontSize: Length.X(...nums) })
};
const _FontSizeAdjust = {
    set: (...params: Param[]): Sheet => ({ fontSizeAdjust: buildProperty(params) }),
    NONE: { fontSizeAdjust: "none" }
};
const _FontStretch = {
    set: (...params: Param[]): Sheet => ({ fontStretch: buildProperty(params) }),
    NORMAL: { fontStretch: "normal" },
    ULTRA_CONDENSED: { fontStretch: "ultra-condensed" },
    EXTRA_CONDENSED: { fontStretch: "extra-condensed" },
    CONDENSED: { fontStretch: "condensed" },
    SEMI_CONDENSED: { fontStretch: "semi-condensed" },
    SEMI_EXPANDED: { fontStretch: "semi-expanded" },
    EXPANDED: { fontStretch: "expanded" },
    EXTRA_EXPANDED: { fontStretch: "extra-expanded" },
    ULTRA_EXPANDED: { fontStretch: "ultra-expanded" },
    X: (...nums: number[]): Sheet => ({ fontStretch: Length.X(...nums) })
};
const _FontStyle = {
    set: (...params: Param[]): Sheet => ({ fontStyle: buildProperty(params) }),
    NORMAL: { fontStyle: "normal" },
    ITALIC: { fontStyle: "italic" },
    OBLIQUE: { fontStyle: "oblique" },
    deg: (...nums: number[]): Sheet => ({ fontStyle: Angle.deg(...nums) }),
    rad: (...nums: number[]): Sheet => ({ fontStyle: Angle.rad(...nums) }),
    grad: (...nums: number[]): Sheet => ({ fontStyle: Angle.grad(...nums) }),
    turn: (...nums: number[]): Sheet => ({ fontStyle: Angle.turn(...nums) })
};
const _FontSynthesis = {
    set: (...params: Param[]): Sheet => ({ fontSynthesis: buildProperty(params) }),
    NONE: { fontSynthesis: "none" },
    WEIGHT: { fontSynthesis: "weight" },
    STYLE: { fontSynthesis: "style" }
};
const _FontVariant = {
    set: (...params: Param[]): Sheet => ({ fontVariant: buildProperty(params) }),
    NORMAL: { fontVariant: "normal" },
    NONE: { fontVariant: "none" },
    COMMON_LIGATURES: { fontVariant: "common-ligatures" },
    NO_COMMON_LIGATURES: { fontVariant: "no-common-ligatures" },
    DISCRETIONARY_LIGATURES: { fontVariant: "discretionary-ligatures" },
    NO_DISCRETIONARY_LIGATURES: { fontVariant: "no-discretionary-ligatures" },
    HISTORICAL_LIGATURES: { fontVariant: "historical-ligatures" },
    NO_HISTORICAL_LIGATURES: { fontVariant: "no-historical-ligatures" },
    CONTEXTUAL: { fontVariant: "contextual" },
    NO_CONTEXTUAL: { fontVariant: "no-contextual" },
    stylistic: (...params: Param[]): Sheet => ({ fontVariant: Method.stylistic(...params) }),
    HISTORICAL_FORMS: { fontVariant: "historical-forms" },
    styleset: (...params: Param[]): Sheet => ({ fontVariant: Method.styleset(...params) }),
    characterVariant: (...params: Param[]): Sheet => ({ fontVariant: Method.characterVariant(...params) }),
    swash: (...params: Param[]): Sheet => ({ fontVariant: Method.swash(...params) }),
    ornaments: (...params: Param[]): Sheet => ({ fontVariant: Method.ornaments(...params) }),
    annotation: (...params: Param[]): Sheet => ({ fontVariant: Method.annotation(...params) }),
    SMALL_CAPS: { fontVariant: "small-caps" },
    ALL_SMALL_CAPS: { fontVariant: "all-small-caps" },
    PETITE_CAPS: { fontVariant: "petite-caps" },
    ALL_PETITE_CAPS: { fontVariant: "all-petite-caps" },
    UNICASE: { fontVariant: "unicase" },
    TITLING_CAPS: { fontVariant: "titling-caps" },
    LINING_NUMS: { fontVariant: "lining-nums" },
    OLDSTYLE_NUMS: { fontVariant: "oldstyle-nums" },
    PROPORTIONAL_NUMS: { fontVariant: "proportional-nums" },
    TABULAR_NUMS: { fontVariant: "tabular-nums" },
    DIAGONAL_FRACTIONS: { fontVariant: "diagonal-fractions" },
    STACKED_FRACTIONS: { fontVariant: "stacked-fractions" },
    ORDINAL: { fontVariant: "ordinal" },
    SLASHED_ZERO: { fontVariant: "slashed-zero" },
    JIS78: { fontVariant: "jis78" },
    JIS83: { fontVariant: "jis83" },
    JIS90: { fontVariant: "jis90" },
    JIS04: { fontVariant: "jis04" },
    SIMPLIFIED: { fontVariant: "simplified" },
    TRADITIONAL: { fontVariant: "traditional" },
    FULL_WIDTH: { fontVariant: "full-width" },
    PROPORTIONAL_WIDTH: { fontVariant: "proportional-width" },
    RUBY: { fontVariant: "ruby" }
};
const _FontVariantAlternates = {
    set: (...params: Param[]): Sheet => ({ fontVariantAlternates: buildProperty(params) }),
    NORMAL: { fontVariantAlternates: "normal" },
    stylistic: (...params: Param[]): Sheet => ({ fontVariantAlternates: Method.stylistic(...params) }),
    HISTORICAL_FORMS: { fontVariantAlternates: "historical-forms" },
    styleset: (...params: Param[]): Sheet => ({ fontVariantAlternates: Method.styleset(...params) }),
    characterVariant: (...params: Param[]): Sheet => ({ fontVariantAlternates: Method.characterVariant(...params) }),
    swash: (...params: Param[]): Sheet => ({ fontVariantAlternates: Method.swash(...params) }),
    ornaments: (...params: Param[]): Sheet => ({ fontVariantAlternates: Method.ornaments(...params) }),
    annotation: (...params: Param[]): Sheet => ({ fontVariantAlternates: Method.annotation(...params) })
};
const _FontVariantCaps = {
    set: (...params: Param[]): Sheet => ({ fontVariantCaps: buildProperty(params) }),
    NORMAL: { fontVariantCaps: "normal" },
    SMALL_CAPS: { fontVariantCaps: "small-caps" },
    ALL_SMALL_CAPS: { fontVariantCaps: "all-small-caps" },
    PETITE_CAPS: { fontVariantCaps: "petite-caps" },
    ALL_PETITE_CAPS: { fontVariantCaps: "all-petite-caps" },
    UNICASE: { fontVariantCaps: "unicase" },
    TITLING_CAPS: { fontVariantCaps: "titling-caps" }
};
const _FontVariantEastAsian = {
    set: (...params: Param[]): Sheet => ({ fontVariantEastAsian: buildProperty(params) }),
    NORMAL: { fontVariantEastAsian: "normal" },
    JIS78: { fontVariantEastAsian: "jis78" },
    JIS83: { fontVariantEastAsian: "jis83" },
    JIS90: { fontVariantEastAsian: "jis90" },
    JIS04: { fontVariantEastAsian: "jis04" },
    SIMPLIFIED: { fontVariantEastAsian: "simplified" },
    TRADITIONAL: { fontVariantEastAsian: "traditional" },
    FULL_WIDTH: { fontVariantEastAsian: "full-width" },
    PROPORTIONAL_WIDTH: { fontVariantEastAsian: "proportional-width" },
    RUBY: { fontVariantEastAsian: "ruby" }
};
const _FontVariantLigatures = {
    set: (...params: Param[]): Sheet => ({ fontVariantLigatures: buildProperty(params) }),
    NORMAL: { fontVariantLigatures: "normal" },
    NONE: { fontVariantLigatures: "none" },
    COMMON_LIGATURES: { fontVariantLigatures: "common-ligatures" },
    NO_COMMON_LIGATURES: { fontVariantLigatures: "no-common-ligatures" },
    DISCRETIONARY_LIGATURES: { fontVariantLigatures: "discretionary-ligatures" },
    NO_DISCRETIONARY_LIGATURES: { fontVariantLigatures: "no-discretionary-ligatures" },
    HISTORICAL_LIGATURES: { fontVariantLigatures: "historical-ligatures" },
    NO_HISTORICAL_LIGATURES: { fontVariantLigatures: "no-historical-ligatures" },
    CONTEXTUAL: { fontVariantLigatures: "contextual" },
    NO_CONTEXTUAL: { fontVariantLigatures: "no-contextual" }
};
const _FontVariantNumeric = {
    set: (...params: Param[]): Sheet => ({ fontVariantNumeric: buildProperty(params) }),
    NORMAL: { fontVariantNumeric: "normal" },
    LINING_NUMS: { fontVariantNumeric: "lining-nums" },
    OLDSTYLE_NUMS: { fontVariantNumeric: "oldstyle-nums" },
    PROPORTIONAL_NUMS: { fontVariantNumeric: "proportional-nums" },
    TABULAR_NUMS: { fontVariantNumeric: "tabular-nums" },
    DIAGONAL_FRACTIONS: { fontVariantNumeric: "diagonal-fractions" },
    STACKED_FRACTIONS: { fontVariantNumeric: "stacked-fractions" },
    ORDINAL: { fontVariantNumeric: "ordinal" },
    SLASHED_ZERO: { fontVariantNumeric: "slashed-zero" }
};
const _FontVariantPosition = {
    set: (...params: Param[]): Sheet => ({ fontVariantPosition: buildProperty(params) }),
    NORMAL: { fontVariantPosition: "normal" },
    SUB: { fontVariantPosition: "sub" },
    SUPER: { fontVariantPosition: "super" }
};
const _FontWeight = {
    set: (...params: Param[]): Sheet => ({ fontWeight: buildProperty(params) }),
    NORMAL: { fontWeight: "normal" },
    BOLD: { fontWeight: "bold" },
    BOLDER: { fontWeight: "bolder" },
    LIGHTER: { fontWeight: "lighter" }
};
const _Gap = {
    set: (...params: Param[]): Sheet => ({ gap: buildProperty(params) }),
    NORMAL: { gap: "normal" },
    cap: (...nums: number[]): Sheet => ({ gap: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ gap: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ gap: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ gap: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ gap: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ gap: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ gap: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ gap: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ gap: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ gap: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ gap: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ gap: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ gap: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ gap: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ gap: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ gap: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ gap: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ gap: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ gap: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ gap: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ gap: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ gap: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ gap: Length.X(...nums) })
};
const _Grid = {
    set: (...params: Param[]): Sheet => ({ grid: buildProperty(params) }),
    NONE: { grid: "none" },
    cap: (...nums: number[]): Sheet => ({ grid: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ grid: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ grid: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ grid: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ grid: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ grid: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ grid: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ grid: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ grid: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ grid: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ grid: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ grid: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ grid: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ grid: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ grid: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ grid: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ grid: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ grid: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ grid: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ grid: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ grid: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ grid: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ grid: Length.X(...nums) }),
    MIN_CONTENT: { grid: "min-content" },
    MAX_CONTENT: { grid: "max-content" },
    AUTO: { grid: "auto" },
    minmax: (...params: Param[]): Sheet => ({ grid: Method.minmax(...params) }),
    fitContent: (...params: Param[]): Sheet => ({ grid: Method.fitContent(...params) }),
    repeat: (...params: Param[]): Sheet => ({ grid: Method.repeat(...params) }),
    AUTO_FLOW: { grid: "auto-flow" },
    DENSE: { grid: "dense" }
};
const _GridArea = {
    set: (...params: Param[]): Sheet => ({ gridArea: buildProperty(params) }),
    AUTO: { gridArea: "auto" },
    SPAN: { gridArea: "span" }
};
const _GridAutoColumns = {
    set: (...params: Param[]): Sheet => ({ gridAutoColumns: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ gridAutoColumns: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ gridAutoColumns: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ gridAutoColumns: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ gridAutoColumns: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ gridAutoColumns: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ gridAutoColumns: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ gridAutoColumns: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ gridAutoColumns: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ gridAutoColumns: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ gridAutoColumns: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ gridAutoColumns: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ gridAutoColumns: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ gridAutoColumns: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ gridAutoColumns: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ gridAutoColumns: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ gridAutoColumns: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ gridAutoColumns: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ gridAutoColumns: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ gridAutoColumns: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ gridAutoColumns: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ gridAutoColumns: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ gridAutoColumns: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ gridAutoColumns: Length.X(...nums) }),
    MIN_CONTENT: { gridAutoColumns: "min-content" },
    MAX_CONTENT: { gridAutoColumns: "max-content" },
    AUTO: { gridAutoColumns: "auto" },
    minmax: (...params: Param[]): Sheet => ({ gridAutoColumns: Method.minmax(...params) }),
    fitContent: (...params: Param[]): Sheet => ({ gridAutoColumns: Method.fitContent(...params) })
};
const _GridAutoFlow = {
    set: (...params: Param[]): Sheet => ({ gridAutoFlow: buildProperty(params) }),
    ROW: { gridAutoFlow: "row" },
    COLUMN: { gridAutoFlow: "column" },
    DENSE: { gridAutoFlow: "dense" }
};
const _GridAutoRows = {
    set: (...params: Param[]): Sheet => ({ gridAutoRows: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ gridAutoRows: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ gridAutoRows: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ gridAutoRows: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ gridAutoRows: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ gridAutoRows: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ gridAutoRows: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ gridAutoRows: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ gridAutoRows: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ gridAutoRows: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ gridAutoRows: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ gridAutoRows: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ gridAutoRows: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ gridAutoRows: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ gridAutoRows: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ gridAutoRows: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ gridAutoRows: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ gridAutoRows: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ gridAutoRows: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ gridAutoRows: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ gridAutoRows: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ gridAutoRows: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ gridAutoRows: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ gridAutoRows: Length.X(...nums) }),
    MIN_CONTENT: { gridAutoRows: "min-content" },
    MAX_CONTENT: { gridAutoRows: "max-content" },
    AUTO: { gridAutoRows: "auto" },
    minmax: (...params: Param[]): Sheet => ({ gridAutoRows: Method.minmax(...params) }),
    fitContent: (...params: Param[]): Sheet => ({ gridAutoRows: Method.fitContent(...params) })
};
const _GridColumn = {
    set: (...params: Param[]): Sheet => ({ gridColumn: buildProperty(params) }),
    AUTO: { gridColumn: "auto" },
    SPAN: { gridColumn: "span" }
};
const _GridColumnEnd = {
    set: (...params: Param[]): Sheet => ({ gridColumnEnd: buildProperty(params) }),
    AUTO: { gridColumnEnd: "auto" },
    SPAN: { gridColumnEnd: "span" }
};
const _GridColumnGap = {
    set: (...params: Param[]): Sheet => ({ gridColumnGap: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ gridColumnGap: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ gridColumnGap: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ gridColumnGap: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ gridColumnGap: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ gridColumnGap: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ gridColumnGap: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ gridColumnGap: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ gridColumnGap: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ gridColumnGap: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ gridColumnGap: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ gridColumnGap: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ gridColumnGap: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ gridColumnGap: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ gridColumnGap: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ gridColumnGap: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ gridColumnGap: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ gridColumnGap: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ gridColumnGap: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ gridColumnGap: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ gridColumnGap: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ gridColumnGap: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ gridColumnGap: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ gridColumnGap: Length.X(...nums) })
};
const _GridColumnStart = {
    set: (...params: Param[]): Sheet => ({ gridColumnStart: buildProperty(params) }),
    AUTO: { gridColumnStart: "auto" },
    SPAN: { gridColumnStart: "span" }
};
const _GridGap = {
    set: (...params: Param[]): Sheet => ({ gridGap: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ gridGap: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ gridGap: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ gridGap: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ gridGap: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ gridGap: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ gridGap: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ gridGap: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ gridGap: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ gridGap: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ gridGap: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ gridGap: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ gridGap: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ gridGap: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ gridGap: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ gridGap: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ gridGap: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ gridGap: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ gridGap: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ gridGap: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ gridGap: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ gridGap: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ gridGap: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ gridGap: Length.X(...nums) })
};
const _GridRow = {
    set: (...params: Param[]): Sheet => ({ gridRow: buildProperty(params) }),
    AUTO: { gridRow: "auto" },
    SPAN: { gridRow: "span" }
};
const _GridRowEnd = {
    set: (...params: Param[]): Sheet => ({ gridRowEnd: buildProperty(params) }),
    AUTO: { gridRowEnd: "auto" },
    SPAN: { gridRowEnd: "span" }
};
const _GridRowGap = {
    set: (...params: Param[]): Sheet => ({ gridRowGap: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ gridRowGap: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ gridRowGap: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ gridRowGap: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ gridRowGap: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ gridRowGap: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ gridRowGap: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ gridRowGap: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ gridRowGap: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ gridRowGap: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ gridRowGap: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ gridRowGap: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ gridRowGap: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ gridRowGap: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ gridRowGap: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ gridRowGap: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ gridRowGap: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ gridRowGap: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ gridRowGap: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ gridRowGap: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ gridRowGap: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ gridRowGap: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ gridRowGap: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ gridRowGap: Length.X(...nums) })
};
const _GridRowStart = {
    set: (...params: Param[]): Sheet => ({ gridRowStart: buildProperty(params) }),
    AUTO: { gridRowStart: "auto" },
    SPAN: { gridRowStart: "span" }
};
const _GridTemplate = {
    set: (...params: Param[]): Sheet => ({ gridTemplate: buildProperty(params) }),
    NONE: { gridTemplate: "none" },
    cap: (...nums: number[]): Sheet => ({ gridTemplate: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ gridTemplate: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ gridTemplate: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ gridTemplate: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ gridTemplate: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ gridTemplate: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ gridTemplate: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ gridTemplate: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ gridTemplate: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ gridTemplate: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ gridTemplate: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ gridTemplate: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ gridTemplate: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ gridTemplate: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ gridTemplate: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ gridTemplate: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ gridTemplate: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ gridTemplate: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ gridTemplate: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ gridTemplate: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ gridTemplate: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ gridTemplate: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ gridTemplate: Length.X(...nums) }),
    MIN_CONTENT: { gridTemplate: "min-content" },
    MAX_CONTENT: { gridTemplate: "max-content" },
    AUTO: { gridTemplate: "auto" },
    minmax: (...params: Param[]): Sheet => ({ gridTemplate: Method.minmax(...params) }),
    fitContent: (...params: Param[]): Sheet => ({ gridTemplate: Method.fitContent(...params) }),
    repeat: (...params: Param[]): Sheet => ({ gridTemplate: Method.repeat(...params) })
};
const _GridTemplateAreas = {
    set: (...params: Param[]): Sheet => ({ gridTemplateAreas: buildProperty(params) }),
    NONE: { gridTemplateAreas: "none" }
};
const _GridTemplateColumns = {
    set: (...params: Param[]): Sheet => ({ gridTemplateColumns: buildProperty(params) }),
    NONE: { gridTemplateColumns: "none" },
    cap: (...nums: number[]): Sheet => ({ gridTemplateColumns: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ gridTemplateColumns: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ gridTemplateColumns: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ gridTemplateColumns: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ gridTemplateColumns: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ gridTemplateColumns: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ gridTemplateColumns: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ gridTemplateColumns: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ gridTemplateColumns: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ gridTemplateColumns: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ gridTemplateColumns: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ gridTemplateColumns: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ gridTemplateColumns: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ gridTemplateColumns: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ gridTemplateColumns: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ gridTemplateColumns: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ gridTemplateColumns: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ gridTemplateColumns: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ gridTemplateColumns: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ gridTemplateColumns: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ gridTemplateColumns: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ gridTemplateColumns: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ gridTemplateColumns: Length.X(...nums) }),
    MIN_CONTENT: { gridTemplateColumns: "min-content" },
    MAX_CONTENT: { gridTemplateColumns: "max-content" },
    AUTO: { gridTemplateColumns: "auto" },
    minmax: (...params: Param[]): Sheet => ({ gridTemplateColumns: Method.minmax(...params) }),
    fitContent: (...params: Param[]): Sheet => ({ gridTemplateColumns: Method.fitContent(...params) }),
    repeat: (...params: Param[]): Sheet => ({ gridTemplateColumns: Method.repeat(...params) })
};
const _GridTemplateRows = {
    set: (...params: Param[]): Sheet => ({ gridTemplateRows: buildProperty(params) }),
    NONE: { gridTemplateRows: "none" },
    cap: (...nums: number[]): Sheet => ({ gridTemplateRows: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ gridTemplateRows: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ gridTemplateRows: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ gridTemplateRows: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ gridTemplateRows: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ gridTemplateRows: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ gridTemplateRows: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ gridTemplateRows: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ gridTemplateRows: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ gridTemplateRows: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ gridTemplateRows: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ gridTemplateRows: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ gridTemplateRows: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ gridTemplateRows: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ gridTemplateRows: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ gridTemplateRows: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ gridTemplateRows: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ gridTemplateRows: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ gridTemplateRows: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ gridTemplateRows: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ gridTemplateRows: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ gridTemplateRows: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ gridTemplateRows: Length.X(...nums) }),
    MIN_CONTENT: { gridTemplateRows: "min-content" },
    MAX_CONTENT: { gridTemplateRows: "max-content" },
    AUTO: { gridTemplateRows: "auto" },
    minmax: (...params: Param[]): Sheet => ({ gridTemplateRows: Method.minmax(...params) }),
    fitContent: (...params: Param[]): Sheet => ({ gridTemplateRows: Method.fitContent(...params) }),
    repeat: (...params: Param[]): Sheet => ({ gridTemplateRows: Method.repeat(...params) })
};
const _HangingPunctuation = {
    set: (...params: Param[]): Sheet => ({ hangingPunctuation: buildProperty(params) }),
    NONE: { hangingPunctuation: "none" },
    FIRST: { hangingPunctuation: "first" },
    FORCE_END: { hangingPunctuation: "force-end" },
    ALLOW_END: { hangingPunctuation: "allow-end" },
    LAST: { hangingPunctuation: "last" }
};
const _Height = {
    set: (...params: Param[]): Sheet => ({ height: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ height: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ height: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ height: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ height: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ height: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ height: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ height: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ height: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ height: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ height: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ height: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ height: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ height: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ height: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ height: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ height: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ height: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ height: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ height: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ height: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ height: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ height: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ height: Length.X(...nums) }),
    BORDER_BOX: { height: "border-box" },
    CONTENT_BOX: { height: "content-box" },
    AVAILABLE: { height: "available" },
    MIN_CONTENT: { height: "min-content" },
    MAX_CONTENT: { height: "max-content" },
    FIT_CONTENT: { height: "fit-content" },
    AUTO: { height: "auto" }
};
const _Hyphens = {
    set: (...params: Param[]): Sheet => ({ hyphens: buildProperty(params) }),
    NONE: { hyphens: "none" },
    MANUAL: { hyphens: "manual" },
    AUTO: { hyphens: "auto" }
};
const _ImageOrientation = {
    set: (...params: Param[]): Sheet => ({ imageOrientation: buildProperty(params) }),
    FROM_IMAGE: { imageOrientation: "from-image" },
    deg: (...nums: number[]): Sheet => ({ imageOrientation: Angle.deg(...nums) }),
    rad: (...nums: number[]): Sheet => ({ imageOrientation: Angle.rad(...nums) }),
    grad: (...nums: number[]): Sheet => ({ imageOrientation: Angle.grad(...nums) }),
    turn: (...nums: number[]): Sheet => ({ imageOrientation: Angle.turn(...nums) }),
    FLIP: { imageOrientation: "flip" }
};
const _ImageRendering = {
    set: (...params: Param[]): Sheet => ({ imageRendering: buildProperty(params) }),
    AUTO: { imageRendering: "auto" },
    CRISP_EDGES: { imageRendering: "crisp-edges" },
    PIXELATED: { imageRendering: "pixelated" }
};
const _ImageResolution = {
    set: (...params: Param[]): Sheet => ({ imageResolution: buildProperty(params) }),
    FROM_IMAGE: { imageResolution: "from-image" },
    dpi: (...nums: number[]): Sheet => ({ imageResolution: Resolution.dpi(...nums) }),
    dpcm: (...nums: number[]): Sheet => ({ imageResolution: Resolution.dpcm(...nums) }),
    dppx: (...nums: number[]): Sheet => ({ imageResolution: Resolution.dppx(...nums) }),
    x: (...nums: number[]): Sheet => ({ imageResolution: Resolution.x(...nums) }),
    SNAP: { imageResolution: "snap" }
};
const _ImeMode = {
    set: (...params: Param[]): Sheet => ({ imeMode: buildProperty(params) }),
    AUTO: { imeMode: "auto" },
    NORMAL: { imeMode: "normal" },
    ACTIVE: { imeMode: "active" },
    INACTIVE: { imeMode: "inactive" },
    DISABLED: { imeMode: "disabled" }
};
const _InitialLetter = {
    set: (...params: Param[]): Sheet => ({ initialLetter: buildProperty(params) }),
    NORMAL: { initialLetter: "normal" }
};
const _InitialLetterAlign = {
    set: (...params: Param[]): Sheet => ({ initialLetterAlign: buildProperty(params) }),
    AUTO: { initialLetterAlign: "auto" },
    ALPHABETIC: { initialLetterAlign: "alphabetic" },
    HANGING: { initialLetterAlign: "hanging" },
    IDEOGRAPHIC: { initialLetterAlign: "ideographic" }
};
const _InlineSize = {
    set: (...params: Param[]): Sheet => ({ inlineSize: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ inlineSize: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ inlineSize: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ inlineSize: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ inlineSize: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ inlineSize: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ inlineSize: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ inlineSize: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ inlineSize: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ inlineSize: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ inlineSize: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ inlineSize: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ inlineSize: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ inlineSize: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ inlineSize: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ inlineSize: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ inlineSize: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ inlineSize: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ inlineSize: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ inlineSize: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ inlineSize: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ inlineSize: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ inlineSize: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ inlineSize: Length.X(...nums) }),
    BORDER_BOX: { inlineSize: "border-box" },
    CONTENT_BOX: { inlineSize: "content-box" },
    AVAILABLE: { inlineSize: "available" },
    MIN_CONTENT: { inlineSize: "min-content" },
    MAX_CONTENT: { inlineSize: "max-content" },
    FIT_CONTENT: { inlineSize: "fit-content" },
    AUTO: { inlineSize: "auto" }
};
const _InsetBlockEnd = {
    set: (...params: Param[]): Sheet => ({ insetBlockEnd: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ insetBlockEnd: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ insetBlockEnd: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ insetBlockEnd: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ insetBlockEnd: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ insetBlockEnd: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ insetBlockEnd: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ insetBlockEnd: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ insetBlockEnd: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ insetBlockEnd: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ insetBlockEnd: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ insetBlockEnd: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ insetBlockEnd: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ insetBlockEnd: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ insetBlockEnd: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ insetBlockEnd: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ insetBlockEnd: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ insetBlockEnd: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ insetBlockEnd: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ insetBlockEnd: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ insetBlockEnd: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ insetBlockEnd: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ insetBlockEnd: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ insetBlockEnd: Length.X(...nums) }),
    AUTO: { insetBlockEnd: "auto" }
};
const _InsetBlockStart = {
    set: (...params: Param[]): Sheet => ({ insetBlockStart: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ insetBlockStart: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ insetBlockStart: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ insetBlockStart: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ insetBlockStart: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ insetBlockStart: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ insetBlockStart: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ insetBlockStart: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ insetBlockStart: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ insetBlockStart: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ insetBlockStart: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ insetBlockStart: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ insetBlockStart: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ insetBlockStart: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ insetBlockStart: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ insetBlockStart: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ insetBlockStart: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ insetBlockStart: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ insetBlockStart: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ insetBlockStart: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ insetBlockStart: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ insetBlockStart: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ insetBlockStart: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ insetBlockStart: Length.X(...nums) }),
    AUTO: { insetBlockStart: "auto" }
};
const _InsetInlineEnd = {
    set: (...params: Param[]): Sheet => ({ insetInlineEnd: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ insetInlineEnd: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ insetInlineEnd: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ insetInlineEnd: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ insetInlineEnd: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ insetInlineEnd: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ insetInlineEnd: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ insetInlineEnd: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ insetInlineEnd: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ insetInlineEnd: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ insetInlineEnd: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ insetInlineEnd: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ insetInlineEnd: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ insetInlineEnd: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ insetInlineEnd: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ insetInlineEnd: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ insetInlineEnd: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ insetInlineEnd: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ insetInlineEnd: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ insetInlineEnd: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ insetInlineEnd: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ insetInlineEnd: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ insetInlineEnd: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ insetInlineEnd: Length.X(...nums) }),
    AUTO: { insetInlineEnd: "auto" }
};
const _InsetInlineStart = {
    set: (...params: Param[]): Sheet => ({ insetInlineStart: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ insetInlineStart: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ insetInlineStart: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ insetInlineStart: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ insetInlineStart: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ insetInlineStart: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ insetInlineStart: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ insetInlineStart: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ insetInlineStart: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ insetInlineStart: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ insetInlineStart: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ insetInlineStart: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ insetInlineStart: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ insetInlineStart: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ insetInlineStart: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ insetInlineStart: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ insetInlineStart: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ insetInlineStart: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ insetInlineStart: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ insetInlineStart: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ insetInlineStart: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ insetInlineStart: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ insetInlineStart: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ insetInlineStart: Length.X(...nums) }),
    AUTO: { insetInlineStart: "auto" }
};
const _Isolation = {
    set: (...params: Param[]): Sheet => ({ isolation: buildProperty(params) }),
    AUTO: { isolation: "auto" },
    ISOLATE: { isolation: "isolate" }
};
const _JustifyContent = {
    set: (...params: Param[]): Sheet => ({ justifyContent: buildProperty(params) }),
    NORMAL: { justifyContent: "normal" },
    SPACE_BETWEEN: { justifyContent: "space-between" },
    SPACE_AROUND: { justifyContent: "space-around" },
    SPACE_EVENLY: { justifyContent: "space-evenly" },
    STRETCH: { justifyContent: "stretch" },
    UNSAFE: { justifyContent: "unsafe" },
    SAFE: { justifyContent: "safe" },
    CENTER: { justifyContent: "center" },
    START: { justifyContent: "start" },
    END: { justifyContent: "end" },
    FLEX_START: { justifyContent: "flex-start" },
    FLEX_END: { justifyContent: "flex-end" },
    LEFT: { justifyContent: "left" },
    RIGHT: { justifyContent: "right" }
};
const _JustifyItems = {
    set: (...params: Param[]): Sheet => ({ justifyItems: buildProperty(params) }),
    NORMAL: { justifyItems: "normal" },
    STRETCH: { justifyItems: "stretch" },
    FIRST: { justifyItems: "first" },
    LAST: { justifyItems: "last" },
    BASELINE: { justifyItems: "baseline" },
    UNSAFE: { justifyItems: "unsafe" },
    SAFE: { justifyItems: "safe" },
    CENTER: { justifyItems: "center" },
    START: { justifyItems: "start" },
    END: { justifyItems: "end" },
    SELF_START: { justifyItems: "self-start" },
    SELF_END: { justifyItems: "self-end" },
    FLEX_START: { justifyItems: "flex-start" },
    FLEX_END: { justifyItems: "flex-end" },
    LEFT: { justifyItems: "left" },
    RIGHT: { justifyItems: "right" },
    LEGACY: { justifyItems: "legacy" }
};
const _JustifySelf = {
    set: (...params: Param[]): Sheet => ({ justifySelf: buildProperty(params) }),
    AUTO: { justifySelf: "auto" },
    NORMAL: { justifySelf: "normal" },
    STRETCH: { justifySelf: "stretch" },
    FIRST: { justifySelf: "first" },
    LAST: { justifySelf: "last" },
    BASELINE: { justifySelf: "baseline" },
    UNSAFE: { justifySelf: "unsafe" },
    SAFE: { justifySelf: "safe" },
    CENTER: { justifySelf: "center" },
    START: { justifySelf: "start" },
    END: { justifySelf: "end" },
    SELF_START: { justifySelf: "self-start" },
    SELF_END: { justifySelf: "self-end" },
    FLEX_START: { justifySelf: "flex-start" },
    FLEX_END: { justifySelf: "flex-end" },
    LEFT: { justifySelf: "left" },
    RIGHT: { justifySelf: "right" }
};
const _Left = {
    set: (...params: Param[]): Sheet => ({ left: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ left: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ left: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ left: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ left: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ left: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ left: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ left: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ left: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ left: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ left: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ left: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ left: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ left: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ left: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ left: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ left: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ left: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ left: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ left: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ left: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ left: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ left: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ left: Length.X(...nums) }),
    AUTO: { left: "auto" }
};
const _LetterSpacing = {
    set: (...params: Param[]): Sheet => ({ letterSpacing: buildProperty(params) }),
    NORMAL: { letterSpacing: "normal" },
    cap: (...nums: number[]): Sheet => ({ letterSpacing: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ letterSpacing: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ letterSpacing: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ letterSpacing: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ letterSpacing: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ letterSpacing: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ letterSpacing: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ letterSpacing: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ letterSpacing: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ letterSpacing: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ letterSpacing: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ letterSpacing: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ letterSpacing: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ letterSpacing: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ letterSpacing: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ letterSpacing: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ letterSpacing: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ letterSpacing: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ letterSpacing: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ letterSpacing: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ letterSpacing: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ letterSpacing: Length.fr(...nums) })
};
const _LineBreak = {
    set: (...params: Param[]): Sheet => ({ lineBreak: buildProperty(params) }),
    AUTO: { lineBreak: "auto" },
    LOOSE: { lineBreak: "loose" },
    NORMAL: { lineBreak: "normal" },
    STRICT: { lineBreak: "strict" }
};
const _LineClamp = {
    set: (...params: Param[]): Sheet => ({ lineClamp: buildProperty(params) }),
    NONE: { lineClamp: "none" }
};
const _LineHeight = {
    set: (...params: Param[]): Sheet => ({ lineHeight: buildProperty(params) }),
    NORMAL: { lineHeight: "normal" },
    cap: (...nums: number[]): Sheet => ({ lineHeight: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ lineHeight: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ lineHeight: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ lineHeight: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ lineHeight: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ lineHeight: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ lineHeight: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ lineHeight: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ lineHeight: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ lineHeight: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ lineHeight: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ lineHeight: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ lineHeight: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ lineHeight: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ lineHeight: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ lineHeight: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ lineHeight: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ lineHeight: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ lineHeight: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ lineHeight: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ lineHeight: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ lineHeight: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ lineHeight: Length.X(...nums) })
};
const _ListStyle = {
    set: (...params: Param[]): Sheet => ({ listStyle: buildProperty(params) }),
    symbols: (...params: Param[]): Sheet => ({ listStyle: Method.symbols(...params) }),
    NONE: { listStyle: "none" },
    INSIDE: { listStyle: "inside" },
    OUTSIDE: { listStyle: "outside" }
};
const _ListStyleImage = {
    set: (...params: Param[]): Sheet => ({ listStyleImage: buildProperty(params) }),
    NONE: { listStyleImage: "none" }
};
const _ListStylePosition = {
    set: (...params: Param[]): Sheet => ({ listStylePosition: buildProperty(params) }),
    INSIDE: { listStylePosition: "inside" },
    OUTSIDE: { listStylePosition: "outside" }
};
const _ListStyleType = {
    set: (...params: Param[]): Sheet => ({ listStyleType: buildProperty(params) }),
    symbols: (...params: Param[]): Sheet => ({ listStyleType: Method.symbols(...params) }),
    NONE: { listStyleType: "none" }
};
const _Margin = {
    set: (...params: Param[]): Sheet => ({ margin: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ margin: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ margin: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ margin: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ margin: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ margin: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ margin: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ margin: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ margin: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ margin: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ margin: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ margin: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ margin: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ margin: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ margin: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ margin: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ margin: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ margin: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ margin: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ margin: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ margin: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ margin: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ margin: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ margin: Length.X(...nums) }),
    AUTO: { margin: "auto" }
};
const _MarginBlockEnd = {
    set: (...params: Param[]): Sheet => ({ marginBlockEnd: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ marginBlockEnd: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ marginBlockEnd: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ marginBlockEnd: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ marginBlockEnd: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ marginBlockEnd: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ marginBlockEnd: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ marginBlockEnd: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ marginBlockEnd: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ marginBlockEnd: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ marginBlockEnd: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ marginBlockEnd: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ marginBlockEnd: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ marginBlockEnd: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ marginBlockEnd: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ marginBlockEnd: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ marginBlockEnd: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ marginBlockEnd: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ marginBlockEnd: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ marginBlockEnd: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ marginBlockEnd: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ marginBlockEnd: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ marginBlockEnd: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ marginBlockEnd: Length.X(...nums) }),
    AUTO: { marginBlockEnd: "auto" }
};
const _MarginBlockStart = {
    set: (...params: Param[]): Sheet => ({ marginBlockStart: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ marginBlockStart: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ marginBlockStart: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ marginBlockStart: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ marginBlockStart: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ marginBlockStart: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ marginBlockStart: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ marginBlockStart: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ marginBlockStart: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ marginBlockStart: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ marginBlockStart: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ marginBlockStart: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ marginBlockStart: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ marginBlockStart: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ marginBlockStart: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ marginBlockStart: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ marginBlockStart: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ marginBlockStart: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ marginBlockStart: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ marginBlockStart: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ marginBlockStart: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ marginBlockStart: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ marginBlockStart: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ marginBlockStart: Length.X(...nums) }),
    AUTO: { marginBlockStart: "auto" }
};
const _MarginBottom = {
    set: (...params: Param[]): Sheet => ({ marginBottom: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ marginBottom: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ marginBottom: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ marginBottom: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ marginBottom: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ marginBottom: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ marginBottom: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ marginBottom: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ marginBottom: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ marginBottom: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ marginBottom: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ marginBottom: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ marginBottom: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ marginBottom: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ marginBottom: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ marginBottom: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ marginBottom: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ marginBottom: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ marginBottom: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ marginBottom: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ marginBottom: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ marginBottom: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ marginBottom: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ marginBottom: Length.X(...nums) }),
    AUTO: { marginBottom: "auto" }
};
const _MarginInlineEnd = {
    set: (...params: Param[]): Sheet => ({ marginInlineEnd: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ marginInlineEnd: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ marginInlineEnd: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ marginInlineEnd: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ marginInlineEnd: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ marginInlineEnd: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ marginInlineEnd: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ marginInlineEnd: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ marginInlineEnd: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ marginInlineEnd: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ marginInlineEnd: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ marginInlineEnd: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ marginInlineEnd: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ marginInlineEnd: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ marginInlineEnd: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ marginInlineEnd: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ marginInlineEnd: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ marginInlineEnd: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ marginInlineEnd: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ marginInlineEnd: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ marginInlineEnd: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ marginInlineEnd: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ marginInlineEnd: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ marginInlineEnd: Length.X(...nums) }),
    AUTO: { marginInlineEnd: "auto" }
};
const _MarginInlineStart = {
    set: (...params: Param[]): Sheet => ({ marginInlineStart: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ marginInlineStart: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ marginInlineStart: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ marginInlineStart: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ marginInlineStart: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ marginInlineStart: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ marginInlineStart: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ marginInlineStart: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ marginInlineStart: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ marginInlineStart: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ marginInlineStart: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ marginInlineStart: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ marginInlineStart: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ marginInlineStart: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ marginInlineStart: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ marginInlineStart: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ marginInlineStart: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ marginInlineStart: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ marginInlineStart: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ marginInlineStart: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ marginInlineStart: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ marginInlineStart: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ marginInlineStart: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ marginInlineStart: Length.X(...nums) }),
    AUTO: { marginInlineStart: "auto" }
};
const _MarginLeft = {
    set: (...params: Param[]): Sheet => ({ marginLeft: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ marginLeft: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ marginLeft: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ marginLeft: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ marginLeft: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ marginLeft: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ marginLeft: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ marginLeft: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ marginLeft: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ marginLeft: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ marginLeft: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ marginLeft: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ marginLeft: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ marginLeft: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ marginLeft: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ marginLeft: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ marginLeft: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ marginLeft: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ marginLeft: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ marginLeft: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ marginLeft: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ marginLeft: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ marginLeft: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ marginLeft: Length.X(...nums) }),
    AUTO: { marginLeft: "auto" }
};
const _MarginRight = {
    set: (...params: Param[]): Sheet => ({ marginRight: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ marginRight: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ marginRight: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ marginRight: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ marginRight: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ marginRight: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ marginRight: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ marginRight: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ marginRight: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ marginRight: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ marginRight: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ marginRight: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ marginRight: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ marginRight: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ marginRight: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ marginRight: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ marginRight: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ marginRight: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ marginRight: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ marginRight: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ marginRight: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ marginRight: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ marginRight: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ marginRight: Length.X(...nums) }),
    AUTO: { marginRight: "auto" }
};
const _MarginTop = {
    set: (...params: Param[]): Sheet => ({ marginTop: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ marginTop: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ marginTop: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ marginTop: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ marginTop: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ marginTop: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ marginTop: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ marginTop: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ marginTop: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ marginTop: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ marginTop: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ marginTop: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ marginTop: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ marginTop: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ marginTop: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ marginTop: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ marginTop: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ marginTop: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ marginTop: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ marginTop: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ marginTop: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ marginTop: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ marginTop: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ marginTop: Length.X(...nums) }),
    AUTO: { marginTop: "auto" }
};
const _Mask = {
    set: (...params: Param[]): Sheet => ({ mask: buildProperty(params) }),
    NONE: { mask: "none" },
    image: (...params: Param[]): Sheet => ({ mask: Method.image(...params) }),
    imageSet: (...params: Param[]): Sheet => ({ mask: Method.imageSet(...params) }),
    element: (...params: Param[]): Sheet => ({ mask: Method.element(...params) }),
    crossFade: (...params: Param[]): Sheet => ({ mask: Method.crossFade(...params) }),
    linearGradient: (...params: Param[]): Sheet => ({ mask: Method.linearGradient(...params) }),
    repeatingLinearGradient: (...params: Param[]): Sheet => ({ mask: Method.repeatingLinearGradient(...params) }),
    radialGradient: (...params: Param[]): Sheet => ({ mask: Method.radialGradient(...params) }),
    repeatingRadialGradient: (...params: Param[]): Sheet => ({ mask: Method.repeatingRadialGradient(...params) }),
    AUTO: { mask: "auto" },
    COVER: { mask: "cover" },
    CONTAIN: { mask: "contain" },
    REPEAT_X: { mask: "repeat-x" },
    REPEAT_Y: { mask: "repeat-y" },
    REPEAT: { mask: "repeat" },
    SPACE: { mask: "space" },
    ROUND: { mask: "round" },
    NO_REPEAT: { mask: "no-repeat" },
    BORDER_BOX: { mask: "border-box" },
    PADDING_BOX: { mask: "padding-box" },
    CONTENT_BOX: { mask: "content-box" },
    MARGIN_BOX: { mask: "margin-box" },
    FILL_BOX: { mask: "fill-box" },
    STROKE_BOX: { mask: "stroke-box" },
    VIEW_BOX: { mask: "view-box" },
    NO_CLIP: { mask: "no-clip" },
    ADD: { mask: "add" },
    SUBTRACT: { mask: "subtract" },
    INTERSECT: { mask: "intersect" },
    EXCLUDE: { mask: "exclude" },
    ALPHA: { mask: "alpha" },
    LUMINANCE: { mask: "luminance" },
    MATCH_SOURCE: { mask: "match-source" }
};
const _MaskBorder = {
    set: (...params: Param[]): Sheet => ({ maskBorder: buildProperty(params) }),
    NONE: { maskBorder: "none" },
    image: (...params: Param[]): Sheet => ({ maskBorder: Method.image(...params) }),
    imageSet: (...params: Param[]): Sheet => ({ maskBorder: Method.imageSet(...params) }),
    element: (...params: Param[]): Sheet => ({ maskBorder: Method.element(...params) }),
    crossFade: (...params: Param[]): Sheet => ({ maskBorder: Method.crossFade(...params) }),
    linearGradient: (...params: Param[]): Sheet => ({ maskBorder: Method.linearGradient(...params) }),
    repeatingLinearGradient: (...params: Param[]): Sheet => ({ maskBorder: Method.repeatingLinearGradient(...params) }),
    radialGradient: (...params: Param[]): Sheet => ({ maskBorder: Method.radialGradient(...params) }),
    repeatingRadialGradient: (...params: Param[]): Sheet => ({ maskBorder: Method.repeatingRadialGradient(...params) }),
    X: (...nums: number[]): Sheet => ({ maskBorder: Length.X(...nums) }),
    FILL: { maskBorder: "fill" },
    AUTO: { maskBorder: "auto" },
    cap: (...nums: number[]): Sheet => ({ maskBorder: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ maskBorder: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ maskBorder: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ maskBorder: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ maskBorder: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ maskBorder: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ maskBorder: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ maskBorder: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ maskBorder: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ maskBorder: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ maskBorder: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ maskBorder: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ maskBorder: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ maskBorder: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ maskBorder: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ maskBorder: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ maskBorder: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ maskBorder: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ maskBorder: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ maskBorder: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ maskBorder: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ maskBorder: Length.fr(...nums) }),
    STRETCH: { maskBorder: "stretch" },
    REPEAT: { maskBorder: "repeat" },
    ROUND: { maskBorder: "round" },
    SPACE: { maskBorder: "space" },
    LUMINANCE: { maskBorder: "luminance" },
    ALPHA: { maskBorder: "alpha" }
};
const _MaskBorderMode = {
    set: (...params: Param[]): Sheet => ({ maskBorderMode: buildProperty(params) }),
    LUMINANCE: { maskBorderMode: "luminance" },
    ALPHA: { maskBorderMode: "alpha" }
};
const _MaskBorderOutset = {
    set: (...params: Param[]): Sheet => ({ maskBorderOutset: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ maskBorderOutset: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ maskBorderOutset: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ maskBorderOutset: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ maskBorderOutset: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ maskBorderOutset: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ maskBorderOutset: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ maskBorderOutset: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ maskBorderOutset: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ maskBorderOutset: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ maskBorderOutset: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ maskBorderOutset: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ maskBorderOutset: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ maskBorderOutset: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ maskBorderOutset: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ maskBorderOutset: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ maskBorderOutset: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ maskBorderOutset: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ maskBorderOutset: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ maskBorderOutset: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ maskBorderOutset: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ maskBorderOutset: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ maskBorderOutset: Length.fr(...nums) })
};
const _MaskBorderRepeat = {
    set: (...params: Param[]): Sheet => ({ maskBorderRepeat: buildProperty(params) }),
    STRETCH: { maskBorderRepeat: "stretch" },
    REPEAT: { maskBorderRepeat: "repeat" },
    ROUND: { maskBorderRepeat: "round" },
    SPACE: { maskBorderRepeat: "space" }
};
const _MaskBorderSlice = {
    set: (...params: Param[]): Sheet => ({ maskBorderSlice: buildProperty(params) }),
    X: (...nums: number[]): Sheet => ({ maskBorderSlice: Length.X(...nums) }),
    FILL: { maskBorderSlice: "fill" }
};
const _MaskBorderSource = {
    set: (...params: Param[]): Sheet => ({ maskBorderSource: buildProperty(params) }),
    NONE: { maskBorderSource: "none" },
    image: (...params: Param[]): Sheet => ({ maskBorderSource: Method.image(...params) }),
    imageSet: (...params: Param[]): Sheet => ({ maskBorderSource: Method.imageSet(...params) }),
    element: (...params: Param[]): Sheet => ({ maskBorderSource: Method.element(...params) }),
    crossFade: (...params: Param[]): Sheet => ({ maskBorderSource: Method.crossFade(...params) }),
    linearGradient: (...params: Param[]): Sheet => ({ maskBorderSource: Method.linearGradient(...params) }),
    repeatingLinearGradient: (...params: Param[]): Sheet => ({
        maskBorderSource: Method.repeatingLinearGradient(...params)
    }),
    radialGradient: (...params: Param[]): Sheet => ({ maskBorderSource: Method.radialGradient(...params) }),
    repeatingRadialGradient: (...params: Param[]): Sheet => ({
        maskBorderSource: Method.repeatingRadialGradient(...params)
    })
};
const _MaskBorderWidth = {
    set: (...params: Param[]): Sheet => ({ maskBorderWidth: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ maskBorderWidth: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ maskBorderWidth: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ maskBorderWidth: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ maskBorderWidth: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ maskBorderWidth: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ maskBorderWidth: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ maskBorderWidth: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ maskBorderWidth: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ maskBorderWidth: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ maskBorderWidth: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ maskBorderWidth: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ maskBorderWidth: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ maskBorderWidth: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ maskBorderWidth: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ maskBorderWidth: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ maskBorderWidth: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ maskBorderWidth: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ maskBorderWidth: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ maskBorderWidth: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ maskBorderWidth: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ maskBorderWidth: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ maskBorderWidth: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ maskBorderWidth: Length.X(...nums) }),
    AUTO: { maskBorderWidth: "auto" }
};
const _MaskClip = {
    set: (...params: Param[]): Sheet => ({ maskClip: buildProperty(params) }),
    BORDER_BOX: { maskClip: "border-box" },
    PADDING_BOX: { maskClip: "padding-box" },
    CONTENT_BOX: { maskClip: "content-box" },
    MARGIN_BOX: { maskClip: "margin-box" },
    FILL_BOX: { maskClip: "fill-box" },
    STROKE_BOX: { maskClip: "stroke-box" },
    VIEW_BOX: { maskClip: "view-box" },
    NO_CLIP: { maskClip: "no-clip" }
};
const _MaskComposite = {
    set: (...params: Param[]): Sheet => ({ maskComposite: buildProperty(params) }),
    ADD: { maskComposite: "add" },
    SUBTRACT: { maskComposite: "subtract" },
    INTERSECT: { maskComposite: "intersect" },
    EXCLUDE: { maskComposite: "exclude" }
};
const _MaskImage = {
    set: (...params: Param[]): Sheet => ({ maskImage: buildProperty(params) }),
    NONE: { maskImage: "none" },
    image: (...params: Param[]): Sheet => ({ maskImage: Method.image(...params) }),
    imageSet: (...params: Param[]): Sheet => ({ maskImage: Method.imageSet(...params) }),
    element: (...params: Param[]): Sheet => ({ maskImage: Method.element(...params) }),
    crossFade: (...params: Param[]): Sheet => ({ maskImage: Method.crossFade(...params) }),
    linearGradient: (...params: Param[]): Sheet => ({ maskImage: Method.linearGradient(...params) }),
    repeatingLinearGradient: (...params: Param[]): Sheet => ({ maskImage: Method.repeatingLinearGradient(...params) }),
    radialGradient: (...params: Param[]): Sheet => ({ maskImage: Method.radialGradient(...params) }),
    repeatingRadialGradient: (...params: Param[]): Sheet => ({ maskImage: Method.repeatingRadialGradient(...params) })
};
const _MaskMode = {
    set: (...params: Param[]): Sheet => ({ maskMode: buildProperty(params) }),
    ALPHA: { maskMode: "alpha" },
    LUMINANCE: { maskMode: "luminance" },
    MATCH_SOURCE: { maskMode: "match-source" }
};
const _MaskOrigin = {
    set: (...params: Param[]): Sheet => ({ maskOrigin: buildProperty(params) }),
    BORDER_BOX: { maskOrigin: "border-box" },
    PADDING_BOX: { maskOrigin: "padding-box" },
    CONTENT_BOX: { maskOrigin: "content-box" },
    MARGIN_BOX: { maskOrigin: "margin-box" },
    FILL_BOX: { maskOrigin: "fill-box" },
    STROKE_BOX: { maskOrigin: "stroke-box" },
    VIEW_BOX: { maskOrigin: "view-box" }
};
const _MaskPosition = {
    set: (...params: Param[]): Sheet => ({ maskPosition: buildProperty(params) }),
    LEFT: { maskPosition: "left" },
    CENTER: { maskPosition: "center" },
    RIGHT: { maskPosition: "right" },
    TOP: { maskPosition: "top" },
    BOTTOM: { maskPosition: "bottom" },
    cap: (...nums: number[]): Sheet => ({ maskPosition: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ maskPosition: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ maskPosition: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ maskPosition: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ maskPosition: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ maskPosition: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ maskPosition: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ maskPosition: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ maskPosition: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ maskPosition: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ maskPosition: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ maskPosition: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ maskPosition: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ maskPosition: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ maskPosition: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ maskPosition: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ maskPosition: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ maskPosition: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ maskPosition: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ maskPosition: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ maskPosition: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ maskPosition: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ maskPosition: Length.X(...nums) })
};
const _MaskRepeat = {
    set: (...params: Param[]): Sheet => ({ maskRepeat: buildProperty(params) }),
    REPEAT_X: { maskRepeat: "repeat-x" },
    REPEAT_Y: { maskRepeat: "repeat-y" },
    REPEAT: { maskRepeat: "repeat" },
    SPACE: { maskRepeat: "space" },
    ROUND: { maskRepeat: "round" },
    NO_REPEAT: { maskRepeat: "no-repeat" }
};
const _MaskSize = {
    set: (...params: Param[]): Sheet => ({ maskSize: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ maskSize: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ maskSize: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ maskSize: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ maskSize: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ maskSize: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ maskSize: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ maskSize: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ maskSize: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ maskSize: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ maskSize: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ maskSize: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ maskSize: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ maskSize: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ maskSize: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ maskSize: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ maskSize: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ maskSize: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ maskSize: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ maskSize: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ maskSize: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ maskSize: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ maskSize: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ maskSize: Length.X(...nums) }),
    AUTO: { maskSize: "auto" },
    COVER: { maskSize: "cover" },
    CONTAIN: { maskSize: "contain" }
};
const _MaskType = {
    set: (...params: Param[]): Sheet => ({ maskType: buildProperty(params) }),
    LUMINANCE: { maskType: "luminance" },
    ALPHA: { maskType: "alpha" }
};
const _MaxBlockSize = {
    set: (...params: Param[]): Sheet => ({ maxBlockSize: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ maxBlockSize: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ maxBlockSize: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ maxBlockSize: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ maxBlockSize: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ maxBlockSize: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ maxBlockSize: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ maxBlockSize: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ maxBlockSize: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ maxBlockSize: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ maxBlockSize: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ maxBlockSize: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ maxBlockSize: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ maxBlockSize: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ maxBlockSize: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ maxBlockSize: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ maxBlockSize: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ maxBlockSize: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ maxBlockSize: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ maxBlockSize: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ maxBlockSize: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ maxBlockSize: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ maxBlockSize: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ maxBlockSize: Length.X(...nums) }),
    NONE: { maxBlockSize: "none" },
    MAX_CONTENT: { maxBlockSize: "max-content" },
    MIN_CONTENT: { maxBlockSize: "min-content" },
    FIT_CONTENT: { maxBlockSize: "fit-content" },
    FILL_AVAILABLE: { maxBlockSize: "fill-available" }
};
const _MaxHeight = {
    set: (...params: Param[]): Sheet => ({ maxHeight: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ maxHeight: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ maxHeight: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ maxHeight: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ maxHeight: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ maxHeight: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ maxHeight: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ maxHeight: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ maxHeight: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ maxHeight: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ maxHeight: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ maxHeight: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ maxHeight: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ maxHeight: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ maxHeight: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ maxHeight: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ maxHeight: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ maxHeight: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ maxHeight: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ maxHeight: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ maxHeight: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ maxHeight: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ maxHeight: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ maxHeight: Length.X(...nums) }),
    NONE: { maxHeight: "none" },
    MAX_CONTENT: { maxHeight: "max-content" },
    MIN_CONTENT: { maxHeight: "min-content" },
    FIT_CONTENT: { maxHeight: "fit-content" },
    FILL_AVAILABLE: { maxHeight: "fill-available" }
};
const _MaxInlineSize = {
    set: (...params: Param[]): Sheet => ({ maxInlineSize: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ maxInlineSize: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ maxInlineSize: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ maxInlineSize: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ maxInlineSize: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ maxInlineSize: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ maxInlineSize: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ maxInlineSize: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ maxInlineSize: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ maxInlineSize: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ maxInlineSize: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ maxInlineSize: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ maxInlineSize: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ maxInlineSize: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ maxInlineSize: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ maxInlineSize: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ maxInlineSize: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ maxInlineSize: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ maxInlineSize: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ maxInlineSize: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ maxInlineSize: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ maxInlineSize: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ maxInlineSize: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ maxInlineSize: Length.X(...nums) }),
    NONE: { maxInlineSize: "none" },
    MAX_CONTENT: { maxInlineSize: "max-content" },
    MIN_CONTENT: { maxInlineSize: "min-content" },
    FIT_CONTENT: { maxInlineSize: "fit-content" },
    FILL_AVAILABLE: { maxInlineSize: "fill-available" }
};
const _MaxLines = {
    set: (...params: Param[]): Sheet => ({ maxLines: buildProperty(params) }),
    NONE: { maxLines: "none" }
};
const _MaxWidth = {
    set: (...params: Param[]): Sheet => ({ maxWidth: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ maxWidth: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ maxWidth: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ maxWidth: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ maxWidth: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ maxWidth: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ maxWidth: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ maxWidth: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ maxWidth: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ maxWidth: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ maxWidth: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ maxWidth: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ maxWidth: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ maxWidth: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ maxWidth: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ maxWidth: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ maxWidth: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ maxWidth: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ maxWidth: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ maxWidth: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ maxWidth: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ maxWidth: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ maxWidth: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ maxWidth: Length.X(...nums) }),
    NONE: { maxWidth: "none" },
    MAX_CONTENT: { maxWidth: "max-content" },
    MIN_CONTENT: { maxWidth: "min-content" },
    FIT_CONTENT: { maxWidth: "fit-content" },
    FILL_AVAILABLE: { maxWidth: "fill-available" }
};
const _MinBlockSize = {
    set: (...params: Param[]): Sheet => ({ minBlockSize: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ minBlockSize: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ minBlockSize: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ minBlockSize: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ minBlockSize: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ minBlockSize: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ minBlockSize: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ minBlockSize: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ minBlockSize: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ minBlockSize: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ minBlockSize: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ minBlockSize: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ minBlockSize: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ minBlockSize: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ minBlockSize: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ minBlockSize: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ minBlockSize: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ minBlockSize: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ minBlockSize: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ minBlockSize: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ minBlockSize: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ minBlockSize: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ minBlockSize: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ minBlockSize: Length.X(...nums) }),
    AUTO: { minBlockSize: "auto" },
    MAX_CONTENT: { minBlockSize: "max-content" },
    MIN_CONTENT: { minBlockSize: "min-content" },
    FIT_CONTENT: { minBlockSize: "fit-content" },
    FILL_AVAILABLE: { minBlockSize: "fill-available" }
};
const _MinHeight = {
    set: (...params: Param[]): Sheet => ({ minHeight: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ minHeight: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ minHeight: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ minHeight: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ minHeight: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ minHeight: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ minHeight: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ minHeight: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ minHeight: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ minHeight: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ minHeight: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ minHeight: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ minHeight: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ minHeight: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ minHeight: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ minHeight: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ minHeight: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ minHeight: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ minHeight: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ minHeight: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ minHeight: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ minHeight: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ minHeight: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ minHeight: Length.X(...nums) }),
    AUTO: { minHeight: "auto" },
    MAX_CONTENT: { minHeight: "max-content" },
    MIN_CONTENT: { minHeight: "min-content" },
    FIT_CONTENT: { minHeight: "fit-content" },
    FILL_AVAILABLE: { minHeight: "fill-available" }
};
const _MinInlineSize = {
    set: (...params: Param[]): Sheet => ({ minInlineSize: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ minInlineSize: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ minInlineSize: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ minInlineSize: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ minInlineSize: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ minInlineSize: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ minInlineSize: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ minInlineSize: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ minInlineSize: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ minInlineSize: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ minInlineSize: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ minInlineSize: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ minInlineSize: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ minInlineSize: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ minInlineSize: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ minInlineSize: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ minInlineSize: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ minInlineSize: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ minInlineSize: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ minInlineSize: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ minInlineSize: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ minInlineSize: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ minInlineSize: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ minInlineSize: Length.X(...nums) }),
    AUTO: { minInlineSize: "auto" },
    MAX_CONTENT: { minInlineSize: "max-content" },
    MIN_CONTENT: { minInlineSize: "min-content" },
    FIT_CONTENT: { minInlineSize: "fit-content" },
    FILL_AVAILABLE: { minInlineSize: "fill-available" }
};
const _MinWidth = {
    set: (...params: Param[]): Sheet => ({ minWidth: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ minWidth: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ minWidth: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ minWidth: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ minWidth: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ minWidth: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ minWidth: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ minWidth: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ minWidth: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ minWidth: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ minWidth: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ minWidth: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ minWidth: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ minWidth: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ minWidth: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ minWidth: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ minWidth: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ minWidth: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ minWidth: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ minWidth: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ minWidth: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ minWidth: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ minWidth: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ minWidth: Length.X(...nums) }),
    AUTO: { minWidth: "auto" },
    MAX_CONTENT: { minWidth: "max-content" },
    MIN_CONTENT: { minWidth: "min-content" },
    FIT_CONTENT: { minWidth: "fit-content" },
    FILL_AVAILABLE: { minWidth: "fill-available" }
};
const _MixBlendMode = {
    set: (...params: Param[]): Sheet => ({ mixBlendMode: buildProperty(params) }),
    NORMAL: { mixBlendMode: "normal" },
    MULTIPLY: { mixBlendMode: "multiply" },
    SCREEN: { mixBlendMode: "screen" },
    OVERLAY: { mixBlendMode: "overlay" },
    DARKEN: { mixBlendMode: "darken" },
    LIGHTEN: { mixBlendMode: "lighten" },
    COLOR_DODGE: { mixBlendMode: "color-dodge" },
    COLOR_BURN: { mixBlendMode: "color-burn" },
    HARD_LIGHT: { mixBlendMode: "hard-light" },
    SOFT_LIGHT: { mixBlendMode: "soft-light" },
    DIFFERENCE: { mixBlendMode: "difference" },
    EXCLUSION: { mixBlendMode: "exclusion" },
    HUE: { mixBlendMode: "hue" },
    SATURATION: { mixBlendMode: "saturation" },
    COLOR: { mixBlendMode: "color" },
    LUMINOSITY: { mixBlendMode: "luminosity" }
};
const _Motion = {
    set: (...params: Param[]): Sheet => ({ motion: buildProperty(params) }),
    inset: (...params: Param[]): Sheet => ({ motion: Method.inset(...params) }),
    circle: (...params: Param[]): Sheet => ({ motion: Method.circle(...params) }),
    ellipse: (...params: Param[]): Sheet => ({ motion: Method.ellipse(...params) }),
    polygon: (...params: Param[]): Sheet => ({ motion: Method.polygon(...params) }),
    BORDER_BOX: { motion: "border-box" },
    PADDING_BOX: { motion: "padding-box" },
    CONTENT_BOX: { motion: "content-box" },
    MARGIN_BOX: { motion: "margin-box" },
    FILL_BOX: { motion: "fill-box" },
    STROKE_BOX: { motion: "stroke-box" },
    VIEW_BOX: { motion: "view-box" },
    NONE: { motion: "none" },
    AMP: { motion: "amp;" },
    AUTO: { motion: "auto" },
    REVERSE: { motion: "reverse" },
    deg: (...nums: number[]): Sheet => ({ motion: Angle.deg(...nums) }),
    rad: (...nums: number[]): Sheet => ({ motion: Angle.rad(...nums) }),
    grad: (...nums: number[]): Sheet => ({ motion: Angle.grad(...nums) }),
    turn: (...nums: number[]): Sheet => ({ motion: Angle.turn(...nums) })
};
const _MotionOffset = {
    set: (...params: Param[]): Sheet => ({ motionOffset: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ motionOffset: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ motionOffset: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ motionOffset: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ motionOffset: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ motionOffset: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ motionOffset: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ motionOffset: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ motionOffset: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ motionOffset: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ motionOffset: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ motionOffset: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ motionOffset: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ motionOffset: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ motionOffset: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ motionOffset: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ motionOffset: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ motionOffset: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ motionOffset: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ motionOffset: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ motionOffset: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ motionOffset: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ motionOffset: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ motionOffset: Length.X(...nums) })
};
const _MotionPath = {
    set: (...params: Param[]): Sheet => ({ motionPath: buildProperty(params) }),
    inset: (...params: Param[]): Sheet => ({ motionPath: Method.inset(...params) }),
    circle: (...params: Param[]): Sheet => ({ motionPath: Method.circle(...params) }),
    ellipse: (...params: Param[]): Sheet => ({ motionPath: Method.ellipse(...params) }),
    polygon: (...params: Param[]): Sheet => ({ motionPath: Method.polygon(...params) }),
    BORDER_BOX: { motionPath: "border-box" },
    PADDING_BOX: { motionPath: "padding-box" },
    CONTENT_BOX: { motionPath: "content-box" },
    MARGIN_BOX: { motionPath: "margin-box" },
    FILL_BOX: { motionPath: "fill-box" },
    STROKE_BOX: { motionPath: "stroke-box" },
    VIEW_BOX: { motionPath: "view-box" },
    NONE: { motionPath: "none" }
};
const _MotionRotation = {
    set: (...params: Param[]): Sheet => ({ motionRotation: buildProperty(params) }),
    AUTO: { motionRotation: "auto" },
    REVERSE: { motionRotation: "reverse" },
    AMP: { motionRotation: "amp;" },
    deg: (...nums: number[]): Sheet => ({ motionRotation: Angle.deg(...nums) }),
    rad: (...nums: number[]): Sheet => ({ motionRotation: Angle.rad(...nums) }),
    grad: (...nums: number[]): Sheet => ({ motionRotation: Angle.grad(...nums) }),
    turn: (...nums: number[]): Sheet => ({ motionRotation: Angle.turn(...nums) })
};
const _ObjectFit = {
    set: (...params: Param[]): Sheet => ({ objectFit: buildProperty(params) }),
    FILL: { objectFit: "fill" },
    CONTAIN: { objectFit: "contain" },
    COVER: { objectFit: "cover" },
    NONE: { objectFit: "none" },
    SCALE_DOWN: { objectFit: "scale-down" }
};
const _ObjectPosition = {
    set: (...params: Param[]): Sheet => ({ objectPosition: buildProperty(params) }),
    LEFT: { objectPosition: "left" },
    CENTER: { objectPosition: "center" },
    RIGHT: { objectPosition: "right" },
    TOP: { objectPosition: "top" },
    BOTTOM: { objectPosition: "bottom" },
    cap: (...nums: number[]): Sheet => ({ objectPosition: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ objectPosition: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ objectPosition: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ objectPosition: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ objectPosition: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ objectPosition: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ objectPosition: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ objectPosition: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ objectPosition: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ objectPosition: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ objectPosition: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ objectPosition: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ objectPosition: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ objectPosition: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ objectPosition: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ objectPosition: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ objectPosition: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ objectPosition: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ objectPosition: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ objectPosition: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ objectPosition: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ objectPosition: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ objectPosition: Length.X(...nums) })
};
const _OffsetPosition = {
    set: (...params: Param[]): Sheet => ({ offsetPosition: buildProperty(params) }),
    AUTO: { offsetPosition: "auto" },
    LEFT: { offsetPosition: "left" },
    CENTER: { offsetPosition: "center" },
    RIGHT: { offsetPosition: "right" },
    TOP: { offsetPosition: "top" },
    BOTTOM: { offsetPosition: "bottom" },
    cap: (...nums: number[]): Sheet => ({ offsetPosition: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ offsetPosition: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ offsetPosition: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ offsetPosition: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ offsetPosition: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ offsetPosition: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ offsetPosition: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ offsetPosition: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ offsetPosition: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ offsetPosition: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ offsetPosition: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ offsetPosition: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ offsetPosition: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ offsetPosition: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ offsetPosition: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ offsetPosition: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ offsetPosition: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ offsetPosition: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ offsetPosition: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ offsetPosition: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ offsetPosition: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ offsetPosition: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ offsetPosition: Length.X(...nums) })
};
const _Opacity = { set: (...params: Param[]): Sheet => ({ opacity: buildProperty(params) }) };
const _Order = { set: (...params: Param[]): Sheet => ({ order: buildProperty(params) }) };
const _Orphans = { set: (...params: Param[]): Sheet => ({ orphans: buildProperty(params) }) };
const _Outline = {
    set: (...params: Param[]): Sheet => ({ outline: buildProperty(params) }),
    rgb: (...params: Param[]): Sheet => ({ outline: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ outline: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ outline: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ outline: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ outline: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ outline: Method.hsla(...params) }),
    BLACK: { outline: "black" },
    SILVER: { outline: "silver" },
    GRAY: { outline: "gray" },
    WHITE: { outline: "white" },
    MAROON: { outline: "maroon" },
    RED: { outline: "red" },
    PURPLE: { outline: "purple" },
    FUCHSIA: { outline: "fuchsia" },
    GREEN: { outline: "green" },
    LIME: { outline: "lime" },
    OLIVE: { outline: "olive" },
    YELLOW: { outline: "yellow" },
    NAVY: { outline: "navy" },
    BLUE: { outline: "blue" },
    TEAL: { outline: "teal" },
    AQUA: { outline: "aqua" },
    CURRENTCOLOR: { outline: "currentcolor" },
    ACTIVEBORDER: { outline: "ActiveBorder" },
    ACTIVECAPTION: { outline: "ActiveCaption" },
    APPWORKSPACE: { outline: "AppWorkspace" },
    BACKGROUND: { outline: "Background" },
    BUTTONFACE: { outline: "ButtonFace" },
    BUTTONHIGHLIGHT: { outline: "ButtonHighlight" },
    BUTTONSHADOW: { outline: "ButtonShadow" },
    BUTTONTEXT: { outline: "ButtonText" },
    CAPTIONTEXT: { outline: "CaptionText" },
    GRAYTEXT: { outline: "GrayText" },
    HIGHLIGHT: { outline: "Highlight" },
    HIGHLIGHTTEXT: { outline: "HighlightText" },
    INACTIVEBORDER: { outline: "InactiveBorder" },
    INACTIVECAPTION: { outline: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { outline: "InactiveCaptionText" },
    INFOBACKGROUND: { outline: "InfoBackground" },
    INFOTEXT: { outline: "InfoText" },
    MENU: { outline: "Menu" },
    MENUTEXT: { outline: "MenuText" },
    SCROLLBAR: { outline: "Scrollbar" },
    THREEDDARKSHADOW: { outline: "ThreeDDarkShadow" },
    THREEDFACE: { outline: "ThreeDFace" },
    THREEDHIGHLIGHT: { outline: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { outline: "ThreeDLightShadow" },
    THREEDSHADOW: { outline: "ThreeDShadow" },
    WINDOW: { outline: "Window" },
    WINDOWFRAME: { outline: "WindowFrame" },
    WINDOWTEXT: { outline: "WindowText" },
    INVERT: { outline: "invert" },
    AUTO: { outline: "auto" },
    NONE: { outline: "none" },
    HIDDEN: { outline: "hidden" },
    DOTTED: { outline: "dotted" },
    DASHED: { outline: "dashed" },
    SOLID: { outline: "solid" },
    DOUBLE: { outline: "double" },
    GROOVE: { outline: "groove" },
    RIDGE: { outline: "ridge" },
    INSET: { outline: "inset" },
    OUTSET: { outline: "outset" },
    cap: (...nums: number[]): Sheet => ({ outline: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ outline: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ outline: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ outline: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ outline: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ outline: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ outline: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ outline: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ outline: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ outline: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ outline: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ outline: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ outline: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ outline: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ outline: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ outline: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ outline: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ outline: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ outline: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ outline: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ outline: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ outline: Length.fr(...nums) }),
    THIN: { outline: "thin" },
    MEDIUM: { outline: "medium" },
    THICK: { outline: "thick" }
};
const _OutlineColor = {
    set: (...params: Param[]): Sheet => ({ outlineColor: buildProperty(params) }),
    rgb: (...params: Param[]): Sheet => ({ outlineColor: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ outlineColor: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ outlineColor: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ outlineColor: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ outlineColor: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ outlineColor: Method.hsla(...params) }),
    BLACK: { outlineColor: "black" },
    SILVER: { outlineColor: "silver" },
    GRAY: { outlineColor: "gray" },
    WHITE: { outlineColor: "white" },
    MAROON: { outlineColor: "maroon" },
    RED: { outlineColor: "red" },
    PURPLE: { outlineColor: "purple" },
    FUCHSIA: { outlineColor: "fuchsia" },
    GREEN: { outlineColor: "green" },
    LIME: { outlineColor: "lime" },
    OLIVE: { outlineColor: "olive" },
    YELLOW: { outlineColor: "yellow" },
    NAVY: { outlineColor: "navy" },
    BLUE: { outlineColor: "blue" },
    TEAL: { outlineColor: "teal" },
    AQUA: { outlineColor: "aqua" },
    CURRENTCOLOR: { outlineColor: "currentcolor" },
    ACTIVEBORDER: { outlineColor: "ActiveBorder" },
    ACTIVECAPTION: { outlineColor: "ActiveCaption" },
    APPWORKSPACE: { outlineColor: "AppWorkspace" },
    BACKGROUND: { outlineColor: "Background" },
    BUTTONFACE: { outlineColor: "ButtonFace" },
    BUTTONHIGHLIGHT: { outlineColor: "ButtonHighlight" },
    BUTTONSHADOW: { outlineColor: "ButtonShadow" },
    BUTTONTEXT: { outlineColor: "ButtonText" },
    CAPTIONTEXT: { outlineColor: "CaptionText" },
    GRAYTEXT: { outlineColor: "GrayText" },
    HIGHLIGHT: { outlineColor: "Highlight" },
    HIGHLIGHTTEXT: { outlineColor: "HighlightText" },
    INACTIVEBORDER: { outlineColor: "InactiveBorder" },
    INACTIVECAPTION: { outlineColor: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { outlineColor: "InactiveCaptionText" },
    INFOBACKGROUND: { outlineColor: "InfoBackground" },
    INFOTEXT: { outlineColor: "InfoText" },
    MENU: { outlineColor: "Menu" },
    MENUTEXT: { outlineColor: "MenuText" },
    SCROLLBAR: { outlineColor: "Scrollbar" },
    THREEDDARKSHADOW: { outlineColor: "ThreeDDarkShadow" },
    THREEDFACE: { outlineColor: "ThreeDFace" },
    THREEDHIGHLIGHT: { outlineColor: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { outlineColor: "ThreeDLightShadow" },
    THREEDSHADOW: { outlineColor: "ThreeDShadow" },
    WINDOW: { outlineColor: "Window" },
    WINDOWFRAME: { outlineColor: "WindowFrame" },
    WINDOWTEXT: { outlineColor: "WindowText" },
    INVERT: { outlineColor: "invert" }
};
const _OutlineOffset = {
    set: (...params: Param[]): Sheet => ({ outlineOffset: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ outlineOffset: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ outlineOffset: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ outlineOffset: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ outlineOffset: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ outlineOffset: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ outlineOffset: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ outlineOffset: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ outlineOffset: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ outlineOffset: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ outlineOffset: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ outlineOffset: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ outlineOffset: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ outlineOffset: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ outlineOffset: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ outlineOffset: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ outlineOffset: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ outlineOffset: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ outlineOffset: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ outlineOffset: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ outlineOffset: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ outlineOffset: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ outlineOffset: Length.fr(...nums) })
};
const _OutlineStyle = {
    set: (...params: Param[]): Sheet => ({ outlineStyle: buildProperty(params) }),
    AUTO: { outlineStyle: "auto" },
    NONE: { outlineStyle: "none" },
    HIDDEN: { outlineStyle: "hidden" },
    DOTTED: { outlineStyle: "dotted" },
    DASHED: { outlineStyle: "dashed" },
    SOLID: { outlineStyle: "solid" },
    DOUBLE: { outlineStyle: "double" },
    GROOVE: { outlineStyle: "groove" },
    RIDGE: { outlineStyle: "ridge" },
    INSET: { outlineStyle: "inset" },
    OUTSET: { outlineStyle: "outset" }
};
const _OutlineWidth = {
    set: (...params: Param[]): Sheet => ({ outlineWidth: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ outlineWidth: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ outlineWidth: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ outlineWidth: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ outlineWidth: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ outlineWidth: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ outlineWidth: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ outlineWidth: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ outlineWidth: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ outlineWidth: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ outlineWidth: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ outlineWidth: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ outlineWidth: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ outlineWidth: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ outlineWidth: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ outlineWidth: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ outlineWidth: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ outlineWidth: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ outlineWidth: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ outlineWidth: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ outlineWidth: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ outlineWidth: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ outlineWidth: Length.fr(...nums) }),
    THIN: { outlineWidth: "thin" },
    MEDIUM: { outlineWidth: "medium" },
    THICK: { outlineWidth: "thick" }
};
const _Overflow = {
    set: (...params: Param[]): Sheet => ({ overflow: buildProperty(params) }),
    VISIBLE: { overflow: "visible" },
    HIDDEN: { overflow: "hidden" },
    CLIP: { overflow: "clip" },
    SCROLL: { overflow: "scroll" },
    AUTO: { overflow: "auto" }
};
const _OverflowAnchor = {
    set: (...params: Param[]): Sheet => ({ overflowAnchor: buildProperty(params) }),
    AUTO: { overflowAnchor: "auto" },
    NONE: { overflowAnchor: "none" }
};
const _OverflowBlock = {
    set: (...params: Param[]): Sheet => ({ overflowBlock: buildProperty(params) }),
    VISIBLE: { overflowBlock: "visible" },
    HIDDEN: { overflowBlock: "hidden" },
    CLIP: { overflowBlock: "clip" },
    SCROLL: { overflowBlock: "scroll" },
    AUTO: { overflowBlock: "auto" }
};
const _OverflowClipBox = {
    set: (...params: Param[]): Sheet => ({ overflowClipBox: buildProperty(params) }),
    PADDING_BOX: { overflowClipBox: "padding-box" },
    CONTENT_BOX: { overflowClipBox: "content-box" }
};
const _OverflowInline = {
    set: (...params: Param[]): Sheet => ({ overflowInline: buildProperty(params) }),
    VISIBLE: { overflowInline: "visible" },
    HIDDEN: { overflowInline: "hidden" },
    CLIP: { overflowInline: "clip" },
    SCROLL: { overflowInline: "scroll" },
    AUTO: { overflowInline: "auto" }
};
const _OverflowWrap = {
    set: (...params: Param[]): Sheet => ({ overflowWrap: buildProperty(params) }),
    NORMAL: { overflowWrap: "normal" },
    BREAK_WORD: { overflowWrap: "break-word" }
};
const _OverflowX = {
    set: (...params: Param[]): Sheet => ({ overflowX: buildProperty(params) }),
    VISIBLE: { overflowX: "visible" },
    HIDDEN: { overflowX: "hidden" },
    CLIP: { overflowX: "clip" },
    SCROLL: { overflowX: "scroll" },
    AUTO: { overflowX: "auto" }
};
const _OverflowY = {
    set: (...params: Param[]): Sheet => ({ overflowY: buildProperty(params) }),
    VISIBLE: { overflowY: "visible" },
    HIDDEN: { overflowY: "hidden" },
    CLIP: { overflowY: "clip" },
    SCROLL: { overflowY: "scroll" },
    AUTO: { overflowY: "auto" }
};
const _OverscrollBehavior = {
    set: (...params: Param[]): Sheet => ({ overscrollBehavior: buildProperty(params) }),
    CONTAIN: { overscrollBehavior: "contain" },
    NONE: { overscrollBehavior: "none" },
    AUTO: { overscrollBehavior: "auto" }
};
const _OverscrollBehaviorX = {
    set: (...params: Param[]): Sheet => ({ overscrollBehaviorX: buildProperty(params) }),
    CONTAIN: { overscrollBehaviorX: "contain" },
    NONE: { overscrollBehaviorX: "none" },
    AUTO: { overscrollBehaviorX: "auto" }
};
const _OverscrollBehaviorY = {
    set: (...params: Param[]): Sheet => ({ overscrollBehaviorY: buildProperty(params) }),
    CONTAIN: { overscrollBehaviorY: "contain" },
    NONE: { overscrollBehaviorY: "none" },
    AUTO: { overscrollBehaviorY: "auto" }
};
const _Padding = {
    set: (...params: Param[]): Sheet => ({ padding: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ padding: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ padding: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ padding: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ padding: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ padding: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ padding: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ padding: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ padding: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ padding: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ padding: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ padding: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ padding: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ padding: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ padding: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ padding: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ padding: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ padding: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ padding: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ padding: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ padding: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ padding: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ padding: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ padding: Length.X(...nums) })
};
const _PaddingBlockEnd = {
    set: (...params: Param[]): Sheet => ({ paddingBlockEnd: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ paddingBlockEnd: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ paddingBlockEnd: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ paddingBlockEnd: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ paddingBlockEnd: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ paddingBlockEnd: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ paddingBlockEnd: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ paddingBlockEnd: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ paddingBlockEnd: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ paddingBlockEnd: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ paddingBlockEnd: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ paddingBlockEnd: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ paddingBlockEnd: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ paddingBlockEnd: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ paddingBlockEnd: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ paddingBlockEnd: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ paddingBlockEnd: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ paddingBlockEnd: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ paddingBlockEnd: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ paddingBlockEnd: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ paddingBlockEnd: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ paddingBlockEnd: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ paddingBlockEnd: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ paddingBlockEnd: Length.X(...nums) })
};
const _PaddingBlockStart = {
    set: (...params: Param[]): Sheet => ({ paddingBlockStart: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ paddingBlockStart: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ paddingBlockStart: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ paddingBlockStart: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ paddingBlockStart: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ paddingBlockStart: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ paddingBlockStart: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ paddingBlockStart: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ paddingBlockStart: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ paddingBlockStart: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ paddingBlockStart: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ paddingBlockStart: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ paddingBlockStart: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ paddingBlockStart: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ paddingBlockStart: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ paddingBlockStart: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ paddingBlockStart: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ paddingBlockStart: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ paddingBlockStart: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ paddingBlockStart: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ paddingBlockStart: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ paddingBlockStart: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ paddingBlockStart: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ paddingBlockStart: Length.X(...nums) })
};
const _PaddingBottom = {
    set: (...params: Param[]): Sheet => ({ paddingBottom: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ paddingBottom: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ paddingBottom: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ paddingBottom: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ paddingBottom: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ paddingBottom: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ paddingBottom: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ paddingBottom: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ paddingBottom: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ paddingBottom: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ paddingBottom: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ paddingBottom: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ paddingBottom: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ paddingBottom: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ paddingBottom: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ paddingBottom: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ paddingBottom: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ paddingBottom: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ paddingBottom: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ paddingBottom: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ paddingBottom: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ paddingBottom: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ paddingBottom: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ paddingBottom: Length.X(...nums) })
};
const _PaddingInlineEnd = {
    set: (...params: Param[]): Sheet => ({ paddingInlineEnd: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ paddingInlineEnd: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ paddingInlineEnd: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ paddingInlineEnd: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ paddingInlineEnd: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ paddingInlineEnd: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ paddingInlineEnd: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ paddingInlineEnd: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ paddingInlineEnd: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ paddingInlineEnd: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ paddingInlineEnd: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ paddingInlineEnd: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ paddingInlineEnd: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ paddingInlineEnd: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ paddingInlineEnd: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ paddingInlineEnd: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ paddingInlineEnd: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ paddingInlineEnd: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ paddingInlineEnd: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ paddingInlineEnd: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ paddingInlineEnd: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ paddingInlineEnd: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ paddingInlineEnd: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ paddingInlineEnd: Length.X(...nums) })
};
const _PaddingInlineStart = {
    set: (...params: Param[]): Sheet => ({ paddingInlineStart: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ paddingInlineStart: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ paddingInlineStart: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ paddingInlineStart: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ paddingInlineStart: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ paddingInlineStart: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ paddingInlineStart: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ paddingInlineStart: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ paddingInlineStart: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ paddingInlineStart: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ paddingInlineStart: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ paddingInlineStart: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ paddingInlineStart: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ paddingInlineStart: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ paddingInlineStart: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ paddingInlineStart: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ paddingInlineStart: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ paddingInlineStart: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ paddingInlineStart: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ paddingInlineStart: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ paddingInlineStart: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ paddingInlineStart: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ paddingInlineStart: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ paddingInlineStart: Length.X(...nums) })
};
const _PaddingLeft = {
    set: (...params: Param[]): Sheet => ({ paddingLeft: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ paddingLeft: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ paddingLeft: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ paddingLeft: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ paddingLeft: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ paddingLeft: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ paddingLeft: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ paddingLeft: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ paddingLeft: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ paddingLeft: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ paddingLeft: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ paddingLeft: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ paddingLeft: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ paddingLeft: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ paddingLeft: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ paddingLeft: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ paddingLeft: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ paddingLeft: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ paddingLeft: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ paddingLeft: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ paddingLeft: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ paddingLeft: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ paddingLeft: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ paddingLeft: Length.X(...nums) })
};
const _PaddingRight = {
    set: (...params: Param[]): Sheet => ({ paddingRight: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ paddingRight: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ paddingRight: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ paddingRight: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ paddingRight: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ paddingRight: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ paddingRight: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ paddingRight: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ paddingRight: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ paddingRight: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ paddingRight: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ paddingRight: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ paddingRight: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ paddingRight: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ paddingRight: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ paddingRight: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ paddingRight: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ paddingRight: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ paddingRight: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ paddingRight: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ paddingRight: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ paddingRight: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ paddingRight: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ paddingRight: Length.X(...nums) })
};
const _PaddingTop = {
    set: (...params: Param[]): Sheet => ({ paddingTop: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ paddingTop: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ paddingTop: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ paddingTop: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ paddingTop: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ paddingTop: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ paddingTop: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ paddingTop: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ paddingTop: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ paddingTop: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ paddingTop: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ paddingTop: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ paddingTop: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ paddingTop: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ paddingTop: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ paddingTop: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ paddingTop: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ paddingTop: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ paddingTop: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ paddingTop: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ paddingTop: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ paddingTop: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ paddingTop: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ paddingTop: Length.X(...nums) })
};
const _PageBreakAfter = {
    set: (...params: Param[]): Sheet => ({ pageBreakAfter: buildProperty(params) }),
    AUTO: { pageBreakAfter: "auto" },
    ALWAYS: { pageBreakAfter: "always" },
    AVOID: { pageBreakAfter: "avoid" },
    LEFT: { pageBreakAfter: "left" },
    RIGHT: { pageBreakAfter: "right" },
    RECTO: { pageBreakAfter: "recto" },
    VERSO: { pageBreakAfter: "verso" }
};
const _PageBreakBefore = {
    set: (...params: Param[]): Sheet => ({ pageBreakBefore: buildProperty(params) }),
    AUTO: { pageBreakBefore: "auto" },
    ALWAYS: { pageBreakBefore: "always" },
    AVOID: { pageBreakBefore: "avoid" },
    LEFT: { pageBreakBefore: "left" },
    RIGHT: { pageBreakBefore: "right" },
    RECTO: { pageBreakBefore: "recto" },
    VERSO: { pageBreakBefore: "verso" }
};
const _PageBreakInside = {
    set: (...params: Param[]): Sheet => ({ pageBreakInside: buildProperty(params) }),
    AUTO: { pageBreakInside: "auto" },
    AVOID: { pageBreakInside: "avoid" }
};
const _PaintOrder = {
    set: (...params: Param[]): Sheet => ({ paintOrder: buildProperty(params) }),
    NORMAL: { paintOrder: "normal" },
    FILL: { paintOrder: "fill" },
    STROKE: { paintOrder: "stroke" },
    MARKERS: { paintOrder: "markers" }
};
const _Perspective = {
    set: (...params: Param[]): Sheet => ({ perspective: buildProperty(params) }),
    NONE: { perspective: "none" },
    cap: (...nums: number[]): Sheet => ({ perspective: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ perspective: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ perspective: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ perspective: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ perspective: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ perspective: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ perspective: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ perspective: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ perspective: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ perspective: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ perspective: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ perspective: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ perspective: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ perspective: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ perspective: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ perspective: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ perspective: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ perspective: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ perspective: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ perspective: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ perspective: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ perspective: Length.fr(...nums) })
};
const _PerspectiveOrigin = {
    set: (...params: Param[]): Sheet => ({ perspectiveOrigin: buildProperty(params) }),
    LEFT: { perspectiveOrigin: "left" },
    CENTER: { perspectiveOrigin: "center" },
    RIGHT: { perspectiveOrigin: "right" },
    TOP: { perspectiveOrigin: "top" },
    BOTTOM: { perspectiveOrigin: "bottom" },
    cap: (...nums: number[]): Sheet => ({ perspectiveOrigin: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ perspectiveOrigin: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ perspectiveOrigin: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ perspectiveOrigin: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ perspectiveOrigin: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ perspectiveOrigin: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ perspectiveOrigin: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ perspectiveOrigin: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ perspectiveOrigin: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ perspectiveOrigin: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ perspectiveOrigin: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ perspectiveOrigin: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ perspectiveOrigin: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ perspectiveOrigin: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ perspectiveOrigin: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ perspectiveOrigin: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ perspectiveOrigin: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ perspectiveOrigin: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ perspectiveOrigin: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ perspectiveOrigin: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ perspectiveOrigin: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ perspectiveOrigin: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ perspectiveOrigin: Length.X(...nums) })
};
const _PlaceContent = {
    set: (...params: Param[]): Sheet => ({ placeContent: buildProperty(params) }),
    NORMAL: { placeContent: "normal" },
    FIRST: { placeContent: "first" },
    LAST: { placeContent: "last" },
    BASELINE: { placeContent: "baseline" },
    SPACE_BETWEEN: { placeContent: "space-between" },
    SPACE_AROUND: { placeContent: "space-around" },
    SPACE_EVENLY: { placeContent: "space-evenly" },
    STRETCH: { placeContent: "stretch" },
    UNSAFE: { placeContent: "unsafe" },
    SAFE: { placeContent: "safe" },
    CENTER: { placeContent: "center" },
    START: { placeContent: "start" },
    END: { placeContent: "end" },
    FLEX_START: { placeContent: "flex-start" },
    FLEX_END: { placeContent: "flex-end" },
    LEFT: { placeContent: "left" },
    RIGHT: { placeContent: "right" }
};
const _PlaceItems = {
    set: (...params: Param[]): Sheet => ({ placeItems: buildProperty(params) }),
    NORMAL: { placeItems: "normal" },
    STRETCH: { placeItems: "stretch" },
    FIRST: { placeItems: "first" },
    LAST: { placeItems: "last" },
    BASELINE: { placeItems: "baseline" },
    UNSAFE: { placeItems: "unsafe" },
    SAFE: { placeItems: "safe" },
    CENTER: { placeItems: "center" },
    START: { placeItems: "start" },
    END: { placeItems: "end" },
    SELF_START: { placeItems: "self-start" },
    SELF_END: { placeItems: "self-end" },
    FLEX_START: { placeItems: "flex-start" },
    FLEX_END: { placeItems: "flex-end" },
    LEFT: { placeItems: "left" },
    RIGHT: { placeItems: "right" },
    LEGACY: { placeItems: "legacy" }
};
const _PointerEvents = {
    set: (...params: Param[]): Sheet => ({ pointerEvents: buildProperty(params) }),
    AUTO: { pointerEvents: "auto" },
    NONE: { pointerEvents: "none" },
    VISIBLEPAINTED: { pointerEvents: "visiblePainted" },
    VISIBLEFILL: { pointerEvents: "visibleFill" },
    VISIBLESTROKE: { pointerEvents: "visibleStroke" },
    VISIBLE: { pointerEvents: "visible" },
    PAINTED: { pointerEvents: "painted" },
    FILL: { pointerEvents: "fill" },
    STROKE: { pointerEvents: "stroke" },
    ALL: { pointerEvents: "all" },
    INHERIT: { pointerEvents: "inherit" }
};
const _Position = {
    set: (...params: Param[]): Sheet => ({ position: buildProperty(params) }),
    STATIC: { position: "static" },
    RELATIVE: { position: "relative" },
    ABSOLUTE: { position: "absolute" },
    STICKY: { position: "sticky" },
    FIXED: { position: "fixed" }
};
const _Quotes = { set: (...params: Param[]): Sheet => ({ quotes: buildProperty(params) }), NONE: { quotes: "none" } };
const _Resize = {
    set: (...params: Param[]): Sheet => ({ resize: buildProperty(params) }),
    NONE: { resize: "none" },
    BOTH: { resize: "both" },
    HORIZONTAL: { resize: "horizontal" },
    VERTICAL: { resize: "vertical" },
    BLOCK: { resize: "block" },
    INLINE: { resize: "inline" }
};
const _Right = {
    set: (...params: Param[]): Sheet => ({ right: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ right: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ right: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ right: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ right: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ right: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ right: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ right: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ right: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ right: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ right: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ right: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ right: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ right: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ right: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ right: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ right: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ right: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ right: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ right: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ right: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ right: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ right: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ right: Length.X(...nums) }),
    AUTO: { right: "auto" }
};
const _Rotate = {
    set: (...params: Param[]): Sheet => ({ rotate: buildProperty(params) }),
    NONE: { rotate: "none" },
    X: { rotate: "x" },
    Y: { rotate: "y" },
    Z: { rotate: "z" },
    deg: (...nums: number[]): Sheet => ({ rotate: Angle.deg(...nums) }),
    rad: (...nums: number[]): Sheet => ({ rotate: Angle.rad(...nums) }),
    grad: (...nums: number[]): Sheet => ({ rotate: Angle.grad(...nums) }),
    turn: (...nums: number[]): Sheet => ({ rotate: Angle.turn(...nums) })
};
const _RowGap = {
    set: (...params: Param[]): Sheet => ({ rowGap: buildProperty(params) }),
    NORMAL: { rowGap: "normal" },
    cap: (...nums: number[]): Sheet => ({ rowGap: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ rowGap: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ rowGap: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ rowGap: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ rowGap: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ rowGap: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ rowGap: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ rowGap: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ rowGap: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ rowGap: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ rowGap: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ rowGap: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ rowGap: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ rowGap: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ rowGap: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ rowGap: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ rowGap: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ rowGap: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ rowGap: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ rowGap: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ rowGap: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ rowGap: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ rowGap: Length.X(...nums) })
};
const _RubyAlign = {
    set: (...params: Param[]): Sheet => ({ rubyAlign: buildProperty(params) }),
    START: { rubyAlign: "start" },
    CENTER: { rubyAlign: "center" },
    SPACE_BETWEEN: { rubyAlign: "space-between" },
    SPACE_AROUND: { rubyAlign: "space-around" }
};
const _RubyMerge = {
    set: (...params: Param[]): Sheet => ({ rubyMerge: buildProperty(params) }),
    SEPARATE: { rubyMerge: "separate" },
    COLLAPSE: { rubyMerge: "collapse" },
    AUTO: { rubyMerge: "auto" }
};
const _RubyPosition = {
    set: (...params: Param[]): Sheet => ({ rubyPosition: buildProperty(params) }),
    OVER: { rubyPosition: "over" },
    UNDER: { rubyPosition: "under" },
    INTER_CHARACTER: { rubyPosition: "inter-character" }
};
const _Scale = { set: (...params: Param[]): Sheet => ({ scale: buildProperty(params) }), NONE: { scale: "none" } };
const _ScrollBehavior = {
    set: (...params: Param[]): Sheet => ({ scrollBehavior: buildProperty(params) }),
    AUTO: { scrollBehavior: "auto" },
    SMOOTH: { scrollBehavior: "smooth" }
};
const _ScrollSnapCoordinate = {
    set: (...params: Param[]): Sheet => ({ scrollSnapCoordinate: buildProperty(params) }),
    NONE: { scrollSnapCoordinate: "none" },
    LEFT: { scrollSnapCoordinate: "left" },
    CENTER: { scrollSnapCoordinate: "center" },
    RIGHT: { scrollSnapCoordinate: "right" },
    TOP: { scrollSnapCoordinate: "top" },
    BOTTOM: { scrollSnapCoordinate: "bottom" },
    cap: (...nums: number[]): Sheet => ({ scrollSnapCoordinate: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ scrollSnapCoordinate: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ scrollSnapCoordinate: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ scrollSnapCoordinate: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ scrollSnapCoordinate: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ scrollSnapCoordinate: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ scrollSnapCoordinate: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ scrollSnapCoordinate: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ scrollSnapCoordinate: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ scrollSnapCoordinate: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ scrollSnapCoordinate: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ scrollSnapCoordinate: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ scrollSnapCoordinate: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ scrollSnapCoordinate: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ scrollSnapCoordinate: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ scrollSnapCoordinate: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ scrollSnapCoordinate: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ scrollSnapCoordinate: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ scrollSnapCoordinate: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ scrollSnapCoordinate: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ scrollSnapCoordinate: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ scrollSnapCoordinate: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ scrollSnapCoordinate: Length.X(...nums) })
};
const _ScrollSnapDestination = {
    set: (...params: Param[]): Sheet => ({ scrollSnapDestination: buildProperty(params) }),
    LEFT: { scrollSnapDestination: "left" },
    CENTER: { scrollSnapDestination: "center" },
    RIGHT: { scrollSnapDestination: "right" },
    TOP: { scrollSnapDestination: "top" },
    BOTTOM: { scrollSnapDestination: "bottom" },
    cap: (...nums: number[]): Sheet => ({ scrollSnapDestination: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ scrollSnapDestination: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ scrollSnapDestination: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ scrollSnapDestination: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ scrollSnapDestination: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ scrollSnapDestination: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ scrollSnapDestination: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ scrollSnapDestination: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ scrollSnapDestination: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ scrollSnapDestination: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ scrollSnapDestination: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ scrollSnapDestination: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ scrollSnapDestination: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ scrollSnapDestination: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ scrollSnapDestination: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ scrollSnapDestination: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ scrollSnapDestination: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ scrollSnapDestination: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ scrollSnapDestination: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ scrollSnapDestination: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ scrollSnapDestination: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ scrollSnapDestination: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ scrollSnapDestination: Length.X(...nums) })
};
const _ScrollSnapPointsX = {
    set: (...params: Param[]): Sheet => ({ scrollSnapPointsX: buildProperty(params) }),
    NONE: { scrollSnapPointsX: "none" },
    repeat: (...params: Param[]): Sheet => ({ scrollSnapPointsX: Method.repeat(...params) })
};
const _ScrollSnapPointsY = {
    set: (...params: Param[]): Sheet => ({ scrollSnapPointsY: buildProperty(params) }),
    NONE: { scrollSnapPointsY: "none" },
    repeat: (...params: Param[]): Sheet => ({ scrollSnapPointsY: Method.repeat(...params) })
};
const _ScrollSnapType = {
    set: (...params: Param[]): Sheet => ({ scrollSnapType: buildProperty(params) }),
    NONE: { scrollSnapType: "none" },
    MANDATORY: { scrollSnapType: "mandatory" },
    PROXIMITY: { scrollSnapType: "proximity" }
};
const _ScrollSnapTypeX = {
    set: (...params: Param[]): Sheet => ({ scrollSnapTypeX: buildProperty(params) }),
    NONE: { scrollSnapTypeX: "none" },
    MANDATORY: { scrollSnapTypeX: "mandatory" },
    PROXIMITY: { scrollSnapTypeX: "proximity" }
};
const _ScrollSnapTypeY = {
    set: (...params: Param[]): Sheet => ({ scrollSnapTypeY: buildProperty(params) }),
    NONE: { scrollSnapTypeY: "none" },
    MANDATORY: { scrollSnapTypeY: "mandatory" },
    PROXIMITY: { scrollSnapTypeY: "proximity" }
};
const _ShapeImageThreshold = { set: (...params: Param[]): Sheet => ({ shapeImageThreshold: buildProperty(params) }) };
const _ShapeMargin = {
    set: (...params: Param[]): Sheet => ({ shapeMargin: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ shapeMargin: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ shapeMargin: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ shapeMargin: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ shapeMargin: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ shapeMargin: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ shapeMargin: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ shapeMargin: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ shapeMargin: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ shapeMargin: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ shapeMargin: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ shapeMargin: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ shapeMargin: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ shapeMargin: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ shapeMargin: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ shapeMargin: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ shapeMargin: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ shapeMargin: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ shapeMargin: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ shapeMargin: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ shapeMargin: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ shapeMargin: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ shapeMargin: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ shapeMargin: Length.X(...nums) })
};
const _ShapeOutside = {
    set: (...params: Param[]): Sheet => ({ shapeOutside: buildProperty(params) }),
    NONE: { shapeOutside: "none" },
    BORDER_BOX: { shapeOutside: "border-box" },
    PADDING_BOX: { shapeOutside: "padding-box" },
    CONTENT_BOX: { shapeOutside: "content-box" },
    MARGIN_BOX: { shapeOutside: "margin-box" },
    inset: (...params: Param[]): Sheet => ({ shapeOutside: Method.inset(...params) }),
    circle: (...params: Param[]): Sheet => ({ shapeOutside: Method.circle(...params) }),
    ellipse: (...params: Param[]): Sheet => ({ shapeOutside: Method.ellipse(...params) }),
    polygon: (...params: Param[]): Sheet => ({ shapeOutside: Method.polygon(...params) }),
    image: (...params: Param[]): Sheet => ({ shapeOutside: Method.image(...params) }),
    imageSet: (...params: Param[]): Sheet => ({ shapeOutside: Method.imageSet(...params) }),
    element: (...params: Param[]): Sheet => ({ shapeOutside: Method.element(...params) }),
    crossFade: (...params: Param[]): Sheet => ({ shapeOutside: Method.crossFade(...params) }),
    linearGradient: (...params: Param[]): Sheet => ({ shapeOutside: Method.linearGradient(...params) }),
    repeatingLinearGradient: (...params: Param[]): Sheet => ({
        shapeOutside: Method.repeatingLinearGradient(...params)
    }),
    radialGradient: (...params: Param[]): Sheet => ({ shapeOutside: Method.radialGradient(...params) }),
    repeatingRadialGradient: (...params: Param[]): Sheet => ({
        shapeOutside: Method.repeatingRadialGradient(...params)
    })
};
const _TabSize = {
    set: (...params: Param[]): Sheet => ({ tabSize: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ tabSize: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ tabSize: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ tabSize: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ tabSize: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ tabSize: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ tabSize: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ tabSize: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ tabSize: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ tabSize: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ tabSize: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ tabSize: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ tabSize: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ tabSize: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ tabSize: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ tabSize: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ tabSize: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ tabSize: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ tabSize: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ tabSize: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ tabSize: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ tabSize: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ tabSize: Length.fr(...nums) })
};
const _TableLayout = {
    set: (...params: Param[]): Sheet => ({ tableLayout: buildProperty(params) }),
    AUTO: { tableLayout: "auto" },
    FIXED: { tableLayout: "fixed" }
};
const _TextAlign = {
    set: (...params: Param[]): Sheet => ({ textAlign: buildProperty(params) }),
    START: { textAlign: "start" },
    END: { textAlign: "end" },
    LEFT: { textAlign: "left" },
    RIGHT: { textAlign: "right" },
    CENTER: { textAlign: "center" },
    JUSTIFY: { textAlign: "justify" },
    MATCH_PARENT: { textAlign: "match-parent" }
};
const _TextAlignLast = {
    set: (...params: Param[]): Sheet => ({ textAlignLast: buildProperty(params) }),
    AUTO: { textAlignLast: "auto" },
    START: { textAlignLast: "start" },
    END: { textAlignLast: "end" },
    LEFT: { textAlignLast: "left" },
    RIGHT: { textAlignLast: "right" },
    CENTER: { textAlignLast: "center" },
    JUSTIFY: { textAlignLast: "justify" }
};
const _TextCombineUpright = {
    set: (...params: Param[]): Sheet => ({ textCombineUpright: buildProperty(params) }),
    NONE: { textCombineUpright: "none" },
    ALL: { textCombineUpright: "all" },
    DIGITS: { textCombineUpright: "digits" }
};
const _TextDecoration = {
    set: (...params: Param[]): Sheet => ({ textDecoration: buildProperty(params) }),
    NONE: { textDecoration: "none" },
    UNDERLINE: { textDecoration: "underline" },
    OVERLINE: { textDecoration: "overline" },
    LINE_THROUGH: { textDecoration: "line-through" },
    BLINK: { textDecoration: "blink" },
    SOLID: { textDecoration: "solid" },
    DOUBLE: { textDecoration: "double" },
    DOTTED: { textDecoration: "dotted" },
    DASHED: { textDecoration: "dashed" },
    WAVY: { textDecoration: "wavy" },
    rgb: (...params: Param[]): Sheet => ({ textDecoration: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ textDecoration: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ textDecoration: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ textDecoration: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ textDecoration: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ textDecoration: Method.hsla(...params) }),
    BLACK: { textDecoration: "black" },
    SILVER: { textDecoration: "silver" },
    GRAY: { textDecoration: "gray" },
    WHITE: { textDecoration: "white" },
    MAROON: { textDecoration: "maroon" },
    RED: { textDecoration: "red" },
    PURPLE: { textDecoration: "purple" },
    FUCHSIA: { textDecoration: "fuchsia" },
    GREEN: { textDecoration: "green" },
    LIME: { textDecoration: "lime" },
    OLIVE: { textDecoration: "olive" },
    YELLOW: { textDecoration: "yellow" },
    NAVY: { textDecoration: "navy" },
    BLUE: { textDecoration: "blue" },
    TEAL: { textDecoration: "teal" },
    AQUA: { textDecoration: "aqua" },
    CURRENTCOLOR: { textDecoration: "currentcolor" },
    ACTIVEBORDER: { textDecoration: "ActiveBorder" },
    ACTIVECAPTION: { textDecoration: "ActiveCaption" },
    APPWORKSPACE: { textDecoration: "AppWorkspace" },
    BACKGROUND: { textDecoration: "Background" },
    BUTTONFACE: { textDecoration: "ButtonFace" },
    BUTTONHIGHLIGHT: { textDecoration: "ButtonHighlight" },
    BUTTONSHADOW: { textDecoration: "ButtonShadow" },
    BUTTONTEXT: { textDecoration: "ButtonText" },
    CAPTIONTEXT: { textDecoration: "CaptionText" },
    GRAYTEXT: { textDecoration: "GrayText" },
    HIGHLIGHT: { textDecoration: "Highlight" },
    HIGHLIGHTTEXT: { textDecoration: "HighlightText" },
    INACTIVEBORDER: { textDecoration: "InactiveBorder" },
    INACTIVECAPTION: { textDecoration: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { textDecoration: "InactiveCaptionText" },
    INFOBACKGROUND: { textDecoration: "InfoBackground" },
    INFOTEXT: { textDecoration: "InfoText" },
    MENU: { textDecoration: "Menu" },
    MENUTEXT: { textDecoration: "MenuText" },
    SCROLLBAR: { textDecoration: "Scrollbar" },
    THREEDDARKSHADOW: { textDecoration: "ThreeDDarkShadow" },
    THREEDFACE: { textDecoration: "ThreeDFace" },
    THREEDHIGHLIGHT: { textDecoration: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { textDecoration: "ThreeDLightShadow" },
    THREEDSHADOW: { textDecoration: "ThreeDShadow" },
    WINDOW: { textDecoration: "Window" },
    WINDOWFRAME: { textDecoration: "WindowFrame" },
    WINDOWTEXT: { textDecoration: "WindowText" }
};
const _TextDecorationColor = {
    set: (...params: Param[]): Sheet => ({ textDecorationColor: buildProperty(params) }),
    rgb: (...params: Param[]): Sheet => ({ textDecorationColor: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ textDecorationColor: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ textDecorationColor: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ textDecorationColor: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ textDecorationColor: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ textDecorationColor: Method.hsla(...params) }),
    BLACK: { textDecorationColor: "black" },
    SILVER: { textDecorationColor: "silver" },
    GRAY: { textDecorationColor: "gray" },
    WHITE: { textDecorationColor: "white" },
    MAROON: { textDecorationColor: "maroon" },
    RED: { textDecorationColor: "red" },
    PURPLE: { textDecorationColor: "purple" },
    FUCHSIA: { textDecorationColor: "fuchsia" },
    GREEN: { textDecorationColor: "green" },
    LIME: { textDecorationColor: "lime" },
    OLIVE: { textDecorationColor: "olive" },
    YELLOW: { textDecorationColor: "yellow" },
    NAVY: { textDecorationColor: "navy" },
    BLUE: { textDecorationColor: "blue" },
    TEAL: { textDecorationColor: "teal" },
    AQUA: { textDecorationColor: "aqua" },
    CURRENTCOLOR: { textDecorationColor: "currentcolor" },
    ACTIVEBORDER: { textDecorationColor: "ActiveBorder" },
    ACTIVECAPTION: { textDecorationColor: "ActiveCaption" },
    APPWORKSPACE: { textDecorationColor: "AppWorkspace" },
    BACKGROUND: { textDecorationColor: "Background" },
    BUTTONFACE: { textDecorationColor: "ButtonFace" },
    BUTTONHIGHLIGHT: { textDecorationColor: "ButtonHighlight" },
    BUTTONSHADOW: { textDecorationColor: "ButtonShadow" },
    BUTTONTEXT: { textDecorationColor: "ButtonText" },
    CAPTIONTEXT: { textDecorationColor: "CaptionText" },
    GRAYTEXT: { textDecorationColor: "GrayText" },
    HIGHLIGHT: { textDecorationColor: "Highlight" },
    HIGHLIGHTTEXT: { textDecorationColor: "HighlightText" },
    INACTIVEBORDER: { textDecorationColor: "InactiveBorder" },
    INACTIVECAPTION: { textDecorationColor: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { textDecorationColor: "InactiveCaptionText" },
    INFOBACKGROUND: { textDecorationColor: "InfoBackground" },
    INFOTEXT: { textDecorationColor: "InfoText" },
    MENU: { textDecorationColor: "Menu" },
    MENUTEXT: { textDecorationColor: "MenuText" },
    SCROLLBAR: { textDecorationColor: "Scrollbar" },
    THREEDDARKSHADOW: { textDecorationColor: "ThreeDDarkShadow" },
    THREEDFACE: { textDecorationColor: "ThreeDFace" },
    THREEDHIGHLIGHT: { textDecorationColor: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { textDecorationColor: "ThreeDLightShadow" },
    THREEDSHADOW: { textDecorationColor: "ThreeDShadow" },
    WINDOW: { textDecorationColor: "Window" },
    WINDOWFRAME: { textDecorationColor: "WindowFrame" },
    WINDOWTEXT: { textDecorationColor: "WindowText" }
};
const _TextDecorationLine = {
    set: (...params: Param[]): Sheet => ({ textDecorationLine: buildProperty(params) }),
    NONE: { textDecorationLine: "none" },
    UNDERLINE: { textDecorationLine: "underline" },
    OVERLINE: { textDecorationLine: "overline" },
    LINE_THROUGH: { textDecorationLine: "line-through" },
    BLINK: { textDecorationLine: "blink" }
};
const _TextDecorationSkip = {
    set: (...params: Param[]): Sheet => ({ textDecorationSkip: buildProperty(params) }),
    NONE: { textDecorationSkip: "none" },
    OBJECTS: { textDecorationSkip: "objects" },
    SPACES: { textDecorationSkip: "spaces" },
    LEADING_SPACES: { textDecorationSkip: "leading-spaces" },
    TRAILING_SPACES: { textDecorationSkip: "trailing-spaces" },
    EDGES: { textDecorationSkip: "edges" },
    BOX_DECORATION: { textDecorationSkip: "box-decoration" }
};
const _TextDecorationSkipInk = {
    set: (...params: Param[]): Sheet => ({ textDecorationSkipInk: buildProperty(params) }),
    AUTO: { textDecorationSkipInk: "auto" },
    NONE: { textDecorationSkipInk: "none" }
};
const _TextDecorationStyle = {
    set: (...params: Param[]): Sheet => ({ textDecorationStyle: buildProperty(params) }),
    SOLID: { textDecorationStyle: "solid" },
    DOUBLE: { textDecorationStyle: "double" },
    DOTTED: { textDecorationStyle: "dotted" },
    DASHED: { textDecorationStyle: "dashed" },
    WAVY: { textDecorationStyle: "wavy" }
};
const _TextEmphasis = {
    set: (...params: Param[]): Sheet => ({ textEmphasis: buildProperty(params) }),
    NONE: { textEmphasis: "none" },
    FILLED: { textEmphasis: "filled" },
    OPEN: { textEmphasis: "open" },
    DOT: { textEmphasis: "dot" },
    CIRCLE: { textEmphasis: "circle" },
    DOUBLE_CIRCLE: { textEmphasis: "double-circle" },
    TRIANGLE: { textEmphasis: "triangle" },
    SESAME: { textEmphasis: "sesame" },
    rgb: (...params: Param[]): Sheet => ({ textEmphasis: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ textEmphasis: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ textEmphasis: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ textEmphasis: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ textEmphasis: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ textEmphasis: Method.hsla(...params) }),
    BLACK: { textEmphasis: "black" },
    SILVER: { textEmphasis: "silver" },
    GRAY: { textEmphasis: "gray" },
    WHITE: { textEmphasis: "white" },
    MAROON: { textEmphasis: "maroon" },
    RED: { textEmphasis: "red" },
    PURPLE: { textEmphasis: "purple" },
    FUCHSIA: { textEmphasis: "fuchsia" },
    GREEN: { textEmphasis: "green" },
    LIME: { textEmphasis: "lime" },
    OLIVE: { textEmphasis: "olive" },
    YELLOW: { textEmphasis: "yellow" },
    NAVY: { textEmphasis: "navy" },
    BLUE: { textEmphasis: "blue" },
    TEAL: { textEmphasis: "teal" },
    AQUA: { textEmphasis: "aqua" },
    CURRENTCOLOR: { textEmphasis: "currentcolor" },
    ACTIVEBORDER: { textEmphasis: "ActiveBorder" },
    ACTIVECAPTION: { textEmphasis: "ActiveCaption" },
    APPWORKSPACE: { textEmphasis: "AppWorkspace" },
    BACKGROUND: { textEmphasis: "Background" },
    BUTTONFACE: { textEmphasis: "ButtonFace" },
    BUTTONHIGHLIGHT: { textEmphasis: "ButtonHighlight" },
    BUTTONSHADOW: { textEmphasis: "ButtonShadow" },
    BUTTONTEXT: { textEmphasis: "ButtonText" },
    CAPTIONTEXT: { textEmphasis: "CaptionText" },
    GRAYTEXT: { textEmphasis: "GrayText" },
    HIGHLIGHT: { textEmphasis: "Highlight" },
    HIGHLIGHTTEXT: { textEmphasis: "HighlightText" },
    INACTIVEBORDER: { textEmphasis: "InactiveBorder" },
    INACTIVECAPTION: { textEmphasis: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { textEmphasis: "InactiveCaptionText" },
    INFOBACKGROUND: { textEmphasis: "InfoBackground" },
    INFOTEXT: { textEmphasis: "InfoText" },
    MENU: { textEmphasis: "Menu" },
    MENUTEXT: { textEmphasis: "MenuText" },
    SCROLLBAR: { textEmphasis: "Scrollbar" },
    THREEDDARKSHADOW: { textEmphasis: "ThreeDDarkShadow" },
    THREEDFACE: { textEmphasis: "ThreeDFace" },
    THREEDHIGHLIGHT: { textEmphasis: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { textEmphasis: "ThreeDLightShadow" },
    THREEDSHADOW: { textEmphasis: "ThreeDShadow" },
    WINDOW: { textEmphasis: "Window" },
    WINDOWFRAME: { textEmphasis: "WindowFrame" },
    WINDOWTEXT: { textEmphasis: "WindowText" }
};
const _TextEmphasisColor = {
    set: (...params: Param[]): Sheet => ({ textEmphasisColor: buildProperty(params) }),
    rgb: (...params: Param[]): Sheet => ({ textEmphasisColor: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ textEmphasisColor: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ textEmphasisColor: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ textEmphasisColor: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ textEmphasisColor: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ textEmphasisColor: Method.hsla(...params) }),
    BLACK: { textEmphasisColor: "black" },
    SILVER: { textEmphasisColor: "silver" },
    GRAY: { textEmphasisColor: "gray" },
    WHITE: { textEmphasisColor: "white" },
    MAROON: { textEmphasisColor: "maroon" },
    RED: { textEmphasisColor: "red" },
    PURPLE: { textEmphasisColor: "purple" },
    FUCHSIA: { textEmphasisColor: "fuchsia" },
    GREEN: { textEmphasisColor: "green" },
    LIME: { textEmphasisColor: "lime" },
    OLIVE: { textEmphasisColor: "olive" },
    YELLOW: { textEmphasisColor: "yellow" },
    NAVY: { textEmphasisColor: "navy" },
    BLUE: { textEmphasisColor: "blue" },
    TEAL: { textEmphasisColor: "teal" },
    AQUA: { textEmphasisColor: "aqua" },
    CURRENTCOLOR: { textEmphasisColor: "currentcolor" },
    ACTIVEBORDER: { textEmphasisColor: "ActiveBorder" },
    ACTIVECAPTION: { textEmphasisColor: "ActiveCaption" },
    APPWORKSPACE: { textEmphasisColor: "AppWorkspace" },
    BACKGROUND: { textEmphasisColor: "Background" },
    BUTTONFACE: { textEmphasisColor: "ButtonFace" },
    BUTTONHIGHLIGHT: { textEmphasisColor: "ButtonHighlight" },
    BUTTONSHADOW: { textEmphasisColor: "ButtonShadow" },
    BUTTONTEXT: { textEmphasisColor: "ButtonText" },
    CAPTIONTEXT: { textEmphasisColor: "CaptionText" },
    GRAYTEXT: { textEmphasisColor: "GrayText" },
    HIGHLIGHT: { textEmphasisColor: "Highlight" },
    HIGHLIGHTTEXT: { textEmphasisColor: "HighlightText" },
    INACTIVEBORDER: { textEmphasisColor: "InactiveBorder" },
    INACTIVECAPTION: { textEmphasisColor: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { textEmphasisColor: "InactiveCaptionText" },
    INFOBACKGROUND: { textEmphasisColor: "InfoBackground" },
    INFOTEXT: { textEmphasisColor: "InfoText" },
    MENU: { textEmphasisColor: "Menu" },
    MENUTEXT: { textEmphasisColor: "MenuText" },
    SCROLLBAR: { textEmphasisColor: "Scrollbar" },
    THREEDDARKSHADOW: { textEmphasisColor: "ThreeDDarkShadow" },
    THREEDFACE: { textEmphasisColor: "ThreeDFace" },
    THREEDHIGHLIGHT: { textEmphasisColor: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { textEmphasisColor: "ThreeDLightShadow" },
    THREEDSHADOW: { textEmphasisColor: "ThreeDShadow" },
    WINDOW: { textEmphasisColor: "Window" },
    WINDOWFRAME: { textEmphasisColor: "WindowFrame" },
    WINDOWTEXT: { textEmphasisColor: "WindowText" }
};
const _TextEmphasisPosition = {
    set: (...params: Param[]): Sheet => ({ textEmphasisPosition: buildProperty(params) }),
    OVER: { textEmphasisPosition: "over" },
    UNDER: { textEmphasisPosition: "under" },
    RIGHT: { textEmphasisPosition: "right" },
    LEFT: { textEmphasisPosition: "left" }
};
const _TextEmphasisStyle = {
    set: (...params: Param[]): Sheet => ({ textEmphasisStyle: buildProperty(params) }),
    NONE: { textEmphasisStyle: "none" },
    FILLED: { textEmphasisStyle: "filled" },
    OPEN: { textEmphasisStyle: "open" },
    DOT: { textEmphasisStyle: "dot" },
    CIRCLE: { textEmphasisStyle: "circle" },
    DOUBLE_CIRCLE: { textEmphasisStyle: "double-circle" },
    TRIANGLE: { textEmphasisStyle: "triangle" },
    SESAME: { textEmphasisStyle: "sesame" }
};
const _TextIndent = {
    set: (...params: Param[]): Sheet => ({ textIndent: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ textIndent: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ textIndent: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ textIndent: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ textIndent: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ textIndent: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ textIndent: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ textIndent: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ textIndent: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ textIndent: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ textIndent: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ textIndent: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ textIndent: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ textIndent: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ textIndent: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ textIndent: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ textIndent: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ textIndent: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ textIndent: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ textIndent: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ textIndent: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ textIndent: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ textIndent: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ textIndent: Length.X(...nums) }),
    HANGING: { textIndent: "hanging" },
    EACH_LINE: { textIndent: "each-line" }
};
const _TextJustify = {
    set: (...params: Param[]): Sheet => ({ textJustify: buildProperty(params) }),
    AUTO: { textJustify: "auto" },
    INTER_CHARACTER: { textJustify: "inter-character" },
    INTER_WORD: { textJustify: "inter-word" },
    NONE: { textJustify: "none" }
};
const _TextOrientation = {
    set: (...params: Param[]): Sheet => ({ textOrientation: buildProperty(params) }),
    MIXED: { textOrientation: "mixed" },
    UPRIGHT: { textOrientation: "upright" },
    SIDEWAYS: { textOrientation: "sideways" }
};
const _TextOverflow = {
    set: (...params: Param[]): Sheet => ({ textOverflow: buildProperty(params) }),
    CLIP: { textOverflow: "clip" },
    ELLIPSIS: { textOverflow: "ellipsis" }
};
const _TextRendering = {
    set: (...params: Param[]): Sheet => ({ textRendering: buildProperty(params) }),
    AUTO: { textRendering: "auto" },
    OPTIMIZESPEED: { textRendering: "optimizeSpeed" },
    OPTIMIZELEGIBILITY: { textRendering: "optimizeLegibility" },
    GEOMETRICPRECISION: { textRendering: "geometricPrecision" }
};
const _TextShadow = {
    set: (...params: Param[]): Sheet => ({ textShadow: buildProperty(params) }),
    NONE: { textShadow: "none" },
    cap: (...nums: number[]): Sheet => ({ textShadow: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ textShadow: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ textShadow: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ textShadow: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ textShadow: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ textShadow: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ textShadow: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ textShadow: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ textShadow: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ textShadow: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ textShadow: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ textShadow: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ textShadow: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ textShadow: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ textShadow: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ textShadow: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ textShadow: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ textShadow: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ textShadow: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ textShadow: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ textShadow: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ textShadow: Length.fr(...nums) }),
    rgb: (...params: Param[]): Sheet => ({ textShadow: Method.rgb(...params) }),
    hex: (code: string): Sheet => ({ textShadow: Color.hex(code) }),
    hexa: (code: string, alpha: number): Sheet => ({ textShadow: Color.hexa(code, alpha) }),
    rgba: (...params: Param[]): Sheet => ({ textShadow: Method.rgba(...params) }),
    hsl: (...params: Param[]): Sheet => ({ textShadow: Method.hsl(...params) }),
    hsla: (...params: Param[]): Sheet => ({ textShadow: Method.hsla(...params) }),
    BLACK: { textShadow: "black" },
    SILVER: { textShadow: "silver" },
    GRAY: { textShadow: "gray" },
    WHITE: { textShadow: "white" },
    MAROON: { textShadow: "maroon" },
    RED: { textShadow: "red" },
    PURPLE: { textShadow: "purple" },
    FUCHSIA: { textShadow: "fuchsia" },
    GREEN: { textShadow: "green" },
    LIME: { textShadow: "lime" },
    OLIVE: { textShadow: "olive" },
    YELLOW: { textShadow: "yellow" },
    NAVY: { textShadow: "navy" },
    BLUE: { textShadow: "blue" },
    TEAL: { textShadow: "teal" },
    AQUA: { textShadow: "aqua" },
    CURRENTCOLOR: { textShadow: "currentcolor" },
    ACTIVEBORDER: { textShadow: "ActiveBorder" },
    ACTIVECAPTION: { textShadow: "ActiveCaption" },
    APPWORKSPACE: { textShadow: "AppWorkspace" },
    BACKGROUND: { textShadow: "Background" },
    BUTTONFACE: { textShadow: "ButtonFace" },
    BUTTONHIGHLIGHT: { textShadow: "ButtonHighlight" },
    BUTTONSHADOW: { textShadow: "ButtonShadow" },
    BUTTONTEXT: { textShadow: "ButtonText" },
    CAPTIONTEXT: { textShadow: "CaptionText" },
    GRAYTEXT: { textShadow: "GrayText" },
    HIGHLIGHT: { textShadow: "Highlight" },
    HIGHLIGHTTEXT: { textShadow: "HighlightText" },
    INACTIVEBORDER: { textShadow: "InactiveBorder" },
    INACTIVECAPTION: { textShadow: "InactiveCaption" },
    INACTIVECAPTIONTEXT: { textShadow: "InactiveCaptionText" },
    INFOBACKGROUND: { textShadow: "InfoBackground" },
    INFOTEXT: { textShadow: "InfoText" },
    MENU: { textShadow: "Menu" },
    MENUTEXT: { textShadow: "MenuText" },
    SCROLLBAR: { textShadow: "Scrollbar" },
    THREEDDARKSHADOW: { textShadow: "ThreeDDarkShadow" },
    THREEDFACE: { textShadow: "ThreeDFace" },
    THREEDHIGHLIGHT: { textShadow: "ThreeDHighlight" },
    THREEDLIGHTSHADOW: { textShadow: "ThreeDLightShadow" },
    THREEDSHADOW: { textShadow: "ThreeDShadow" },
    WINDOW: { textShadow: "Window" },
    WINDOWFRAME: { textShadow: "WindowFrame" },
    WINDOWTEXT: { textShadow: "WindowText" }
};
const _TextSizeAdjust = {
    set: (...params: Param[]): Sheet => ({ textSizeAdjust: buildProperty(params) }),
    NONE: { textSizeAdjust: "none" },
    AUTO: { textSizeAdjust: "auto" },
    X: (...nums: number[]): Sheet => ({ textSizeAdjust: Length.X(...nums) })
};
const _TextTransform = {
    set: (...params: Param[]): Sheet => ({ textTransform: buildProperty(params) }),
    NONE: { textTransform: "none" },
    CAPITALIZE: { textTransform: "capitalize" },
    UPPERCASE: { textTransform: "uppercase" },
    LOWERCASE: { textTransform: "lowercase" },
    FULL_WIDTH: { textTransform: "full-width" }
};
const _TextUnderlinePosition = {
    set: (...params: Param[]): Sheet => ({ textUnderlinePosition: buildProperty(params) }),
    AUTO: { textUnderlinePosition: "auto" },
    UNDER: { textUnderlinePosition: "under" },
    LEFT: { textUnderlinePosition: "left" },
    RIGHT: { textUnderlinePosition: "right" }
};
const _Top = {
    set: (...params: Param[]): Sheet => ({ top: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ top: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ top: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ top: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ top: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ top: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ top: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ top: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ top: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ top: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ top: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ top: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ top: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ top: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ top: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ top: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ top: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ top: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ top: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ top: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ top: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ top: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ top: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ top: Length.X(...nums) }),
    AUTO: { top: "auto" }
};
const _TouchAction = {
    set: (...params: Param[]): Sheet => ({ touchAction: buildProperty(params) }),
    AUTO: { touchAction: "auto" },
    NONE: { touchAction: "none" },
    PAN_X: { touchAction: "pan-x" },
    PAN_LEFT: { touchAction: "pan-left" },
    PAN_RIGHT: { touchAction: "pan-right" },
    PAN_Y: { touchAction: "pan-y" },
    PAN_UP: { touchAction: "pan-up" },
    PAN_DOWN: { touchAction: "pan-down" },
    PINCH_ZOOM: { touchAction: "pinch-zoom" },
    MANIPULATION: { touchAction: "manipulation" }
};
const _Transform = {
    set: (...params: Param[]): Sheet => ({ transform: buildProperty(params) }),
    NONE: { transform: "none" },
    matrix: (...params: Param[]): Sheet => ({ transform: Method.matrix(...params) }),
    translate: (...params: Param[]): Sheet => ({ transform: Method.translate(...params) }),
    translateX: (...params: Param[]): Sheet => ({ transform: Method.translateX(...params) }),
    translateY: (...params: Param[]): Sheet => ({ transform: Method.translateY(...params) }),
    scale: (...params: Param[]): Sheet => ({ transform: Method.scale(...params) }),
    scaleX: (...params: Param[]): Sheet => ({ transform: Method.scaleX(...params) }),
    scaleY: (...params: Param[]): Sheet => ({ transform: Method.scaleY(...params) }),
    rotate: (...params: Param[]): Sheet => ({ transform: Method.rotate(...params) }),
    skew: (...params: Param[]): Sheet => ({ transform: Method.skew(...params) }),
    skewX: (...params: Param[]): Sheet => ({ transform: Method.skewX(...params) }),
    skewY: (...params: Param[]): Sheet => ({ transform: Method.skewY(...params) }),
    matrix3d: (...params: Param[]): Sheet => ({ transform: Method.matrix3d(...params) }),
    translate3d: (...params: Param[]): Sheet => ({ transform: Method.translate3d(...params) }),
    translateZ: (...params: Param[]): Sheet => ({ transform: Method.translateZ(...params) }),
    scale3d: (...params: Param[]): Sheet => ({ transform: Method.scale3d(...params) }),
    scaleZ: (...params: Param[]): Sheet => ({ transform: Method.scaleZ(...params) }),
    rotate3d: (...params: Param[]): Sheet => ({ transform: Method.rotate3d(...params) }),
    rotateX: (...params: Param[]): Sheet => ({ transform: Method.rotateX(...params) }),
    rotateY: (...params: Param[]): Sheet => ({ transform: Method.rotateY(...params) }),
    rotateZ: (...params: Param[]): Sheet => ({ transform: Method.rotateZ(...params) }),
    perspective: (...params: Param[]): Sheet => ({ transform: Method.perspective(...params) })
};
const _TransformBox = {
    set: (...params: Param[]): Sheet => ({ transformBox: buildProperty(params) }),
    BORDER_BOX: { transformBox: "border-box" },
    FILL_BOX: { transformBox: "fill-box" },
    VIEW_BOX: { transformBox: "view-box" }
};
const _TransformOrigin = {
    set: (...params: Param[]): Sheet => ({ transformOrigin: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ transformOrigin: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ transformOrigin: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ transformOrigin: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ transformOrigin: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ transformOrigin: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ transformOrigin: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ transformOrigin: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ transformOrigin: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ transformOrigin: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ transformOrigin: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ transformOrigin: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ transformOrigin: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ transformOrigin: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ transformOrigin: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ transformOrigin: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ transformOrigin: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ transformOrigin: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ transformOrigin: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ transformOrigin: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ transformOrigin: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ transformOrigin: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ transformOrigin: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ transformOrigin: Length.X(...nums) }),
    LEFT: { transformOrigin: "left" },
    CENTER: { transformOrigin: "center" },
    RIGHT: { transformOrigin: "right" },
    TOP: { transformOrigin: "top" },
    BOTTOM: { transformOrigin: "bottom" }
};
const _TransformStyle = {
    set: (...params: Param[]): Sheet => ({ transformStyle: buildProperty(params) }),
    FLAT: { transformStyle: "flat" },
    PRESERVE_3D: { transformStyle: "preserve-3d" }
};
const _Transition = {
    set: (...params: Param[]): Sheet => ({ transition: buildProperty(params) }),
    NONE: { transition: "none" },
    MS_ACCELERATOR: { transition: "-ms-accelerator" },
    MS_BLOCK_PROGRESSION: { transition: "-ms-block-progression" },
    MS_CONTENT_ZOOM_CHAINING: { transition: "-ms-content-zoom-chaining" },
    MS_CONTENT_ZOOMING: { transition: "-ms-content-zooming" },
    MS_CONTENT_ZOOM_LIMIT: { transition: "-ms-content-zoom-limit" },
    MS_CONTENT_ZOOM_LIMIT_MAX: { transition: "-ms-content-zoom-limit-max" },
    MS_CONTENT_ZOOM_LIMIT_MIN: { transition: "-ms-content-zoom-limit-min" },
    MS_CONTENT_ZOOM_SNAP: { transition: "-ms-content-zoom-snap" },
    MS_CONTENT_ZOOM_SNAP_POINTS: { transition: "-ms-content-zoom-snap-points" },
    MS_CONTENT_ZOOM_SNAP_TYPE: { transition: "-ms-content-zoom-snap-type" },
    MS_FILTER: { transition: "-ms-filter" },
    MS_FLOW_FROM: { transition: "-ms-flow-from" },
    MS_FLOW_INTO: { transition: "-ms-flow-into" },
    MS_HIGH_CONTRAST_ADJUST: { transition: "-ms-high-contrast-adjust" },
    MS_HYPHENATE_LIMIT_CHARS: { transition: "-ms-hyphenate-limit-chars" },
    MS_HYPHENATE_LIMIT_LINES: { transition: "-ms-hyphenate-limit-lines" },
    MS_HYPHENATE_LIMIT_ZONE: { transition: "-ms-hyphenate-limit-zone" },
    MS_IME_ALIGN: { transition: "-ms-ime-align" },
    MS_OVERFLOW_STYLE: { transition: "-ms-overflow-style" },
    MS_SCROLLBAR_3DLIGHT_COLOR: { transition: "-ms-scrollbar-3dlight-color" },
    MS_SCROLLBAR_ARROW_COLOR: { transition: "-ms-scrollbar-arrow-color" },
    MS_SCROLLBAR_BASE_COLOR: { transition: "-ms-scrollbar-base-color" },
    MS_SCROLLBAR_DARKSHADOW_COLOR: { transition: "-ms-scrollbar-darkshadow-color" },
    MS_SCROLLBAR_FACE_COLOR: { transition: "-ms-scrollbar-face-color" },
    MS_SCROLLBAR_HIGHLIGHT_COLOR: { transition: "-ms-scrollbar-highlight-color" },
    MS_SCROLLBAR_SHADOW_COLOR: { transition: "-ms-scrollbar-shadow-color" },
    MS_SCROLLBAR_TRACK_COLOR: { transition: "-ms-scrollbar-track-color" },
    MS_SCROLL_CHAINING: { transition: "-ms-scroll-chaining" },
    MS_SCROLL_LIMIT: { transition: "-ms-scroll-limit" },
    MS_SCROLL_LIMIT_X_MAX: { transition: "-ms-scroll-limit-x-max" },
    MS_SCROLL_LIMIT_X_MIN: { transition: "-ms-scroll-limit-x-min" },
    MS_SCROLL_LIMIT_Y_MAX: { transition: "-ms-scroll-limit-y-max" },
    MS_SCROLL_LIMIT_Y_MIN: { transition: "-ms-scroll-limit-y-min" },
    MS_SCROLL_RAILS: { transition: "-ms-scroll-rails" },
    MS_SCROLL_SNAP_POINTS_X: { transition: "-ms-scroll-snap-points-x" },
    MS_SCROLL_SNAP_POINTS_Y: { transition: "-ms-scroll-snap-points-y" },
    MS_SCROLL_SNAP_TYPE: { transition: "-ms-scroll-snap-type" },
    MS_SCROLL_SNAP_X: { transition: "-ms-scroll-snap-x" },
    MS_SCROLL_SNAP_Y: { transition: "-ms-scroll-snap-y" },
    MS_SCROLL_TRANSLATION: { transition: "-ms-scroll-translation" },
    MS_TEXT_AUTOSPACE: { transition: "-ms-text-autospace" },
    MS_TOUCH_SELECT: { transition: "-ms-touch-select" },
    MS_USER_SELECT: { transition: "-ms-user-select" },
    MS_WRAP_FLOW: { transition: "-ms-wrap-flow" },
    MS_WRAP_MARGIN: { transition: "-ms-wrap-margin" },
    MS_WRAP_THROUGH: { transition: "-ms-wrap-through" },
    MOZ_APPEARANCE: { transition: "-moz-appearance" },
    MOZ_BINDING: { transition: "-moz-binding" },
    MOZ_BORDER_BOTTOM_COLORS: { transition: "-moz-border-bottom-colors" },
    MOZ_BORDER_LEFT_COLORS: { transition: "-moz-border-left-colors" },
    MOZ_BORDER_RIGHT_COLORS: { transition: "-moz-border-right-colors" },
    MOZ_BORDER_TOP_COLORS: { transition: "-moz-border-top-colors" },
    MOZ_CONTEXT_PROPERTIES: { transition: "-moz-context-properties" },
    MOZ_FLOAT_EDGE: { transition: "-moz-float-edge" },
    MOZ_FORCE_BROKEN_IMAGE_ICON: { transition: "-moz-force-broken-image-icon" },
    MOZ_IMAGE_REGION: { transition: "-moz-image-region" },
    MOZ_ORIENT: { transition: "-moz-orient" },
    MOZ_OUTLINE_RADIUS: { transition: "-moz-outline-radius" },
    MOZ_OUTLINE_RADIUS_BOTTOMLEFT: { transition: "-moz-outline-radius-bottomleft" },
    MOZ_OUTLINE_RADIUS_BOTTOMRIGHT: { transition: "-moz-outline-radius-bottomright" },
    MOZ_OUTLINE_RADIUS_TOPLEFT: { transition: "-moz-outline-radius-topleft" },
    MOZ_OUTLINE_RADIUS_TOPRIGHT: { transition: "-moz-outline-radius-topright" },
    MOZ_STACK_SIZING: { transition: "-moz-stack-sizing" },
    MOZ_TEXT_BLINK: { transition: "-moz-text-blink" },
    MOZ_USER_FOCUS: { transition: "-moz-user-focus" },
    MOZ_USER_INPUT: { transition: "-moz-user-input" },
    MOZ_USER_MODIFY: { transition: "-moz-user-modify" },
    MOZ_WINDOW_DRAGGING: { transition: "-moz-window-dragging" },
    MOZ_WINDOW_SHADOW: { transition: "-moz-window-shadow" },
    WEBKIT_APPEARANCE: { transition: "-webkit-appearance" },
    WEBKIT_BORDER_BEFORE: { transition: "-webkit-border-before" },
    WEBKIT_BORDER_BEFORE_COLOR: { transition: "-webkit-border-before-color" },
    WEBKIT_BORDER_BEFORE_STYLE: { transition: "-webkit-border-before-style" },
    WEBKIT_BORDER_BEFORE_WIDTH: { transition: "-webkit-border-before-width" },
    WEBKIT_BOX_REFLECT: { transition: "-webkit-box-reflect" },
    WEBKIT_MASK: { transition: "-webkit-mask" },
    WEBKIT_MASK_ATTACHMENT: { transition: "-webkit-mask-attachment" },
    WEBKIT_MASK_CLIP: { transition: "-webkit-mask-clip" },
    WEBKIT_MASK_COMPOSITE: { transition: "-webkit-mask-composite" },
    WEBKIT_MASK_IMAGE: { transition: "-webkit-mask-image" },
    WEBKIT_MASK_ORIGIN: { transition: "-webkit-mask-origin" },
    WEBKIT_MASK_POSITION: { transition: "-webkit-mask-position" },
    WEBKIT_MASK_POSITION_X: { transition: "-webkit-mask-position-x" },
    WEBKIT_MASK_POSITION_Y: { transition: "-webkit-mask-position-y" },
    WEBKIT_MASK_REPEAT: { transition: "-webkit-mask-repeat" },
    WEBKIT_MASK_REPEAT_X: { transition: "-webkit-mask-repeat-x" },
    WEBKIT_MASK_REPEAT_Y: { transition: "-webkit-mask-repeat-y" },
    WEBKIT_MASK_SIZE: { transition: "-webkit-mask-size" },
    WEBKIT_OVERFLOW_SCROLLING: { transition: "-webkit-overflow-scrolling" },
    WEBKIT_TAP_HIGHLIGHT_COLOR: { transition: "-webkit-tap-highlight-color" },
    WEBKIT_TEXT_FILL_COLOR: { transition: "-webkit-text-fill-color" },
    WEBKIT_TEXT_STROKE: { transition: "-webkit-text-stroke" },
    WEBKIT_TEXT_STROKE_COLOR: { transition: "-webkit-text-stroke-color" },
    WEBKIT_TEXT_STROKE_WIDTH: { transition: "-webkit-text-stroke-width" },
    WEBKIT_TOUCH_CALLOUT: { transition: "-webkit-touch-callout" },
    WEBKIT_USER_MODIFY: { transition: "-webkit-user-modify" },
    ALIGN_CONTENT: { transition: "align-content" },
    ALIGN_ITEMS: { transition: "align-items" },
    ALIGN_SELF: { transition: "align-self" },
    ALL: { transition: "all" },
    ANIMATION: { transition: "animation" },
    ANIMATION_DELAY: { transition: "animation-delay" },
    ANIMATION_DIRECTION: { transition: "animation-direction" },
    ANIMATION_DURATION: { transition: "animation-duration" },
    ANIMATION_FILL_MODE: { transition: "animation-fill-mode" },
    ANIMATION_ITERATION_COUNT: { transition: "animation-iteration-count" },
    ANIMATION_NAME: { transition: "animation-name" },
    ANIMATION_PLAY_STATE: { transition: "animation-play-state" },
    ANIMATION_TIMING_FUNCTION: { transition: "animation-timing-function" },
    APPEARANCE: { transition: "appearance" },
    AZIMUTH: { transition: "azimuth" },
    BACKDROP_FILTER: { transition: "backdrop-filter" },
    BACKFACE_VISIBILITY: { transition: "backface-visibility" },
    BACKGROUND: { transition: "background" },
    BACKGROUND_ATTACHMENT: { transition: "background-attachment" },
    BACKGROUND_BLEND_MODE: { transition: "background-blend-mode" },
    BACKGROUND_CLIP: { transition: "background-clip" },
    BACKGROUND_COLOR: { transition: "background-color" },
    BACKGROUND_IMAGE: { transition: "background-image" },
    BACKGROUND_ORIGIN: { transition: "background-origin" },
    BACKGROUND_POSITION: { transition: "background-position" },
    BACKGROUND_POSITION_X: { transition: "background-position-x" },
    BACKGROUND_POSITION_Y: { transition: "background-position-y" },
    BACKGROUND_REPEAT: { transition: "background-repeat" },
    BACKGROUND_SIZE: { transition: "background-size" },
    BLOCK_OVERFLOW: { transition: "block-overflow" },
    BLOCK_SIZE: { transition: "block-size" },
    BORDER: { transition: "border" },
    BORDER_BLOCK_END: { transition: "border-block-end" },
    BORDER_BLOCK_END_COLOR: { transition: "border-block-end-color" },
    BORDER_BLOCK_END_STYLE: { transition: "border-block-end-style" },
    BORDER_BLOCK_END_WIDTH: { transition: "border-block-end-width" },
    BORDER_BLOCK_START: { transition: "border-block-start" },
    BORDER_BLOCK_START_COLOR: { transition: "border-block-start-color" },
    BORDER_BLOCK_START_STYLE: { transition: "border-block-start-style" },
    BORDER_BLOCK_START_WIDTH: { transition: "border-block-start-width" },
    BORDER_BOTTOM: { transition: "border-bottom" },
    BORDER_BOTTOM_COLOR: { transition: "border-bottom-color" },
    BORDER_BOTTOM_LEFT_RADIUS: { transition: "border-bottom-left-radius" },
    BORDER_BOTTOM_RIGHT_RADIUS: { transition: "border-bottom-right-radius" },
    BORDER_BOTTOM_STYLE: { transition: "border-bottom-style" },
    BORDER_BOTTOM_WIDTH: { transition: "border-bottom-width" },
    BORDER_COLLAPSE: { transition: "border-collapse" },
    BORDER_COLOR: { transition: "border-color" },
    BORDER_IMAGE: { transition: "border-image" },
    BORDER_IMAGE_OUTSET: { transition: "border-image-outset" },
    BORDER_IMAGE_REPEAT: { transition: "border-image-repeat" },
    BORDER_IMAGE_SLICE: { transition: "border-image-slice" },
    BORDER_IMAGE_SOURCE: { transition: "border-image-source" },
    BORDER_IMAGE_WIDTH: { transition: "border-image-width" },
    BORDER_INLINE_END: { transition: "border-inline-end" },
    BORDER_INLINE_END_COLOR: { transition: "border-inline-end-color" },
    BORDER_INLINE_END_STYLE: { transition: "border-inline-end-style" },
    BORDER_INLINE_END_WIDTH: { transition: "border-inline-end-width" },
    BORDER_INLINE_START: { transition: "border-inline-start" },
    BORDER_INLINE_START_COLOR: { transition: "border-inline-start-color" },
    BORDER_INLINE_START_STYLE: { transition: "border-inline-start-style" },
    BORDER_INLINE_START_WIDTH: { transition: "border-inline-start-width" },
    BORDER_LEFT: { transition: "border-left" },
    BORDER_LEFT_COLOR: { transition: "border-left-color" },
    BORDER_LEFT_STYLE: { transition: "border-left-style" },
    BORDER_LEFT_WIDTH: { transition: "border-left-width" },
    BORDER_RADIUS: { transition: "border-radius" },
    BORDER_RIGHT: { transition: "border-right" },
    BORDER_RIGHT_COLOR: { transition: "border-right-color" },
    BORDER_RIGHT_STYLE: { transition: "border-right-style" },
    BORDER_RIGHT_WIDTH: { transition: "border-right-width" },
    BORDER_SPACING: { transition: "border-spacing" },
    BORDER_STYLE: { transition: "border-style" },
    BORDER_TOP: { transition: "border-top" },
    BORDER_TOP_COLOR: { transition: "border-top-color" },
    BORDER_TOP_LEFT_RADIUS: { transition: "border-top-left-radius" },
    BORDER_TOP_RIGHT_RADIUS: { transition: "border-top-right-radius" },
    BORDER_TOP_STYLE: { transition: "border-top-style" },
    BORDER_TOP_WIDTH: { transition: "border-top-width" },
    BORDER_WIDTH: { transition: "border-width" },
    BOTTOM: { transition: "bottom" },
    BOX_ALIGN: { transition: "box-align" },
    BOX_DECORATION_BREAK: { transition: "box-decoration-break" },
    BOX_DIRECTION: { transition: "box-direction" },
    BOX_FLEX: { transition: "box-flex" },
    BOX_FLEX_GROUP: { transition: "box-flex-group" },
    BOX_LINES: { transition: "box-lines" },
    BOX_ORDINAL_GROUP: { transition: "box-ordinal-group" },
    BOX_ORIENT: { transition: "box-orient" },
    BOX_PACK: { transition: "box-pack" },
    BOX_SHADOW: { transition: "box-shadow" },
    BOX_SIZING: { transition: "box-sizing" },
    BREAK_AFTER: { transition: "break-after" },
    BREAK_BEFORE: { transition: "break-before" },
    BREAK_INSIDE: { transition: "break-inside" },
    CAPTION_SIDE: { transition: "caption-side" },
    CARET_COLOR: { transition: "caret-color" },
    CLEAR: { transition: "clear" },
    CLIP: { transition: "clip" },
    CLIP_PATH: { transition: "clip-path" },
    COLOR: { transition: "color" },
    COLOR_ADJUST: { transition: "color-adjust" },
    COLUMN_COUNT: { transition: "column-count" },
    COLUMN_FILL: { transition: "column-fill" },
    COLUMN_GAP: { transition: "column-gap" },
    COLUMN_RULE: { transition: "column-rule" },
    COLUMN_RULE_COLOR: { transition: "column-rule-color" },
    COLUMN_RULE_STYLE: { transition: "column-rule-style" },
    COLUMN_RULE_WIDTH: { transition: "column-rule-width" },
    COLUMN_SPAN: { transition: "column-span" },
    COLUMN_WIDTH: { transition: "column-width" },
    COLUMNS: { transition: "columns" },
    CONTAIN: { transition: "contain" },
    CONTENT: { transition: "content" },
    COUNTER_INCREMENT: { transition: "counter-increment" },
    COUNTER_RESET: { transition: "counter-reset" },
    CURSOR: { transition: "cursor" },
    DIRECTION: { transition: "direction" },
    DISPLAY: { transition: "display" },
    EMPTY_CELLS: { transition: "empty-cells" },
    FILTER: { transition: "filter" },
    FLEX: { transition: "flex" },
    FLEX_BASIS: { transition: "flex-basis" },
    FLEX_DIRECTION: { transition: "flex-direction" },
    FLEX_FLOW: { transition: "flex-flow" },
    FLEX_GROW: { transition: "flex-grow" },
    FLEX_SHRINK: { transition: "flex-shrink" },
    FLEX_WRAP: { transition: "flex-wrap" },
    FLOAT: { transition: "float" },
    FONT: { transition: "font" },
    FONT_FAMILY: { transition: "font-family" },
    FONT_FEATURE_SETTINGS: { transition: "font-feature-settings" },
    FONT_KERNING: { transition: "font-kerning" },
    FONT_LANGUAGE_OVERRIDE: { transition: "font-language-override" },
    FONT_OPTICAL_SIZING: { transition: "font-optical-sizing" },
    FONT_VARIATION_SETTINGS: { transition: "font-variation-settings" },
    FONT_SIZE: { transition: "font-size" },
    FONT_SIZE_ADJUST: { transition: "font-size-adjust" },
    FONT_STRETCH: { transition: "font-stretch" },
    FONT_STYLE: { transition: "font-style" },
    FONT_SYNTHESIS: { transition: "font-synthesis" },
    FONT_VARIANT: { transition: "font-variant" },
    FONT_VARIANT_ALTERNATES: { transition: "font-variant-alternates" },
    FONT_VARIANT_CAPS: { transition: "font-variant-caps" },
    FONT_VARIANT_EAST_ASIAN: { transition: "font-variant-east-asian" },
    FONT_VARIANT_LIGATURES: { transition: "font-variant-ligatures" },
    FONT_VARIANT_NUMERIC: { transition: "font-variant-numeric" },
    FONT_VARIANT_POSITION: { transition: "font-variant-position" },
    FONT_WEIGHT: { transition: "font-weight" },
    GAP: { transition: "gap" },
    GRID: { transition: "grid" },
    GRID_AREA: { transition: "grid-area" },
    GRID_AUTO_COLUMNS: { transition: "grid-auto-columns" },
    GRID_AUTO_FLOW: { transition: "grid-auto-flow" },
    GRID_AUTO_ROWS: { transition: "grid-auto-rows" },
    GRID_COLUMN: { transition: "grid-column" },
    GRID_COLUMN_END: { transition: "grid-column-end" },
    GRID_COLUMN_GAP: { transition: "grid-column-gap" },
    GRID_COLUMN_START: { transition: "grid-column-start" },
    GRID_GAP: { transition: "grid-gap" },
    GRID_ROW: { transition: "grid-row" },
    GRID_ROW_END: { transition: "grid-row-end" },
    GRID_ROW_GAP: { transition: "grid-row-gap" },
    GRID_ROW_START: { transition: "grid-row-start" },
    GRID_TEMPLATE: { transition: "grid-template" },
    GRID_TEMPLATE_AREAS: { transition: "grid-template-areas" },
    GRID_TEMPLATE_COLUMNS: { transition: "grid-template-columns" },
    GRID_TEMPLATE_ROWS: { transition: "grid-template-rows" },
    HANGING_PUNCTUATION: { transition: "hanging-punctuation" },
    HEIGHT: { transition: "height" },
    HYPHENS: { transition: "hyphens" },
    IMAGE_ORIENTATION: { transition: "image-orientation" },
    IMAGE_RENDERING: { transition: "image-rendering" },
    IMAGE_RESOLUTION: { transition: "image-resolution" },
    IME_MODE: { transition: "ime-mode" },
    INITIAL_LETTER: { transition: "initial-letter" },
    INITIAL_LETTER_ALIGN: { transition: "initial-letter-align" },
    INLINE_SIZE: { transition: "inline-size" },
    INSET_BLOCK_END: { transition: "inset-block-end" },
    INSET_BLOCK_START: { transition: "inset-block-start" },
    INSET_INLINE_END: { transition: "inset-inline-end" },
    INSET_INLINE_START: { transition: "inset-inline-start" },
    ISOLATION: { transition: "isolation" },
    JUSTIFY_CONTENT: { transition: "justify-content" },
    JUSTIFY_ITEMS: { transition: "justify-items" },
    JUSTIFY_SELF: { transition: "justify-self" },
    LEFT: { transition: "left" },
    LETTER_SPACING: { transition: "letter-spacing" },
    LINE_BREAK: { transition: "line-break" },
    LINE_CLAMP: { transition: "line-clamp" },
    LINE_HEIGHT: { transition: "line-height" },
    LIST_STYLE: { transition: "list-style" },
    LIST_STYLE_IMAGE: { transition: "list-style-image" },
    LIST_STYLE_POSITION: { transition: "list-style-position" },
    LIST_STYLE_TYPE: { transition: "list-style-type" },
    MARGIN: { transition: "margin" },
    MARGIN_BLOCK_END: { transition: "margin-block-end" },
    MARGIN_BLOCK_START: { transition: "margin-block-start" },
    MARGIN_BOTTOM: { transition: "margin-bottom" },
    MARGIN_INLINE_END: { transition: "margin-inline-end" },
    MARGIN_INLINE_START: { transition: "margin-inline-start" },
    MARGIN_LEFT: { transition: "margin-left" },
    MARGIN_RIGHT: { transition: "margin-right" },
    MARGIN_TOP: { transition: "margin-top" },
    MASK: { transition: "mask" },
    MASK_BORDER: { transition: "mask-border" },
    MASK_BORDER_MODE: { transition: "mask-border-mode" },
    MASK_BORDER_OUTSET: { transition: "mask-border-outset" },
    MASK_BORDER_REPEAT: { transition: "mask-border-repeat" },
    MASK_BORDER_SLICE: { transition: "mask-border-slice" },
    MASK_BORDER_SOURCE: { transition: "mask-border-source" },
    MASK_BORDER_WIDTH: { transition: "mask-border-width" },
    MASK_CLIP: { transition: "mask-clip" },
    MASK_COMPOSITE: { transition: "mask-composite" },
    MASK_IMAGE: { transition: "mask-image" },
    MASK_MODE: { transition: "mask-mode" },
    MASK_ORIGIN: { transition: "mask-origin" },
    MASK_POSITION: { transition: "mask-position" },
    MASK_REPEAT: { transition: "mask-repeat" },
    MASK_SIZE: { transition: "mask-size" },
    MASK_TYPE: { transition: "mask-type" },
    MAX_BLOCK_SIZE: { transition: "max-block-size" },
    MAX_HEIGHT: { transition: "max-height" },
    MAX_INLINE_SIZE: { transition: "max-inline-size" },
    MAX_LINES: { transition: "max-lines" },
    MAX_WIDTH: { transition: "max-width" },
    MIN_BLOCK_SIZE: { transition: "min-block-size" },
    MIN_HEIGHT: { transition: "min-height" },
    MIN_INLINE_SIZE: { transition: "min-inline-size" },
    MIN_WIDTH: { transition: "min-width" },
    MIX_BLEND_MODE: { transition: "mix-blend-mode" },
    MOTION: { transition: "motion" },
    MOTION_OFFSET: { transition: "motion-offset" },
    MOTION_PATH: { transition: "motion-path" },
    MOTION_ROTATION: { transition: "motion-rotation" },
    OBJECT_FIT: { transition: "object-fit" },
    OBJECT_POSITION: { transition: "object-position" },
    OFFSET_POSITION: { transition: "offset-position" },
    OPACITY: { transition: "opacity" },
    ORDER: { transition: "order" },
    ORPHANS: { transition: "orphans" },
    OUTLINE: { transition: "outline" },
    OUTLINE_COLOR: { transition: "outline-color" },
    OUTLINE_OFFSET: { transition: "outline-offset" },
    OUTLINE_STYLE: { transition: "outline-style" },
    OUTLINE_WIDTH: { transition: "outline-width" },
    OVERFLOW: { transition: "overflow" },
    OVERFLOW_ANCHOR: { transition: "overflow-anchor" },
    OVERFLOW_BLOCK: { transition: "overflow-block" },
    OVERFLOW_CLIP_BOX: { transition: "overflow-clip-box" },
    OVERFLOW_INLINE: { transition: "overflow-inline" },
    OVERFLOW_WRAP: { transition: "overflow-wrap" },
    OVERFLOW_X: { transition: "overflow-x" },
    OVERFLOW_Y: { transition: "overflow-y" },
    OVERSCROLL_BEHAVIOR: { transition: "overscroll-behavior" },
    OVERSCROLL_BEHAVIOR_X: { transition: "overscroll-behavior-x" },
    OVERSCROLL_BEHAVIOR_Y: { transition: "overscroll-behavior-y" },
    PADDING: { transition: "padding" },
    PADDING_BLOCK_END: { transition: "padding-block-end" },
    PADDING_BLOCK_START: { transition: "padding-block-start" },
    PADDING_BOTTOM: { transition: "padding-bottom" },
    PADDING_INLINE_END: { transition: "padding-inline-end" },
    PADDING_INLINE_START: { transition: "padding-inline-start" },
    PADDING_LEFT: { transition: "padding-left" },
    PADDING_RIGHT: { transition: "padding-right" },
    PADDING_TOP: { transition: "padding-top" },
    PAGE_BREAK_AFTER: { transition: "page-break-after" },
    PAGE_BREAK_BEFORE: { transition: "page-break-before" },
    PAGE_BREAK_INSIDE: { transition: "page-break-inside" },
    PAINT_ORDER: { transition: "paint-order" },
    PERSPECTIVE: { transition: "perspective" },
    PERSPECTIVE_ORIGIN: { transition: "perspective-origin" },
    PLACE_CONTENT: { transition: "place-content" },
    PLACE_ITEMS: { transition: "place-items" },
    POINTER_EVENTS: { transition: "pointer-events" },
    POSITION: { transition: "position" },
    QUOTES: { transition: "quotes" },
    RESIZE: { transition: "resize" },
    RIGHT: { transition: "right" },
    ROTATE: { transition: "rotate" },
    ROW_GAP: { transition: "row-gap" },
    RUBY_ALIGN: { transition: "ruby-align" },
    RUBY_MERGE: { transition: "ruby-merge" },
    RUBY_POSITION: { transition: "ruby-position" },
    SCALE: { transition: "scale" },
    SCROLL_BEHAVIOR: { transition: "scroll-behavior" },
    SCROLL_SNAP_COORDINATE: { transition: "scroll-snap-coordinate" },
    SCROLL_SNAP_DESTINATION: { transition: "scroll-snap-destination" },
    SCROLL_SNAP_POINTS_X: { transition: "scroll-snap-points-x" },
    SCROLL_SNAP_POINTS_Y: { transition: "scroll-snap-points-y" },
    SCROLL_SNAP_TYPE: { transition: "scroll-snap-type" },
    SCROLL_SNAP_TYPE_X: { transition: "scroll-snap-type-x" },
    SCROLL_SNAP_TYPE_Y: { transition: "scroll-snap-type-y" },
    SHAPE_IMAGE_THRESHOLD: { transition: "shape-image-threshold" },
    SHAPE_MARGIN: { transition: "shape-margin" },
    SHAPE_OUTSIDE: { transition: "shape-outside" },
    TAB_SIZE: { transition: "tab-size" },
    TABLE_LAYOUT: { transition: "table-layout" },
    TEXT_ALIGN: { transition: "text-align" },
    TEXT_ALIGN_LAST: { transition: "text-align-last" },
    TEXT_COMBINE_UPRIGHT: { transition: "text-combine-upright" },
    TEXT_DECORATION: { transition: "text-decoration" },
    TEXT_DECORATION_COLOR: { transition: "text-decoration-color" },
    TEXT_DECORATION_LINE: { transition: "text-decoration-line" },
    TEXT_DECORATION_SKIP: { transition: "text-decoration-skip" },
    TEXT_DECORATION_SKIP_INK: { transition: "text-decoration-skip-ink" },
    TEXT_DECORATION_STYLE: { transition: "text-decoration-style" },
    TEXT_EMPHASIS: { transition: "text-emphasis" },
    TEXT_EMPHASIS_COLOR: { transition: "text-emphasis-color" },
    TEXT_EMPHASIS_POSITION: { transition: "text-emphasis-position" },
    TEXT_EMPHASIS_STYLE: { transition: "text-emphasis-style" },
    TEXT_INDENT: { transition: "text-indent" },
    TEXT_JUSTIFY: { transition: "text-justify" },
    TEXT_ORIENTATION: { transition: "text-orientation" },
    TEXT_OVERFLOW: { transition: "text-overflow" },
    TEXT_RENDERING: { transition: "text-rendering" },
    TEXT_SHADOW: { transition: "text-shadow" },
    TEXT_SIZE_ADJUST: { transition: "text-size-adjust" },
    TEXT_TRANSFORM: { transition: "text-transform" },
    TEXT_UNDERLINE_POSITION: { transition: "text-underline-position" },
    TOP: { transition: "top" },
    TOUCH_ACTION: { transition: "touch-action" },
    TRANSFORM: { transition: "transform" },
    TRANSFORM_BOX: { transition: "transform-box" },
    TRANSFORM_ORIGIN: { transition: "transform-origin" },
    TRANSFORM_STYLE: { transition: "transform-style" },
    TRANSITION: { transition: "transition" },
    TRANSITION_DELAY: { transition: "transition-delay" },
    TRANSITION_DURATION: { transition: "transition-duration" },
    TRANSITION_PROPERTY: { transition: "transition-property" },
    TRANSITION_TIMING_FUNCTION: { transition: "transition-timing-function" },
    TRANSLATE: { transition: "translate" },
    UNICODE_BIDI: { transition: "unicode-bidi" },
    USER_SELECT: { transition: "user-select" },
    VERTICAL_ALIGN: { transition: "vertical-align" },
    VISIBILITY: { transition: "visibility" },
    WHITE_SPACE: { transition: "white-space" },
    WIDOWS: { transition: "widows" },
    WIDTH: { transition: "width" },
    WILL_CHANGE: { transition: "will-change" },
    WORD_BREAK: { transition: "word-break" },
    WORD_SPACING: { transition: "word-spacing" },
    WORD_WRAP: { transition: "word-wrap" },
    WRITING_MODE: { transition: "writing-mode" },
    Z_INDEX: { transition: "z-index" },
    ZOOM: { transition: "zoom" },
    s: (...nums: number[]): Sheet => ({ transition: Time.s(...nums) }),
    ms: (...nums: number[]): Sheet => ({ transition: Time.ms(...nums) }),
    LINEAR: { transition: "linear" },
    EASE: { transition: "ease" },
    EASE_IN: { transition: "ease-in" },
    EASE_OUT: { transition: "ease-out" },
    EASE_IN_OUT: { transition: "ease-in-out" },
    cubicBezier: (...params: Param[]): Sheet => ({ transition: Method.cubicBezier(...params) }),
    STEP_START: { transition: "step-start" },
    STEP_END: { transition: "step-end" },
    steps: (...params: Param[]): Sheet => ({ transition: Method.steps(...params) }),
    frames: (...params: Param[]): Sheet => ({ transition: Method.frames(...params) })
};
const _TransitionDelay = {
    set: (...params: Param[]): Sheet => ({ transitionDelay: buildProperty(params) }),
    s: (...nums: number[]): Sheet => ({ transitionDelay: Time.s(...nums) }),
    ms: (...nums: number[]): Sheet => ({ transitionDelay: Time.ms(...nums) })
};
const _TransitionDuration = {
    set: (...params: Param[]): Sheet => ({ transitionDuration: buildProperty(params) }),
    s: (...nums: number[]): Sheet => ({ transitionDuration: Time.s(...nums) }),
    ms: (...nums: number[]): Sheet => ({ transitionDuration: Time.ms(...nums) })
};
const _TransitionProperty = {
    set: (...params: Param[]): Sheet => ({ transitionProperty: buildProperty(params) }),
    NONE: { transitionProperty: "none" },
    MS_ACCELERATOR: { transitionProperty: "-ms-accelerator" },
    MS_BLOCK_PROGRESSION: { transitionProperty: "-ms-block-progression" },
    MS_CONTENT_ZOOM_CHAINING: { transitionProperty: "-ms-content-zoom-chaining" },
    MS_CONTENT_ZOOMING: { transitionProperty: "-ms-content-zooming" },
    MS_CONTENT_ZOOM_LIMIT: { transitionProperty: "-ms-content-zoom-limit" },
    MS_CONTENT_ZOOM_LIMIT_MAX: { transitionProperty: "-ms-content-zoom-limit-max" },
    MS_CONTENT_ZOOM_LIMIT_MIN: { transitionProperty: "-ms-content-zoom-limit-min" },
    MS_CONTENT_ZOOM_SNAP: { transitionProperty: "-ms-content-zoom-snap" },
    MS_CONTENT_ZOOM_SNAP_POINTS: { transitionProperty: "-ms-content-zoom-snap-points" },
    MS_CONTENT_ZOOM_SNAP_TYPE: { transitionProperty: "-ms-content-zoom-snap-type" },
    MS_FILTER: { transitionProperty: "-ms-filter" },
    MS_FLOW_FROM: { transitionProperty: "-ms-flow-from" },
    MS_FLOW_INTO: { transitionProperty: "-ms-flow-into" },
    MS_HIGH_CONTRAST_ADJUST: { transitionProperty: "-ms-high-contrast-adjust" },
    MS_HYPHENATE_LIMIT_CHARS: { transitionProperty: "-ms-hyphenate-limit-chars" },
    MS_HYPHENATE_LIMIT_LINES: { transitionProperty: "-ms-hyphenate-limit-lines" },
    MS_HYPHENATE_LIMIT_ZONE: { transitionProperty: "-ms-hyphenate-limit-zone" },
    MS_IME_ALIGN: { transitionProperty: "-ms-ime-align" },
    MS_OVERFLOW_STYLE: { transitionProperty: "-ms-overflow-style" },
    MS_SCROLLBAR_3DLIGHT_COLOR: { transitionProperty: "-ms-scrollbar-3dlight-color" },
    MS_SCROLLBAR_ARROW_COLOR: { transitionProperty: "-ms-scrollbar-arrow-color" },
    MS_SCROLLBAR_BASE_COLOR: { transitionProperty: "-ms-scrollbar-base-color" },
    MS_SCROLLBAR_DARKSHADOW_COLOR: { transitionProperty: "-ms-scrollbar-darkshadow-color" },
    MS_SCROLLBAR_FACE_COLOR: { transitionProperty: "-ms-scrollbar-face-color" },
    MS_SCROLLBAR_HIGHLIGHT_COLOR: { transitionProperty: "-ms-scrollbar-highlight-color" },
    MS_SCROLLBAR_SHADOW_COLOR: { transitionProperty: "-ms-scrollbar-shadow-color" },
    MS_SCROLLBAR_TRACK_COLOR: { transitionProperty: "-ms-scrollbar-track-color" },
    MS_SCROLL_CHAINING: { transitionProperty: "-ms-scroll-chaining" },
    MS_SCROLL_LIMIT: { transitionProperty: "-ms-scroll-limit" },
    MS_SCROLL_LIMIT_X_MAX: { transitionProperty: "-ms-scroll-limit-x-max" },
    MS_SCROLL_LIMIT_X_MIN: { transitionProperty: "-ms-scroll-limit-x-min" },
    MS_SCROLL_LIMIT_Y_MAX: { transitionProperty: "-ms-scroll-limit-y-max" },
    MS_SCROLL_LIMIT_Y_MIN: { transitionProperty: "-ms-scroll-limit-y-min" },
    MS_SCROLL_RAILS: { transitionProperty: "-ms-scroll-rails" },
    MS_SCROLL_SNAP_POINTS_X: { transitionProperty: "-ms-scroll-snap-points-x" },
    MS_SCROLL_SNAP_POINTS_Y: { transitionProperty: "-ms-scroll-snap-points-y" },
    MS_SCROLL_SNAP_TYPE: { transitionProperty: "-ms-scroll-snap-type" },
    MS_SCROLL_SNAP_X: { transitionProperty: "-ms-scroll-snap-x" },
    MS_SCROLL_SNAP_Y: { transitionProperty: "-ms-scroll-snap-y" },
    MS_SCROLL_TRANSLATION: { transitionProperty: "-ms-scroll-translation" },
    MS_TEXT_AUTOSPACE: { transitionProperty: "-ms-text-autospace" },
    MS_TOUCH_SELECT: { transitionProperty: "-ms-touch-select" },
    MS_USER_SELECT: { transitionProperty: "-ms-user-select" },
    MS_WRAP_FLOW: { transitionProperty: "-ms-wrap-flow" },
    MS_WRAP_MARGIN: { transitionProperty: "-ms-wrap-margin" },
    MS_WRAP_THROUGH: { transitionProperty: "-ms-wrap-through" },
    MOZ_APPEARANCE: { transitionProperty: "-moz-appearance" },
    MOZ_BINDING: { transitionProperty: "-moz-binding" },
    MOZ_BORDER_BOTTOM_COLORS: { transitionProperty: "-moz-border-bottom-colors" },
    MOZ_BORDER_LEFT_COLORS: { transitionProperty: "-moz-border-left-colors" },
    MOZ_BORDER_RIGHT_COLORS: { transitionProperty: "-moz-border-right-colors" },
    MOZ_BORDER_TOP_COLORS: { transitionProperty: "-moz-border-top-colors" },
    MOZ_CONTEXT_PROPERTIES: { transitionProperty: "-moz-context-properties" },
    MOZ_FLOAT_EDGE: { transitionProperty: "-moz-float-edge" },
    MOZ_FORCE_BROKEN_IMAGE_ICON: { transitionProperty: "-moz-force-broken-image-icon" },
    MOZ_IMAGE_REGION: { transitionProperty: "-moz-image-region" },
    MOZ_ORIENT: { transitionProperty: "-moz-orient" },
    MOZ_OUTLINE_RADIUS: { transitionProperty: "-moz-outline-radius" },
    MOZ_OUTLINE_RADIUS_BOTTOMLEFT: { transitionProperty: "-moz-outline-radius-bottomleft" },
    MOZ_OUTLINE_RADIUS_BOTTOMRIGHT: { transitionProperty: "-moz-outline-radius-bottomright" },
    MOZ_OUTLINE_RADIUS_TOPLEFT: { transitionProperty: "-moz-outline-radius-topleft" },
    MOZ_OUTLINE_RADIUS_TOPRIGHT: { transitionProperty: "-moz-outline-radius-topright" },
    MOZ_STACK_SIZING: { transitionProperty: "-moz-stack-sizing" },
    MOZ_TEXT_BLINK: { transitionProperty: "-moz-text-blink" },
    MOZ_USER_FOCUS: { transitionProperty: "-moz-user-focus" },
    MOZ_USER_INPUT: { transitionProperty: "-moz-user-input" },
    MOZ_USER_MODIFY: { transitionProperty: "-moz-user-modify" },
    MOZ_WINDOW_DRAGGING: { transitionProperty: "-moz-window-dragging" },
    MOZ_WINDOW_SHADOW: { transitionProperty: "-moz-window-shadow" },
    WEBKIT_APPEARANCE: { transitionProperty: "-webkit-appearance" },
    WEBKIT_BORDER_BEFORE: { transitionProperty: "-webkit-border-before" },
    WEBKIT_BORDER_BEFORE_COLOR: { transitionProperty: "-webkit-border-before-color" },
    WEBKIT_BORDER_BEFORE_STYLE: { transitionProperty: "-webkit-border-before-style" },
    WEBKIT_BORDER_BEFORE_WIDTH: { transitionProperty: "-webkit-border-before-width" },
    WEBKIT_BOX_REFLECT: { transitionProperty: "-webkit-box-reflect" },
    WEBKIT_MASK: { transitionProperty: "-webkit-mask" },
    WEBKIT_MASK_ATTACHMENT: { transitionProperty: "-webkit-mask-attachment" },
    WEBKIT_MASK_CLIP: { transitionProperty: "-webkit-mask-clip" },
    WEBKIT_MASK_COMPOSITE: { transitionProperty: "-webkit-mask-composite" },
    WEBKIT_MASK_IMAGE: { transitionProperty: "-webkit-mask-image" },
    WEBKIT_MASK_ORIGIN: { transitionProperty: "-webkit-mask-origin" },
    WEBKIT_MASK_POSITION: { transitionProperty: "-webkit-mask-position" },
    WEBKIT_MASK_POSITION_X: { transitionProperty: "-webkit-mask-position-x" },
    WEBKIT_MASK_POSITION_Y: { transitionProperty: "-webkit-mask-position-y" },
    WEBKIT_MASK_REPEAT: { transitionProperty: "-webkit-mask-repeat" },
    WEBKIT_MASK_REPEAT_X: { transitionProperty: "-webkit-mask-repeat-x" },
    WEBKIT_MASK_REPEAT_Y: { transitionProperty: "-webkit-mask-repeat-y" },
    WEBKIT_MASK_SIZE: { transitionProperty: "-webkit-mask-size" },
    WEBKIT_OVERFLOW_SCROLLING: { transitionProperty: "-webkit-overflow-scrolling" },
    WEBKIT_TAP_HIGHLIGHT_COLOR: { transitionProperty: "-webkit-tap-highlight-color" },
    WEBKIT_TEXT_FILL_COLOR: { transitionProperty: "-webkit-text-fill-color" },
    WEBKIT_TEXT_STROKE: { transitionProperty: "-webkit-text-stroke" },
    WEBKIT_TEXT_STROKE_COLOR: { transitionProperty: "-webkit-text-stroke-color" },
    WEBKIT_TEXT_STROKE_WIDTH: { transitionProperty: "-webkit-text-stroke-width" },
    WEBKIT_TOUCH_CALLOUT: { transitionProperty: "-webkit-touch-callout" },
    WEBKIT_USER_MODIFY: { transitionProperty: "-webkit-user-modify" },
    ALIGN_CONTENT: { transitionProperty: "align-content" },
    ALIGN_ITEMS: { transitionProperty: "align-items" },
    ALIGN_SELF: { transitionProperty: "align-self" },
    ALL: { transitionProperty: "all" },
    ANIMATION: { transitionProperty: "animation" },
    ANIMATION_DELAY: { transitionProperty: "animation-delay" },
    ANIMATION_DIRECTION: { transitionProperty: "animation-direction" },
    ANIMATION_DURATION: { transitionProperty: "animation-duration" },
    ANIMATION_FILL_MODE: { transitionProperty: "animation-fill-mode" },
    ANIMATION_ITERATION_COUNT: { transitionProperty: "animation-iteration-count" },
    ANIMATION_NAME: { transitionProperty: "animation-name" },
    ANIMATION_PLAY_STATE: { transitionProperty: "animation-play-state" },
    ANIMATION_TIMING_FUNCTION: { transitionProperty: "animation-timing-function" },
    APPEARANCE: { transitionProperty: "appearance" },
    AZIMUTH: { transitionProperty: "azimuth" },
    BACKDROP_FILTER: { transitionProperty: "backdrop-filter" },
    BACKFACE_VISIBILITY: { transitionProperty: "backface-visibility" },
    BACKGROUND: { transitionProperty: "background" },
    BACKGROUND_ATTACHMENT: { transitionProperty: "background-attachment" },
    BACKGROUND_BLEND_MODE: { transitionProperty: "background-blend-mode" },
    BACKGROUND_CLIP: { transitionProperty: "background-clip" },
    BACKGROUND_COLOR: { transitionProperty: "background-color" },
    BACKGROUND_IMAGE: { transitionProperty: "background-image" },
    BACKGROUND_ORIGIN: { transitionProperty: "background-origin" },
    BACKGROUND_POSITION: { transitionProperty: "background-position" },
    BACKGROUND_POSITION_X: { transitionProperty: "background-position-x" },
    BACKGROUND_POSITION_Y: { transitionProperty: "background-position-y" },
    BACKGROUND_REPEAT: { transitionProperty: "background-repeat" },
    BACKGROUND_SIZE: { transitionProperty: "background-size" },
    BLOCK_OVERFLOW: { transitionProperty: "block-overflow" },
    BLOCK_SIZE: { transitionProperty: "block-size" },
    BORDER: { transitionProperty: "border" },
    BORDER_BLOCK_END: { transitionProperty: "border-block-end" },
    BORDER_BLOCK_END_COLOR: { transitionProperty: "border-block-end-color" },
    BORDER_BLOCK_END_STYLE: { transitionProperty: "border-block-end-style" },
    BORDER_BLOCK_END_WIDTH: { transitionProperty: "border-block-end-width" },
    BORDER_BLOCK_START: { transitionProperty: "border-block-start" },
    BORDER_BLOCK_START_COLOR: { transitionProperty: "border-block-start-color" },
    BORDER_BLOCK_START_STYLE: { transitionProperty: "border-block-start-style" },
    BORDER_BLOCK_START_WIDTH: { transitionProperty: "border-block-start-width" },
    BORDER_BOTTOM: { transitionProperty: "border-bottom" },
    BORDER_BOTTOM_COLOR: { transitionProperty: "border-bottom-color" },
    BORDER_BOTTOM_LEFT_RADIUS: { transitionProperty: "border-bottom-left-radius" },
    BORDER_BOTTOM_RIGHT_RADIUS: { transitionProperty: "border-bottom-right-radius" },
    BORDER_BOTTOM_STYLE: { transitionProperty: "border-bottom-style" },
    BORDER_BOTTOM_WIDTH: { transitionProperty: "border-bottom-width" },
    BORDER_COLLAPSE: { transitionProperty: "border-collapse" },
    BORDER_COLOR: { transitionProperty: "border-color" },
    BORDER_IMAGE: { transitionProperty: "border-image" },
    BORDER_IMAGE_OUTSET: { transitionProperty: "border-image-outset" },
    BORDER_IMAGE_REPEAT: { transitionProperty: "border-image-repeat" },
    BORDER_IMAGE_SLICE: { transitionProperty: "border-image-slice" },
    BORDER_IMAGE_SOURCE: { transitionProperty: "border-image-source" },
    BORDER_IMAGE_WIDTH: { transitionProperty: "border-image-width" },
    BORDER_INLINE_END: { transitionProperty: "border-inline-end" },
    BORDER_INLINE_END_COLOR: { transitionProperty: "border-inline-end-color" },
    BORDER_INLINE_END_STYLE: { transitionProperty: "border-inline-end-style" },
    BORDER_INLINE_END_WIDTH: { transitionProperty: "border-inline-end-width" },
    BORDER_INLINE_START: { transitionProperty: "border-inline-start" },
    BORDER_INLINE_START_COLOR: { transitionProperty: "border-inline-start-color" },
    BORDER_INLINE_START_STYLE: { transitionProperty: "border-inline-start-style" },
    BORDER_INLINE_START_WIDTH: { transitionProperty: "border-inline-start-width" },
    BORDER_LEFT: { transitionProperty: "border-left" },
    BORDER_LEFT_COLOR: { transitionProperty: "border-left-color" },
    BORDER_LEFT_STYLE: { transitionProperty: "border-left-style" },
    BORDER_LEFT_WIDTH: { transitionProperty: "border-left-width" },
    BORDER_RADIUS: { transitionProperty: "border-radius" },
    BORDER_RIGHT: { transitionProperty: "border-right" },
    BORDER_RIGHT_COLOR: { transitionProperty: "border-right-color" },
    BORDER_RIGHT_STYLE: { transitionProperty: "border-right-style" },
    BORDER_RIGHT_WIDTH: { transitionProperty: "border-right-width" },
    BORDER_SPACING: { transitionProperty: "border-spacing" },
    BORDER_STYLE: { transitionProperty: "border-style" },
    BORDER_TOP: { transitionProperty: "border-top" },
    BORDER_TOP_COLOR: { transitionProperty: "border-top-color" },
    BORDER_TOP_LEFT_RADIUS: { transitionProperty: "border-top-left-radius" },
    BORDER_TOP_RIGHT_RADIUS: { transitionProperty: "border-top-right-radius" },
    BORDER_TOP_STYLE: { transitionProperty: "border-top-style" },
    BORDER_TOP_WIDTH: { transitionProperty: "border-top-width" },
    BORDER_WIDTH: { transitionProperty: "border-width" },
    BOTTOM: { transitionProperty: "bottom" },
    BOX_ALIGN: { transitionProperty: "box-align" },
    BOX_DECORATION_BREAK: { transitionProperty: "box-decoration-break" },
    BOX_DIRECTION: { transitionProperty: "box-direction" },
    BOX_FLEX: { transitionProperty: "box-flex" },
    BOX_FLEX_GROUP: { transitionProperty: "box-flex-group" },
    BOX_LINES: { transitionProperty: "box-lines" },
    BOX_ORDINAL_GROUP: { transitionProperty: "box-ordinal-group" },
    BOX_ORIENT: { transitionProperty: "box-orient" },
    BOX_PACK: { transitionProperty: "box-pack" },
    BOX_SHADOW: { transitionProperty: "box-shadow" },
    BOX_SIZING: { transitionProperty: "box-sizing" },
    BREAK_AFTER: { transitionProperty: "break-after" },
    BREAK_BEFORE: { transitionProperty: "break-before" },
    BREAK_INSIDE: { transitionProperty: "break-inside" },
    CAPTION_SIDE: { transitionProperty: "caption-side" },
    CARET_COLOR: { transitionProperty: "caret-color" },
    CLEAR: { transitionProperty: "clear" },
    CLIP: { transitionProperty: "clip" },
    CLIP_PATH: { transitionProperty: "clip-path" },
    COLOR: { transitionProperty: "color" },
    COLOR_ADJUST: { transitionProperty: "color-adjust" },
    COLUMN_COUNT: { transitionProperty: "column-count" },
    COLUMN_FILL: { transitionProperty: "column-fill" },
    COLUMN_GAP: { transitionProperty: "column-gap" },
    COLUMN_RULE: { transitionProperty: "column-rule" },
    COLUMN_RULE_COLOR: { transitionProperty: "column-rule-color" },
    COLUMN_RULE_STYLE: { transitionProperty: "column-rule-style" },
    COLUMN_RULE_WIDTH: { transitionProperty: "column-rule-width" },
    COLUMN_SPAN: { transitionProperty: "column-span" },
    COLUMN_WIDTH: { transitionProperty: "column-width" },
    COLUMNS: { transitionProperty: "columns" },
    CONTAIN: { transitionProperty: "contain" },
    CONTENT: { transitionProperty: "content" },
    COUNTER_INCREMENT: { transitionProperty: "counter-increment" },
    COUNTER_RESET: { transitionProperty: "counter-reset" },
    CURSOR: { transitionProperty: "cursor" },
    DIRECTION: { transitionProperty: "direction" },
    DISPLAY: { transitionProperty: "display" },
    EMPTY_CELLS: { transitionProperty: "empty-cells" },
    FILTER: { transitionProperty: "filter" },
    FLEX: { transitionProperty: "flex" },
    FLEX_BASIS: { transitionProperty: "flex-basis" },
    FLEX_DIRECTION: { transitionProperty: "flex-direction" },
    FLEX_FLOW: { transitionProperty: "flex-flow" },
    FLEX_GROW: { transitionProperty: "flex-grow" },
    FLEX_SHRINK: { transitionProperty: "flex-shrink" },
    FLEX_WRAP: { transitionProperty: "flex-wrap" },
    FLOAT: { transitionProperty: "float" },
    FONT: { transitionProperty: "font" },
    FONT_FAMILY: { transitionProperty: "font-family" },
    FONT_FEATURE_SETTINGS: { transitionProperty: "font-feature-settings" },
    FONT_KERNING: { transitionProperty: "font-kerning" },
    FONT_LANGUAGE_OVERRIDE: { transitionProperty: "font-language-override" },
    FONT_OPTICAL_SIZING: { transitionProperty: "font-optical-sizing" },
    FONT_VARIATION_SETTINGS: { transitionProperty: "font-variation-settings" },
    FONT_SIZE: { transitionProperty: "font-size" },
    FONT_SIZE_ADJUST: { transitionProperty: "font-size-adjust" },
    FONT_STRETCH: { transitionProperty: "font-stretch" },
    FONT_STYLE: { transitionProperty: "font-style" },
    FONT_SYNTHESIS: { transitionProperty: "font-synthesis" },
    FONT_VARIANT: { transitionProperty: "font-variant" },
    FONT_VARIANT_ALTERNATES: { transitionProperty: "font-variant-alternates" },
    FONT_VARIANT_CAPS: { transitionProperty: "font-variant-caps" },
    FONT_VARIANT_EAST_ASIAN: { transitionProperty: "font-variant-east-asian" },
    FONT_VARIANT_LIGATURES: { transitionProperty: "font-variant-ligatures" },
    FONT_VARIANT_NUMERIC: { transitionProperty: "font-variant-numeric" },
    FONT_VARIANT_POSITION: { transitionProperty: "font-variant-position" },
    FONT_WEIGHT: { transitionProperty: "font-weight" },
    GAP: { transitionProperty: "gap" },
    GRID: { transitionProperty: "grid" },
    GRID_AREA: { transitionProperty: "grid-area" },
    GRID_AUTO_COLUMNS: { transitionProperty: "grid-auto-columns" },
    GRID_AUTO_FLOW: { transitionProperty: "grid-auto-flow" },
    GRID_AUTO_ROWS: { transitionProperty: "grid-auto-rows" },
    GRID_COLUMN: { transitionProperty: "grid-column" },
    GRID_COLUMN_END: { transitionProperty: "grid-column-end" },
    GRID_COLUMN_GAP: { transitionProperty: "grid-column-gap" },
    GRID_COLUMN_START: { transitionProperty: "grid-column-start" },
    GRID_GAP: { transitionProperty: "grid-gap" },
    GRID_ROW: { transitionProperty: "grid-row" },
    GRID_ROW_END: { transitionProperty: "grid-row-end" },
    GRID_ROW_GAP: { transitionProperty: "grid-row-gap" },
    GRID_ROW_START: { transitionProperty: "grid-row-start" },
    GRID_TEMPLATE: { transitionProperty: "grid-template" },
    GRID_TEMPLATE_AREAS: { transitionProperty: "grid-template-areas" },
    GRID_TEMPLATE_COLUMNS: { transitionProperty: "grid-template-columns" },
    GRID_TEMPLATE_ROWS: { transitionProperty: "grid-template-rows" },
    HANGING_PUNCTUATION: { transitionProperty: "hanging-punctuation" },
    HEIGHT: { transitionProperty: "height" },
    HYPHENS: { transitionProperty: "hyphens" },
    IMAGE_ORIENTATION: { transitionProperty: "image-orientation" },
    IMAGE_RENDERING: { transitionProperty: "image-rendering" },
    IMAGE_RESOLUTION: { transitionProperty: "image-resolution" },
    IME_MODE: { transitionProperty: "ime-mode" },
    INITIAL_LETTER: { transitionProperty: "initial-letter" },
    INITIAL_LETTER_ALIGN: { transitionProperty: "initial-letter-align" },
    INLINE_SIZE: { transitionProperty: "inline-size" },
    INSET_BLOCK_END: { transitionProperty: "inset-block-end" },
    INSET_BLOCK_START: { transitionProperty: "inset-block-start" },
    INSET_INLINE_END: { transitionProperty: "inset-inline-end" },
    INSET_INLINE_START: { transitionProperty: "inset-inline-start" },
    ISOLATION: { transitionProperty: "isolation" },
    JUSTIFY_CONTENT: { transitionProperty: "justify-content" },
    JUSTIFY_ITEMS: { transitionProperty: "justify-items" },
    JUSTIFY_SELF: { transitionProperty: "justify-self" },
    LEFT: { transitionProperty: "left" },
    LETTER_SPACING: { transitionProperty: "letter-spacing" },
    LINE_BREAK: { transitionProperty: "line-break" },
    LINE_CLAMP: { transitionProperty: "line-clamp" },
    LINE_HEIGHT: { transitionProperty: "line-height" },
    LIST_STYLE: { transitionProperty: "list-style" },
    LIST_STYLE_IMAGE: { transitionProperty: "list-style-image" },
    LIST_STYLE_POSITION: { transitionProperty: "list-style-position" },
    LIST_STYLE_TYPE: { transitionProperty: "list-style-type" },
    MARGIN: { transitionProperty: "margin" },
    MARGIN_BLOCK_END: { transitionProperty: "margin-block-end" },
    MARGIN_BLOCK_START: { transitionProperty: "margin-block-start" },
    MARGIN_BOTTOM: { transitionProperty: "margin-bottom" },
    MARGIN_INLINE_END: { transitionProperty: "margin-inline-end" },
    MARGIN_INLINE_START: { transitionProperty: "margin-inline-start" },
    MARGIN_LEFT: { transitionProperty: "margin-left" },
    MARGIN_RIGHT: { transitionProperty: "margin-right" },
    MARGIN_TOP: { transitionProperty: "margin-top" },
    MASK: { transitionProperty: "mask" },
    MASK_BORDER: { transitionProperty: "mask-border" },
    MASK_BORDER_MODE: { transitionProperty: "mask-border-mode" },
    MASK_BORDER_OUTSET: { transitionProperty: "mask-border-outset" },
    MASK_BORDER_REPEAT: { transitionProperty: "mask-border-repeat" },
    MASK_BORDER_SLICE: { transitionProperty: "mask-border-slice" },
    MASK_BORDER_SOURCE: { transitionProperty: "mask-border-source" },
    MASK_BORDER_WIDTH: { transitionProperty: "mask-border-width" },
    MASK_CLIP: { transitionProperty: "mask-clip" },
    MASK_COMPOSITE: { transitionProperty: "mask-composite" },
    MASK_IMAGE: { transitionProperty: "mask-image" },
    MASK_MODE: { transitionProperty: "mask-mode" },
    MASK_ORIGIN: { transitionProperty: "mask-origin" },
    MASK_POSITION: { transitionProperty: "mask-position" },
    MASK_REPEAT: { transitionProperty: "mask-repeat" },
    MASK_SIZE: { transitionProperty: "mask-size" },
    MASK_TYPE: { transitionProperty: "mask-type" },
    MAX_BLOCK_SIZE: { transitionProperty: "max-block-size" },
    MAX_HEIGHT: { transitionProperty: "max-height" },
    MAX_INLINE_SIZE: { transitionProperty: "max-inline-size" },
    MAX_LINES: { transitionProperty: "max-lines" },
    MAX_WIDTH: { transitionProperty: "max-width" },
    MIN_BLOCK_SIZE: { transitionProperty: "min-block-size" },
    MIN_HEIGHT: { transitionProperty: "min-height" },
    MIN_INLINE_SIZE: { transitionProperty: "min-inline-size" },
    MIN_WIDTH: { transitionProperty: "min-width" },
    MIX_BLEND_MODE: { transitionProperty: "mix-blend-mode" },
    MOTION: { transitionProperty: "motion" },
    MOTION_OFFSET: { transitionProperty: "motion-offset" },
    MOTION_PATH: { transitionProperty: "motion-path" },
    MOTION_ROTATION: { transitionProperty: "motion-rotation" },
    OBJECT_FIT: { transitionProperty: "object-fit" },
    OBJECT_POSITION: { transitionProperty: "object-position" },
    OFFSET_POSITION: { transitionProperty: "offset-position" },
    OPACITY: { transitionProperty: "opacity" },
    ORDER: { transitionProperty: "order" },
    ORPHANS: { transitionProperty: "orphans" },
    OUTLINE: { transitionProperty: "outline" },
    OUTLINE_COLOR: { transitionProperty: "outline-color" },
    OUTLINE_OFFSET: { transitionProperty: "outline-offset" },
    OUTLINE_STYLE: { transitionProperty: "outline-style" },
    OUTLINE_WIDTH: { transitionProperty: "outline-width" },
    OVERFLOW: { transitionProperty: "overflow" },
    OVERFLOW_ANCHOR: { transitionProperty: "overflow-anchor" },
    OVERFLOW_BLOCK: { transitionProperty: "overflow-block" },
    OVERFLOW_CLIP_BOX: { transitionProperty: "overflow-clip-box" },
    OVERFLOW_INLINE: { transitionProperty: "overflow-inline" },
    OVERFLOW_WRAP: { transitionProperty: "overflow-wrap" },
    OVERFLOW_X: { transitionProperty: "overflow-x" },
    OVERFLOW_Y: { transitionProperty: "overflow-y" },
    OVERSCROLL_BEHAVIOR: { transitionProperty: "overscroll-behavior" },
    OVERSCROLL_BEHAVIOR_X: { transitionProperty: "overscroll-behavior-x" },
    OVERSCROLL_BEHAVIOR_Y: { transitionProperty: "overscroll-behavior-y" },
    PADDING: { transitionProperty: "padding" },
    PADDING_BLOCK_END: { transitionProperty: "padding-block-end" },
    PADDING_BLOCK_START: { transitionProperty: "padding-block-start" },
    PADDING_BOTTOM: { transitionProperty: "padding-bottom" },
    PADDING_INLINE_END: { transitionProperty: "padding-inline-end" },
    PADDING_INLINE_START: { transitionProperty: "padding-inline-start" },
    PADDING_LEFT: { transitionProperty: "padding-left" },
    PADDING_RIGHT: { transitionProperty: "padding-right" },
    PADDING_TOP: { transitionProperty: "padding-top" },
    PAGE_BREAK_AFTER: { transitionProperty: "page-break-after" },
    PAGE_BREAK_BEFORE: { transitionProperty: "page-break-before" },
    PAGE_BREAK_INSIDE: { transitionProperty: "page-break-inside" },
    PAINT_ORDER: { transitionProperty: "paint-order" },
    PERSPECTIVE: { transitionProperty: "perspective" },
    PERSPECTIVE_ORIGIN: { transitionProperty: "perspective-origin" },
    PLACE_CONTENT: { transitionProperty: "place-content" },
    PLACE_ITEMS: { transitionProperty: "place-items" },
    POINTER_EVENTS: { transitionProperty: "pointer-events" },
    POSITION: { transitionProperty: "position" },
    QUOTES: { transitionProperty: "quotes" },
    RESIZE: { transitionProperty: "resize" },
    RIGHT: { transitionProperty: "right" },
    ROTATE: { transitionProperty: "rotate" },
    ROW_GAP: { transitionProperty: "row-gap" },
    RUBY_ALIGN: { transitionProperty: "ruby-align" },
    RUBY_MERGE: { transitionProperty: "ruby-merge" },
    RUBY_POSITION: { transitionProperty: "ruby-position" },
    SCALE: { transitionProperty: "scale" },
    SCROLL_BEHAVIOR: { transitionProperty: "scroll-behavior" },
    SCROLL_SNAP_COORDINATE: { transitionProperty: "scroll-snap-coordinate" },
    SCROLL_SNAP_DESTINATION: { transitionProperty: "scroll-snap-destination" },
    SCROLL_SNAP_POINTS_X: { transitionProperty: "scroll-snap-points-x" },
    SCROLL_SNAP_POINTS_Y: { transitionProperty: "scroll-snap-points-y" },
    SCROLL_SNAP_TYPE: { transitionProperty: "scroll-snap-type" },
    SCROLL_SNAP_TYPE_X: { transitionProperty: "scroll-snap-type-x" },
    SCROLL_SNAP_TYPE_Y: { transitionProperty: "scroll-snap-type-y" },
    SHAPE_IMAGE_THRESHOLD: { transitionProperty: "shape-image-threshold" },
    SHAPE_MARGIN: { transitionProperty: "shape-margin" },
    SHAPE_OUTSIDE: { transitionProperty: "shape-outside" },
    TAB_SIZE: { transitionProperty: "tab-size" },
    TABLE_LAYOUT: { transitionProperty: "table-layout" },
    TEXT_ALIGN: { transitionProperty: "text-align" },
    TEXT_ALIGN_LAST: { transitionProperty: "text-align-last" },
    TEXT_COMBINE_UPRIGHT: { transitionProperty: "text-combine-upright" },
    TEXT_DECORATION: { transitionProperty: "text-decoration" },
    TEXT_DECORATION_COLOR: { transitionProperty: "text-decoration-color" },
    TEXT_DECORATION_LINE: { transitionProperty: "text-decoration-line" },
    TEXT_DECORATION_SKIP: { transitionProperty: "text-decoration-skip" },
    TEXT_DECORATION_SKIP_INK: { transitionProperty: "text-decoration-skip-ink" },
    TEXT_DECORATION_STYLE: { transitionProperty: "text-decoration-style" },
    TEXT_EMPHASIS: { transitionProperty: "text-emphasis" },
    TEXT_EMPHASIS_COLOR: { transitionProperty: "text-emphasis-color" },
    TEXT_EMPHASIS_POSITION: { transitionProperty: "text-emphasis-position" },
    TEXT_EMPHASIS_STYLE: { transitionProperty: "text-emphasis-style" },
    TEXT_INDENT: { transitionProperty: "text-indent" },
    TEXT_JUSTIFY: { transitionProperty: "text-justify" },
    TEXT_ORIENTATION: { transitionProperty: "text-orientation" },
    TEXT_OVERFLOW: { transitionProperty: "text-overflow" },
    TEXT_RENDERING: { transitionProperty: "text-rendering" },
    TEXT_SHADOW: { transitionProperty: "text-shadow" },
    TEXT_SIZE_ADJUST: { transitionProperty: "text-size-adjust" },
    TEXT_TRANSFORM: { transitionProperty: "text-transform" },
    TEXT_UNDERLINE_POSITION: { transitionProperty: "text-underline-position" },
    TOP: { transitionProperty: "top" },
    TOUCH_ACTION: { transitionProperty: "touch-action" },
    TRANSFORM: { transitionProperty: "transform" },
    TRANSFORM_BOX: { transitionProperty: "transform-box" },
    TRANSFORM_ORIGIN: { transitionProperty: "transform-origin" },
    TRANSFORM_STYLE: { transitionProperty: "transform-style" },
    TRANSITION: { transitionProperty: "transition" },
    TRANSITION_DELAY: { transitionProperty: "transition-delay" },
    TRANSITION_DURATION: { transitionProperty: "transition-duration" },
    TRANSITION_PROPERTY: { transitionProperty: "transition-property" },
    TRANSITION_TIMING_FUNCTION: { transitionProperty: "transition-timing-function" },
    TRANSLATE: { transitionProperty: "translate" },
    UNICODE_BIDI: { transitionProperty: "unicode-bidi" },
    USER_SELECT: { transitionProperty: "user-select" },
    VERTICAL_ALIGN: { transitionProperty: "vertical-align" },
    VISIBILITY: { transitionProperty: "visibility" },
    WHITE_SPACE: { transitionProperty: "white-space" },
    WIDOWS: { transitionProperty: "widows" },
    WIDTH: { transitionProperty: "width" },
    WILL_CHANGE: { transitionProperty: "will-change" },
    WORD_BREAK: { transitionProperty: "word-break" },
    WORD_SPACING: { transitionProperty: "word-spacing" },
    WORD_WRAP: { transitionProperty: "word-wrap" },
    WRITING_MODE: { transitionProperty: "writing-mode" },
    Z_INDEX: { transitionProperty: "z-index" },
    ZOOM: { transitionProperty: "zoom" }
};
const _TransitionTimingFunction = {
    set: (...params: Param[]): Sheet => ({ transitionTimingFunction: buildProperty(params) }),
    LINEAR: { transitionTimingFunction: "linear" },
    EASE: { transitionTimingFunction: "ease" },
    EASE_IN: { transitionTimingFunction: "ease-in" },
    EASE_OUT: { transitionTimingFunction: "ease-out" },
    EASE_IN_OUT: { transitionTimingFunction: "ease-in-out" },
    cubicBezier: (...params: Param[]): Sheet => ({ transitionTimingFunction: Method.cubicBezier(...params) }),
    STEP_START: { transitionTimingFunction: "step-start" },
    STEP_END: { transitionTimingFunction: "step-end" },
    steps: (...params: Param[]): Sheet => ({ transitionTimingFunction: Method.steps(...params) }),
    frames: (...params: Param[]): Sheet => ({ transitionTimingFunction: Method.frames(...params) })
};
const _Translate = {
    set: (...params: Param[]): Sheet => ({ translate: buildProperty(params) }),
    NONE: { translate: "none" },
    cap: (...nums: number[]): Sheet => ({ translate: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ translate: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ translate: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ translate: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ translate: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ translate: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ translate: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ translate: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ translate: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ translate: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ translate: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ translate: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ translate: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ translate: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ translate: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ translate: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ translate: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ translate: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ translate: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ translate: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ translate: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ translate: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ translate: Length.X(...nums) })
};
const _UnicodeBidi = {
    set: (...params: Param[]): Sheet => ({ unicodeBidi: buildProperty(params) }),
    NORMAL: { unicodeBidi: "normal" },
    EMBED: { unicodeBidi: "embed" },
    ISOLATE: { unicodeBidi: "isolate" },
    BIDI_OVERRIDE: { unicodeBidi: "bidi-override" },
    ISOLATE_OVERRIDE: { unicodeBidi: "isolate-override" },
    PLAINTEXT: { unicodeBidi: "plaintext" }
};
const _UserSelect = {
    set: (...params: Param[]): Sheet => ({ userSelect: buildProperty(params) }),
    AUTO: { userSelect: "auto" },
    TEXT: { userSelect: "text" },
    NONE: { userSelect: "none" },
    CONTAIN: { userSelect: "contain" },
    ALL: { userSelect: "all" }
};
const _VerticalAlign = {
    set: (...params: Param[]): Sheet => ({ verticalAlign: buildProperty(params) }),
    BASELINE: { verticalAlign: "baseline" },
    SUB: { verticalAlign: "sub" },
    SUPER: { verticalAlign: "super" },
    TEXT_TOP: { verticalAlign: "text-top" },
    TEXT_BOTTOM: { verticalAlign: "text-bottom" },
    MIDDLE: { verticalAlign: "middle" },
    TOP: { verticalAlign: "top" },
    BOTTOM: { verticalAlign: "bottom" },
    X: (...nums: number[]): Sheet => ({ verticalAlign: Length.X(...nums) }),
    cap: (...nums: number[]): Sheet => ({ verticalAlign: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ verticalAlign: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ verticalAlign: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ verticalAlign: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ verticalAlign: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ verticalAlign: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ verticalAlign: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ verticalAlign: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ verticalAlign: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ verticalAlign: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ verticalAlign: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ verticalAlign: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ verticalAlign: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ verticalAlign: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ verticalAlign: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ verticalAlign: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ verticalAlign: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ verticalAlign: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ verticalAlign: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ verticalAlign: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ verticalAlign: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ verticalAlign: Length.fr(...nums) })
};
const _Visibility = {
    set: (...params: Param[]): Sheet => ({ visibility: buildProperty(params) }),
    VISIBLE: { visibility: "visible" },
    HIDDEN: { visibility: "hidden" },
    COLLAPSE: { visibility: "collapse" }
};
const _WhiteSpace = {
    set: (...params: Param[]): Sheet => ({ whiteSpace: buildProperty(params) }),
    NORMAL: { whiteSpace: "normal" },
    PRE: { whiteSpace: "pre" },
    NOWRAP: { whiteSpace: "nowrap" },
    PRE_WRAP: { whiteSpace: "pre-wrap" },
    PRE_LINE: { whiteSpace: "pre-line" }
};
const _Widows = { set: (...params: Param[]): Sheet => ({ widows: buildProperty(params) }) };
const _Width = {
    set: (...params: Param[]): Sheet => ({ width: buildProperty(params) }),
    cap: (...nums: number[]): Sheet => ({ width: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ width: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ width: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ width: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ width: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ width: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ width: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ width: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ width: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ width: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ width: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ width: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ width: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ width: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ width: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ width: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ width: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ width: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ width: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ width: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ width: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ width: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ width: Length.X(...nums) }),
    BORDER_BOX: { width: "border-box" },
    CONTENT_BOX: { width: "content-box" },
    AVAILABLE: { width: "available" },
    MIN_CONTENT: { width: "min-content" },
    MAX_CONTENT: { width: "max-content" },
    FIT_CONTENT: { width: "fit-content" },
    AUTO: { width: "auto" }
};
const _WillChange = {
    set: (...params: Param[]): Sheet => ({ willChange: buildProperty(params) }),
    AUTO: { willChange: "auto" },
    SCROLL_POSITION: { willChange: "scroll-position" },
    CONTENTS: { willChange: "contents" }
};
const _WordBreak = {
    set: (...params: Param[]): Sheet => ({ wordBreak: buildProperty(params) }),
    NORMAL: { wordBreak: "normal" },
    BREAK_ALL: { wordBreak: "break-all" },
    KEEP_ALL: { wordBreak: "keep-all" },
    BREAK_WORD: { wordBreak: "break-word" }
};
const _WordSpacing = {
    set: (...params: Param[]): Sheet => ({ wordSpacing: buildProperty(params) }),
    NORMAL: { wordSpacing: "normal" },
    cap: (...nums: number[]): Sheet => ({ wordSpacing: Length.cap(...nums) }),
    ch: (...nums: number[]): Sheet => ({ wordSpacing: Length.ch(...nums) }),
    em: (...nums: number[]): Sheet => ({ wordSpacing: Length.em(...nums) }),
    ex: (...nums: number[]): Sheet => ({ wordSpacing: Length.ex(...nums) }),
    ic: (...nums: number[]): Sheet => ({ wordSpacing: Length.ic(...nums) }),
    lh: (...nums: number[]): Sheet => ({ wordSpacing: Length.lh(...nums) }),
    rem: (...nums: number[]): Sheet => ({ wordSpacing: Length.rem(...nums) }),
    rlh: (...nums: number[]): Sheet => ({ wordSpacing: Length.rlh(...nums) }),
    vh: (...nums: number[]): Sheet => ({ wordSpacing: Length.vh(...nums) }),
    vw: (...nums: number[]): Sheet => ({ wordSpacing: Length.vw(...nums) }),
    vi: (...nums: number[]): Sheet => ({ wordSpacing: Length.vi(...nums) }),
    vb: (...nums: number[]): Sheet => ({ wordSpacing: Length.vb(...nums) }),
    vmin: (...nums: number[]): Sheet => ({ wordSpacing: Length.vmin(...nums) }),
    vmax: (...nums: number[]): Sheet => ({ wordSpacing: Length.vmax(...nums) }),
    px: (...nums: number[]): Sheet => ({ wordSpacing: Length.px(...nums) }),
    cm: (...nums: number[]): Sheet => ({ wordSpacing: Length.cm(...nums) }),
    mm: (...nums: number[]): Sheet => ({ wordSpacing: Length.mm(...nums) }),
    Q: (...nums: number[]): Sheet => ({ wordSpacing: Length.Q(...nums) }),
    in: (...nums: number[]): Sheet => ({ wordSpacing: Length.in(...nums) }),
    pc: (...nums: number[]): Sheet => ({ wordSpacing: Length.pc(...nums) }),
    pt: (...nums: number[]): Sheet => ({ wordSpacing: Length.pt(...nums) }),
    fr: (...nums: number[]): Sheet => ({ wordSpacing: Length.fr(...nums) }),
    X: (...nums: number[]): Sheet => ({ wordSpacing: Length.X(...nums) })
};
const _WordWrap = {
    set: (...params: Param[]): Sheet => ({ wordWrap: buildProperty(params) }),
    NORMAL: { wordWrap: "normal" },
    BREAK_WORD: { wordWrap: "break-word" }
};
const _WritingMode = {
    set: (...params: Param[]): Sheet => ({ writingMode: buildProperty(params) }),
    HORIZONTAL_TB: { writingMode: "horizontal-tb" },
    VERTICAL_RL: { writingMode: "vertical-rl" },
    VERTICAL_LR: { writingMode: "vertical-lr" },
    SIDEWAYS_RL: { writingMode: "sideways-rl" },
    SIDEWAYS_LR: { writingMode: "sideways-lr" }
};
const _ZIndex = { set: (...params: Param[]): Sheet => ({ zIndex: buildProperty(params) }), AUTO: { zIndex: "auto" } };
const _Zoom = {
    set: (...params: Param[]): Sheet => ({ zoom: buildProperty(params) }),
    NORMAL: { zoom: "normal" },
    RESET: { zoom: "reset" },
    X: (...nums: number[]): Sheet => ({ zoom: Length.X(...nums) })
};
export const Css = {
    AlignContent: _AlignContent,
    AlignItems: _AlignItems,
    AlignSelf: _AlignSelf,
    All: _All,
    Animation: _Animation,
    AnimationDelay: _AnimationDelay,
    AnimationDirection: _AnimationDirection,
    AnimationDuration: _AnimationDuration,
    AnimationFillMode: _AnimationFillMode,
    AnimationIterationCount: _AnimationIterationCount,
    AnimationName: _AnimationName,
    AnimationPlayState: _AnimationPlayState,
    AnimationTimingFunction: _AnimationTimingFunction,
    Appearance: _Appearance,
    Azimuth: _Azimuth,
    BackdropFilter: _BackdropFilter,
    BackfaceVisibility: _BackfaceVisibility,
    Background: _Background,
    BackgroundAttachment: _BackgroundAttachment,
    BackgroundBlendMode: _BackgroundBlendMode,
    BackgroundClip: _BackgroundClip,
    BackgroundColor: _BackgroundColor,
    BackgroundImage: _BackgroundImage,
    BackgroundOrigin: _BackgroundOrigin,
    BackgroundPosition: _BackgroundPosition,
    BackgroundPositionX: _BackgroundPositionX,
    BackgroundPositionY: _BackgroundPositionY,
    BackgroundRepeat: _BackgroundRepeat,
    BackgroundSize: _BackgroundSize,
    BlockOverflow: _BlockOverflow,
    BlockSize: _BlockSize,
    Border: _Border,
    BorderBlockEnd: _BorderBlockEnd,
    BorderBlockEndColor: _BorderBlockEndColor,
    BorderBlockEndStyle: _BorderBlockEndStyle,
    BorderBlockEndWidth: _BorderBlockEndWidth,
    BorderBlockStart: _BorderBlockStart,
    BorderBlockStartColor: _BorderBlockStartColor,
    BorderBlockStartStyle: _BorderBlockStartStyle,
    BorderBlockStartWidth: _BorderBlockStartWidth,
    BorderBottom: _BorderBottom,
    BorderBottomColor: _BorderBottomColor,
    BorderBottomLeftRadius: _BorderBottomLeftRadius,
    BorderBottomRightRadius: _BorderBottomRightRadius,
    BorderBottomStyle: _BorderBottomStyle,
    BorderBottomWidth: _BorderBottomWidth,
    BorderCollapse: _BorderCollapse,
    BorderColor: _BorderColor,
    BorderImage: _BorderImage,
    BorderImageOutset: _BorderImageOutset,
    BorderImageRepeat: _BorderImageRepeat,
    BorderImageSlice: _BorderImageSlice,
    BorderImageSource: _BorderImageSource,
    BorderImageWidth: _BorderImageWidth,
    BorderInlineEnd: _BorderInlineEnd,
    BorderInlineEndColor: _BorderInlineEndColor,
    BorderInlineEndStyle: _BorderInlineEndStyle,
    BorderInlineEndWidth: _BorderInlineEndWidth,
    BorderInlineStart: _BorderInlineStart,
    BorderInlineStartColor: _BorderInlineStartColor,
    BorderInlineStartStyle: _BorderInlineStartStyle,
    BorderInlineStartWidth: _BorderInlineStartWidth,
    BorderLeft: _BorderLeft,
    BorderLeftColor: _BorderLeftColor,
    BorderLeftStyle: _BorderLeftStyle,
    BorderLeftWidth: _BorderLeftWidth,
    BorderRadius: _BorderRadius,
    BorderRight: _BorderRight,
    BorderRightColor: _BorderRightColor,
    BorderRightStyle: _BorderRightStyle,
    BorderRightWidth: _BorderRightWidth,
    BorderSpacing: _BorderSpacing,
    BorderStyle: _BorderStyle,
    BorderTop: _BorderTop,
    BorderTopColor: _BorderTopColor,
    BorderTopLeftRadius: _BorderTopLeftRadius,
    BorderTopRightRadius: _BorderTopRightRadius,
    BorderTopStyle: _BorderTopStyle,
    BorderTopWidth: _BorderTopWidth,
    BorderWidth: _BorderWidth,
    Bottom: _Bottom,
    BoxAlign: _BoxAlign,
    BoxDecorationBreak: _BoxDecorationBreak,
    BoxDirection: _BoxDirection,
    BoxFlex: _BoxFlex,
    BoxFlexGroup: _BoxFlexGroup,
    BoxLines: _BoxLines,
    BoxOrdinalGroup: _BoxOrdinalGroup,
    BoxOrient: _BoxOrient,
    BoxPack: _BoxPack,
    BoxShadow: _BoxShadow,
    BoxSizing: _BoxSizing,
    BreakAfter: _BreakAfter,
    BreakBefore: _BreakBefore,
    BreakInside: _BreakInside,
    CaptionSide: _CaptionSide,
    CaretColor: _CaretColor,
    Clear: _Clear,
    Clip: _Clip,
    ClipPath: _ClipPath,
    Color: _Color,
    ColorAdjust: _ColorAdjust,
    ColumnCount: _ColumnCount,
    ColumnFill: _ColumnFill,
    ColumnGap: _ColumnGap,
    ColumnRule: _ColumnRule,
    ColumnRuleColor: _ColumnRuleColor,
    ColumnRuleStyle: _ColumnRuleStyle,
    ColumnRuleWidth: _ColumnRuleWidth,
    ColumnSpan: _ColumnSpan,
    ColumnWidth: _ColumnWidth,
    Columns: _Columns,
    Contain: _Contain,
    Content: _Content,
    CounterIncrement: _CounterIncrement,
    CounterReset: _CounterReset,
    Cursor: _Cursor,
    Direction: _Direction,
    Display: _Display,
    EmptyCells: _EmptyCells,
    Filter: _Filter,
    Flex: _Flex,
    FlexBasis: _FlexBasis,
    FlexDirection: _FlexDirection,
    FlexFlow: _FlexFlow,
    FlexGrow: _FlexGrow,
    FlexShrink: _FlexShrink,
    FlexWrap: _FlexWrap,
    Float: _Float,
    Font: _Font,
    FontFamily: _FontFamily,
    FontFeatureSettings: _FontFeatureSettings,
    FontKerning: _FontKerning,
    FontLanguageOverride: _FontLanguageOverride,
    FontOpticalSizing: _FontOpticalSizing,
    FontSize: _FontSize,
    FontSizeAdjust: _FontSizeAdjust,
    FontStretch: _FontStretch,
    FontStyle: _FontStyle,
    FontSynthesis: _FontSynthesis,
    FontVariant: _FontVariant,
    FontVariantAlternates: _FontVariantAlternates,
    FontVariantCaps: _FontVariantCaps,
    FontVariantEastAsian: _FontVariantEastAsian,
    FontVariantLigatures: _FontVariantLigatures,
    FontVariantNumeric: _FontVariantNumeric,
    FontVariantPosition: _FontVariantPosition,
    FontVariationSettings: _FontVariationSettings,
    FontWeight: _FontWeight,
    Gap: _Gap,
    Grid: _Grid,
    GridArea: _GridArea,
    GridAutoColumns: _GridAutoColumns,
    GridAutoFlow: _GridAutoFlow,
    GridAutoRows: _GridAutoRows,
    GridColumn: _GridColumn,
    GridColumnEnd: _GridColumnEnd,
    GridColumnGap: _GridColumnGap,
    GridColumnStart: _GridColumnStart,
    GridGap: _GridGap,
    GridRow: _GridRow,
    GridRowEnd: _GridRowEnd,
    GridRowGap: _GridRowGap,
    GridRowStart: _GridRowStart,
    GridTemplate: _GridTemplate,
    GridTemplateAreas: _GridTemplateAreas,
    GridTemplateColumns: _GridTemplateColumns,
    GridTemplateRows: _GridTemplateRows,
    HangingPunctuation: _HangingPunctuation,
    Height: _Height,
    Hyphens: _Hyphens,
    ImageOrientation: _ImageOrientation,
    ImageRendering: _ImageRendering,
    ImageResolution: _ImageResolution,
    ImeMode: _ImeMode,
    InitialLetter: _InitialLetter,
    InitialLetterAlign: _InitialLetterAlign,
    InlineSize: _InlineSize,
    InsetBlockEnd: _InsetBlockEnd,
    InsetBlockStart: _InsetBlockStart,
    InsetInlineEnd: _InsetInlineEnd,
    InsetInlineStart: _InsetInlineStart,
    Isolation: _Isolation,
    JustifyContent: _JustifyContent,
    JustifyItems: _JustifyItems,
    JustifySelf: _JustifySelf,
    Left: _Left,
    LetterSpacing: _LetterSpacing,
    LineBreak: _LineBreak,
    LineClamp: _LineClamp,
    LineHeight: _LineHeight,
    ListStyle: _ListStyle,
    ListStyleImage: _ListStyleImage,
    ListStylePosition: _ListStylePosition,
    ListStyleType: _ListStyleType,
    Margin: _Margin,
    MarginBlockEnd: _MarginBlockEnd,
    MarginBlockStart: _MarginBlockStart,
    MarginBottom: _MarginBottom,
    MarginInlineEnd: _MarginInlineEnd,
    MarginInlineStart: _MarginInlineStart,
    MarginLeft: _MarginLeft,
    MarginRight: _MarginRight,
    MarginTop: _MarginTop,
    Mask: _Mask,
    MaskBorder: _MaskBorder,
    MaskBorderMode: _MaskBorderMode,
    MaskBorderOutset: _MaskBorderOutset,
    MaskBorderRepeat: _MaskBorderRepeat,
    MaskBorderSlice: _MaskBorderSlice,
    MaskBorderSource: _MaskBorderSource,
    MaskBorderWidth: _MaskBorderWidth,
    MaskClip: _MaskClip,
    MaskComposite: _MaskComposite,
    MaskImage: _MaskImage,
    MaskMode: _MaskMode,
    MaskOrigin: _MaskOrigin,
    MaskPosition: _MaskPosition,
    MaskRepeat: _MaskRepeat,
    MaskSize: _MaskSize,
    MaskType: _MaskType,
    MaxBlockSize: _MaxBlockSize,
    MaxHeight: _MaxHeight,
    MaxInlineSize: _MaxInlineSize,
    MaxLines: _MaxLines,
    MaxWidth: _MaxWidth,
    MinBlockSize: _MinBlockSize,
    MinHeight: _MinHeight,
    MinInlineSize: _MinInlineSize,
    MinWidth: _MinWidth,
    MixBlendMode: _MixBlendMode,
    Motion: _Motion,
    MotionOffset: _MotionOffset,
    MotionPath: _MotionPath,
    MotionRotation: _MotionRotation,
    MozAppearance: _MozAppearance,
    MozBinding: _MozBinding,
    MozBorderBottomColors: _MozBorderBottomColors,
    MozBorderLeftColors: _MozBorderLeftColors,
    MozBorderRightColors: _MozBorderRightColors,
    MozBorderTopColors: _MozBorderTopColors,
    MozContextProperties: _MozContextProperties,
    MozFloatEdge: _MozFloatEdge,
    MozForceBrokenImageIcon: _MozForceBrokenImageIcon,
    MozImageRegion: _MozImageRegion,
    MozOrient: _MozOrient,
    MozOutlineRadius: _MozOutlineRadius,
    MozOutlineRadiusBottomleft: _MozOutlineRadiusBottomleft,
    MozOutlineRadiusBottomright: _MozOutlineRadiusBottomright,
    MozOutlineRadiusTopleft: _MozOutlineRadiusTopleft,
    MozOutlineRadiusTopright: _MozOutlineRadiusTopright,
    MozStackSizing: _MozStackSizing,
    MozTextBlink: _MozTextBlink,
    MozUserFocus: _MozUserFocus,
    MozUserInput: _MozUserInput,
    MozUserModify: _MozUserModify,
    MozWindowDragging: _MozWindowDragging,
    MozWindowShadow: _MozWindowShadow,
    MsAccelerator: _MsAccelerator,
    MsBlockProgression: _MsBlockProgression,
    MsContentZoomChaining: _MsContentZoomChaining,
    MsContentZoomLimit: _MsContentZoomLimit,
    MsContentZoomLimitMax: _MsContentZoomLimitMax,
    MsContentZoomLimitMin: _MsContentZoomLimitMin,
    MsContentZoomSnap: _MsContentZoomSnap,
    MsContentZoomSnapPoints: _MsContentZoomSnapPoints,
    MsContentZoomSnapType: _MsContentZoomSnapType,
    MsContentZooming: _MsContentZooming,
    MsFilter: _MsFilter,
    MsFlowFrom: _MsFlowFrom,
    MsFlowInto: _MsFlowInto,
    MsHighContrastAdjust: _MsHighContrastAdjust,
    MsHyphenateLimitChars: _MsHyphenateLimitChars,
    MsHyphenateLimitLines: _MsHyphenateLimitLines,
    MsHyphenateLimitZone: _MsHyphenateLimitZone,
    MsImeAlign: _MsImeAlign,
    MsOverflowStyle: _MsOverflowStyle,
    MsScrollChaining: _MsScrollChaining,
    MsScrollLimit: _MsScrollLimit,
    MsScrollLimitXMax: _MsScrollLimitXMax,
    MsScrollLimitXMin: _MsScrollLimitXMin,
    MsScrollLimitYMax: _MsScrollLimitYMax,
    MsScrollLimitYMin: _MsScrollLimitYMin,
    MsScrollRails: _MsScrollRails,
    MsScrollSnapPointsX: _MsScrollSnapPointsX,
    MsScrollSnapPointsY: _MsScrollSnapPointsY,
    MsScrollSnapType: _MsScrollSnapType,
    MsScrollSnapX: _MsScrollSnapX,
    MsScrollSnapY: _MsScrollSnapY,
    MsScrollTranslation: _MsScrollTranslation,
    MsScrollbar3dlightColor: _MsScrollbar3dlightColor,
    MsScrollbarArrowColor: _MsScrollbarArrowColor,
    MsScrollbarBaseColor: _MsScrollbarBaseColor,
    MsScrollbarDarkshadowColor: _MsScrollbarDarkshadowColor,
    MsScrollbarFaceColor: _MsScrollbarFaceColor,
    MsScrollbarHighlightColor: _MsScrollbarHighlightColor,
    MsScrollbarShadowColor: _MsScrollbarShadowColor,
    MsScrollbarTrackColor: _MsScrollbarTrackColor,
    MsTextAutospace: _MsTextAutospace,
    MsTouchSelect: _MsTouchSelect,
    MsUserSelect: _MsUserSelect,
    MsWrapFlow: _MsWrapFlow,
    MsWrapMargin: _MsWrapMargin,
    MsWrapThrough: _MsWrapThrough,
    ObjectFit: _ObjectFit,
    ObjectPosition: _ObjectPosition,
    OffsetPosition: _OffsetPosition,
    Opacity: _Opacity,
    Order: _Order,
    Orphans: _Orphans,
    Outline: _Outline,
    OutlineColor: _OutlineColor,
    OutlineOffset: _OutlineOffset,
    OutlineStyle: _OutlineStyle,
    OutlineWidth: _OutlineWidth,
    Overflow: _Overflow,
    OverflowAnchor: _OverflowAnchor,
    OverflowBlock: _OverflowBlock,
    OverflowClipBox: _OverflowClipBox,
    OverflowInline: _OverflowInline,
    OverflowWrap: _OverflowWrap,
    OverflowX: _OverflowX,
    OverflowY: _OverflowY,
    OverscrollBehavior: _OverscrollBehavior,
    OverscrollBehaviorX: _OverscrollBehaviorX,
    OverscrollBehaviorY: _OverscrollBehaviorY,
    Padding: _Padding,
    PaddingBlockEnd: _PaddingBlockEnd,
    PaddingBlockStart: _PaddingBlockStart,
    PaddingBottom: _PaddingBottom,
    PaddingInlineEnd: _PaddingInlineEnd,
    PaddingInlineStart: _PaddingInlineStart,
    PaddingLeft: _PaddingLeft,
    PaddingRight: _PaddingRight,
    PaddingTop: _PaddingTop,
    PageBreakAfter: _PageBreakAfter,
    PageBreakBefore: _PageBreakBefore,
    PageBreakInside: _PageBreakInside,
    PaintOrder: _PaintOrder,
    Perspective: _Perspective,
    PerspectiveOrigin: _PerspectiveOrigin,
    PlaceContent: _PlaceContent,
    PlaceItems: _PlaceItems,
    PointerEvents: _PointerEvents,
    Position: _Position,
    Quotes: _Quotes,
    Resize: _Resize,
    Right: _Right,
    Rotate: _Rotate,
    RowGap: _RowGap,
    RubyAlign: _RubyAlign,
    RubyMerge: _RubyMerge,
    RubyPosition: _RubyPosition,
    Scale: _Scale,
    ScrollBehavior: _ScrollBehavior,
    ScrollSnapCoordinate: _ScrollSnapCoordinate,
    ScrollSnapDestination: _ScrollSnapDestination,
    ScrollSnapPointsX: _ScrollSnapPointsX,
    ScrollSnapPointsY: _ScrollSnapPointsY,
    ScrollSnapType: _ScrollSnapType,
    ScrollSnapTypeX: _ScrollSnapTypeX,
    ScrollSnapTypeY: _ScrollSnapTypeY,
    ShapeImageThreshold: _ShapeImageThreshold,
    ShapeMargin: _ShapeMargin,
    ShapeOutside: _ShapeOutside,
    TabSize: _TabSize,
    TableLayout: _TableLayout,
    TextAlign: _TextAlign,
    TextAlignLast: _TextAlignLast,
    TextCombineUpright: _TextCombineUpright,
    TextDecoration: _TextDecoration,
    TextDecorationColor: _TextDecorationColor,
    TextDecorationLine: _TextDecorationLine,
    TextDecorationSkip: _TextDecorationSkip,
    TextDecorationSkipInk: _TextDecorationSkipInk,
    TextDecorationStyle: _TextDecorationStyle,
    TextEmphasis: _TextEmphasis,
    TextEmphasisColor: _TextEmphasisColor,
    TextEmphasisPosition: _TextEmphasisPosition,
    TextEmphasisStyle: _TextEmphasisStyle,
    TextIndent: _TextIndent,
    TextJustify: _TextJustify,
    TextOrientation: _TextOrientation,
    TextOverflow: _TextOverflow,
    TextRendering: _TextRendering,
    TextShadow: _TextShadow,
    TextSizeAdjust: _TextSizeAdjust,
    TextTransform: _TextTransform,
    TextUnderlinePosition: _TextUnderlinePosition,
    Top: _Top,
    TouchAction: _TouchAction,
    Transform: _Transform,
    TransformBox: _TransformBox,
    TransformOrigin: _TransformOrigin,
    TransformStyle: _TransformStyle,
    Transition: _Transition,
    TransitionDelay: _TransitionDelay,
    TransitionDuration: _TransitionDuration,
    TransitionProperty: _TransitionProperty,
    TransitionTimingFunction: _TransitionTimingFunction,
    Translate: _Translate,
    UnicodeBidi: _UnicodeBidi,
    UserSelect: _UserSelect,
    VerticalAlign: _VerticalAlign,
    Visibility: _Visibility,
    WebkitAppearance: _WebkitAppearance,
    WebkitBorderBefore: _WebkitBorderBefore,
    WebkitBorderBeforeColor: _WebkitBorderBeforeColor,
    WebkitBorderBeforeStyle: _WebkitBorderBeforeStyle,
    WebkitBorderBeforeWidth: _WebkitBorderBeforeWidth,
    WebkitBoxReflect: _WebkitBoxReflect,
    WebkitMask: _WebkitMask,
    WebkitMaskAttachment: _WebkitMaskAttachment,
    WebkitMaskClip: _WebkitMaskClip,
    WebkitMaskComposite: _WebkitMaskComposite,
    WebkitMaskImage: _WebkitMaskImage,
    WebkitMaskOrigin: _WebkitMaskOrigin,
    WebkitMaskPosition: _WebkitMaskPosition,
    WebkitMaskPositionX: _WebkitMaskPositionX,
    WebkitMaskPositionY: _WebkitMaskPositionY,
    WebkitMaskRepeat: _WebkitMaskRepeat,
    WebkitMaskRepeatX: _WebkitMaskRepeatX,
    WebkitMaskRepeatY: _WebkitMaskRepeatY,
    WebkitMaskSize: _WebkitMaskSize,
    WebkitOverflowScrolling: _WebkitOverflowScrolling,
    WebkitTapHighlightColor: _WebkitTapHighlightColor,
    WebkitTextFillColor: _WebkitTextFillColor,
    WebkitTextStroke: _WebkitTextStroke,
    WebkitTextStrokeColor: _WebkitTextStrokeColor,
    WebkitTextStrokeWidth: _WebkitTextStrokeWidth,
    WebkitTouchCallout: _WebkitTouchCallout,
    WebkitUserModify: _WebkitUserModify,
    WhiteSpace: _WhiteSpace,
    Widows: _Widows,
    Width: _Width,
    WillChange: _WillChange,
    WordBreak: _WordBreak,
    WordSpacing: _WordSpacing,
    WordWrap: _WordWrap,
    WritingMode: _WritingMode,
    ZIndex: _ZIndex,
    Zoom: _Zoom,
    sheet: _sheet
};
export const _Element = {
    A: "a",
    ABBR: "abbr",
    ACRONYM: "acronym",
    ADDRESS: "address",
    APPLET: "applet",
    AREA: "area",
    ARTICLE: "article",
    ASIDE: "aside",
    AUDIO: "audio",
    B: "b",
    BASE: "base",
    BASEFONT: "basefont",
    BDI: "bdi",
    BDO: "bdo",
    BIG: "big",
    BLOCKQUOTE: "blockquote",
    BODY: "body",
    BR: "br",
    BUTTON: "button",
    CANVAS: "canvas",
    CAPTION: "caption",
    CENTER: "center",
    CITE: "cite",
    CODE: "code",
    COL: "col",
    COLGROUP: "colgroup",
    DATA: "data",
    DATALIST: "datalist",
    DD: "dd",
    DEL: "del",
    DETAILS: "details",
    DFN: "dfn",
    DIALOG: "dialog",
    DIR: "dir",
    DIV: "div",
    DL: "dl",
    DT: "dt",
    EM: "em",
    EMBED: "embed",
    FIELDSET: "fieldset",
    FIGCAPTION: "figcaption",
    FIGURE: "figure",
    FONT: "font",
    FOOTER: "footer",
    FORM: "form",
    FRAME: "frame",
    FRAMESET: "frameset",
    H1: "h1",
    HEAD: "head",
    HEADER: "header",
    HR: "hr",
    HTML: "html",
    I: "i",
    IFRAME: "iframe",
    IMG: "img",
    INPUT: "input",
    INS: "ins",
    KBD: "kbd",
    LABEL: "label",
    LEGEND: "legend",
    LI: "li",
    LINK: "link",
    MAIN: "main",
    MAP: "map",
    MARK: "mark",
    META: "meta",
    METER: "meter",
    NAV: "nav",
    NOFRAMES: "noframes",
    NOSCRIPT: "noscript",
    OBJECT: "object",
    OL: "ol",
    OPTGROUP: "optgroup",
    OPTION: "option",
    OUTPUT: "output",
    P: "p",
    PARAM: "param",
    PICTURE: "picture",
    PRE: "pre",
    PROGRESS: "progress",
    Q: "q",
    RP: "rp",
    RT: "rt",
    RUBY: "ruby",
    S: "s",
    SAMP: "samp",
    SCRIPT: "script",
    SECTION: "section",
    SELECT: "select",
    SMALL: "small",
    SOURCE: "source",
    SPAN: "span",
    STRIKE: "strike",
    STRONG: "strong",
    STYLE: "style",
    SUB: "sub",
    SUMMARY: "summary",
    SUP: "sup",
    SVG: "svg",
    TABLE: "table",
    TBODY: "tbody",
    TD: "td",
    TEMPLATE: "template",
    TEXTAREA: "textarea",
    TFOOT: "tfoot",
    TH: "th",
    THEAD: "thead",
    TIME: "time",
    TITLE: "title",
    TR: "tr",
    TRACK: "track",
    TT: "tt",
    U: "u",
    UL: "ul",
    VAR: "var",
    VIDEO: "video",
    WBR: "wbr"
};
export const _Pseudo = {
    Class: {
        ACTIVE: ":active",
        ANY_LINK: ":any-link",
        BLANK: ":blank",
        CHECKED: ":checked",
        CURRENT: ":current",
        DEFAULT: ":default",
        DEFINED: ":defined",
        dir: (...params: Param[]): string => {
            return buildMethod(":dir", params);
        },
        DISABLED: ":disabled",
        DROP: ":drop",
        EMPTY: ":empty",
        ENABLED: ":enabled",
        FIRST: ":first",
        FIRST_CHILD: ":first-child",
        FIRST_OF_TYPE: ":first-of-type",
        FULLSCREEN: ":fullscreen",
        FUTURE: ":future",
        FOCUS: ":focus",
        FOCUS_VISIBLE: ":focus-visible",
        FOCUS_WITHIN: ":focus-within",
        has: (...params: Param[]): string => {
            return buildMethod(":has", params);
        },
        HOST: ":host",
        host: (...params: Param[]): string => {
            return buildMethod(":host", params);
        },
        hostContext: (...params: Param[]): string => {
            return buildMethod(":host-context", params);
        },
        HOVER: ":hover",
        INDETERMINATE: ":indeterminate",
        IN_RANGE: ":in-range",
        INVALID: ":invalid",
        lang: (...params: Param[]): string => {
            return buildMethod(":lang", params);
        },
        LAST_CHILD: ":last-child",
        LAST_OF_TYPE: ":last-of-type",
        LEFT: ":left",
        LINK: ":link",
        LOCAL_LINK: ":local-link",
        matches: (...params: Param[]): string => {
            return buildMethod(":matches", params);
        },
        not: (...params: Param[]): string => {
            return buildMethod(":not", params);
        },
        nthChild: (...params: Param[]): string => {
            return buildMethod(":nth-child", params);
        },
        nthCol: (...params: Param[]): string => {
            return buildMethod(":nth-col", params);
        },
        nthLastChild: (...params: Param[]): string => {
            return buildMethod(":nth-last-child", params);
        },
        nthLastCol: (...params: Param[]): string => {
            return buildMethod(":nth-last-col", params);
        },
        nthLastOfType: (...params: Param[]): string => {
            return buildMethod(":nth-last-of-type", params);
        },
        nthOfType: (...params: Param[]): string => {
            return buildMethod(":nth-of-type", params);
        },
        ONLY_CHILD: ":only-child",
        ONLY_OF_TYPE: ":only-of-type",
        OPTIONAL: ":optional",
        OUT_OF_RANGE: ":out-of-range",
        PAST: ":past",
        PLACEHOLDER_SHOWN: ":placeholder-shown",
        READ_ONLY: ":read-only",
        READ_WRITE: ":read-write",
        REQUIRED: ":required",
        RIGHT: ":right",
        ROOT: ":root",
        SCOPE: ":scope",
        TARGET: ":target",
        TARGET_WITHIN: ":target-within",
        USER_INVALID: ":user-invalid",
        VALID: ":valid",
        VISITED: ":visited"
    },
    Element: {
        AFTER: "::after",
        BACKDROP: "::backdrop",
        BEFORE: "::before",
        CUE: "::cue",
        FIRST_LETTER: "::first-letter",
        FIRST_LINE: "::first-line",
        GRAMMAR_ERROR: "::grammar-error",
        MARKER: "::marker",
        PLACEHOLDER: "::placeholder",
        SELECTION: "::selection",
        slotted: (...params: Param[]): string => {
            return buildMethod("::slotted", params);
        },
        SPELLING_ERROR: "::spelling-error"
    }
};
const _mq_Width = {
    set: (value: string | number): string => mqSet("width", value),
    range: (min: string | number, max: string | number): string => mqRange("width", min, max),
    cap: (num: number): string => mqSet("width", Length.cap(num)),
    ch: (num: number): string => mqSet("width", Length.ch(num)),
    em: (num: number): string => mqSet("width", Length.em(num)),
    ex: (num: number): string => mqSet("width", Length.ex(num)),
    ic: (num: number): string => mqSet("width", Length.ic(num)),
    lh: (num: number): string => mqSet("width", Length.lh(num)),
    rem: (num: number): string => mqSet("width", Length.rem(num)),
    rlh: (num: number): string => mqSet("width", Length.rlh(num)),
    vh: (num: number): string => mqSet("width", Length.vh(num)),
    vw: (num: number): string => mqSet("width", Length.vw(num)),
    vi: (num: number): string => mqSet("width", Length.vi(num)),
    vb: (num: number): string => mqSet("width", Length.vb(num)),
    vmin: (num: number): string => mqSet("width", Length.vmin(num)),
    vmax: (num: number): string => mqSet("width", Length.vmax(num)),
    px: (num: number): string => mqSet("width", Length.px(num)),
    cm: (num: number): string => mqSet("width", Length.cm(num)),
    mm: (num: number): string => mqSet("width", Length.mm(num)),
    Q: (num: number): string => mqSet("width", Length.Q(num)),
    in: (num: number): string => mqSet("width", Length.in(num)),
    pc: (num: number): string => mqSet("width", Length.pc(num)),
    pt: (num: number): string => mqSet("width", Length.pt(num)),
    fr: (num: number): string => mqSet("width", Length.fr(num))
};
const _mq_MinWidth = {
    set: (value: string | number): string => mqSet("min-width", value),
    cap: (num: number): string => mqSet("min-width", Length.cap(num)),
    ch: (num: number): string => mqSet("min-width", Length.ch(num)),
    em: (num: number): string => mqSet("min-width", Length.em(num)),
    ex: (num: number): string => mqSet("min-width", Length.ex(num)),
    ic: (num: number): string => mqSet("min-width", Length.ic(num)),
    lh: (num: number): string => mqSet("min-width", Length.lh(num)),
    rem: (num: number): string => mqSet("min-width", Length.rem(num)),
    rlh: (num: number): string => mqSet("min-width", Length.rlh(num)),
    vh: (num: number): string => mqSet("min-width", Length.vh(num)),
    vw: (num: number): string => mqSet("min-width", Length.vw(num)),
    vi: (num: number): string => mqSet("min-width", Length.vi(num)),
    vb: (num: number): string => mqSet("min-width", Length.vb(num)),
    vmin: (num: number): string => mqSet("min-width", Length.vmin(num)),
    vmax: (num: number): string => mqSet("min-width", Length.vmax(num)),
    px: (num: number): string => mqSet("min-width", Length.px(num)),
    cm: (num: number): string => mqSet("min-width", Length.cm(num)),
    mm: (num: number): string => mqSet("min-width", Length.mm(num)),
    Q: (num: number): string => mqSet("min-width", Length.Q(num)),
    in: (num: number): string => mqSet("min-width", Length.in(num)),
    pc: (num: number): string => mqSet("min-width", Length.pc(num)),
    pt: (num: number): string => mqSet("min-width", Length.pt(num)),
    fr: (num: number): string => mqSet("min-width", Length.fr(num))
};
const _mq_MaxWidth = {
    set: (value: string | number): string => mqSet("max-width", value),
    cap: (num: number): string => mqSet("max-width", Length.cap(num)),
    ch: (num: number): string => mqSet("max-width", Length.ch(num)),
    em: (num: number): string => mqSet("max-width", Length.em(num)),
    ex: (num: number): string => mqSet("max-width", Length.ex(num)),
    ic: (num: number): string => mqSet("max-width", Length.ic(num)),
    lh: (num: number): string => mqSet("max-width", Length.lh(num)),
    rem: (num: number): string => mqSet("max-width", Length.rem(num)),
    rlh: (num: number): string => mqSet("max-width", Length.rlh(num)),
    vh: (num: number): string => mqSet("max-width", Length.vh(num)),
    vw: (num: number): string => mqSet("max-width", Length.vw(num)),
    vi: (num: number): string => mqSet("max-width", Length.vi(num)),
    vb: (num: number): string => mqSet("max-width", Length.vb(num)),
    vmin: (num: number): string => mqSet("max-width", Length.vmin(num)),
    vmax: (num: number): string => mqSet("max-width", Length.vmax(num)),
    px: (num: number): string => mqSet("max-width", Length.px(num)),
    cm: (num: number): string => mqSet("max-width", Length.cm(num)),
    mm: (num: number): string => mqSet("max-width", Length.mm(num)),
    Q: (num: number): string => mqSet("max-width", Length.Q(num)),
    in: (num: number): string => mqSet("max-width", Length.in(num)),
    pc: (num: number): string => mqSet("max-width", Length.pc(num)),
    pt: (num: number): string => mqSet("max-width", Length.pt(num)),
    fr: (num: number): string => mqSet("max-width", Length.fr(num))
};
const _mq_Height = {
    set: (value: string | number): string => mqSet("height", value),
    range: (min: string | number, max: string | number): string => mqRange("height", min, max),
    cap: (num: number): string => mqSet("height", Length.cap(num)),
    ch: (num: number): string => mqSet("height", Length.ch(num)),
    em: (num: number): string => mqSet("height", Length.em(num)),
    ex: (num: number): string => mqSet("height", Length.ex(num)),
    ic: (num: number): string => mqSet("height", Length.ic(num)),
    lh: (num: number): string => mqSet("height", Length.lh(num)),
    rem: (num: number): string => mqSet("height", Length.rem(num)),
    rlh: (num: number): string => mqSet("height", Length.rlh(num)),
    vh: (num: number): string => mqSet("height", Length.vh(num)),
    vw: (num: number): string => mqSet("height", Length.vw(num)),
    vi: (num: number): string => mqSet("height", Length.vi(num)),
    vb: (num: number): string => mqSet("height", Length.vb(num)),
    vmin: (num: number): string => mqSet("height", Length.vmin(num)),
    vmax: (num: number): string => mqSet("height", Length.vmax(num)),
    px: (num: number): string => mqSet("height", Length.px(num)),
    cm: (num: number): string => mqSet("height", Length.cm(num)),
    mm: (num: number): string => mqSet("height", Length.mm(num)),
    Q: (num: number): string => mqSet("height", Length.Q(num)),
    in: (num: number): string => mqSet("height", Length.in(num)),
    pc: (num: number): string => mqSet("height", Length.pc(num)),
    pt: (num: number): string => mqSet("height", Length.pt(num)),
    fr: (num: number): string => mqSet("height", Length.fr(num))
};
const _mq_MinHeight = {
    set: (value: string | number): string => mqSet("min-height", value),
    cap: (num: number): string => mqSet("min-height", Length.cap(num)),
    ch: (num: number): string => mqSet("min-height", Length.ch(num)),
    em: (num: number): string => mqSet("min-height", Length.em(num)),
    ex: (num: number): string => mqSet("min-height", Length.ex(num)),
    ic: (num: number): string => mqSet("min-height", Length.ic(num)),
    lh: (num: number): string => mqSet("min-height", Length.lh(num)),
    rem: (num: number): string => mqSet("min-height", Length.rem(num)),
    rlh: (num: number): string => mqSet("min-height", Length.rlh(num)),
    vh: (num: number): string => mqSet("min-height", Length.vh(num)),
    vw: (num: number): string => mqSet("min-height", Length.vw(num)),
    vi: (num: number): string => mqSet("min-height", Length.vi(num)),
    vb: (num: number): string => mqSet("min-height", Length.vb(num)),
    vmin: (num: number): string => mqSet("min-height", Length.vmin(num)),
    vmax: (num: number): string => mqSet("min-height", Length.vmax(num)),
    px: (num: number): string => mqSet("min-height", Length.px(num)),
    cm: (num: number): string => mqSet("min-height", Length.cm(num)),
    mm: (num: number): string => mqSet("min-height", Length.mm(num)),
    Q: (num: number): string => mqSet("min-height", Length.Q(num)),
    in: (num: number): string => mqSet("min-height", Length.in(num)),
    pc: (num: number): string => mqSet("min-height", Length.pc(num)),
    pt: (num: number): string => mqSet("min-height", Length.pt(num)),
    fr: (num: number): string => mqSet("min-height", Length.fr(num))
};
const _mq_MaxHeight = {
    set: (value: string | number): string => mqSet("max-height", value),
    cap: (num: number): string => mqSet("max-height", Length.cap(num)),
    ch: (num: number): string => mqSet("max-height", Length.ch(num)),
    em: (num: number): string => mqSet("max-height", Length.em(num)),
    ex: (num: number): string => mqSet("max-height", Length.ex(num)),
    ic: (num: number): string => mqSet("max-height", Length.ic(num)),
    lh: (num: number): string => mqSet("max-height", Length.lh(num)),
    rem: (num: number): string => mqSet("max-height", Length.rem(num)),
    rlh: (num: number): string => mqSet("max-height", Length.rlh(num)),
    vh: (num: number): string => mqSet("max-height", Length.vh(num)),
    vw: (num: number): string => mqSet("max-height", Length.vw(num)),
    vi: (num: number): string => mqSet("max-height", Length.vi(num)),
    vb: (num: number): string => mqSet("max-height", Length.vb(num)),
    vmin: (num: number): string => mqSet("max-height", Length.vmin(num)),
    vmax: (num: number): string => mqSet("max-height", Length.vmax(num)),
    px: (num: number): string => mqSet("max-height", Length.px(num)),
    cm: (num: number): string => mqSet("max-height", Length.cm(num)),
    mm: (num: number): string => mqSet("max-height", Length.mm(num)),
    Q: (num: number): string => mqSet("max-height", Length.Q(num)),
    in: (num: number): string => mqSet("max-height", Length.in(num)),
    pc: (num: number): string => mqSet("max-height", Length.pc(num)),
    pt: (num: number): string => mqSet("max-height", Length.pt(num)),
    fr: (num: number): string => mqSet("max-height", Length.fr(num))
};
const _mq_AspectRatio = {
    set: (value: string | number): string => mqSet("aspect-ratio", value),
    range: (min: string | number, max: string | number): string => mqRange("aspect-ratio", min, max)
};
const _mq_MinAspectRatio = { set: (value: string | number): string => mqSet("min-aspect-ratio", value) };
const _mq_MaxAspectRatio = { set: (value: string | number): string => mqSet("max-aspect-ratio", value) };
const _mq_Orientation = {
    set: (value: string | number): string => mqSet("orientation", value),
    PORTRAIT: mqSet("orientation", "portrait"),
    LANDSCAPE: mqSet("orientation", "landscape")
};
const _mq_Resolution = {
    set: (value: string | number): string => mqSet("resolution", value),
    range: (min: string | number, max: string | number): string => mqRange("resolution", min, max),
    dpi: (num: number): string => mqSet("resolution", Resolution.dpi(num)),
    dpcm: (num: number): string => mqSet("resolution", Resolution.dpcm(num)),
    dppx: (num: number): string => mqSet("resolution", Resolution.dppx(num)),
    x: (num: number): string => mqSet("resolution", Resolution.x(num))
};
const _mq_MinResolution = {
    set: (value: string | number): string => mqSet("min-resolution", value),
    dpi: (num: number): string => mqSet("min-resolution", Resolution.dpi(num)),
    dpcm: (num: number): string => mqSet("min-resolution", Resolution.dpcm(num)),
    dppx: (num: number): string => mqSet("min-resolution", Resolution.dppx(num)),
    x: (num: number): string => mqSet("min-resolution", Resolution.x(num))
};
const _mq_MaxResolution = {
    set: (value: string | number): string => mqSet("max-resolution", value),
    dpi: (num: number): string => mqSet("max-resolution", Resolution.dpi(num)),
    dpcm: (num: number): string => mqSet("max-resolution", Resolution.dpcm(num)),
    dppx: (num: number): string => mqSet("max-resolution", Resolution.dppx(num)),
    x: (num: number): string => mqSet("max-resolution", Resolution.x(num))
};
const _mq_Scan = {
    set: (value: string | number): string => mqSet("scan", value),
    INTERLACE: mqSet("scan", "interlace"),
    PROGRESSIVE: mqSet("scan", "progressive")
};
const _mq_Grid = {
    set: (value: string | number): string => mqSet("grid", value),
    _0: mqSet("grid", "0"),
    _1: mqSet("grid", "1")
};
const _mq_Update = {
    set: (value: string | number): string => mqSet("update", value),
    NONE: mqSet("update", "none"),
    SLOW: mqSet("update", "slow"),
    FAST: mqSet("update", "fast")
};
const _mq_OverflowBlock = {
    set: (value: string | number): string => mqSet("overflow-block", value),
    NONE: mqSet("overflow-block", "none"),
    SCROLL: mqSet("overflow-block", "scroll"),
    OPTIONAL_PAGED: mqSet("overflow-block", "optional-paged"),
    PAGED: mqSet("overflow-block", "paged")
};
const _mq_OverflowInline = {
    set: (value: string | number): string => mqSet("overflow-inline", value),
    NONE: mqSet("overflow-inline", "none"),
    SCROLL: mqSet("overflow-inline", "scroll")
};
const _mq_Color = { set: (value: string | number): string => mqSet("color", value) };
const _mq_ColorGamut = {
    set: (value: string | number): string => mqSet("color-gamut", value),
    SRGB: mqSet("color-gamut", "srgb"),
    P3: mqSet("color-gamut", "p3"),
    REC2020: mqSet("color-gamut", "rec2020")
};
const _mq_ColorIndex = {
    set: (value: string | number): string => mqSet("color-index", value),
    range: (min: string | number, max: string | number): string => mqRange("color-index", min, max)
};
const _mq_MinColorIndex = { set: (value: string | number): string => mqSet("min-color-index", value) };
const _mq_MaxColorIndex = { set: (value: string | number): string => mqSet("max-color-index", value) };
const _mq_DisplayMode = {
    set: (value: string | number): string => mqSet("display-mode", value),
    FULLSCREEN: mqSet("display-mode", "fullscreen"),
    STANDALONE: mqSet("display-mode", "standalone"),
    MINIMAL_UI: mqSet("display-mode", "minimal-ui"),
    BROWSER: mqSet("display-mode", "browser")
};
const _mq_Monochrome = {
    set: (value: string | number): string => mqSet("monochrome", value),
    range: (min: string | number, max: string | number): string => mqRange("monochrome", min, max)
};
const _mq_MinMonochrome = { set: (value: string | number): string => mqSet("min-monochrome", value) };
const _mq_MaxMonochrome = { set: (value: string | number): string => mqSet("max-monochrome", value) };
const _mq_InvertedColors = {
    set: (value: string | number): string => mqSet("inverted-colors", value),
    NONE: mqSet("inverted-colors", "none"),
    INVERTED: mqSet("inverted-colors", "inverted")
};
const _mq_Pointer = {
    set: (value: string | number): string => mqSet("pointer", value),
    NONE: mqSet("pointer", "none"),
    COARSE: mqSet("pointer", "coarse"),
    FINE: mqSet("pointer", "fine")
};
const _mq_Hover = {
    set: (value: string | number): string => mqSet("hover", value),
    NONE: mqSet("hover", "none"),
    HOVER: mqSet("hover", "hover")
};
const _mq_AnyPointer = {
    set: (value: string | number): string => mqSet("any-pointer", value),
    NONE: mqSet("any-pointer", "none"),
    COARSE: mqSet("any-pointer", "coarse"),
    FINE: mqSet("any-pointer", "fine")
};
const _mq_AnyHover = {
    set: (value: string | number): string => mqSet("any-hover", value),
    NONE: mqSet("any-hover", "none"),
    HOVER: mqSet("any-hover", "hover")
};
const _mq_LightLevel = {
    set: (value: string | number): string => mqSet("light-level", value),
    DIM: mqSet("light-level", "dim"),
    NORMAL: mqSet("light-level", "normal"),
    WASHED: mqSet("light-level", "washed")
};
const _mq_PrefersReducedMotion = {
    set: (value: string | number): string => mqSet("prefers-reduced-motion", value),
    NO_PREFERENCE: mqSet("prefers-reduced-motion", "no-preference"),
    REDUCE: mqSet("prefers-reduced-motion", "reduce")
};
const _mq_PrefersReducedTransparency = {
    set: (value: string | number): string => mqSet("prefers-reduced-transparency", value),
    NO_PREFERENCE: mqSet("prefers-reduced-transparency", "no-preference"),
    REDUCE: mqSet("prefers-reduced-transparency", "reduce")
};
const _mq_PrefersContrast = {
    set: (value: string | number): string => mqSet("prefers-contrast", value),
    NO_PREFERENCE: mqSet("prefers-contrast", "no-preference"),
    HIGH: mqSet("prefers-contrast", "high"),
    LOW: mqSet("prefers-contrast", "low")
};
const _mq_PrefersColorScheme = {
    set: (value: string | number): string => mqSet("prefers-color-scheme", value),
    NO_PREFERENCE: mqSet("prefers-color-scheme", "no-preference"),
    LIGHT: mqSet("prefers-color-scheme", "light"),
    DARK: mqSet("prefers-color-scheme", "dark")
};
const _mq_Scripting = {
    set: (value: string | number): string => mqSet("scripting", value),
    NONE: mqSet("scripting", "none"),
    INITIAL_ONLY: mqSet("scripting", "initial-only"),
    ENABLED: mqSet("scripting", "enabled")
};
export const _Query = {
    and: mqAnd,
    or: mqOr,
    not: mqNot,
    only: mqOnly,
    ALL: "all",
    BRAILLE: "braille",
    EMBOSSED: "embossed",
    HANDHELD: "handheld",
    PRINT: "print",
    PROJECTION: "projection",
    SCREEN: "screen",
    SPEECH: "speech",
    TTY: "tty",
    TV: "tv",
    Width: _mq_Width,
    MinWidth: _mq_MinWidth,
    MaxWidth: _mq_MaxWidth,
    Height: _mq_Height,
    MinHeight: _mq_MinHeight,
    MaxHeight: _mq_MaxHeight,
    AspectRatio: _mq_AspectRatio,
    MinAspectRatio: _mq_MinAspectRatio,
    MaxAspectRatio: _mq_MaxAspectRatio,
    Orientation: _mq_Orientation,
    Resolution: _mq_Resolution,
    MinResolution: _mq_MinResolution,
    MaxResolution: _mq_MaxResolution,
    Scan: _mq_Scan,
    Grid: _mq_Grid,
    Update: _mq_Update,
    OverflowBlock: _mq_OverflowBlock,
    OverflowInline: _mq_OverflowInline,
    Color: _mq_Color,
    ColorGamut: _mq_ColorGamut,
    ColorIndex: _mq_ColorIndex,
    MinColorIndex: _mq_MinColorIndex,
    MaxColorIndex: _mq_MaxColorIndex,
    DisplayMode: _mq_DisplayMode,
    Monochrome: _mq_Monochrome,
    MinMonochrome: _mq_MinMonochrome,
    MaxMonochrome: _mq_MaxMonochrome,
    InvertedColors: _mq_InvertedColors,
    Pointer: _mq_Pointer,
    Hover: _mq_Hover,
    AnyPointer: _mq_AnyPointer,
    AnyHover: _mq_AnyHover,
    LightLevel: _mq_LightLevel,
    PrefersReducedMotion: _mq_PrefersReducedMotion,
    PrefersReducedTransparency: _mq_PrefersReducedTransparency,
    PrefersContrast: _mq_PrefersContrast,
    PrefersColorScheme: _mq_PrefersColorScheme,
    Scripting: _mq_Scripting
};
export const Selector = {
    Class: (value: string): string => "." + value,
    Id: (value: string): string => "#" + value,
    ALL: "*",
    NONE: "",
    and: (...values: string[]): string => values.join(","),
    inside: (...values: string[]): string => values.join(" "),
    child: (...values: string[]): string => values.join(" > "),
    after: (...values: string[]): string => values.join(" + "),
    following: (...values: string[]): string => values.join(" ~ "),
    attribute: (element: string, attributes: string): string => element + "[" + attributes + "]",
    Element: _Element,
    Query: _Query,
    Pseudo: _Pseudo
};
